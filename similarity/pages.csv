namespace,title,raw_content,created_at,updated_at 
Technology,Rascal.vis,"== Headline ==

A rascal library with functions for creating visualizations

== Metadata ==

* [[sameAs::http://tutor.rascal-mpl.org/Rascal/Libraries/Vis/Vis.html]]
* [[instanceOf::Framework]]
* [[facilitates::Graph_visualization]]
* [[partOf::Rascal]]",2017-06-28 13:38:18.058837,2017-07-04 15:01:36.021091
Concept,Just-in-time compilation,"== Headline ==

A form of [[compilation]] done on the fly possibly as part of [[interpretation]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Just-in-time_compilation]]
* [[isA::Compilation]]
",2014-04-23 20:48:44.586,2017-07-04 15:26:35.363927
Concept,Instance method,"== Headline ==

A [[method]] that dispatches on a receiver type

== Illustration ==

See [[Contribution:javaInheritance]].

== Metadata ==

[[isA::Method]]

",2014-04-27 18:23:52.627,2017-07-04 15:26:35.41016
Concept,Space,"== Headline ==

A technological space

== Metadata ==

[[isA::Concept]]

",2014-06-25 14:32:44.321,2017-07-04 15:26:35.508317
Technology,Dancer,"== Headline ==

A micro [[Web-application framework]] written in [[Language:Perl]], inspired by [[Technology:Sinatra]].

== Illustration ==

Dancer employs an embedded [[Domain-specific language]] to route and handle requests:

<syntaxhighlight lang=""perl"">
#!/usr/bin/perl
use strict;
use warnings;
use Dancer;
use CGI qw(escapeHTML);

# A static route
get '/' => sub {
    return 'Hello, world!';
};

# A route with a parameter
get '/hello/:name' => sub {
    my $name = escapeHTML(param 'name');
    return ""Hello, $name!"";
};

dance;
</syntaxhighlight>

When visiting this server's root page, it will show ""Hello, world!"". When visiting a URL like ""/hello/Human"", it will pattern-match the route and display ""Hello, Human!"".

== Metadata ==

[[uses::Language:Perl]]
[[sameAs::http://www.perldancer.org/]]
[[sameAs::http://en.wikipedia.org/wiki/Dancer_%28software%29]]
[[isA::Web-application_framework]]
[[uses::External DSL]]

",2014-08-19 23:27:46.843,2017-07-04 15:26:36.018262
Contribution,xtext,"== Headline ==

[[IDE Creation]] with an XText- and Eclipse-based DSL editor
== Motivation ==

Based on an Xtext [[grammar]], [[model]] code and a corresponding DSL editor is generated, with which companies can be edited and operations for totaling and cutting salaries can be invoked. Textual syntax is described by the EBNF dialect of Xtext. [[Technology:Ecore]] is used for the representation of [[model]]s where the [[Technology:Ecore]] [[model]] is derived from the EBNF. The generated [[parser]] maps textual syntax to EObjects. Hence, this can be seen as a [[Text to Model transformation]]. The [[parser]] is ANTLR-based. The implementation hence also relates to [[Technology:EMF]]-based implementations such as [[Contribution:emf]] as well as ANTLR-based implementations such as [[Contribution:antlrParser]].
== Architecture ==

* [[Feature:Hierarchical_company]]: implemented by the generated EMF classes.
* [[Feature:Total]]: manually implemented as verification in IOIJavaValidator.java
* [[Feature:Cut]]: manually implemented as verification and corresponding editor quickfix in IOIJavaValidator.java and IOIQuickfixProvider.java.
* [[Feature:Parsing]] TODO
== Usage ==

A Eclipse version with an installed xtext plugin is needed to execute the transformations (e.g. the  [http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/junor the EMF version] with the installed xtext Framework).

Steps:
* The contribution should be imported into Eclipse (it will contain 3 Eclipse plugins)
* io.iocompanies.lang.ioi will provide a file called GenerateIOI.mwe2, which is under src/org.ioicompanies.lang
* Executing this file (by right clicking and then selecting ""Run As"" -> ""MWE2 workflow"") will result in the generation of a [[metamodel]] and the the [[editor]]
* Then the runtime workbench can be started by right clicking on ""org.ioicompanies.lang.ioi"" and selecting ""Run As"" -> ""Eclipse Application"".

The project will also provide a sample company. This file is called text.ioi and can be found in org.ioicompanies.lang.ioi. To use it, first a new project needs to be created (""File"" -> ""New"" -> ""Other"" and then under ""General"" select ""Project""). Then, copy the file into this newly created project and double click on it. Eclipse will ask if you want to add the XText nature to your project, which you should do. The file can then be edited with full auto completion support.

Comments:
* You might need to refresh the Project Explorer in Eclipse (right click and then select ""Refresh"")
== Issues ==

* Usage information missing
* Architecture information somewhat sparse
* The information markers indicating the total salary per department are not correctly updated when updating salaries manually.
== Metadata ==
* [[uses::Language:Java]]
* [[uses::Language:EBNF]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:Eclipse]]
* [[uses::Technology:Ecore]]
* [[uses::Technology:Xtext]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:Rolf-Helge Pfeiffer]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:MDE]]
",2013-06-12 14:59:20.347,2017-07-05 15:30:06.09183
Technology,SWT,"== Headline ==

SWT is an open-source Widget toolkit.


== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Standard_Widget_Toolkit]]
* [[sameAs::https://www.eclipse.org/swt/]]
* [[relatesTo::https://www.eclipse.org/swt/docs.php]]
* [[instanceOf::Library]]
* [[facilitates::GUI programming]]
",2017-05-23 12:59:39.173427,2017-07-04 15:02:20.145954
Concept,Reference,"== Headline ==

A reference from one entity to another

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Reference_(computer_science)]]
* [[relatesTo::https://stackoverflow.com/questions/3793527/what-is-the-difference-in-ecore-between-containment-and-reference]]
* [[instanceOf::Software Concept]]
",2017-06-28 14:41:18.243486,2017-07-04 15:10:22.551217
Concept,Data definition language,"== Headline ==

A software language for defining data structures, e.g., database schemas

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Data_definition_language]]
* [[similarTo::https://www.techopedia.com/definition/1175/data-definition-language-ddl]]
* [[relatesTo::Data manipulation language]]
* [[isA::Software language]]
",2014-08-29 20:59:53.214,2017-07-04 15:26:42.669343
Concept,URI,"== Headline ==

A way to uniquely identify resources

== Abbreviation ==

Uniform Resource Identifier

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Uniform_Resource_Identifier]]
* [[instanceOf::Software concept]]",2017-06-28 14:25:15.738512,2017-07-04 15:14:21.177864
Contributor,martinleinberger,"",2014-07-02 12:23:35.957,2017-07-04 13:47:58.143865
Contribution,csharpAspNetMvc,"== Headline ==

a simple [[Techology:ASP .NET]] implementation in [[Language:CSharp|C#]] for the [[Technology:.NET]] Framework
== Motivation ==

A Web implementation in ASP .NET MVC 3.0; shows the basic features of MVC framework; in particular URL routing mapping to controllers and model/view binding.
The implementation also serves as a reference solution for MVC framework for statically typed programming languages (e.g. C#, VB .NET) which also motivates its appearance in the GUI theme.
== Illustration ==

When we speak about MVC Framework for the Web, there are 2 major components are considered:

1. Mapping URIs to handlers (essentially methods) in a source code. In ASP .NET MVC this called ""routing"" (http://msdn.microsoft.com/en-us/library/cc668201.aspx). Reflection plays an important part in the mapping workflow. A good detailed explanation can be found at http://msdn.microsoft.com/en-us/magazine/dd695917.aspx

2. Template engine (ofter they called ""view engines"") which allows using target language inside the ""view"" to generate html parts from the model. ASP .NET MVC, for instance, supports two such engines: aspx and razor (http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx).
Razor allows using C#/VB.NET inside the template by using special code blocks. This code is used by a framework to dynamically generate HTML by means of runtime code generation.
Another important aspect, is how the actual model is binded to such template engine. As soon as the view itself is fully dynamic, traditionally in ASP .NET a dictionary was used to store the model and access it by key from the view code block. When a ""dynamic"" concept (http://msdn.microsoft.com/en-us/library/dd264741.aspx) was introduced in C# 4.0, it enabled an option making a model available for a view bypassing compile-time checking. Runtime code generation is used to execute all code blocks in a view engine and produce the actual HTML code.

'''Route mapping'''

To set up routes we need to implement class derived from System.Web.HttpApplication

<syntaxhighlight lang=csharp>
public class MvcApplication : System.Web.HttpApplication
</syntaxhighlight>

There is a method which is called by the framework when the first resource (such as a page) in an ASP.NET application is requested. (see http://msdn.microsoft.com/en-us/library/ms178473.aspx for the details)

<syntaxhighlight lang=csharp>
protected void Application Start()
{
  .....
  RegisterRoutes(RouteTable.Routes);
}
</syntaxhighlight>


Usually there is a need to force MVC to ignore some resources:

<syntaxhighlight lang=csharp>
routes.IgnoreRoute(""{resource}.axd/{*pathInfo}"");
</syntaxhighlight>


To map routes on controller's actions, the following method is used:
<syntaxhighlight lang=csharp>
 routes.MapRoute(
                ""Default"", // Route name
                ""{controller}/{action}/{id}"", // URL with parameters
                new { controller = ""Home"", action = ""Index"", id = UrlParameter.Optional } // Parameter defaults
             );
</syntaxhighlight>

The MVC framework provides a default controller factory (aptly named DefaultControllerFactory) that will search through all the assemblies in an appdomain looking for all types that implement IController and whose name ends with ""Controller."" Thus, if you tell the factory to look for a ""Home"" controller, the factory can return a newly instantiated instance of a HomeController class regardless of the namespace or assembly it lives in—as long as it implements IController. This behavior is part of the MVC's ""convention over configuration"" style.
Once the MvcHandler has an IController reference from the factory, it invokes Execute on the controller and waits for the controller to work its magic. When execution is complete, the MvcHandler will check if the controller implements the IDisposable interface, and if so, will invoke Dispose on the controller to clean up unmanaged resources.

When (if) the action index is reached, as a result it can return a view or just a plain HTTP response (e.g. JSON, HTTP Error Code).
If the view is returned default engine would search for its tempalte the following locations:

* ~/Views/Home/Index.aspx
* ~/Views/Home/Index.ascx
* ~/Views/Shared/Index.aspx
* ~/Views/Shared/Index.ascx
* ~/Views/Home/Index.cshtml
* ~/Views/Home/Index.vbhtml
* ~/Views/Shared/Index.cshtml
* ~/Views/Shared/Index.vbhtml

''' Model binding'''

First we populate the view by model (in this case by the Company object)

<syntaxhighlight lang=csharp>
public class CompanyController : Controller
 {
    //
   // GET: /Company/
   public ActionResult Index()
   {
      return View(CompanyRepository.CreateInMemoryModel());
   }
 }
</syntaxhighlight>

The result of the action above is the view template located at Views/Company/Index.cshtml.
In the first line of the template, we need to ""type"" the model by using
<syntaxhighlight lang=csharp>
@model csharpBaseline.CompanyModel.Company
</syntaxhighlight>
Later on we can refer to the ""Model"" property of the page in the following style

<syntaxhighlight lang=csharp>
@foreach (var dept in Model.Departments)
{

    <li>@Html.ActionLink(dept.Name, ""Index"", ""Department"", new {id = dept.Id}, null )</li>
}
</syntaxhighlight>
Here we see that the ""Model"" property has the type of ""Company"".
== Architecture ==

An implementation follows the default MVC folder structure provided by Visual Studio.
It also reuses an object model AS-IS from the [[Contribution:csharp]] by referencing the project.
== Usage ==

Compile and run the project from Visual Sturio. Web browser opens automatically and shows the company page.
== Metadata ==

* [[uses::Language:CSharp]] (C#): Programming language used for all code (Version 4.0)
* [[uses::Technology:csc.exe]]: C# compiler (Version 4.0)
* [[uses::Technology:.NET]]: framework used to execute compiled code (Version 4.0)
* [[uses::Technology:NUnit]]: unit testing framework used for testing (Version 2.5)
* [[uses::Technology:Visual Studio]]: optional IDE (Version 2010)
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Browsing]]
* [[memberOf::Theme:GUI programming]]
",2013-06-12 14:57:09.676,2017-07-05 15:25:36.613467
Concept,Capability,"== Headline ==

A capability of a software component

== Metadata ==

* [[isA::Software concept]]
",2014-08-30 18:15:51.729,2017-07-04 15:26:42.72088
Concept,Technical segment,"== Headline ==

A particular view on a [[space|technological space]]

== Metadata ==

* [[isA::Software concept]]
",2014-08-30 18:35:44.105,2017-07-04 15:26:42.767176
Concept,Viewpoint,"== Headline ==

A definition that emphasizes or hides aspects of an original model

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/View_model#Viewpoints]]
* [[instanceOf::Software Concept]]",2017-06-28 14:26:31.613703,2017-07-04 15:17:46.349038
Concept,Text,"== Headline ==

the text type of data

== Discussion ==

Text plays a role in various areas of computing. For instance, text is an important file format. Also, text is the typical format processed by [[grammarware]].

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Plain_text]]
* [[isA::Concept]]

",2013-06-12 14:56:25.215,2017-07-04 15:26:27.090259
Concept,Aggregation,"== Headline ==

A [[query]] that aggregates intermediate results

== Description ==

Queries may be arbitrarily complicated in how they extract data from given data. An [[aggregation]] is relatively simple and regular in so far that it may be understood as extracting data components from compound data and aggregating those intermediate results often with the help of a [[monoid]].

== Illustration ==

[[Feature:Total]] aggregates salaries of the employees of a company.

== Metadata ==

* [[isA::Query]]
* [[memberOf::Vocabulary:Computing]]
",2014-09-02 13:16:55.114,2017-07-04 15:26:42.817126
Concept,NoSQL,"== Headline ==

Modern database theme of implementations

== Description ==

Classically, relational (SQL-based) databases were used to manage large-volume data. These days, additional options have become commonplace. For instance, there are technologies serving the MapReduce programming model on distributed file systems; there are various NoSQL approaches, e.g., document-based databases or BigTable clones. '''This theme is under construction.'''

== Metadata ==

* [[isA::Namespace:Theme]]
* [[sameAs::http://en.wikipedia.org/wiki/NoSQL]]
* [[relatesTo::https://github.com/avaranovich/datatechcourse/wiki]]
* ",2015-04-12 00:28:37.853,2017-07-04 15:26:42.875109
Document,LaemmelO06,"== Headline ==

A GPCE 2006 paper on software extension and integration

== Discussion ==

The paper studies some aspects of expressiveness of [[type class]]es.

== Metadata ==

* [[sameAs::http://dblp.uni-trier.de/rec/bibtex/conf/gpce/LammelO06]]
* [[relatesTo::Expression problem]]

",2013-06-12 15:00:53.523,2017-07-04 13:46:43.221333
Script,Data modeling in Haskell,"== Headline ==

Basic data modeling techniques in Haskell

== Description ==

Basic concepts of data modeling in Haskell are covered. One important aspect of data modeling is the choice between [[structural typing|structural]] versus [[nominal typing]]. This distinction gives rise to Haskell's [[type synonym]]s, [[algebraic data type]]s, and [[record type]]s. These options are conveniently illustrated with different data models for the [[system:Company]]. Another important aspect is the choice between different modeling options for recursive data structures, specifically the use of [[data composition]] and [[data variation]]. These options map to certain idioms of using algebraic data types in Haskell. These options are conveniently illustrated with different data models for the [[system:Company]], when departmental nesting is taken into account. Related to data modeling, there is the potential requirement of [[information hiding]] such as in the context of [[abstract data type]]s. Haskell's module system supports one approach to [[information hiding]]. This is illustrated with [[stack]]s in all detail.

== Concepts ==

* [[Structural typing]]
* [[Nominal typing]]
* [[Type synonym]]
* [[Newtype]]
* [[Algebraic data type]]
* [[Data constructor]]
* [[Constructor component]]
* [[Pattern matching]]
* [[Case expression]]
* [[Record type]]
* [[Data composition]]
* [[Data variation]]
* [[Type constructor]]
* [[Tuple type]]
* [[Either type]]
* [[List type]]
* [[Maybe type]]
* [[Information hiding]]
* [[Abstract data type]]
* [[Stack]]
* [[Reverse Polish notation]]

== Languages ==

* [[Language:Haskell]]

== Features ==

* [[Feature:Total]]
* [[Feature:Cut]]

== Contributions ==

* [[Contribution:haskellEngineer]]
* [[Contribution:haskellData]]
* [[Contribution:haskellRecord]]
* [[Contribution:haskellComposition]]
* [[Contribution:haskellVariation]]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
*
* [[dependsOn::Script:Searching and sorting in Haskell]]







      ",2013-06-12 15:00:53.785,2017-07-04 13:46:43.374208
Contributor,Yggdrasil128,"",2016-04-21 10:45:23.195,2017-07-04 13:48:10.307365
Language,Scala,"== Headline ==

A [[functional programming language]] that is compiled to [[Language:Java_bytecode|Java bytecode]].

== Metadata ==

* [[instanceOf::Functional programming language]]
* [[instanceOf::OO programming language]]
* [[facilitates::Static Annotation]]
* [[facilitates::Implicit conversion]]
* [[facilitates::Case Class]]
* [[sameAs::http://en.wikipedia.org/wiki/Scala_(programming_language)]]
* [[sameAs::http://www.scala-lang.org]]
* [[relatesTo::https://blog.udemy.com/scala-tutorial-getting-started-with-scala]]
",2013-06-12 15:00:38.079,2017-07-05 11:56:35.184194
System,Company,"== Headline ==

An imaginary HRMS system

== Description ==

[[System:Company]] is an imaginary '[[Human resource management system]] (HRMS)' (i.e., an [[information system]]) implementations of which ('contributions') are documented on 101wiki. The system is supposed to model the company structure in terms of employees and possibly the hierarchical structure of departments. Employees are modeled in terms of their names, addresses, salaries, and possibly additional properties.  The system is supposed to meet certain functional requirements such as totaling all salaries in the company. The system may also be subjected to non-functional requirements such as persistence or distribution. Features are not collected for the sake of an interesting HRMS system. Instead, features are designed to exercise interesting characteristics of software languages and software technologies. Most features are optional so that contributions have the freedom of choice to focus on features that are particularly interesting for a certain objective of language or technology demonstration.

There are the following features:

* [[Feature:Company|Company]]: Companies, department, employees
* [[Feature:Total|Total]]: Total the salaries of employees
* [[Feature:Median|Median]]: Compute the median of the salaries
* [[Feature:Cut|Cut]]: Cut the salaries of employees in half
* [[Feature:Depth|Depth]]: Compute nesting depth of departments
* [[Feature:COI|COI]]: Conflicts of interests for employees
* [[Feature:Mentoring|Mentoring]]: Associate mentors and mentees
* [[Feature:Ranking|Ranking]]: Enforce salary to correlate with ranks
* [[Feature:Singleton|Singleton]]: Constrain for a single company
* [[Feature:History|History]]: Maintain and analyze company history
* [[Feature:Serialization|Serialization]]: De-/serialize companies
* [[Feature:Persistence|Persistence]]: Persist companies
* [[Feature:Mapping|Mapping]]: Map companies across technological space
* [[Feature:Distribution|Distribution]]: Distribute companies
* [[Feature:Parallelism|Parallelism]]: Total or cut in parallel
* [[Feature:Logging|Logging]]: Log company changes
* [[Feature:Browsing|Browsing]]: Browse companies interactively
* [[Feature:Editing|Editing]]: Edit companies interactively
* [[Feature:Restructuring|Restructuring]]: Restructure companies interactively
* [[Feature:Web UI|Web UI]]: Operate on companies in a web browser
* [[Feature:Parsing|Parsing]]: Parse companies in concrete syntax
* [[Feature:Unparsing|Unparsing]]: Pretty print companies

The set of all features can also be arranged in a feature model as defined by the following constraints:

* [[Data requirement]]s
** [[Feature:Company]] (XOR)
*** [[Feature:Hierarchical company]]
*** [[Feature:Flat company]]
** [[Feature:COI]]?
** [[Feature:Mentoring]]?
** [[Feature:Ranking]]?
** [[Feature:Singleton]]?
** [[Feature:History]]?
* [[Functional requirement]]s
** [[Feature:Total]]?
** [[Feature:Cut]]?
** [[Feature:Median]]?
** [[Feature:Logging]]?
** [[Feature:Depth]]?
** [[Feature:Parsing]]?
** [[Feature:Unparsing]]?
** [[Feature:History]]?
* [[Non-functional requirement]]s
** [[Feature:Serialization]]? (XOR)
*** [[Feature:Open serialization]]
*** [[Feature:Closed serialization]]
** [[Feature:Persistence]]?
** [[Feature:Mapping]]?
** [[Feature:Distribution]]?
** [[Feature:Parallelism]]? (OR)
*** [[Feature:Data parallelism]]
*** [[Feature:Task parallelism]]
* [[UI requirement]]s
** [[Feature:Browsing]]?
** [[Feature:Editing]]?
** [[Feature:Undo-redo]]?
** [[Feature:Restructuring]]?
** [[Feature:Web UI]]?
* More constraints
** [[Feature:Depth]] => [[Feature:Hierarchical company]]
** [[Feature:Ranking]] => [[Feature:Hierarchical company]]
** [[Feature:History]] => [[Feature:Total]]
** [[Feature:History]] => [[Feature:Median]]
** [[Feature:Web UI]] => [[Feature:Browsing]]
** [[Feature:Editing]] => [[Feature:Browsing]]
** [[Feature:Restructuring]] => [[Feature:Editing]]
* Emerging and vanishing features
** <strike>[[Feature:Reporting]]</strike>
** <strike>[[Feature:Charting]]</strike>
** <strike>[[Feature:Grouping]]</strike>
** <strike>[[Feature:Gender]]</strike>
** <strike>[[Feature:Bonus]]</strike>
** <strike>[[Feature:Job description]] => [[Feature:Job role]]</strike>
** <strike>[[Feature:Annual employee review]]</strike>

'''This specification is under construction.'''

We use the following informal notation here:
* ''f''? means that the feature ''f'' is optional.
* ''f'' (OR) means that ''f'' is an OR feature; any operands may be chosen, but at least one, unless '''f''' is optional.
* ''f'' (XOR) means that ''f'' is an XOR feature; either of its operands must be selected, but not several of them.
* ''f1'' => ''f2'' means that if ''f1'' is selected then ''f2'' must be selected.
* <strike>''f''</strike> (i.e., ''f'' with strikethrough) means that the feature is only emerging or already vanishing.

== Illustration ==

The following UML class diagram models the basic structure of the system.

[[media:https://github.com/101companies/101repo/raw/master/contributions/argoUML/composition.jpg]]

See [[Theme:Starter]] for a few very simple contributions in varying languages. These are mostly implementations of the system in varying programming languages, but a UML-based model (as shown above) is also included.

== Metadata ==

* [[instanceOf::Human resource management system]]
* [[relatesTo::Namespace:Feature]]

",2013-06-12 14:52:50.48,2017-07-04 13:44:35.112015
Concept,Action,"== Headline ==

A [[monad]]-based computation
== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://www.haskell.org/haskellwiki/Introduction_to_Haskell_IO/Actions]]
* [[isA::Concept]]
",2013-06-12 14:53:10.504,2017-07-04 15:25:59.282125
Concept,Standard Library,"A collection of utilities shipped with a [[Programming language]] Implementation, but not part of the [[Programming language]] core definition.

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Standard_library]]
* [[isA:Concept]]
",2015-08-12 14:43:10.145,2017-07-04 15:26:43.514309
Concept,Dimensionality,"== Headline ==

Implement different data dimensions for reporting salary distribution based on multi-dimensional criteria.
== Description ==

The data model of 101companies comes with two descriptive attributes capable to use for data analysis and comparison.
Adding additional attributes such as gender, age and job role enable a multi-dimensional and advanced analysis used in the area of Business Intelligence.
== Motivation ==

Management needs to understand the distribution of salaries over the employees in the company and apply different criteria (dimensions) for grouping and analysis. Employees could be grouped by gender, age (also age range), department, and job role. For any given criterion, an appropriate chart may be used to visualize the distribution. For instance, distribution for age ranges could be visualized with a line chart with one line per age range.



This feature calls for a number of extensions to the data model: gender (male, female, or unspecified), date of birth (to be able to compute the age of an employee), and job role (such as developer, tester, and program manager). These extensions are not in any way interesting on their own, but they prepare the data model for multi-dimensional data aggregation for reporting as commonly used in the area of Business Intelligence. Here, the addition of the gender is the most basic as it corresponds to a simple enumeration type. The addition of the date of birth is somewhat more interesting because age or age range need to be computed from the date of birth. The addition of job roles triggers the need for extra (complex) joins in data aggregation, if we assume that job roles are organized, for example, in a designated table in a database with a normalized schema.
== Illustration ==

This feature is illustrated using [[Contribution:pyDWH]].
== Metadata ==

* [[isA::Optional feature]]
* [[isA::Data requirement]]
* [[implies::Feature:History]]
*
",2015-08-19 04:32:09.814,2017-07-04 15:26:43.626387
Concept,Android Preference,"== Headline ==

An Android feature to save and load settings

== Metadata ==
* [[instanceOf::Android_term]]
* [[sameAs::http://developer.android.com/guide/topics/ui/settings.html]]
* [[relatesTo::http://developer.android.com/reference/android/preference/Preference.html]]
* [[relatesTo::http://developer.android.com/reference/android/preference/package-summary.html]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:14.535,2017-07-04 13:44:37.351327
Concept,Annotation,"== Headline ==

A [[metadata | metadatum]] (e.g., a comment) attached to text, image, or other data

== Metadata ==

* [[similarTo::http://en.wikipedia.org/wiki/Annotation]]

",2013-06-12 14:53:15.711,2017-07-04 13:44:37.41267
Concept,Unlifting,"",2017-05-23 15:51:38.871978,2017-07-04 13:48:21.13013
Concept,Abstract syntax,"== Headline ==

[[Syntax]] aimed at processing as opposed to reading and writing

== Metadata ==

* [[isA::Syntax]]
* [[relatesTo::Concrete syntax]]
* [[similarTo::https://en.wikipedia.org/wiki/Abstract_syntax]]
",2013-06-12 14:53:09.538,2017-07-04 15:25:58.445409
Concept,Scripting language,"== Headline ==

A [[programming language]] that supports scripts ([[scripting]])

== Metadata ==

* [[isA::Programming language]]
* [[similarTo::https://en.wikipedia.org/wiki/Scripting_language]]
",2017-05-01 14:00:57.433537,2017-07-04 15:26:44.270379
Concept,Archive file,"== Headline ==

A file that archives several files

== Metadata ==
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Archive_file]]
* [[relatesTo::http://en.wikipedia.org/wiki/Archive]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:18.412,2017-07-04 13:44:37.683467
Concept,Array,"== Headline ==

A sequence of values of the same type

== Metadata ==

* [[instanceOf::Data structure]]

",2013-06-12 14:53:18.883,2017-07-04 13:44:37.724727
Script,First steps in Haskell,"== Headline ==

First steps of programming in [[Language:Haskell|]]

== Description ==

Functional programming in [[Language:Haskell]] is introduced in this lecture. First, basic programming concepts (such as [[program]] and [[algorithm]]) are briefly rehashed. Then, key concepts of functional programming (such as [[function]], [[recursion]], [[list]], and [[pattern matching]]) are discussed. Simple program examples are used for illustrations (such as the [[factorial]] function and [[linear search]]). Eventually, a major running example of this course is introduced: the so-called [[system:Company]], which is essentially a trivial information system for human resource management.

== Video ==

Some version of the lecture has been recorded.

<media url=""http://www.youtube.com/watch?v=AWIO3nPInzg"" />

== Concepts ==

These are all the concepts that play a role in this lecture.

=== Basic programming concepts ===

* [[Software system]]
* [[Requirement]]
* [[Program]]
* [[Programming language]]
* [[Compiler]]
* [[Interpreter]]
* [[Algorithm]]
* [[Algorithmic problem]]
* [[Data structure]]

=== Key functional programming concepts ===

* [[Functional programming]]
* [[Function]]
* [[Function definition]]
* [[Function application]]
* [[Function composition]]
* [[Immutable list]]
* [[Pattern matching]]

=== Simple program samples ===

* [[Factorial]]
* [[Greatest common divisor]]
* [[Linear search]]

=== Features of the 101system ===

* [[Feature:Flat company]]
* [[Feature:Total]]
* [[Feature:Cut]]

== Languages ==

These are all the software languages that play a role in this lecture.

* [[Language:Haskell]]

== Technologies ==

These are all the software technologies that play a role in this lecture.

* [[Technology:Haskell platform]]
* [[Technology:GHC]]
* [[Technology:GHCi]]

== Contributions ==

These are the implementations of the 101system that are discussed in this lecture.

* [[Contribution:haskellStarter]]

== Information ==

These are pointers to some general pieces of information as to how this wiki works.

* [[Information:Download]]
* [[Information:Wikipedia]]
* [[Information:Translate]]
* [[Information:Contact]]

== Metadata ==

This lecture is part of the functional programming course in Koblenz.

* [[memberOf::Course:Lambdas in Koblenz]]

",2013-06-12 15:00:54.537,2017-07-04 13:46:43.97221
Contribution,emftext,"== Intent ==

This implementation uses model driven software development based on [[Language:Java]], EMFand generative technologies of the Dropsbox (http://www.dropsbox.org/).

== Proposal ==

Additional features that were implemented
* Rename Refactoring
* Extract Sub-department

== Motivation ==

We use one of the advantages of model-driven software development for the combination of different tools to implement different features of the [101companies:System]]. Most of the involved tools have been developed using EMFText, other tools like Graphviz  and JastEMF are independent of EMFText.

EMFText is used for creating an interactive textual editor. It provides a parser and a printer for company models. References from employees to mentors are resolved automatically by EMFText. The company model is given by a specification in Text-Ecore which is an EMFText-based representation of Ecore models (instead of the XMI one). The Usage of eJava avoids having to add implementations of the Operations for Depth and Cut into the generated code artifacts (by the EMF generator model). The JastEMF tool is used to integrate a JastAdd attribute grammar into the model code which computes salary totals and evaluates the precedence constraint. The EMF+EMFText-based represention of the Graphviz DOT language finally is used for the transformation of Company specifications into a DOT specifications. The DOT specification is then compiled into a PDF using GraphViz.

== Usage ==

=== Source code ===

The sources are not maintained in github.

The sources are available as several Eclipse projects from the following URLs:

* http://svn-st.inf.tu-dresden.de/svn/reuseware/trunk/EMFText%20Languages/org.emftext.language.company (model & syntax specifications)
* http://svn-st.inf.tu-dresden.de/svn/reuseware/trunk/EMFText%20Languages/org.emftext.language.company.resource.company (generated parsing & printing & interpretation plugin)
* http://svn-st.inf.tu-dresden.de/svn/reuseware/trunk/EMFText%20Languages/org.emftext.language.company.resource.company.ui (UI integration,Outline and Properties view)
* http://svn-st.inf.tu-dresden.de/svn/reuseware/trunk/EMFText%20Languages/org.emftext.language.company.text (test cases)

=== Preparations ===

* Install the Eclipse 3.7 Modelling Distribution (Includes EMF)
* Install the current Trunk Version of EMFText (will soon get out as Version 1.4.0 for Eclipse 3.7) and the DSLs from the update-site (http://emftext.org/update trunk)
** Feature EMFText (only for build)
** Feature EMFText Syntax Ecore TEXT (Languages Root Feature)
** Feature EMFText Syntax eJava (Languages Root Feature) (only for build)
** Feature EMFText DOT (Graphviz)
**  Feature Refactory Runtime (Refactory Root Feature)
* Install the current Trunk Version of JastEMF (will soon get out as Version 0.1.6 for Eclipse 3.7) from the update-site (http://jastemf.googlecode.com/svn/trunk/build/org.jastemf.build/distribution)
** Feature JastEMF Core (only for build)
* Install the current Version of FeatureMapper for its update-site (http://featuremapper.org/update/) (only needed for mapping the company features to metamodel)
* Install GraphViz from http://www.graphviz.org/Download windows.php (needed to generate the vizualization PDF from the generated DOT File)

=== Build ===

* src-gen folders should be empty
* generate the EMF + JastEMF Code using the EMF Semantic task in the build.xml (takes some time, must be run in the same jre as workspace)
* generate the EMFText Plugins (right click on company.text.cs --> Generate Text Resource)
* check if there are any errors in the code

=== Run ===

* just run a new eclipse instance from the workspace and create a new company file using the EMFText new file wizzard

== Technologies ==

* EMF+Eclipse
* Java
* EMFText (Parsing, Serialization, Mentoring)
* EMFText DSLs
** Text-Ecore (Company Model)
** eJava (Depth,Cut)
** A DOT implementation
* GraphViz + DOT (Vizualisation)
* JastEMF+JastAdd (Total,Precedence)
* Refactory (Rename Refactoring, Extract Subdepartment)
* FeatureMapper (Feature Visualization)

== Metadata ==

* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Visualization]]
* [[implements::Feature:Structure-driven query]]
* [[implements::Feature:Mentoring]]
* [[implements::Feature:Ranking]]
* [[implements::Feature:Parsing]]
* [[developedBy::Contributor:Florian Heidenreich]]
* [[developedBy::Contributor:Sven Karol]]
* [[developedBy::Contributor:Jan Reimann]]
* [[developedBy::Contributor:Christian Wende]]

",2013-06-12 14:57:16.88,2017-07-05 15:25:56.633096
Concept,Visual syntax,"== Headlnie ==

[[Concrete syntax]] based on graphs or visual elements

== Metadata ==

* [[isA::Concrete syntax]]
* [[relatesTo::Textual syntax]]
",2017-05-03 16:36:27.454033,2017-07-04 15:26:44.341997
Concept,Arrow,"== Headline ==

A [[Functional programming|functional]] [[programming idiom]] for composing computations

== Details ==

With arrows, like [[monad]]s, one can compose computations as defined by <cite>hughes2000generalising</cite>. Arrows are more versatile than monads. For instance, arrows can be independent of the input or take multiple inputs. <cite>haskellOrgArrows</cite> In Haskell, arrows are supported by the. [[type class]] <syntaxhighlight lang=""haskell"" enclose=""none"">Arrow</syntaxhighlight> An arrow is defined by two functions. <cite>ghcArrows</cite>:
<syntaxhighlight lang=""haskell"" enclose=""none"">Arrow a => arr :: (b -> c) -> a b c</syntaxhighlight>: Lifts a function of type <syntaxhighlight lang=""haskell"" enclose=""none"">b -> c</syntaxhighlight> into the arrow space.
<syntaxhighlight lang=""haskell"" enclose=""none"">Arrow a => first :: a b c -> a (b, d) (c, d)</syntaxhighlight>: Applies a computation only to a part of the input and copies the rest to the output. <cite>haskellOrgArrows</cite>

== Metadata ==
* [[instanceOf::Type class]]
* [[instanceOf::Programming idiom]]
* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Arrow_(computer_science)]]
* [[relatesTo::http://www.haskell.org/arrows/]]
* [[relatesTo::http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Arrow.html]]
* [[relatesTo::http://dl.acm.org/citation.cfm?id=347246]]
",2013-06-12 14:53:19.072,2017-07-04 13:44:37.826282
Concept,Business layer,"== Headline ==

the implementation of the business logic in a [[three-tier architecture]]

== Metadata ==
* [[instanceOf::Architectural component]]
",2013-06-12 14:53:24.611,2017-07-04 13:44:38.375382
Concept,CLI,"== Intent ==

a command line interface

== Links ==

* [http://en.wikipedia.org/wiki/Command-line_interface Command Line Interface (CLI)]

== Metadata ==
* [[instanceOf::User interface]]
",2013-06-12 14:53:25.66,2017-07-04 13:44:38.408558
Concept,Computing,"== Headline ==

The activity of using computer hardware and software

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Computing]]
* [[memberOf::Vocabulary:Computing]]
* [[isA::Concept]]

",2013-06-12 14:53:32.353,2017-07-04 15:26:04.52404
Concept,Tree-based abstract syntax,"== Headline ==

[[Abstract syntax]] that uses a tree-based representation

== Metadata ==

* [[isA::Abstract syntax]]
* [[relatesTo::Graph-based abstract syntax]]
* [[relatesTo::Algebraic signature]]
",2017-05-03 20:12:32.650571,2017-07-04 15:26:44.398493
Concept,Graph-based abstract syntax,"== Headline ==

[[Abstract syntax]] that uses a graph-based representation

== Metadata ==

* [[isA::Abstract syntax]]
* [[relatesTo::Tree-based abstract syntax]]
* [[relatesTo::Metamodel]]
",2017-05-03 20:14:09.637293,2017-07-04 15:26:44.422475
Script,Functional data structures,"== Headline ==

Functional data structures in Haskell

== Description ==

A functional data structure is a persistent data structure which is implemented in a functional style. Such data structures involve (path) copying to achieve persistence and they may rely on lazy evaluation to achieve competitive performance (complexity).

== Material ==

<media url='http://www.slideshare.net/rlaemmel/functional-data-structures' />

<media url='https://www.youtube.com/watch?v=4J4yadtzPcw' />

== Concepts ==

* [[Lazy evaluation]]
* [[Functional data structure]]
* [[Stack]]
* [[Binary search tree]]
* [[Skew heap]]
* [[Amortized analysis]]

== Further reading ==

* [[Document:Handbook of data structures and applications]]
* [[Document:Okasaki96]]
* [https://github.com/101companies/101repo/tree/master/concepts/Functional_data_structure]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Higher-order functions in Haskell]]



      ",2013-06-12 15:00:54.958,2017-07-04 13:46:54.046041
Concept,Annotation language,"== Headline ==

A language facilitating [[annotation]]

== Metadata ==

* [[isA::Software language]]
* [[relatesTo::Annotation]]
",2017-05-03 21:32:42.010117,2017-07-04 15:26:44.474562
Contribution,dom,"== Headline ==

[[In-memory XML processing]] in [[Language:Java]] with [[Technology:DOM]]
== Characteristics ==

Companies are represented in [[Language:XML]] and the object model of [[Technology:DOM]] is used to represent and process XML documents [[In-memory XML processing|in memory]]. In particular,  operations on companies are implemented in Java on top of DOM objects. Such objects are easily queried - as needed for [[Feature:Total]]. As DOM objects also mutable, [[Feature:Cut]] is implemented as an [[impure function]].
== Illustration ==

The data model is implemented as xml files (sampleCompany.xml) that conform to a schema (Company.xsd).

[[Feature:Open serialization]] is implemented by loading and storing a [[Technology:DOM]] Document object:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/loadDocument""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/saveDocument""/>

A method to validate the deserialized xml with the Company [[Technology:XSD|]] schema is implemented by a DOM Validator:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/isValidXml""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented using methods of [[Technology:DOM]]'s Document class:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.
== Relationships ==

For DOM-like implementations of in-memory XML processing see [[Contribution:dom]], [[Contribution:jdom]] and [[Contribution:xom]].

For a query-based implementation of in-memory XML processing see [[Contribution:xpathAPI]].

For push-based XML processing see [[Contribution:sax]].

For Object/XML mapping see [[Contribution:jaxbChoice]] (XSD with choice for different subunits), [[Contribution:jaxbComposition]] (XSD with object composition), [[Contribution:jaxbExtension]] (XSD with type extension) and [[Contribution:jaxbSubstitution]] (XSD with substitution groups).
== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.
== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Open serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme: Java mapping]]
* [[memberOf::Theme:XML programming]]
* [[uses::Language:Java]]
* [[uses::Language:XML]]
* [[uses::Language:XSD]]
* [[uses::Technology:DOM]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]
",2013-06-12 14:57:10.788,2017-07-05 15:25:39.752931
Concept,Network socket,"An endpoint in Process communication across computer networks

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Network_socket]]

",2015-08-13 15:09:57.475,2017-07-04 13:48:07.500948
Concept,Static Annotation,"==Headline==

A persistent custom [[annotation]].

==Metadata==

* [[sameAs::https://www.scala-lang.org/api/current/scala/annotation/StaticAnnotation.html]]
* [[relatesTo::http://docs.scala-lang.org/overviews/reflection/annotations-names-scopes.html]]
* [[isA::Annotation]]",2017-05-23 14:42:48.425787,2017-07-04 15:26:44.515446
Concept,Code-first mapping,"== Intent ==

start from an object model rather than  a schema in [[O/X mapping|O/X]] or [[O/R mapping]]

== Description ==

TBD

== Discussion ==

See [[Schema-first mapping]] for the counter-part.

== Metadata ==

* [[instanceOf::Mapping]]
",2013-06-12 14:53:28.818,2017-07-04 13:44:38.737652
Concept,Compiler,"== Headline ==

A program that transforms source code into object code

== Illustration ==

Let's assume that we want to compile the [[Language:Java]] variation on the [[Hello world program]].

That is, the source code of the program is available as a file ""HelloWorld.java"".

Compilation can be issued in different ways. For instance, an [[IDE]] may take care of it automatically.

For clarity, we perform compilation at the command line:

<pre>
$ ls
HelloWorld.java
$ javac HelloWorld.java
$ ls
HelloWorld.class	HelloWorld.java
</pre>

Thus, the compiler produced the object code, in fact, [[Language:Java bytecode|bytecode]], in the file ""HelloWorld.class"".

The byte code can be executed as follows:

<pre>
$ java HelloWorld
Hello, world!
</pre>

The byte code appears to be interpreted, i.e., ""java"" appears to be an [[interpreter]] for byte code. In fact, ""java"" performs [[just-in-time compilation]] so that byte code is translated on the fly to machine code, which is then eventually executed (so to say interpreted) by the actual machine.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Compiler]]
* [[relatesTo::Interpreter]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:30.783,2017-07-04 13:44:38.850502
Property,isA,"== Headline ==

Subtyping between classifiers.

== Description ==

The subtyping relation is asymmetric. If there is an
instance of an entity A that is a subtype of an entity B,
then any [[Property:instanceOf|instance of]] A is an instance of B as well.
But, not every instance of B is an instance of A.

== Metadata ==
* [[sameAs::https://en.wikipedia.org/wiki/Is-a]]
* [[hasDomain::Type:Concept]]
* [[hasRange::Type:Concept]]
",2017-05-23 14:17:26.206327,2017-07-04 15:26:44.695265
Concept,Name binding,"== Heading ==

The association of entities with identifiers

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Name_binding]]
* [[instanceOf::Software concept]]",2017-06-28 14:45:27.929705,2017-07-05 11:57:54.896807
Concept,Internal DSL,"== Headline ==

A [[Domain-specific language]] that is constructed using a [[general-purpose language]] in a particular way. The DSL uses a small subset of language features, is valid code in the host language, but should feel like a custom language.
== Abbreviation ==

Long term: Internal domain-specific language.
== Metadata ==

[[cite::http://martinfowler.com/dsl.html]]
[[isA::Domain-specific language]]
",2014-08-24 12:10:49.873,2017-07-04 15:26:42.607583
Concept,Data Access Object,"== Headline ==

A [[design pattern]] for interface-based database access or persistence

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Data_access_object]]
* [[instanceOf::Design pattern]]
* [[relatesTo::Data Transfer Object]]
",2013-06-12 14:53:36.772,2017-07-04 13:44:39.555821
Script,Functors and friends,"== Headline ==

Lecture ""Functors and friends"" as part of [[Course:Lambdas in Koblenz]]

== Description ==

Data processing based on [[functor]]s and the [[fold]]s is generalized to apply to a class of types as opposed to list maps and folds previously. In particular, we look at data types that can be thought of as modeling containers, and we treat them in a way similar to lists. This is possible, for example, for [[maybe type]]s and [[rose tree]]s. In this context, we also encounter another data processing technique: [[bidirectional transformation]]. Further, we briefly touch aspects of [[data parallelism]], as it involves aspects of folding.

== Concepts ==

* [[Functor]]
* [[Rose tree]]
* [[Maybe type]]
* [[Foldable type]]
* [[Higher-kinded polymorphism]]
* [[Bidirectional transformation]]
* [[Data parallelism]]

== Languages ==

* [[Language:Haskell]]

== Features ==

* [[Feature:Total]]
* [[Feature:Cut]]

== Contributions ==

* [[Contribution:haskellTree]]
* [[Contribution:haskellFlattened]]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Type-class_polymorphism]]


      ",2013-06-12 15:00:55.173,2017-07-04 13:46:54.142319
Concept,TMVar,"== Headline ==

A transactional [[MVar]] of [[Language:Haskell|]]'s [[STM]] [[monad]]

== Metadata ==

* [[memberOf::Vocabulary:Haskell]]
* [[sameAs::http://hackage.haskell.org/packages/archive/stm/2.1.1.2/doc/html/Control-Concurrent-STM-TMVar.html]]
* [[isA::Concept]]

",2013-06-12 14:56:17.991,2017-07-04 15:26:26.711071
Concept,Sum monoid,"== Headline ==

A [[monoid]] leveraging addition for the associative operation

== Illustration ==

Number types may be completed into monoids in different ways. The sum monoid favors addition for the associative operation of the monoid. We illustrate the sum monoid in [[Language:Haskell]] on the grounds of the [[type class]] ''Monoid'' with the first two members needed for a minimal complete definition:

<syntaxhighlight lang=""haskell"">
-- The type class Monoid
class Monoid a
  where
    mempty :: a -- neutral element
    mappend :: a -> a -> a -- associative operation
    mconcat :: [a] -> a -- fold
    mconcat = foldr mappend mempty
</syntaxhighlight>

The sum monoid relies on a designated type which essentially wraps a number type:

<syntaxhighlight lang=""haskell"">
-- The type of the sum monoid
newtype Sum a = Sum { getSum :: a }
</syntaxhighlight>

Here is the [[type-class instance]] for the sum monoid:

<syntaxhighlight lang=""haskell"">
-- The Monoid instance for numbers under addition
instance Num a => Monoid (Sum a)
  where
    mempty = Sum 0
    x `mappend` y = Sum (getSum x + getSum y)
</syntaxhighlight>

For further illustration, we can reconstruct the standard ''sum'' function in a monoidal way. To this end, we first review the normal definition in terms of foldr:

<syntaxhighlight lang=""haskell"">
-- A foldr-based definition of sum
sum' :: Num a => [a] -> a
sum' = foldr (+) 0
</syntaxhighlight>

<syntaxhighlight lang=""haskell"">
-- A monoidal definition of sum
sum'' :: Num a => [a] -> a
sum'' = getSum . mconcat . map Sum
</syntaxhighlight>

== Metadata ==

* [[isA::Monoid]]
* [[relatesTo::Product monoid]]
",2013-06-12 14:56:16.146,2017-07-04 15:26:26.592241
Concept,Data Transfer Object,"== Headline ==

A [[design pattern]] for transferring data between software subsystems

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Data_transfer_object]]
* [[instanceOf::Design pattern]]
* [[relatesTo::Data Access Object]]
",2013-06-12 14:53:36.93,2017-07-04 13:44:39.570636
Concept,External DSL,"== Headline ==

A [[Domain-specific language]] separated from the host language. It can have a custom syntax or use another languages syntax like [[Language:XML|XML]]. A script written in the external DSL will usually be parsed in the host language. ([[Parser]]) Often the external DSL can be embedded into the host language.
== Abbreviation ==

Long term: External domain-specific language.
== Metadata ==

[[cite::http://martinfowler.com/dsl.html]]
[[isA::Domain-specific language]]
",2014-08-24 12:59:55.429,2017-07-04 15:26:42.645164
Concept,Language concept,"== Headline ==

Concepts used in the design of [[software language]]s

== Metadata ==

* [[isA::Concept]]

",2014-08-30 18:19:51.464,2017-07-04 15:26:42.75157
Concept,Web technology,"== Headline ==

Technologies for web programming in the broad sense

== Metadata ==

* [[isA::Software technology]]
",2014-08-30 18:42:26.812,2017-07-04 15:26:42.782059
Contributor,fruether,"",2017-05-25 12:45:07.475547,2017-07-04 13:48:21.1454
Contribution,erlang,"== Intent ==

an Erlang-based implementation

== Motivation ==

Concurrency is implemented in a simple way. The company itself is a server process with which you communicate through an API (meganalysis for now). If that process has a bug, it crashes, but a supervisor will restart it back up (though it does not yet persist its state under crashes). Thus, it is already an example of fault tolerance (or reliability) as well, albeit naively implemented.

== Architecture ==

The code makes extensive use of the OTP (Open Telecom Platform). Aptly misnamed, this is a library of common concurrency tasks which most concurrent programs will use. Rather than writing code that uses the primitive send (''!'') and receive (''receive .. end'') constructs, these are wrapped in OTP.

A common OTP idiom is that OTP provides a *generic* version of a task, a server, a supervisor, and so on. This generic version is then specialized by injecting the name of a module. Whenever specific hook points in the generic server is reached, a callback is made to the module according to a protocol. Thus our code is call-backed to handle the specialization. A consequence as that we don't have to handle all the gritty parts of message passing concurrency.

The code consist of several modules:

* ''meganalysis.app.src'': This file describes a manifest of the meganalysis application.

* ''meganalysis app'': A callback interface to the generic ''application'' system in OTP. An application is a collection of processes that so some task together. The Erlang VM is an application server in which you store several applications. Should we want to provide a web interface for instance, we can spawn a webserver application later.

* ''meganalysis sup'': Provides the callbacks for the generic ''supervisor'' construction. The supervisor is built to mostly live in hibernation supervising concrete workers. If the worker dies due to a program error or some unforseen event, then the supervisor will restart its worker according to some rules. We use the ''one for one'' strategy here, but there are several possible. If the worker crashes too often however, the supervisor itself dies. This trigger application death in our case, but usually a nested tree of supervisors can withstand supervisor crashes as the error usually only propagates up the tree to a certain point.

* ''meganalysis process'': A generic server implementation. That is, we provide a set of callbacks for the ''gen server'' OTP generic server *behaviour*. Note that we export a neat interface which hides the ''gen server'' parts. Specifically, we export ''total()'' and ''cut()''. Total is a *call* meaning that it is synchronous. A caller will wait on the server to return an answer. Cut is a *cast* on the other hand. It is asynchronous and the caller is not going to wait on its completion. The ''handle *'' parts are the protocol for the ''gen server'' callbacks. That is actually doing the meat of the work.

* ''meganalysis'': It is common to provide a nice API to the rest of the Erlang system, to hide the complexities of processes. An user of the application will only use this API to work with the application. Thus, we decouple the internal design of the application with its interface.

== Usage ==

=== Prerequisites ===

First, in order to run this code, you need three tools:

* Make, preferably GNU make, though the makefile should be BSD-make compatible. It can be skipped if you want. The Makefiles only serves as a canonical interface that makes Emacs and Vim's build-triggers work nicely.

* A Recent Erlang/OTP distribution. Tested with R14B02, but anything from R13B04 and up ought to work for this. Avoid R14A if possible. It is a beta-release.

* [[Technology:Rebar]]: Rebar is an Erlang build tool. When rebar has been boot-strapped, you place it into your path after which you have access to a build system that is bearable to work with.

=== Building ===

Once the above requirements are satisfied, the code can be built with

<pre>
     make compile
</pre>

It should complete with no warnings.

=== Testing ===

To test the code, we use

<pre>
     make console
</pre>

which will spawn a console in the Erlang system, but with an altered code-load path so it can find our compiled bytecode .beam files. Now you can test it by:

<pre>
     1> meganalysis:run(). % Press return here :)
     {399747,199873.5}
     2> q().
     ok
</pre>

Note the '.', which marks the end of the expression to the parser.

== Discussion ==

The current implementation is sufficient to illustrate fault tolerance.

Here are some ideas for possible advancements:

* Implement persistence
* Implement distribution
* Consider outsourcing the data store to Mnesia
* Add spec constraints
* Implement some of the more specialized versions
* Parallelize the work done.
* Improve roboustness.

== Metadata ==

* [[uses::Language:Erlang]]
* [[uses::Technology:OTP]]
* [[uses::Technology:GNU make]]
* [[uses::Technology:Rebar]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Reliability]]
* [[developedBy::Contributor:jlouis]]

",2013-06-12 14:57:17.265,2017-07-05 15:25:57.266352
Concept,Database programming,"== Headline ==

The programming domain of accessing [[database]]s

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[instanceOf::Programming domain]]
",2013-06-12 14:53:41.144,2017-07-04 13:44:40.109692
Concept,Recursive data structure,"== Headline ==

A recursively defined [[data structure]]

== Illustration ==

Hierarchical companies, as required by [[Feature:Hierarchical company]], involve a recursive data structure because departments can be arbitrarily nested. Of course, there are different ways of implementing such recursion. For instance:
* Use a (recursive) [[algebraic data type]] in [[functional programming]].
* Use a (recursive) [[object model]] in [[OO programming]].
* Use normalized [[relational table]]s with appropriate [[foreign key]]s.

== Metadata ==

* [[isA::Data structure]]
* [[similarTo::http://en.wikipedia.org/wiki/Recursive_data_type]]
",2014-09-02 13:24:15.761,2017-07-04 15:26:42.849232
Script,Generative programming,"== Headline ==

A lecture on the [[generative programming]] (mainly [[parser generation]]) as part of the [[Course:Programming in Koblenz]]
== Material ==

<media url=""http://www.slideshare.net/rlaemmel/pgen""/>
== Concepts ==

* [[Grammar]]
* [[Syntax]]
* [[Concrete syntax]]
* [[Abstract syntax]]
* [[Abstract syntax tree]] ([[AST]])
* [[Lexer]]
* [[Acceptor]]
* [[Parser]]
* [[Parser generator]]
* [[Parser generation]]
* [[Program generator]]
* [[Program generation]]
* [[Generative programming]]
* [[Design pattern]]
* [[Bootstrapping]]
== Contributions ==

* [[Contribution:antlrLexer]]
* [[Contribution:antlrAcceptor]]
* [[Contribution:antlrParser]]
* [[Contribution:antlrObjects]]
* [[Contribution:antlrTrees]]
* [[Contribution:yapg]]
== Metadata ==


* [[instanceOf::Course:Programming in Koblenz]]
* ",2013-06-12 15:00:55.398,2017-07-04 13:46:58.157907
Concept,Gender,"== Headline ==

Add gender for employees

== Description ==

The data structure shall be extended by introducing a gender for an employee.

== Motivation ==

The current data structure of [[Contribution:mySqlMany]] and [[Contribution:mySqlOne]] only allows two-dimensional aggregation and analysis of data. Adding [[Feature:Gender]] enables us aggregating data multi-dimensional and therefore creating a more advanced reporting commonly used in the area of Business Intelligence (i.e. OLAP cubes).

== Relationships ==

* See [[Contribution:mySqlOneReporting]] for an implementation of this feature
* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical_company]].

== Metadata ==


* [[isA::Data requirement]]
* [[isA::Optional feature]]
* ",2015-04-23 15:54:31.025,2017-07-04 15:26:43.132423
Concept,Python Standard Library,"The [[Language:Python |]] [[Standard Library]]

== Links ==
* https://docs.python.org/2/library/index.html


== Metadata ==

* [[isA::Standard Library]]

",2015-08-12 14:39:26.82,2017-07-04 15:26:43.501054
Concept,Declaration,"== Headline ==

A [[language construct]] for declaring (named) [[abstraction]]s in a program

== Metadata ==

* [[instanceOf::Language construct]]
* [[memberOf::Vocabulary:Programming]]
",2013-06-12 14:53:42.142,2017-07-04 13:44:40.140635
Concept,Sorting_problem,"== Headline ==

The problem of sorting a given list

== Illustration ==

The problem can be described, for example, as follows:

* Input:
** A list ''l'' of values
* Output:
** A list ''r'' satisfying these properties:
*** ''r'' is a permutation is of ''l''.
*** ''r'' is sorted.

For instance, given the input {2,4,3,1,4}, the output should be {1,2,3,4,4}.

This is an [[algorithmic problem]]; there are various [[sorting algorithm]]s, e.g., [[Quicksort]].

The ingredients of the above problem description, i.e., the test for two lists to be permutations of each other and the test for a list to be sorted, can be described more formally as follows; we use [[Language:Haskell]] notation:

<fragment url='Main.hs/function/permutation' explore='true'/>

<syntaxhighlight lang=""haskell"">
-- Test for two lists to be permutations of each other
permutation :: Eq a => [a] -> [a] -> Bool
permutation [] [] = True
permutation (x:xs) ys = remove ys []
  where
    -- Repeat removal of equal elements
    remove [] _ = False
    remove (y:ys) zs =
      if (x==y)
        then permutation xs (zs++ys)
        else remove ys (y:zs)

-- Test for a list to be sort
sorted :: Ord a => [a] -> Bool
sorted [] = True
sorted [x] = True
sorted (x1:x2:xs) = x1 <= x2 && sorted (x2:xs)
</syntaxhighlight>

We apply the list properties to a few sample lists:

<syntaxhighlight lang=""haskell"">
-- Illustrate list properties
main = do
  let l1 = [2,4,3,1,4]
  let l2 = [1,2,3,4,4]
  let l3 = [1,8,2,7,4]
  print $ sorted l1 -- False
  print $ sorted l2 -- True
  print $ sorted l3 -- False
  print $ permutation l1 l2 -- True
  print $ permutation l1 l3 -- False
</syntaxhighlight>

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Sorting_algorithm]]
* [[isA::Algorithmic problem]]

",2015-12-14 05:43:37.506,2017-07-04 15:26:44.115995
Concept,Distribution,"== Headline ==

The [[capability]] of distributing programs over computers in a network

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Distributed_computing]]
* [[instanceOf::Capability]]

",2013-06-12 14:53:44.269,2017-07-04 13:44:40.353307
Contribution,fsharpLoggingNonMonadic,"== Headline ==

A non-monadic implementation of the Logging feature in [[Language:FSharp|F#]] for the [[Technology:.NET]] Framework

== Characteristics ==

This first step in logging salary changes is implemented through a straightforward family of functions in a way that salary changes are passed into and out of functions through tuples.
This code is quite voluminous and can be improved and shortened by using monads.

== Illustration ==

Salary changes are kept through the following log data:
<syntaxhighlight lang=""fsharp"">
    type LogEntry = {
        name: Person;
        oldSalary: decimal;
        mutable newSalary: decimal;
    }

    type Log = {mutable LogList : List<LogEntry>}
</syntaxhighlight>
A log resulting of a salary cut from the sample company:
<syntaxhighlight lang=""fsharp"">
[LogEntry {name = ""Craig"", oldSalary = 123456.0, newSalary = 61728.0},
 LogEntry {name = ""Erik"", oldSalary = 12345.0, newSalary = 6172.5},
 LogEntry {name = ""Ralf"", oldSalary = 1234.0, newSalary = 617.0},
 LogEntry {name = ""Ray"", oldSalary = 234567.0, newSalary = 117283.5},
 LogEntry {name = ""Klaus"", oldSalary = 23456.0, newSalary = 11728.0},
 LogEntry {name = ""Karl"", oldSalary = 2345.0, newSalary = 1172.5},
 LogEntry {name = ""Joe"", oldSalary = 2344.0, newSalary = 1172.0}]
</syntaxhighlight>
The median can be computed for a given log as follows:
<syntaxhighlight lang=""fsharp"">
let log2deltas =
    	List.sortBy (fun entry-> entry.newSalary - entry.oldSalary) >> List.map (fun entry-> entry.newSalary - entry.oldSalary)

let log2median =
        let median (l:decimal list) = l.[(List.length l)/2]
        log2deltas >> median
</syntaxhighlight>
The sample log resolves to the following median:
<syntaxhighlight lang=""fsharp"">
-6172.5
</syntaxhighlight>

[[Feature:Cut]] is implemented in a logging-enabling way as follows:
<syntaxhighlight lang=""fsharp"">
    let SalCutEmpLog (emp:Employee):Employee*LogEntry =
            let templog = {name= emp.Person; oldSalary= emp.Salary; newSalary =emp.Salary}
            emp.Salary <- emp.Salary / 2M
            templog.newSalary <-emp.Salary
            (emp,templog)

    let rec SalCutDeptLog (dept:Department):Department*Log =
            let tempLogList = List<LogEntry>()

            let cache1:Employee*LogEntry = SalCutEmpLog dept.Manager
            tempLogList.Add(snd(cache1))
            dept.Manager.Salary <- fst(cache1).Salary

            List.iter (fun emp ->
                    let cache:Employee*LogEntry = (SalCutEmpLog emp)
                    emp.Salary <- (fst(cache).Salary)
                    tempLogList.Add(snd(cache))) (List.ofSeq dept.Employees)

            List.iter(fun sunit->
                    let cache2:Department*Log= (SalCutDeptLog sunit)
                    tempLogList.AddRange(List.ofSeq(snd(cache2).LogList))) (List.ofSeq dept.SubUnits)
            let tempLog = {LogList= tempLogList}
            (dept,tempLog)

    let SalCutCompLog (comp:Company):Company*Log =
            let tempLogList = List<LogEntry>()

            List.iter (fun dept->
                    let cache:Department*Log = (SalCutDeptLog dept)
                    tempLogList.AddRange(List.ofSeq(snd(cache).LogList)))(List.ofSeq comp.Departments)

            let tempLog = {LogList= tempLogList}
            (comp,tempLog)
</syntaxhighlight>

== Relationships ==

See [[Contribution:fsharpRecords]] for a implementation of [[Feature:Cut]] without logging.

== Architecture ==

The contribution consists of five modules: ""Data.fs"" which contains the definition of the used classes;
""Sample.fs"" which creates a sample instance of a company;
""Log.fs"" which contains the log datastructure as well as the functions log2deltas, log2mean and log2median.
""Cut.fs"" which contains the cut functions (with logs) for employees, departments and a company.
""Main.fs"" which basically creates a sample company through ""buildCompany"" of ""Sample.fs"" and executes cut printing the results as well as the log;

== Metadata ==

* [[developedBy::Contributor:MightyNoob]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Company]]
* [[uses::Language:FSharp|F#]]
* [[uses::Technology:fcs.exe]]
* [[uses::Technology:.NET]]
* [[uses::Technology:Visual Studio]]

<!-- Next link is generated automatically-->
* [[uses::Language:Plain Text]]

",2013-06-12 14:57:19,2017-07-05 15:26:02.447751
Concept,Tail,"== Headline ==

All elements of a list except the first

== Details ==

In [[functional programming]], there is typically a designated [[tail function]].

== Metadata ==

* [[memberOf::Data]]
* [[isA::Concept]]

",2013-06-12 14:56:18.494,2017-07-04 15:26:26.756198
Concept,Function definition,"== Headline ==

The [[abstraction mechanism]] for [[function]]s

== Description ==

See the concept of [[function]].

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
",2013-06-12 14:54:03.343,2017-07-04 13:44:42.167084
Concept,Textual syntax,"== Headlnie ==

[[Concrete syntax]] based on text

== Metadata ==

* [[isA::Concrete syntax]]
* [[relatesTo::Visual syntax]]
",2017-05-03 16:30:39.958208,2017-07-04 15:26:44.291155
Concept,Context-free syntax,"== Headline ==

A [[concrete syntax | concrete]], [[textual syntax]] that is defined by a [[context-free grammar]]

== Details ==

We may also use this term to distinguish the main part of the syntax from the [[lexical syntax]].

== Metadata ==

* [[isA::Syntax]]
* [[relatesTo::Lexical syntax]]
* [[relatesTo::Concrete syntax]]
",2017-05-03 19:49:36.426521,2017-07-04 15:26:44.373123
101companies,Web server,"== Headline ==

The web server of the [[101project]]

== Description ==

The web server provides various project-related resources on the web.

More information coming soon.

[[Category:101companies]]",2013-06-23 21:55:20.833,2017-07-04 13:47:38.807116
Concept,Extensibility,"== Headline ==

The quality of an [[implementation]] to allow for extensions

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Extensibility]]
* [[memberOf::Vocabulary:Software engineering]]
* [[relatesTo::Expression problem]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:55.407,2017-07-04 13:44:40.985781
Script,Generic functions,"== Headline ==

Lecture ""Generic functions"" as part of [[Course:Lambdas in Koblenz]]

== Description ==

[[Generic function]]s à la [[datatype-generic programming]] are functions that are parameterized in the shape of data types. This is to be compared with [[polymorphic function]]s that are parameterized in types. We introduce a simple form of [[datatype-generic programming]] with the help of [[generalized fold]]s ([[catamorphism]]s) which in turn are based on the notion of [[fold algebra]]s. In passing, we also sketch the ""[[Scrap your boilerplate]]"" ([[SYB]]) style of generic programming.

== Concepts ==

* [[Generic function]]
* [[Datatype-generic programming]]
* [[Generic programming]]
* [[Fold algebra]]
* [[Generalized fold]]
* [[Catamorphism]]
* [[Large banana]]
* [[Scrap your boilerplate]]

== Languages ==

* [[Language:Haskell]]

== Contributions ==

* [[Contribution:tabaluga]]
* [[Contribution:haskellSyb]]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Functors and friends]]

",2013-06-12 15:00:55.603,2017-07-04 13:46:58.239877
Concept,Semantic annotation,"== Headline ==

The process of adding [[annotation]]s that can be used by software to understand semantics of artifacts

== Metadata ==

* [[isA::Annotation]]
* [[similarTo::http://ontotext.com/knowledgehub/fundamentals/semantic-annotation/]]
* [[relatesTo::https://arxiv.org/pdf/1312.4794.pdf]]
",2017-05-03 21:21:53.302445,2017-07-04 15:26:44.45489
Concept,Fault tolerance,"== Headline ==

The [[capability]] of a system to be fault-tolerant

== Metadata ==

* [[instanceOf::Capability]]
* [[sameAs::http://en.wikipedia.org/wiki/Fault-tolerant_system]]
* [[relatesTo::http://en.wikipedia.org/wiki/High_availability]]
* [[relatesTo::http://en.wikipedia.org/wiki/Availability]]

",2013-06-12 14:53:56.044,2017-07-04 13:44:41.120586
Concept,Structured Editor,"== Headline ==

An editor that is aware of a document structure

==Description==

An editor that facilitates editing a document while being aware of its
structure is referred to as a structured editor. This is in contrast to
simple text editors that are unaware of the document's structure.

==Metadata==

[[sameAs::https://en.wikipedia.org/wiki/Structure_editor]]
[[isA::Technology]]",2017-05-23 13:44:28.58957,2017-07-04 15:26:44.495663
Concept,Program analysis,"",2017-05-28 16:30:38.402182,2017-07-04 13:48:21.178434
Concept,Top-down parsing,"== Headline ==

A [[parsing]] strategy starting at the root of the parse tree

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Top-down_parsing]]
* [[isA::Parsing]]
* [[instanceOf::Software language engineering]]
* [[relatesTo::Bottom-up parsing]]
",2013-06-12 14:56:30.361,2017-07-04 15:26:27.340804
Concept,Language implementation,"== Headline ==

The implementation of a [[software language]]

== Details ==

Most obviously, a language implementation could be either of these two:
* [[Compiler]]
* [[Interpreter]]

However, there are many other forms of language implementation, e.g.:
* [[Parser]]
* [[Foratter]]
* [[Preprocessor]]
* [[IDE]]
* [[Program analysis]]
* [[Transformation]]
* [[Generator]]

== Metadata ==

* [[isA::Technology]]
",2017-05-28 16:26:07.092365,2017-07-04 15:26:44.54488
Concept,Template language,"== Headline ==

A [[software language]] in which templates are written

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Template_processor]]
* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Software language]]",2017-06-06 08:50:55.874073,2017-07-04 15:26:44.590785
Concept,File,"== Headline ==

a resource for storing [[data]] in a [[file system]]

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[memberOf::Vocabulary:Data]]
* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Computer_file]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:56.78,2017-07-04 13:44:41.196887
Concept,Tree,"== Headline ==

A [[data structure]] for hierarchical tree structure

== Metadata ==

* [[isA::Data structure]]
* [[sameAs::http://en.wikipedia.org/wiki/Tree_(data_structure)]]
",2013-06-12 14:56:33.191,2017-07-04 15:26:28.168909
Contribution,haskellParsec,"== Headline ==

[[Parsing]] in [[Language:Haskell|Haskell]] with [[Technology:Parsec|Parsec]]

== Motivation ==

The implementation demonstrates [[parsing]] in [[Language:Haskell|]] with the [[Technology:Parsec|]] [[combinator library|library]] of [[parser combinator]]s. A concrete textual syntax for companies is assumed. [[Parse tree]]s are constructed in accordance to an [[abstract syntax]] defined in terms of [[algebraic data type]]s. We set up basic parsers for quoted strings and floating-point numbers. Further, we compose parsers for companies, departments, and employees using appropriate parser combinators for sequences, alternatives, and optionality. By design, the parser is kept simple in terms of leveraged programming technique; in particular, [[monadic style]] and [[applicative functor]]s are avoided to the extent possible.

== Illustration ==

See [[Contribution:haskellAcceptor]] for a basic illustrationof Parsec-based parsing. The present contribution is more complex in that it constructs proper [[parse tree]]s; see the the uses of "">>="" for sequential composition with capture of intermediate results and ""return"" for constructing the parse trees.

<syntaxhighlight lang=""haskell"">
parseDepartment :: Parser Department
parseDepartment = Department
  <$> (parseString ""department""
  >>  parseLiteral)
  <*  parseString ""{""
  <*> parseEmployee ""manager""
  <*> many parseSubUnit
  <*  parseString ""}""
</syntaxhighlight>

To this end, we use a parser type that is still parametric in the type of parse trees. Thus:

<syntaxhighlight lang=""haskell"">
-- Shorthand for the parser type
type Parser = Parsec String ()
</syntaxhighlight>

== Relationships ==

* [[Contribution:haskellAcceptor]] is merely an acceptor as opposed to the proper parser at hand.
* [[Contribution:haskellVariation]] sponsored the data model used in the present contribution.
* [[Contribution:antlrAcceptor]] and others use the same textual representation.

== Architecture ==

There are these modules:

* Main: parser test
* Company/Parser: the actual parser
* Company/Data: the abstract syntax definition
* Company/Sample: a baseline for testing at the level of abstract syntax

The input is parsed from a file ""sampleCompany.txt"".

== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[uses::Technology:Parsec]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[developedBy::Contributor:MedeaMelana]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell potpourri]]
* [[memberOf::Theme:Haskell introduction]]
* [[basedOn::Contribution:haskellAcceptor]]
* [[basedOn::Contribution:haskellVariation]]
* [[moreComplexThan::Contribution:haskellAcceptor]]
",2013-06-12 14:57:44.777,2017-07-05 15:27:44.57282
Concept,Fileware,"== Intent ==

a technological space focused on sequential and indexed files

== Description ==

A typical representative in terms of programming languages is [[Language:Cobol]]. However, the notion of files continues to serve in modern programming technologies. For instance, parallel programming according to the basic MapReduce programming model, as it was defined by Google, essentially leverages record-based files.

== Metadata ==

* [[instanceOf::Space]]
",2013-06-12 14:53:57.103,2017-07-04 13:44:41.228181
Concept,Float,"== Headline ==

The [[primitive data type]] of floating-point numbers

== Discussion ==

The concept of floating-point numbers may correspond to different language-specific data types.

== Metadata ==

* [[instanceOf::Primitive data type]]

",2013-06-12 14:53:57.645,2017-07-04 13:44:41.368289
Concept,Fold transformation,"== Headline ==

The replacement of the occurrence of an abstraction's definition by a reference

== Details ==

For instance, consider the following logic program:

<pre>
a(X) :- b(X), c(X), d(X).
e(X) :- b(X), c(X).
</pre>

The first clause admits folding as follows:

<pre>
a(X) :- e(X), d(X).
</pre>

That is, the body of e/1 occurred in the body of a/1 and hence that occurrence can be replaced by a suitably substituted head of e/1.

The inverse transformation is the [[unfold transformation]].

== Synonyms ==

* [[Fold]]

== Metadata ==
* [[instanceOf::Transformation]]
* [[relatesTo::http://dx.doi.org/10.1017/S0960129500001419]]
",2013-06-12 14:53:58.635,2017-07-04 13:44:41.659331
Concept,Foldable type,"== Headline ==

A type for which a [[fold function]] can be defined
== Illustration ==

Obviously, a [[fold function]] can be defined for lists. See also the concept of [[Maybe type]] for another simple example of a [[foldable type]].

In [[Language:Haskell]], there is a [[type class]] of foldable types:

<syntaxhighlight lang=""haskell"">
class Foldable t
  where
    fold :: Monoid m => t m -> m
    foldMap :: Monoid m => (a -> m) -> t a -> m
    foldr :: (a -> b -> b) -> b -> t a -> b
    foldl :: (a -> b -> a) -> a -> t b -> a
    foldr1 :: (a -> a -> a) -> t a -> a
    foldl1 :: (a -> a -> a) -> t a -> a
</syntaxhighlight>

The members ''foldr'' and ''foldl'' generalize the function signatures of the folklore fold functions for lists. It should be noted that a minimal complete definition requires either the definition of ''foldr'' or ''foldMap'', as all other class members are then defined by appropriate defaults. Here is a particular attempt at such defaults:

<syntaxhighlight lang=""haskell"">
class Foldable t
  where
    fold :: Monoid m => t m -> m
    foldMap :: Monoid m => (a -> m) -> t a -> m
    foldr :: (a -> b -> b) -> b -> t a -> b
    foldl :: (a -> b -> a) -> a -> t b -> a
    foldr1 :: (a -> a -> a) -> t a -> a
    foldl1 :: (a -> a -> a) -> t a -> a
    fold = foldr mappend mempty
    foldMap f = foldr (mappend . f) mempty
    foldr f z = foldr f z . toList
    foldl f z q = foldr (\x g a -> g (f a x)) id q z
    foldr1 f = foldr1 f . toList
    foldl1 f = foldl1 f . toList
</syntaxhighlight>

In a number of places, we leverage a conversion function ''toList'' for going from a foldable type over an element type to the list type over the same element type. In this manner, we can reduce some operations on foldables to operations on lists. This conversion function is easily defined by a ''foldMap'' application:

<syntaxhighlight lang=""haskell"">
toList :: Foldable t => t a -> [a]
toList = foldMap (\x->[x])
</syntaxhighlight>

Looking at the defaults again and their use of ''toList'', there is obviously an ""unsound"" circularity within the definitions, which however would be soundly broken, when either ''foldr'' or ''foldMap'' was defined for any given foldable type.

== Metadata ==

* [[relatesTo::http://www.haskell.org/haskellwiki/Foldable_and_Traversable]]
* [[memberOf::Vocabulary:Functional programming]]
* [[instanceOf::Concept]]
",2013-06-12 14:53:58.737,2017-07-04 13:44:41.805638
Concept,Interpolation,"== Headline ==

Construction data withing a range of already known data

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Interpolation]]
* [[instanceOf::Software concept]]",2017-06-28 14:46:25.58527,2017-07-05 11:58:51.873433
Concept,Case Class,"== Headline ==

A class that can be compared by structural decomposition

== Metadata ==

* [[sameAs::http://docs.scala-lang.org/tutorials/tour/case-classes.html]]
* [[instanceOf::Software concept]]",2017-06-28 14:43:33.905603,2017-07-05 11:56:11.891168
Concept,Batch Sequential,"== Headline ==

An architectural style with a linear sequence of statements

== Metadata ==

* [[sameAs::https://books.google.de/books?id=y7P4rzZWruUC&pg=PA115#v=onepage&q&f=false]]
* [[relatesTo::https://en.wikipedia.org/wiki/Batch processing]]
* [[instanceOf::Software concept]]",2017-06-28 14:48:52.177838,2017-07-05 12:10:25.930114
Concept,Functional programming,"== Headline ==

The functional [[programming paradigm]]

== Illustration ==

Consider the following definition of the factorial function in [[Language:Haskell]]:

<syntaxhighlight language=""haskell"">
-- A recursive definition of the factorial function
factorial n =
  if n==0
    then 1
    else n * factorial (n-1)
</syntaxhighlight>

This definition describes the computation of factorial in terms of basic arithmetic operations (""functions"") and the [[Recursion|recursive]] application of the factorial function itself. There are no variables that are assigned different values over time. This situation is representative of the functional programming paradigm.

For comparison, consider the following definition of the factorial function in [[Language:Java]]:

<syntaxhighlight language=""java"">
  // An imperative definition of the factorial function
  public static int factorial(int n) {
    int result = 1;
    for (int i=n; i>1; i--)
      result = result * i;
    return result;
  }
</syntaxhighlight>

A ''result'' variable is used in a loop to aggregate the product. Also, the loop uses a variable ''i'' to iterate from ''n'' down to ''1''. Arguably, the recursive formulation is also straightforward in Java, but Java with its emphasis on variables and assignment as well as mutable data structures and encapsulation of state in objects does not encourage functional programming.

== Citation ==

(http://en.wikipedia.org/wiki/Functional_programming, 14 April 2013)

In computer science, functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids state and mutable data. It emphasizes the application of functions, in contrast to the imperative programming style, which emphasizes changes in state. [...] Functional programming has its roots in lambda calculus, a formal system developed in the 1930s to investigate computability, the Entscheidungsproblem, function definition, function application, and recursion. Many functional programming languages can be viewed as elaborations on the lambda calculus.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Functional_programming]]
* [[instanceOf::Programming paradigm]]
* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::Lambda calculus]]

",2013-06-12 14:54:03.894,2017-07-04 13:44:42.349779
Concept,Functional constructor,"== Headline ==

A method or function returning an initialized object

== Metadata ==

* [[relatesTo::https://books.google.de/books?id=PXa2bby0oQ0C]]
* [[instanceOf::Software concept]]
* [[isA::Design pattern]]",2017-06-28 14:34:37.1405,2017-07-20 09:24:36.354201
Concept,Type-changing transformation,"== Headline ==

A transformation with the type of the input and output being ''not'' the same

== Details ==

In the context of [[model-driven engineering]], type-changing transformations also go by the name of [[exogenous model transformation]]s.

== Illustration ==

Diverse examples of type-changing transformations:
* A program transformation that translates one software language into another.
* A traversal over an object graph (by a visitor or otherwise) that returns objects of different classes.
* An XML transformation that replaces elements of one namespace by elements of another namespace.
* A model transformation where the metamodels of the input and output models are different.

== Metadata ==

* [[isA::Transformation]]
* [[memberOf::Vocabulary:Computing]]
",2013-06-12 14:56:34.391,2017-07-04 15:26:28.279968
Concept,Type-class constraint,"== Headline ==

Constraint on the type parameter of a [[type class]] or an [[type-class instance|instance]]

== Illustration ==

Type-class constraints define bounds on type parameters used in the declaration of [[type class]]es or [[type-class instance]]s (à la [[Language:Haskell]]). In this manner, type-class constraints feed into another form of [[bounded polymorphism]].

Consider, for example, the following [[type-class instance]] for [[equality]] of pairs:

<syntaxhighlight lang=""haskell"">
-- Equality of pairs
instance (Eq a, Eq b) => Eq (a,b)
  where
    x == y = fst x == fst y && snd x == snd y
</syntaxhighlight>

Clearly, such equality needs to be defined in a component-wise manner: for the first (""fst"") and the second (""snd"") project of a pair. In the interest of polymorphism, the type of the components should not be fixed, but the availability of equality needs to be assumed for the component types. Thus, the two constraints in the head of the instance:

<syntaxhighlight lang=""haskell"">
instance (Eq a, Eq b) => ...
</syntaxhighlight>

Likewise, a [[type class]] may also be constrained. Consider, for example, the following [[type class]] for comparison:

<syntaxhighlight lang=""haskell"">
class Eq a => Ord a where
  compare :: a -> a -> Ordering
  (<) :: a -> a -> Bool
  (>=) :: a -> a -> Bool
  (>) :: a -> a -> Bool
  (<=) :: a -> a -> Bool
  max :: a -> a -> a
  min :: a -> a -> a
</syntaxhighlight>

Please observe the constraint:

<syntaxhighlight lang=""haskell"">
class Eq a => ...
</syntaxhighlight>

This class contains a constraint such that total order (comparison) can only be defined for types with equality. This is effectively a sanity check for the programmer because comparison subsumes the case for equality, conceptually. Without the constraint, a programmer may accidentally forget to implement equality, explicitly.

Importantly, type-class constraints propagate through (inferred) types of expressions. Consider these illustrations of inferring types of expressions at the interpreter prompt:

<syntaxhighlight lang=""haskell"">
> :t (==)
(==) :: Eq a => a -> a -> Bool
> :t (==42)
(==42) :: (Eq a, Num a) => a -> Bool
</syntaxhighlight>

== Metadata ==

* [[isA::Concept]]

",2013-06-12 14:56:35.059,2017-07-04 15:26:28.591913
Concept,Functor,"== Headline ==

A [[Functional programming|functional]] [[programming idiom]] for mapping over containers
== Illustration ==

The term ""functor"" originates from category theory, but this will be of no further concern in this description. In functional programming, ""functor"" refers to a programming idiom for mapping over contains or compound data. Functors have been popularized by [[Language:Haskell]].

In Haskell, functors are programmed and used with the help of the [[type class]] ''Functor'' which is parametrized by a [[type constructor]] for the actual container type:

<syntaxhighlight lang=""haskell"">
class Functor f
  where
    fmap :: (a -> b) -> f a -> f b
</syntaxhighlight>

The [[type constructor]] parameter ''f'' is the placeholder for the actual container type. The [[fmap function]] (for ""functorial map"") is the principle operation of a functor: parametrized by a function for mapping container elements of type ''a'' to elements of type ''b'', it provides a mapping at the level of the container types, from ''f a'' to ''f b''. Algebraically, the following properties are required for any functor (given in Haskell notation):

<syntaxhighlight lang=""haskell"">
fmap id = id
fmap f . fmap g = fmap (f . g)
</syntaxhighlight>

The following ''Functor'' instance turns lists into a functor:

<syntaxhighlight lang=""haskell"">
instance Functor []
  where
    fmap = map
</syntaxhighlight>

Thus, the folklore [[map function]] for list processing is a particular example of the notion of functorial map.

Here is another ''Functor'' instance turning the [[Maybe type]] constructor into a functor.

<syntaxhighlight lang=""haskell"">
instance Functor Maybe
  where
    fmap _ Nothing = Nothing
    fmap f (Just x) = Just (f x)
</syntaxhighlight>

See also the concept of [[rose tree]]s for more complicated examples of functors.
== Metadata ==

* [[isA::Programming idiom]]
* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://www.haskell.org/haskellwiki/Functor]]
* [[relatesTo::http://www.haskell.org/haskellwiki/Category_theory/Functor]]
* [[relatesTo::http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Functor.html]]
* [[relatesTo::http://en.wikipedia.org/wiki/Functor]]
* [[relatesTo::Foldable type]]
",2013-06-12 14:54:04.37,2017-07-04 15:26:12.332523
Concept,Reduction,"== Headline ==

Tranformation during a copy process of an input

== Metadata ==


* [[relatesTo::https://confluence.jetbrains.com/display/MPSD30/Generator+Language#GeneratorLanguage-GeneratorRule]]
* [[sameAs::Fold]]
* [[sameAs::https://en.wikipedia.org/w/index.php?title=Reduce_(higher-order_function)&redirect=no]]",2017-06-28 14:35:12.812373,2017-07-05 10:31:51.590913
Concept,Generic programming,"== Headline ==

Programming with type-parametric abstractions

== Description ==

The term ""generic programming"" is somewhat overloaded. Thus, a particular definition is established here. In a simple case, generic programming is concerned with functionality that is parameterized by a type, possibly with an associated type bound. For example, generics in Ada or Java address this form of generic programming. In a more advanced case, type parameters may also control compile-time code generation as in the case of [[generative programming]], e.g., with [[template metaprogramming]]. Ultimately, generic programming also exploits parameterization in the shape of data types à la [[datatype-generic programming]].
== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Generic_programming]]
* [[instanceOf::Programming paradigm]]
",2013-06-12 14:54:05.503,2017-07-04 13:44:42.641623
Contribution,haskellStarter,"== Headline ==

Basic [[functional programming]] in [[Language:Haskell]].

== Characteristics ==

The contribution demonstrates basic style of [[functional programming]] in [[Language:Haskell]]. Only very basic language constructs are exercised. Companies are represented via [[tuple]]s over primitive data types. (No [[~algebraic data type]]s are used; [[type synonym]]s suffice.) Only flat companies are modeled, i.e., nested departments are not modeled. [[Pure function|Pure]], [[Recursion|recursive]] functions implement operations for totaling and cutting salaries by [[pattern matching]]. The types for companies readily implement read and show functions for [[closed serialization]].

== Illustration ==


<media url=""http://www.youtube.com/watch?v=6EI-dTWG0oU""/>

The data model relies on tuples for [[data composition]]:

<fragment url=""src/Main.hs/type/Company""/>
<fragment url=""src/Main.hs/type/Employee""/>

Basic types for [[string]]s and [[float]]s are leveraged for names, addresses, and salaries.

<fragment url=""src/Main.hs/type/Address""/>
<fragment url=""src/Main.hs/pattern/total""/>
<fragment url=""src/Main.hs/type/Salary""/>

A sample company looks like this:

<fragment url=""src/Main.hs/pattern/sampleCompany""/>

Features for functional requirements are implemented by families of functions on the company types. For instance, [[Feature:Total]] is implemented as follows:

<fragment url=""src/Main.hs/pattern/total""/>
<fragment url=""src/Main.hs/function/salaries""/>
<fragment url=""src/Main.hs/function/getSalaries""/>
<fragment url=""src/Main.hs/function/getSalary""/>

We may test these functions with the following [[function application]]:

<syntaxhighlight language=""haskell"">
total sampleCompany
</syntaxhighlight>

The function application evaluates to the following total:

<pre>
399747.0
</pre>

All the remaining functions are implemented in the same module:
<file url=""src/Main.hs""/>

== Relationships ==

In the interest of maintaining a very simple simple beginner's example, the present contribution is the only contribution which does not commit to modularization, packaging, unit testing. See [[Contribution:haskellEngineer]] for a modularized and packaged variation with also unit tests added.

== Architecture ==

The contribution only consists of a single module ""Main.hs"" which includes all the code as shown above.

== Usage ==

See a designated [https://github.com/101companies/101haskell/blob/master/contributions/haskellStarter/README.md README].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Flat company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Starter]]
* [[memberOf::Theme:Haskell introduction]]
* [[memberOf::Theme:Haskell data]]

",2013-06-12 14:57:46.326,2017-07-05 15:27:48.299701
Concept,Getter,"== Headline ==

Read the state (a specific attribute) of an object

== Discussion ==

Oftentimes, a getter is simply an accessor for a non-public field. However, getters may also bridge between internal and external state of an object. In some languages. getters are implemented as instance methods using a name convention. In other languages, there is a designated concept.

== Metadata ==

* [[instanceOf::Instance method]]
",2013-06-12 14:54:05.654,2017-07-04 13:44:42.661109
Concept,Guard,"== Headline ==

Constrain continuation of computation based on Boolean expression

== Illustration ==

The notion of guard is pretty general as it occurs in different ways in programming languages which is why we do not attempt a comprehensive description here. Instead, we explain guards in Haskell; they are helpful here for adding more control on pattern matching.

=== Guards in Haskell ===

Consider the following function for finding the minimum in a list:

<syntaxhighlight lang=""haskell"">
findmin (x:xs) = findmin' x xs
  where
    findmin' m [] = m
    findmin' m (y:ys) =
      if m < y
        then findmin' m ys
        else findmin' y ys
</syntaxhighlight>

Arguably, it may be preferable to decompose the second case for non-empty list into two cases: one for each branch of the if-then-else. We can guard the equations for the two cases accordingly.

<syntaxhighlight lang=""haskell"">
findmin (x:xs) = findmin' x xs
  where
    findmin' m [] = m
    findmin' m (y:ys) | m < y = findmin' m ys
    findmin' m (y:ys) | m >= y = findmin' y ys
</syntaxhighlight>

Arguably, the guard for the last equation is not needed because the equation would only be tried in a case where the condition must evidently hold. So we may want to simplify as follows.

<syntaxhighlight lang=""haskell"">
findmin (x:xs) = findmin' x xs
  where
    findmin' m [] = m
    findmin' m (y:ys) | m < y = findmin' m ys
    findmin' m (y:ys) = findmin' y ys
</syntaxhighlight>

Arguably, we do not want to use guards at all, as we may be even more concise (without guards) as follows.

<syntaxhighlight lang=""haskell"">
findmin (x:xs) = findmin' x xs
  where
    findmin' m [] = m
    findmin' m (y:ys) = findmin' (min m y) ys
</syntaxhighlight>

The guards of Haskell provide yet additional expressiveness that we omit here for brevity.

== Metadata ==

* [[instanceOf::Programming idiom]]
* [[memberOf::Vocabulary:Functional programming]]
* [[similarTo::http://en.wikipedia.org/wiki/Guard_(computer_science)]]
* [[relatesTo::https://wiki.haskell.org/Pattern_guard]]
",2013-06-12 14:54:06.285,2017-07-04 13:44:42.957117
Concept,Handbook,"== Headline ==

A type of reference work to provide ready reference

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Handbook]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:06.715,2017-07-04 13:44:42.974488
Concept,Factory,"== Headline ==

The instance that is used to delegate object creation

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Factory_method_pattern]]
* [[instanceOf::Software concept]]
* [[participantOf::Abstract factory pattern]]",2017-06-28 14:37:20.500377,2017-07-05 10:51:35.274526
Contribution,argoUML,"== Headline ==

Structural modeling in UML with [[Technology:ArgoUML]]

== Motivation ==

The class diagrams of this contribution can serve as a specification of the [[Feature:Hierarchical_company]]. Different models are exercised to favor either composition or generalization. In addition, methods for the features [[Feature:Total]] and [[Feature:Cut]] are indicated.

Here is the diagram for generalization:

[[media:https://raw.githubusercontent.com/101companies/101repo/master/contributions/argoUML/generalization.jpg]]

Here is the diagram for composition:

[[media:https://raw.githubusercontent.com/101companies/101repo/master/contributions/argoUML/composition.jpg]]

== Architecture ==

The contribution contains .zargos files with the actual models.

The class diagrams are also persisted as .pdf files.

== Usage ==

Open the .zargo files with ArgoUML, if necessary.

== Metadata ==

* [[implements::Feature:Hierarchical_company]]
* [[uses::Language:UML]]
* [[uses::Technology:ArgoUML]]
* [[memberOf::Theme:Starter]]
* [[developedBy::Contributor:rlaemmel]]
* [[instanceOf::Model]]

",2013-06-12 14:57:03.467,2017-07-05 15:25:30.436585
Concept,Haskell package,"== Headline ==

A distribution unit for [[Language:Haskell|]]
== Metadata ==

* [[memberOf::Vocabulary:Haskell]]
* [[relatesTo::Technology:Cabal]]
* [[relatesTo::Technology:HackageDB]]
* [[isA::Package]]
",2013-06-12 14:54:07.139,2017-07-04 15:26:12.628015
Concept,Haskell script,"== Headline ==

A [[file]] with Haskell [[code]]

== Synonyms ==

* Script

== Metadata ==

* [[memberOf::Vocabulary:Haskell]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:07.282,2017-07-04 13:44:43.014566
Concept,Human resources,"== Metadata ==

* [[instanceOf::Application domain]]

",2013-06-12 14:54:10.394,2017-07-04 13:44:43.373615
Concept,IDE Creation,"== Headline ==

Creation of an IDE to support editing

== Description ==

Creation of an IDE to better support editing of certain domain specific languages. An example for a contribution demonstrating this is [[Contribution:xtext]].

== Metadata ==

* [[memberOf::Vocabulary:MDE]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:11.662,2017-07-04 13:44:43.408801
Language,protobuf,"== Headline ==

Protocol Buffers - Google's data interchange format

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://code.google.com/p/protobuf/]]
* ",2013-06-12 15:00:43.219,2017-07-04 13:46:41.989266
Contributor,baharak,"",2014-07-04 07:58:28.166,2017-07-04 13:47:58.314724
Contributor,dsp-de,"",2014-07-09 12:49:15.139,2017-07-04 13:47:58.342725
Contributor,mastermaiknemo,"",2014-08-11 14:44:59.244,2017-07-04 13:47:59.772386
Concept,Data term,"== Metadata ==

[[isA::Concept]]",2014-06-24 15:19:57.73,2017-07-04 15:26:35.476526
Concept,Batch file,"== Headline ==

A script file for command-line processing

== Details ==

See also the concept of [[shell script]]s.

== Metadata ==
* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::http://en.wikipedia.org/wiki/Batch file]]
* [[instanceOf::Software concept]]
* [[relatesTo::Batch Sequential]]

",2013-06-12 14:53:22.923,2017-07-05 12:14:36.24808
Concept,Identity element,"== Headline ==

An identity element as in group theory

== Synonyms ==

* Identity
* Unit
* Neutral element

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Identity_element Identity element]]
* [[memberOf::Vocabulary:Programming theory]]
* [[memberOf::Vocabulary:Mathematics]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:12.489,2017-07-04 13:44:43.439779
Concept,Implementation,"== Headline ==

A realization of a [[software system]] or a [[software component|component]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Implementation]]
* [[memberOf::Vocabulary:Software engineering]]
* [[relatesTo::Specification]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:14.709,2017-07-04 13:44:43.725403
Concept,IO Monad,"== Headline ==

A [[Monad|monad]] for I/O operations

== Metadata ==

* [[isA::Monad]]",2013-06-12 14:54:11.884,2017-07-04 15:26:13.127453
Script,Language processing patterns,"== Headline ==

A lecture on the [[design patterns]] for [[language processing]] as part of the [[Course:Programming in Koblenz]]
== Material ==

<media url=""http://www.slideshare.net/rlaemmel/language-processing-patterns""/>
== Concepts ==

* [[Grammar]]
* [[Syntax]]
* [[Lexer]]
* [[Acceptor]]
* [[Parser]]
* [[Design pattern]]
* [[Lookahead]]
* [[Recursive descent parser]]
== Contributions ==

* [[Contribution:javaScanner]]
* [[Contribution:javaLexer]]
* [[Contribution:javaParser]]
== Metadata ==


* [[instanceOf::Course:Programming in Koblenz]]
* ",2013-06-12 15:00:56.133,2017-07-04 13:47:03.294041
Concept,Import,"== Headline ==

the description of external entities to be used in a given scope

== Details ==

The construct serves [[module]]-based software reuse controlled by [[import]]/[[export]] declarations.

The construct specifically enables the actual selection of external abstractions to be reused.

== Metadata ==

* [[instanceOf::Language construct]]
* [[memberOf::Vocabulary:Programming]]
",2013-06-12 14:54:15.618,2017-07-04 13:44:43.745279
Concept,Extensible Programming,"== Headline ==

Providing the capability to extend the programming language, compiler and runtime environment

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Extensible_programming]]
* [[instanceOf::Software concept]]",2017-06-28 14:49:12.528539,2017-07-05 12:18:17.626085
Concept,Impure function,"== Headline ==

an implemented function that computes the result with side effects on data

== Details ==

See the notion of [[pure function]] for comparison.

For instance, a method in [[OO programming]], with access to instance or static attributes, describes an impure function.

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:16.423,2017-07-04 13:44:43.7655
Concept,Lexical Token,"== Headline ==

A logical unit in a plain text identified by a [[Lexical analysis]]

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Lexical_analysis#Token]]
* [[instanceOf::Software concept]]",2017-06-28 14:49:21.230359,2017-07-05 12:21:35.746219
Concept,Loop,"== Headline ==

the description of repeated execution in a program

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Control_flow#Loops]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:38.458,2017-07-04 13:44:46.051665
Concept,Intent,"== Headline ==

An abstract description of an operation to be performed

== Metadata ==

* [[instanceOf::Android_term]]
* [[sameAs::http://developer.android.com/reference/android/content/Intent.html]]
* [[relatesTo::http://developer.android.com/guide/components/intents-filters.html]]
",2013-06-12 14:54:22.157,2017-07-04 13:44:44.422501
Concept,Inter-type declaration,"== Intent ==

retroactive declaration of contributions to a type declaration

== Metadata ==

* [[instanceOf::Declaration]]
* [[sameAs::http://www.eclipse.org/aspectj/doc/released/progguide/language-interType.html]]
",2013-06-12 14:54:22.435,2017-07-04 13:44:44.434373
Concept,Invariant,"== Headline ==

A desirable or undesirable program property

== Illustration ==

See the [[abstract data type]] [[Stack]] for illustration.

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[sameAs::http://en.wikipedia.org/wiki/Property]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:24.121,2017-07-04 13:44:44.504447
Contribution,antlrTrees,"== Headline ==

Parsing and tree walking with [[Technology:ANTLR|]]

== Characteristics ==

Both concrete and abstract syntax is defined for companies.
To this end, we use an ANTLR-based parser description.
The resulting context-free parsing implements [[Feature:Parsing]].
The abstract syntax is based on ANTLR's homogeneous tree format.
A constructed tree can be walked with an ANTLR tree grammar to total all salaries or to cut salaries in half.

== Illustration ==

The data model is implemented as plain textual files:

<fragment url=""inputs/sample.Company""/>

A Parser for [[Feature:Company]] will be generated by [[Technology:ANTLR]] using src/main/antlr/Company.g:

A Compony is defined by:

<syntaxhighlight lang=""antlr"">
company :
  'company' STRING '{' department* '}'
  -> ^(COMPANY STRING department*)
  ;

department :
  'department' name=STRING '{'
    manager
    ('employee' employee)*
    department*
  '}'
  -> ^(DEPT $name manager employee* department*)
  ;

manager :
  'manager' employee
  -> ^(MANAGER employee)
  ;

employee :
  n=STRING '{'
    'address' a=STRING
    'salary' s=FLOAT
  '}'
  -> ^(EMPLOYEE $n $a $s)
  ;

STRING  :   '""' (~'""')* '""';
FLOAT   :   ('0'..'9')+ ('.' ('0'..'9')+)?;
WS      :   (' '|'\r'? '\n'|'\t')+ {skip();};
</syntaxhighlight>

[[Feature:Parsing]] is implemented using the generated Parser:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented using classes generated by ANTLR tree grammars (see TotalCompany.g and CutCompany.g):

<syntaxhighlight lang=""antlr"">
tree grammar TotalCompany;

options {
  tokenVocab=Company;
  ASTLabelType=CommonTree;
}

@header {
package org.softlang.company.antlr;
}

@members {

public double total = 0;

}

company :
  ^(COMPANY STRING dept*)
  ;

dept :
  ^(DEPT STRING manager employee* dept*)
  ;

manager :
  ^(MANAGER employee)
  ;

employee :
  ^(EMPLOYEE STRING STRING FLOAT)
  { total += Double.parseDouble($FLOAT.text); }
  ;
</syntaxhighlight>

<syntaxhighlight lang=""antlr"">
tree grammar CutCompany;

options {
  tokenVocab=Company;
  ASTLabelType=CommonTree;
  output = AST;
  filter=true;
  backtrack=true;
}

@header {
package org.softlang.company.antlr;
}

// START: strategy
topdown : employee;
// END: strategy

employee :
  ^(EMPLOYEE STRING STRING s=FLOAT)
  -> ^(EMPLOYEE STRING STRING FLOAT[Double.toString(Double.parseDouble($s.text) / 2.0d)])
  ;
</syntaxhighlight>

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut""/>

Test cases are implemented for all [[Namespace:Feature]]s. There is also an invalid input:

<fragment url=""inputs/nonSample.Company""/>

== Relationships ==

This contribution shows [[Feature:Total]] and [[Feature:Cut]] with tree walking using [[Technology:ANTLR]] and [[Language:Java]].

For a ANTLR4 version with Listener pattern see [[Contribution:antlr4ParseTreeListener]].

For a ANTLR4 version with Visitor pattern see [[Contribution:antlr4ParseTreeListener]].

For plain syntax checking see [[Contribution:antlrAcceptor]].

For a basic example of lexing/tokenization see [[Contribution:antlrLexer]].

For an implementation of [[Feature:Parsing]] with semantic actions see [[Contribution:antlrParser]].

For [[Object-Text mapping]] with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/antlr contains grammar files for [[Technology:ANTLR]].
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.antlr for [[Technology:ANTLR]]-generated Java classes (post build).
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:57:03.198,2017-07-05 15:25:30.151641
Language,Lambda calculus,"== Headline ==

A formal system for expressing computation by way of variable binding and substitution

== Details ==

Obviously, one may argue whether the lambda calculus is a software language.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Lambda calculus]]
* [[memberOf::Vocabulary:Mathematics]]

",2013-06-12 14:54:26.97,2017-07-04 13:44:44.715077
Concept,Lambdaware,"== Intent ==

a technological space focused on functions and [[functional programming]]

== Metadata ==

* [[instanceOf::Space]]

",2013-06-12 14:54:27.214,2017-07-04 13:44:44.726036
Concept,Linear search,"== Headline ==

Solve the [[search problem]] by iterating over the input list

== Description ==

Consider the [[search problem]], i.e., the problem of determining whether a given value occurs in a given list. This problem is an [[algorithmic problem]], i.e., it can be solved by an [[algorithm]], e.g., by linear search.

Semi-formally, linear search can be described by an algorithm as follows:

* Given is a list ''l'' and a value ''v'' of the element type of ''l''.
* Perform the following steps to search ''v'' in ''l'':
** Initialize an index variable ''i'' to 0 (to refer to the first element of ''l'', if any).
** Repeat the following steps until a result is returned.
*** Return ''False'', if ''i'' equals the length of ''l''.
*** Return ''True'', if ''l'' stores ''v'' at the index ''i''.
*** Increment ''i''.

Please note that this formulation also expresses that the element type must admit comparison for equality.

== Illustration ==

=== Linear search in Haskell ===

<syntaxhighlight lang=""haskell>
-- Polymorphic linear search
search :: Eq a => [a] -> a -> Bool
search [] _ = False
search (x:xs) y = x==y || search xs y
</syntaxhighlight>

The type of the ''search'' function is polymorphic in that admits arbitrary element types for as long as equality (""Eq"") is supported for the type.

The implemented search function can be applied as follows:

<syntaxhighlight lang=""haskell>
-- Illustrate linear search
main = do
  let input = [2,4,3,1,4]
  print $ search input 1 -- True
  print $ search input 5 -- False
</syntaxhighlight>

== Citation ==

(http://en.wikipedia.org/wiki/Linear_search, 21 April 2013 with Knuth's ""The Art of Computer Programming"" credited for citation)

In computer science, linear search or sequential search is a method for finding a particular value in a list, that consists of checking every one of its elements, one at a time and in sequence, until the desired one is found.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Linear_search]]
* [[instanceOf::Search algorithm]]
* [[relatesTo::Search problem]]
* [[relatesTo::Binary search]]
",2013-06-12 14:54:32.921,2017-07-04 13:44:45.397436
Concept,List comprehension,"== Headline ==

A language construct for list processing

== Illustration ==

=== Mapping over a list ===

Suppose you want to map over a list of numbers to increment each number. The following list comprehension implements this requirement:

<syntaxhighlight lang=""haskell"">
> [ x+1 | x <- [1,2,3,4,5] ]
[2,3,4,5,6]
</syntaxhighlight>

The expression after the bar ""|"" is the ''generator'' for elements ''x''. The expression before the bar computes the element of the resulting list from the generated elements. The [[Map function]] actually models such element-wise mapping. Thus, the list comprehension could also be expressed as follows:

<syntaxhighlight lang=""haskell"">
> map (\x -> x + 1) [1,2,3,4,5]
[2,3,4,5,6]
</syntaxhighlight>

=== Filtering a list ===

Suppose you want to filter a list of numbers to only keep odd numbers. The following list comprehension implements this requirement:

<syntaxhighlight lang=""haskell"">
> [ x | x <- [1,2,3,4,5], odd x ]
[1,3,5]
</syntaxhighlight>

There are two expressions after the bar. The first one is a ''generator'' for elements ''x'', the second is a ''guard'' to impose a condition of generated elements. The [[Filter function]] actually models filtering according to a guard (i.e., a predicate). Thus, the list comprehension could also be expressed as follows:

<syntaxhighlight lang=""haskell"">
> filter odd [1,2,3,4,5]
[1,3,5]
</syntaxhighlight>

=== Multiple generators and guards ===

List comprehensions can use multiple generators and guards, the scope of the generators extends to the subsequent generators and guards. For instance, we may collect all combinations of pairs of elements drawn from two separate lists as follows:

<syntaxhighlight lang=""haskell"">
> [ (x,y) | x <- [1,2,3], y <- ['a','b'] ]
[(1,'a'),(1,'b'),(2,'a'),(2,'b'),(3,'a'),(3,'b')]
</syntaxhighlight>

Let us compute the sum of all possible pairs with elements drawn from one list, where a guard is applied to reject pairs of identical elements:

<syntaxhighlight lang=""haskell"">
> let sample = [1,2,3,4,5]
e> [ x + y | x <- sample, y <- sample, x /= y ]
[3,4,5,6,3,5,6,7,4,5,7,8,5,6,7,9,6,7,8,9]
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Language construct]]

",2013-06-12 14:54:35.215,2017-07-04 13:44:45.708832
Contributor,burgua,"",2014-06-30 12:17:19.723,2017-07-04 13:47:58.125869
Contributor,tschmorleiz,"",2014-06-30 12:47:08.585,2017-07-04 13:47:58.129196
Concept,Macro,"== Headline ==

A typically textual pattern that describes replacement

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Macro_(computer_science)]]
* [[instanceOf::Software concept]]",2017-06-28 14:51:58.331059,2017-07-05 12:24:27.812157
Concept,List processing,"== Headline ==

Processing [[list]]s using appropriate idioms

== Metadata ==

* [[sameAs::http://en.wikibooks.org/wiki/Haskell/List_processing]]
* [[memberOf::Vocabulary:Functional programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:35.971,2017-07-04 13:44:45.811265
Concept,List type,"== Headline ==

A [[data type]] of [[list]]s for some element [[type]]

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/List]]
* [[instanceOf::Data type]]
* [[memberOf::Vocabulary:Data structure]]

      ",2013-06-12 14:54:36.205,2017-07-04 13:44:45.828776
Technology,JSP,"== Intent ==

a [[template engine]] for dynamically generated [[Language:HTML]]/[[Language:XML]] pages

== Description ==

JavaServer Pages (JSP) offer the possibility to dynamically generate web pages based on [[Language:HTML]] and [[Language:XML]] in combination with [[Language:Java]] [[Technology:Servlet API|Servlets]] <cite>Wiki2012JSP</cite>.

== Metadata ==
* [[instanceOf::Template engine]]
* [[sameAs::http://en.wikipedia.org/wiki/JavaServer_Pages]]
* ",2013-06-12 15:01:34.166,2017-07-04 13:47:29.78765
Concept,Type-preserving transformation,"== Headline ==

A transformation with the type of the input and output being the same

== Details ==

In the context of [[model-driven engineering]], type-preserving transformations also go by the name of [[endogenous model transformation]]s.

== Illustration ==

Diverse examples of type-preserving transformations:
* A program transformation for optimization.
* An XML transformation that only affects primitive values of selected elements.
* A traversal over an object graph (by a visitor or otherwise) that mutates objects.
* A model transformation where the metamodels of the input and output models are the same.

In the context of the 101companies System, [[Feature:Cut]] corresponds to a type-preserving transformation.

== Metadata ==

* [[isA::Transformation]]
* [[memberOf::Vocabulary:Computing]]
",2013-06-12 14:56:35.824,2017-07-04 15:26:28.794431
Concept,Language Embedding,"== Headline ==

Embedding of one language into another language

== Metadata ==

* [[sameAs::http://people.cs.aau.dk/~normark/prog3-03/html/notes/languages_themes-embedding-sec.html]]
* [[relatesTo::https://link.springer.com/chapter/10.1007%2F11877028_10]]
* [[relatesTo::Property:embeds]]
* [[instanceOf::Software concept]]",2017-06-28 14:53:53.599889,2017-07-05 12:27:47.020218
Concept,Local_scope,"== Headline ==

Validity of program identifiers in only the declaring scope

== Illustration ==

Local scope exists in many forms for most programming languages.

Consider the following implementation of the factorial function in [[Language:Java]]:

<fragment url=""Program.java/class/Program/method/factorial""/>

Several kinds of local scope are present. The parameter of the method, ''n'', has local scope with the entire method corresponding to the scope. The local variable ''result'' has that same local scope, but it is declared differently. The index variable ''i'' is declared in the for loop and its scope is indeed limited to the for loop.

Consider the following [[Language:Haskell]] function for splitting a list into two halves (+/-1 in the case of a list of odd length):

<fragment url=""Main.hs/function/split""/>

Local scope is present again in several ways. First, the argument ''xs'' of the ''split'' function is locally bound in the given equation; specifically it can be used on the right-hand side of the equation. Further, the ''split'' function carries a ""where"" block which is used to define a local binding ''len''. Again, ''len'' can only be used within the scope of ''split''. It is also worth noting that ''len'' makes good use of the argument ''xs'' which has been bound by the hosting function equation for ''split''.

The use of local definitions like ''len'' greatly improves clarity of programming. If we were to avoid the local binding, then the ''split'' function would need to duplicate some code as follows:

<fragment url=""Main.hs/function/split'""/>

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::http://en.wikipedia.org/wiki/Scope_(computer_science)]]
* [[relatesTo::http://en.wikipedia.org/wiki/Local_variable]]
",2013-06-12 14:54:36.805,2017-07-04 13:44:45.954474
Concept,Many-to-many,"== Headline ==

The many-to-many cardinality of associations

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Many-to-many_(data_model)]]
* [[memberOf::Vocabulary:Data modeling]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:40.79,2017-07-04 13:44:46.228699
Concept,Mean,"== Headline ==

The arithmetic mean as used in mathematics and statistics

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Arithmetic_mean]]
* [[memberOf::Vocabulary:Mathematics]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:45.77,2017-07-04 13:44:46.785923
Concept,Median,"== Headline ==

The value in the ""middle"" of a sorted sequence

== Citation ==

(http://en.wikipedia.org/wiki/Median, 21 April 2013)

In statistics and probability theory, the median is the numerical value separating the higher half of a data sample, a population, or a probability distribution, from the lower half. The median of a finite list of numbers can be found by arranging all the observations from lowest value to highest value and picking the middle one (eg, the median of {3, 5, 9} is 5). If there is an even number of observations, then there is no single middle value; the median is then usually defined to be the mean of the two middle values,[...] which corresponds to interpreting the median as the fully trimmed mid-range.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Median]]
* [[memberOf::Vocabulary:Mathematics]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:46.357,2017-07-04 13:44:46.812342
Language,Java,"== Headline ==

An [[OO programming language]]

== Illustration ==

Let's show ""Hello World"" for Java.

<file url='HelloWorld.java'/>

== Metadata ==

* [[instanceOf::OO programming language]]
* [[facilitates::OO programming]]
* [[sameAs::https://en.wikipedia.org/wiki/Java_(programming_language)']]
* [[similarTo::https://java.com']]
* [[relatesTo::Technology:Java platform]]
* [[relatesTo::Technology:Java SE]]
",2013-06-12 15:00:30.086,2017-07-04 13:46:41.320551
Concept,Projectional Editing,"== Headline ==

A way of modifying a model indirectly based on it's projection

== Metadata ==

* [[sameAs::https://martinfowler.com/bliki/ProjectionalEditing.html]]
* [[instanceOf::Software concept]]",2017-06-28 14:54:55.123674,2017-07-05 12:29:02.006656
Contribution,atlPluginUsage,"== Headline ==

[[Model to Model transformation]]s with [[ATL plugin]]s

== Motivation ==

[[Model to Model transformation]]s with [[ATL plugin]]s are exercised in this implementation. The main purpose of this implementation is to execute two [[ATL plugin]]s, [[Contribution:atlCutPlugin]] and [[Contribution:atlTotalPlugin]].

== Architecture ==

* The transformations are provided by the plugins
* The ""Metamodels"" folder contains the two [[metamodel]]s used by the plugins
* The  ""Models"" folder contains the [[model]] that is transformed by the plugins
* RunTransfoPlugins.java contains the code for executing the two transformations

== Usage ==
A Eclipse version with an installed ATL plugin is needed to execute the transformations (e.g. [http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/junor the EMF version] with the installed ATL Framework).
Furthermore, this contributions relies on two other contributions, which are plugins that contain the actual transformations. Those contributions are [[Contribution:atlCutPlugin]] and [[Contribution:atlTotalPlugin]].

Steps:
* Import all three contributions (this one,  [[Contribution:atlCutPlugin]] and [[Contribution:atlTotalPlugin]]) into Eclpise
* This contribution will provide an executable Java file called ""RunTransfoPlugins.java""
* Right click on that Java file and select ""Run as"" -> ""Java Application""

Comments:
* The results of the transformations will be in the Models/Plugins folder
* A refresh of the Eclipse Project (Right click, then select ""Refresh"") might be needed before Eclipse shows the results

== Metadata ==
* [[uses::Language:ATL]]
* [[uses::Language:Ecore]]
* [[uses::Language:Java]]
* [[uses::Language:XMI]]
* [[uses::Technology:Eclipse]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:Hugo Brunelière]]
* [[reviewedBy::Contributor:rlaemmel]]
* [[reviewedBy::Contributor:martinleinberger]]
* [[memberOf::Theme:MDE]]

",2013-06-12 14:57:05.327,2017-07-05 15:25:33.71276
Technology,CouchDB,"== Headline ==

A document-oriented [[NoSQL]] database by Apache

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/CouchDB]]
* [[instanceOf::Document-oriented database]]",2017-07-05 13:07:37.644546,2017-07-05 13:10:33.996415
Contribution,atlTotalPlugin,"== Headline ==

[[Model to Model transformation]]s with an [[ATL plugin]]

== Motivation ==
[[Model to Model transformation]]s with an [[ATL plugin]] is exercised in this implementation. Since a [[ATL plugin]] is usually a single [[transformation]], the only feature that is implemented by this contribution is the Total feature, which is an [[exogenous model transformation]].

== Illustration ==

This contribution is mostly autogenerated by [[Language:ATL]] and [[Technology:Eclipse]]. The only manual component is the actual transformation, which is a standard [[Language:ATL]] [[transformation]] which can also be found in [[Contribution:atl]]. The [[metamodel]] that is used by the transformation must be provided by the implementation that uses the plugin.

== Architecture ==

* The transformation can be found in the ""ATL TotalPlugin/files"" subfolder

== Usage ==

This implementation is not meant to be executed alone. It is used by [[Contribution:atlPluginUsage]]

== Metadata ==

* [[uses::Language:ATL]]
* [[uses::Language:Java]]
* [[uses::Technology:Eclipse]]
* [[implements::Feature:Total]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:Hugo Brunelière]]
* [[reviewedBy::Contributor:rlaemmel]]
* [[reviewedBy::Contributor:martinleinberger]]
* [[memberOf::Theme:MDE]]

",2013-06-12 14:57:05.61,2017-07-05 15:25:34.099415
Concept,Unparsing,"== Headline ==

Translate [[syntax tree]]s into text or another representation

== Illustration ==

See the related notion of [[pretty printing]] for an illustration.

== Relationships ==

* [[Unparsing]] is performed by an [[unparser]].
* [[Unparsing]] is the opposite of [[parsing]].
* [[Unparsing]] is similar to [[pretty printing]].

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Unparser]]
* [[memberOf::Vocabulary:Software language engineering]]
* [[isA::Concept]]

",2013-06-12 14:56:47.852,2017-07-04 15:26:30.678105
Concept,Constructor component,"== Headline ==

A component of a [[data constructor]]

== Illustration ==

See the illustration for [[data constructor]]s.

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[isA::Concept]]

",2013-06-12 14:53:34.452,2017-07-04 15:26:05.103932
Contribution,basicLb,"== Headline ==

A basic [[Technology:LogicBlox]]-based implementation

== Motivation ==

This implementation is a good starting point for demonstrating [[Technology:LogicBlox]]. The most basic structural and behavioral features are implemented. Other [[Technology:LogicBlox]]-based implementations may start from here. There is an even simpler implementation,  [[Contribution:trivialLb]], from which the present implementation is derived as a straightforward extension. That is, some simplifying restrictions on data modeling are lifted: absence of managers and limitation to a simple company.

== Architecture ==

This implementation inherits its architecture from [[Contribution:trivialLb]].

== Usage ==

Tested with [[Technology:LogicBlox]] 3.7.

Run ""make"" for a self-testing illustration.

== Metadata ==

* [[uses::Language:DatalogLB]]
* [[uses::Technology:LogicBlox]]
* [[uses::Technology:Make]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:rlaemmel]]
* [[developedBy::Contributor:Thiago Tonelli Bartolomei]]
* [[memberOf::Theme:Datalog basics]]
",2013-06-12 14:57:05.983,2017-07-05 15:25:34.431211
Contribution,clojureRefs,"== Headline ==

A [[Language:Clojure|Clojure]]-based implementation that uses [[Refs|transactional references]]

== Motivation ==

[[Language:Clojure|Clojure]] provides a number of interesting approaches to
the development with [[concurrency]]. One of these approaches is the use of
programmable [[transactions]], analogous to [[database]] [[transactions]].
This functionality is implemented by means of transaction-specific functions
and references. To maintain a consistent memory state,
[[Language:Clojure|Clojure]] relies on a [[Technology:STM|STM]]. This project
is based on the implementation [[Contribution:clojure]] and changes it
so that [[Refs]] and [[transactions]] are used.

== Illustration ==

Changes to [[Refs]] by a transformation like [[Feature:Cut]] have to be
encapsulated into a [[transaction]]. In [[Language:Clojure|Clojure]] the
function ''dosync'' starts such a transaction allowing to alter [[Refs]] by
an update function.

<syntaxhighlight language=""clojure"">
(defn cutCompany [c]
    (dosync
        ;; alter ref function
        (alter c #(update-in % [:depts] (partial map cutDept))))
    ;; returning changed ref
    c)
</syntaxhighlight>

== Architecture ==

* ''company.clj'' definitions of the companies structure using clojure's defrecord
* ''scenarios.clj'' functionalities: [[Feature:Cut]], [[Feature:Total]]
* ''meganalysis.clj'' a sample company (i.e. a [[Refs|Ref]] to a [[Feature:Hierarchical company]])

== Usage ==

You need to install the [[Technology:Eclipse|Eclipse]] plugin [[Technology:CounterClockwise|CounterClockwise]].
Update Site: [http://ccw.cgrand.net/updatesite]

Then open ''meganalysis.clj'', hit ""run"" and excute the function you like:
* ''(totalCompany meganalysis)''
* ''(cutCompany meganalysis)''

The implementation has been tested with Eclipse version 3.7 and [[Technology:CounterClockwise]]  Eclipse plugin (Version 0.3.0).

== Metadata ==

* [[uses::Language:Clojure]]
* [[uses::Technology:Eclipse]]
* [[uses::Technology:CounterClockwise]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Task parallelism]]
* [[developedBy::Contributor:jbaltzer]]
* [[developedBy::Contributor:tschmorleiz]]

",2013-06-12 14:57:07.008,2017-07-05 15:25:35.274796
Concept,Metamodel,"== Headline ==

A [[model]] the extension (semantics) of which is a set of [[model]]s

== Metadata ==

* [[relatesTo:Metamodeling]]
* [[memberOf::Vocabulary:MDE]]
",2013-06-12 14:54:50.107,2017-07-04 13:44:47.265647
Concept,Type definition,"== Headline ==

the definition of a [[concrete data type]]

== Details ==

Type definitions are manifestations of some sort of [[abstraction mechanism]] for types.

The specifics of type definition depend on the [[programming language]] at hand.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:56:38.889,2017-07-04 15:26:29.635396
Concept,Type inference,"== Headline ==

The automatic deduction of the type of a program fragment

== Illustration ==

A [[programming language]] implementation may perform type inference to compensate for the lack of explicitly declared [[type signature]]s such that [[type checking]] is still feasible. Typically, [[type inference]] happens at compile time. Consider, for example, the following function for negating [[Boolean]]s in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
not True = False
not False = True
</syntaxhighlight>

The [[Language:Haskell]] [[type system]] is perfectly confident to infer, even without any [[type signature]] at hand, that ''not'' is of the following type:

<syntaxhighlight lang=""haskell"">
not :: Bool -> Bool
</syntaxhighlight>

Type inference becomes enormously more powerful, once [[higher-order function]]s are taken into account.

== Metadata ==

* [[memberOf::Vocabulary:Programming language]]
* [[sameAs::http://en.wikipedia.org/wiki/Type_inference]]
* [[isA::Concept]]

",2013-06-12 14:56:39.545,2017-07-04 15:26:29.813742
Concept,Document-oriented database,"== Headline ==

A document-oriented database is a form of storage software that stores semi-structured data.

== Description ==

A document-oriented database stores semi-structured data in the form of documents. A document can be seen as record-like data, encoded in some standard format like [[Language:JSON]], [[Language:BSON]] or [[Language:XML]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Document-oriented database]]
* [[relatesTo::http://www.mongodb.org]]
* [[relatesTo::http://couchdb.apache.org]]",2013-06-12 15:01:11.221,2017-07-05 13:06:10.361894
Concept,Metaprogramming,"== Headline ==

The activity of writing [[metaprogram]]s and related activities

== Details ==

Metaprogramming is to [[metaprogram]]s what [[programming]] is to [[program]]s.
The programs manipulated by metaprograms are also referred to as [[object program]]s.
The representation of object programs in metaprograms is also referred to as [[object-program representation]].

== Illustration ==

See the concept of [[metaprogram]]s for an illustration.

== Metadata ==

* [[relatesTo::metaprogram]]
* [[relatesTo::object program]]
* [[relatesTo::object-program representation]]
* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Metaprogramming]]
* [[sameAs::http://en.wikipedia.org/wiki/Metaprogramming]]

",2013-06-12 14:54:50.77,2017-07-04 13:44:47.394259
Concept,Minification,"== Headline ==

The process of minimizing source code in a semantics-preserving manner

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Minification_(programming)]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:51.352,2017-07-04 13:44:47.426557
Concept,Modular programming,"== Headline ==

A [[programming]] technique aiming at [[separation of concerns]] in [[implementation]]s

== Illustration ==

Consider the ([[Language:Haskell]]-based) [[Contribution:haskellEngineer]] which puts to work modular programming indeed. In fact, the contribution was obtained from another contribution, i.e., [[Contribution:haskellStarter]], by [[modularization]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Modular_programming]]
* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::Modularity]]
* [[relatesTo::Modularization]]
* [[relatesTo::Separation of concerns]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:55.514,2017-07-04 13:44:47.558273
Concept,Modularity,"== Headline ==

A property of [[software design]]s to be based on separate and recombinable [[software component|components]]

== Illustration ==

See the related terms [[modular programming]] and [[modularity]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Modularity]]
* [[memberOf::Vocabulary:Software engineering]]
* [[relatesTo::Separation of concerns]]
* [[relatesTo::Modularization]]
* [[relatesTo::Modular programming]]
* [[relatesTo::Separation of concerns]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:55.762,2017-07-04 13:44:47.590584
Contributor,todeslord,"",2014-07-29 10:10:28.079,2017-07-04 13:47:59.152587
Technology,MongoDB,"== Headline ==

MongoDB is an open-source [[Document-oriented database]].

== Description ==

MongoDB is a database which holds documents in the JSON-like [[Language:BSON]] format.
A single database may consist of several collections in which documents are organized.

To query a database collection, [[Language:BSON]] objects are passed which are matched against collection entries. Certain object keys may also have a special use as operators. A typical query may look like this:

<syntaxhighlight lang=""javascript"">
> db.employees.find({""salary"" : {""$lt"" : 2000}});
</syntaxhighlight>

MongoDB also realizes [[Technology:Data Aggregation]] using an internal MapReduce implementation based on [[Language:JavaScript]]. This works on collection level by passing JavaScript functions for map and reduce steps to the database.

A simple example of aggregating statistical data may be the counting of tags attributed to a blog post or product in a database collection. If the collection contains documents of the form

<syntaxhighlight lang=""javascript"">
{..., tags: [""foo"", ""bar"", ...], ...}
</syntaxhighlight>

A map function that emits a count for each tag might look like this:

<syntaxhighlight lang=""javascript"">
> var mapfun = function() {
  this.tags.forEach(function(tag) {
    this.emit(tag, {""count"" : 1});
  });
}
</syntaxhighlight>

And a corresponding reduce function that emits the summed up tags will look like this:

<syntaxhighlight lang=""javascript"">
> var reducefun = function(key, values) {
  var total = 0;
  values.forEach(function(value) {
    total += value.count;
  });
  return total;
}
</syntaxhighlight>

To run everything a MapReduce query is formulated:

<syntaxhighlight lang=""javascript"">
> db.blogposts.mapReduce(mapfun, reducefun {""out"" : ""output""});
</syntaxhighlight>

This will return an object containing data about the processed request and save all results to the new collection ""output"".

== Spaces ==

* [[Nonrelationalware]]

== Metadata ==
* [[instanceOf::Document-oriented database]]
* [[sameAs::http://www.mongodb.org/]]",2013-06-12 15:01:47.031,2017-07-05 13:06:55.192937
Contribution,csharp,"== Headline ==

Basics of programming in [[Language:CSharp|C#]] and [[Technology:.NET|]]

== Motivation ==

Basic style of [[OO programming]] is exercised. The C# type system is used to create an in-memory representation, in fact, an [[object model]]  for companies, departments, and employees. There is also an
extra base class for persons from which employees are derived, thereby illustrating [[class inheritance]]. Operations on companies are implemented as .  XML-based serialization is immediately available for all public [[Technology:.NET]] classes.

== Architecture ==

C# object-oriented representation of 101companies model is located in
the ''CompanyModel folder''. It contains classes with required
properties and methods (features implementations).

''Tests'' folder contains:
* ''FeaturesTest'' class which covers test cases for the features: [[:Feature:Total]], [[:Feature:Cut]], [[:Feature:Depth]].
* ''SerializationTests'' class which covers test cases for de-/serialization.

Also, helpers for serialization and building the in-memory model for the meganalysis company are implemented.

== Usage ==

[[Technology:Visual Studio]] 2010 should be used to open a project
file. The project itself is a class-library and compiles into a
DLL. To run a project you must execute at least one unit test (or all
at once). The Nunit GUI could be used for executing the unit tests
conveniently.

The project has been tested with:
* C# Programming language used for all code (Version 4.0)
* .NET framework used to execute compiled code (Version 4.0)
* NUnit testing framework used for testing (Version 2.5)
* Visual Studio optional IDE (Version 2010)

== Metadata ==

* [[uses::Language:CSharp]] (C#): Programming language used for all code (Version 4.0)
* [[uses::Technology:csc.exe]]: C# compiler (Version 4.0)
* [[uses::Technology:.NET]]: framework used to execute compiled code (Version 4.0)
* [[uses::Technology:NUnit]]: unit testing framework used for testing (Version 2.5)
* [[uses::Technology:Visual Studio]]: optional IDE (Version 2010)
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:avaranovich]]

",2013-06-12 14:57:08.263,2017-07-05 15:25:35.940665
Concept,Nonrelationalware,"== Intent ==

A technological space focused on non-relational databases

== Metadata ==

* [[instanceOf::Space]]
",2013-06-12 14:55:03.416,2017-07-04 13:44:53.05809
Concept,OLAP,"== Headline ==

An approach to answer multi-dimensional analytical queries

== Details ==

OLAP stands for Online analytical processing.

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Online_analytical_processing]]
* [[instanceOf::Concept]]

",2013-06-12 14:55:04.307,2017-07-04 13:44:53.075198
Contributor,Mpaul138,"",2014-08-15 16:11:23.502,2017-07-04 13:48:00.219498
Contribution,haskellDB,"== Headline ==

Schema-aware [[database programming]] with [[Technology:HaskellDB]]
== Motivation ==

The implementation demonstrates schema-aware [[database programming]] in  [[Language:Haskell]] with [[Technology:HaskellDB]]. That is, the [[database schema]] of a [[database]] for companies is mapped to Haskell types. Database queries are expressed as Haskell functions on top of Haskell types that are derived by [[Technology:DBDirect]], which is part of [[Technology:HaskellDB]]. The functions leverage HaskellDB's library for [[relational algebra]] and other [[CRUD]] expressiveness. For comparison, see [[Contribution:hdbc]] for a demonstration of ''schema-unaware'' database programming in Haskell where database queries are expressed in [[Language:SQL]] whose execution is embedded into Haskell. [[Technology:DBDirect]] derives one module per database table. These modules are the basis for accessing the database within the Haskell program in a schema-aware manner. For instance, operations for totaling and cutting salaries are implemented with the module for employees and while leveraging combinators for projection, selection, aggregation, and renaming. With the use of relational algebra and library functions for other CRUD expressiveness, all operations are effectively independent of the underlying [[DBMS]] <cite>bringert2004student</cite>. The connection to the underlining [[Technology:MySQL]] database is achieved by means of a ""HaskellDB-[[Technology:HDBC]]-[[Technology:ODBC]]"" back-end.
== Illustration ==

=== Connecting to the database ===

We provide a function to connect to a database and execute an action:

<syntaxhighlight lang=""haskell"" source=""haskellDB/MyConnection.hs"">
execute :: (Database -> IO a) -> IO a
execute = connect driver conf
  where
    conf = [ (""Driver"",""MySQL ODBC 5.1 Driver"")
           , (""Port"",""3306"")
           , (""Server"", ""localhost"")
           , (""User"", ""root"")
           , (""Database"", ""101companies"") ]
</syntaxhighlight>

We use <syntaxhighlight lang=""haskell"" enclose=""none"">connect</syntaxhighlight> and <syntaxhighlight lang=""haskell"" enclose=""none"">driver</syntaxhighlight>, which are both provided by the HDBC-ODBC back-end.
By looking at the return type of the function one can see that any database function of type <syntaxhighlight lang=""haskell"" enclose=""none"">Database -> IO a</syntaxhighlight> can be applied to <syntaxhighlight lang=""haskell"" enclose=""none"">execute</syntaxhighlight> resulting in the specified IO action and possibly a result of type <syntaxhighlight lang=""haskell"" enclose=""none"">a</syntaxhighlight>. By encapsulating the connection process like this we achieve complete independence from the underling database implementation for all queries and statements.

=== DBDirect ===

We use the DBDirect command <syntaxhighlight lang=""make"" enclose=""none"">dbdirect-hdbc-odbc</syntaxhighlight> (see the usage section for the complete command). This command generates a module describing the database by naming tables and fields. Compiling this module with GHC creates one module per table, each module holding actual variables for tables and fields. These variables are the basis for the following totaling query.

=== Totaling ===

We import the description modules for the companies and employees tables:

<syntaxhighlight lang=""haskell"" source=""haskellDB/Total.hs"">
import qualified DBDesc.Employee as E
import qualified DBDesc.Company as C
</syntaxhighlight>

We define a special field for storing the sum of all salaries:

<syntaxhighlight lang=""haskell"" source=""haskellDB/Total.hs"">
data Ttl = Ttl

instance FieldTag Ttl where fieldName   = ""ttl""

ttl :: Attr Ttl Double
ttl = mkAttr Ttl
</syntaxhighlight>

We declare <syntaxhighlight lang=""haskell"" enclose=""none"">Ttl</syntaxhighlight> to be an instance of the <syntaxhighlight lang=""haskell"" enclose=""none"">FieldTag</syntaxhighlight> class by specifying what the name of the field should be. We use this field and HaskellDB's <syntaxhighlight lang=""haskell"" enclose=""none"">mkAttr</syntaxhighlight> to define an attribute <syntaxhighlight lang=""haskell"" enclose=""none"">ttl</syntaxhighlight> for holding a <syntaxhighlight lang=""haskell"" enclose=""none"">Double</syntaxhighlight> value.
The actual total query is defined as follows:

<syntaxhighlight lang=""haskell"" source=""haskellDB/Total.hs"">
total :: String -> Query (Rel (RecCons Ttl (Expr Double) RecNil))
total cname = do
  es <- table E.employee
  cs <- table C.company

  restrict $
    ( fromNull (constant 0) (cs!C.xid) .==. es!E.cid
      .&&.
      cs!C.name .==. constant cname )

  project (ttl <<  sum (es!E.salary))
</syntaxhighlight>

We are working in the <syntaxhighlight lang=""haskell"" enclose=""none"">Query</syntaxhighlight> monad. The <syntaxhighlight lang=""haskell"" enclose=""none"">table</syntaxhighlight> functions return all records in the given table. Using two tables gives us the relational cross product of those tables lines 3 and 4. We use HaskellDB's selection function <syntaxhighlight lang=""haskell"" enclose=""none"">restrict</syntaxhighlight> in line 6-9 to select only those rows in which the company-id of the employee is equal to the company which has the given name <syntaxhighlight lang=""haskell"" enclose=""none"">cname</syntaxhighlight>. By making use of <syntaxhighlight lang=""haskell"" enclose=""none"">project</syntaxhighlight> in line 11 we only select the salary column and then use the aggregation function <syntaxhighlight lang=""haskell"" enclose=""none""> sum</syntaxhighlight> to total all salaries. After that we put the total value in <syntaxhighlight lang=""haskell"" enclose=""none"">ttl</syntaxhighlight>.

=== Executing the query ===

We use <syntaxhighlight lang=""haskell"" enclose=""none"">query</syntaxhighlight> and <syntaxhighlight lang=""haskell"" enclose=""none"">execute</syntaxhighlight> to execute the totaling query:

<syntaxhighlight lang=""haskell"" source=""haskellDB/Main.hs"">
let cname = ""meganalysis""
[res] <- execute $ (flip $ query) $ total cname
</syntaxhighlight>

This gives us a list (which we expect to be a singleton list) of records. We can now access the <syntaxhighlight lang=""haskell"" enclose=""none"">ttl</syntaxhighlight> attribute of the record <syntaxhighlight lang=""haskell"" enclose=""none"">res</syntaxhighlight> by using the <syntaxhighlight lang=""haskell"" enclose=""none"">(!)</syntaxhighlight>-operator and print the total value:

<syntaxhighlight lang=""haskell"" source=""haskellDB/Main.hs"">
print $ res!ttl
</syntaxhighlight>
== Architecture ==

We provide MySQL-scripts to create (see [this!!Company.sql]) company tables and populate (see [this!!Meganalysis.sql]) these tables. [this!!Total.hs] and [this!!Cut.hs] provide totaling and cutting functionality using HaskellDB's relational algebra library. [this!!MyConnection.hs] encapsulates the process of connecting to the MySQL database. [this!!Main.hs] collects test scenarios for totaling and cutting.
== Usage ==

=== Setup ===

* Follow the steps of setting up the database as described in the usage section for the [[Contribution:hdbc|hdbc]] implementation.

=== Generating the database description ===

* Execute the following command in the implementation folder:
<syntaxhighlight lang=""make"">
dbdirect-hdbc-odbc ""DBDesc"" ""DBDesc"" \
                ""Driver=MySQL ODBC 5.1 Driver;\
		Port=3306;\
		Server=localhost;\
		User=root;\
		Database=101companies""
</syntaxhighlight>
* Compile the ''DBDesc'' module using GHC: <syntaxhighlight lang=""make"" enclose=""none"">ghc DBDesc</syntaxhighlight>

=== Testing ===

* [this!!Main.hs] has to be loaded into GHCi.
* The <syntaxhighlight lang=""haskell"" enclose=""none"">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' covering both database descriptions generation and testing.
== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:SQL]]
* [[uses::Technology:HaskellDB]]
* [[uses::Technology:ODBC]]
* [[uses::Technology:HDBC]]
* [[uses::Technology:DBDirect]]
* [[uses::Technology:MySQL]]
* [[uses::Technology:GHC]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Mapping]]
* [[developedBy::Contributor:tschmorleiz]]
* [[memberOf::Theme:Haskell potpourri]]
* [[relatesTo::http://doi.acm.org/10.1145/1017472.1017473]]

",2013-06-12 14:57:41.55,2017-07-05 15:26:50.411484
Concept,Object composition,"== Headline ==

TBD

== Metadata ==

* [[memberOf::Vocabulary:OO programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:55:08.607,2017-07-04 13:44:53.226853
Concept,Operator precedence,"== Headline ==

priority of [[operator]]s without explicit parentheses

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:55:13.07,2017-07-04 15:26:17.853296
Contribution,aspectJ,"== Headline ==

Advanced modularization with [[Language:AspectJ]]

== Motivation ==

Concepts of [[aspect-oriented programming]] (say, advanced modularization) are put
to work. The starting point is an [[object model]] for companies with properties
but no other instance methods. The basic operations are
implemented by adding the corresponding methods through [[inter-type declaration]]s
""after the fact""---in an extra module. Such a modular development should be compared
with the simple approach of [[Contribution:javaComposition]] where
all methods are readily implemented within the classes. Further, logging is supported
by [[around advice]] on any call for cutting salaries.

== Illustration ==

The following [[Language:AspectJ]] aspect declares instance methods for
cutting salaries on the classes of the object model for companies; the
actual method bodies, which are elided, do not differ in any way from a
straightforward OO implementation:

<syntaxhighlight lang=""aspectj"">
public aspect Cut {
   public void Company.cut() { ... }
   public void Department.cut() { ... }
   public void Employee.cut() { ... }
}
</syntaxhighlight>

The next goal is to log applications of cut so that the total of an
object is logged before and after applying ''cut''. The following fragment
of a log illustrates the idea:

<pre>
...
> BEGIN Cut Department ""Dev1.1"". Total: 4689.0
> BEGIN Cut Employee ""Karl"". Total: 2345.0
> END Cut Employee ""Karl"". Total: 1172.5
> BEGIN Employee ""Joe"". Total: 2344.0
> END Employee ""Joe"". Total: 1172.0
> END Department ""Dev1.1"". Total: 2344.5
...
</pre>

Hence, the ''cut'' methods of company, department, and employee
objects should be intercepted. As a preparatory step, the design of
the object model is improved so that the pointcut can be expressed
more compactly with the help of [[interface polymorphism]]. That is,
an interface for all common operations is introduced and implemented
""after the fact"" for all the types of the object model for companies:

<syntaxhighlight lang=""aspectj"">
public interface Operations {
   String getName();
   double total();
   void cut();
}

public aspect Polymorphism {
   declare parents: Company implements Operations;
   declare parents: Department implements Operations;
   declare parents: Employee implements Operations;
}
</syntaxhighlight>

It remains to declare a pointcut for all calls of
''cut'' and to advice each intercepted method call with logging
actions before and after (say, around) it.

<syntaxhighlight lang=""aspectj"">
pointcut cut(Operations o):
   target(o) && call(void Operations.cut());

void around(Operations o): cut(o) {
   ... // Log ""before"" state
   proceed(o);
   ... // Log ""after"" state
}
</syntaxhighlight>

== Architecture ==

Package ''org.softlang.company'' hosts the object model for [[Feature:Hierarchical company]].
The Java classes of this object model do not implement any other features.
Package ''org.softlang.aspectj'' hosts aspects for [[Feature:Total]],
[[Feature:Cut]], [[Feature:Depth]], and [[Feature:Logging]]. There is
another aspect ''Polymorphism'' which rehashes existing operations (getName,
total, cut) as an interface [this!!org/softlang/features/Operations.java Operations] on the relevant classes. Finally,
package ''org.softlang.tests'' hosts JUnit tests; see below.

== Usage ==

* The implementation is provided as an Eclipse project.
* AJDT must be installed in Eclipse if Eclipse is to be used.
* Open the project with Eclipse; this will also build the project.
* There are JUnit tests available as the package ''org.softlang.tests''.
* Run class ''Operations'' with JUnit to exercise several operations.

== Metadata ==

* [[uses::Language:AspectJ]]
* [[uses::Technology:AJDT]]: compilation and IDE support for AspectJ
* [[uses::Technology:ajc]]: compilation (provided by AJDT)
* [[uses::Technology:Eclipse]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Logging]]
* [[developedBy::Contributor:rlaemmel]]
* [[developedBy::Contributor:tschmorleiz]]

",2013-06-12 14:57:04.12,2017-07-05 15:25:31.774607
Concept,POJO,"== Headline ==

Plain Old Java Objects

== Metadata ==

* [[instanceOf::POO]]

",2013-06-12 14:55:14.583,2017-07-04 13:44:53.488776
Concept,PONO,"== Intent ==

Plain Old .NET Objects

== Metadata ==

* [[instanceOf::POO]]
",2013-06-12 14:55:14.863,2017-07-04 13:44:53.498588
Contributor,mpaul138,"",2014-08-17 15:34:04.263,2017-07-04 13:48:00.45038
Concept,Corecursion,"== Headline ==

The dual concept of [[recursion]]

== Metadata ==
* [[memberOf::Vocabulary:Programming theory]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Corecursion]]
* [[isA::Concept]]

",2013-06-12 14:53:36.138,2017-07-04 15:26:05.68022
Contribution,fsharp,"== Headline ==

Basics of programming in [[Language:FSharp|F#]] and [[Technology:.NET|]]

== Characteristics ==

Multiparadigm nature of F# is shown;
both OO and FP features of the languages are illustrated by adjusting a basic [[Contribution:csharp | C#]] implementation.

== Illustration ==


<syntaxhighlight lang=""fsharp"">
    type Company() =
     class
       let mutable name = """"
       let mutable departments:List<Department> = new List<Department>()

       member this.Name with get() = name and set v = name <- v
       member this.Departments with get() = departments and set v = departments <- v
</syntaxhighlight>


Here we define a member which is essentially a wrapper around pure functional style of calculating total using accumulator. (''fold'' function from F# library is used)

<syntaxhighlight lang=""fsharp"">
 member this.TotalSalaries =
        let x = List.fold (fun (acc) (elem:Department) -> acc + elem.Total) 0M (List.ofSeq departments)
        x

</syntaxhighlight>

== Architecture ==

== Usage ==

To make NUnit GUI working with .NET 4.0
Under <configuration> add:
<nowiki>

<startup>
  <supportedRuntime version=""v4.0.30319"" />
</startup>
</nowiki>

and under <runtime> add:
<loadFromRemoteSources enabled=""true"" />

The implementation has been tested with:
* F#: Programming language used for all code (Version 2.0)
* F# compiler (Version 2.0)
* .NET Framework used to execute compiled code (Version 4.0)
* NUnit testing framework used for testing (Version 2.5)
* Visual Studio: optional IDE (Version 2010)

== Metadata ==
* [[uses::Language:FSharp]] (F#): Programming language used for all code (Version 2.0)
* [[uses::Technology:fcs.exe]]: F# compiler (Version 2.0)
* [[uses::Technology:.NET]]: framework used to execute compiled code (Version 4.0)
* [[uses::Technology:NUnit]]: unit testing framework used for testing (Version 2.5)
* [[uses::Technology:Visual Studio]]: optional IDE (Version 2010)
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:avaranovich]]

",2013-06-12 14:57:17.91,2017-07-05 15:25:59.033092
Concept,Parallel array,"== Headline ==

An [[array]]-like data structure amenable to vector processing

== Details ==

Parallel arrays provide an alternative representation for arrays of records such that multiple arrays are used for the various components of the array. In essence, parallel arrays are arrays where the actual arrays only use primitive types. In this manner, parallel arrays are more suitable for vector processors for [[data parallelism]].

In the context of [[Technology:DPH]], the term ""parallel array"" is also used in a slightly different manner. That is, a parallel array is essentially an array that is amenable to data parallelism. Incidentally, those arrays are also assumed to use a primitive element type.

== Metadata ==

* [[instanceOf::Data structure]]
* [[sameAs::http://en.wikipedia.org/wiki/Parallel_array]]
",2013-06-12 14:55:16.515,2017-07-04 13:44:53.596842
Concept,Parser combinator,"== Headline ==

A [[combinator]] for the [[composition]] of [[parser]] [[Function]]s

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Parser_combinator]]

",2013-06-12 14:55:17.751,2017-07-04 13:44:53.67662
Contribution,grails,"== Headline ==

[[Web programming]] based on [[Technology:Grails]]

== Motivation ==

TBD

== Usage ==

1. Prepare the source project

* In the 101Companies folder rename grails- app, web-app and WEB-INF folders to grailsapp, webapp and WEBINF respectively
** Inside grailsapp\views\company, grailsapp\views\department and grailsapp\views\employee rename the  form.gsp to form.gsp

2. Executing the Hephaestus

* Inside 101Companies\hephaestus folder, choose the product configuration between some of the existing instance models or create a new xml file following the same pattern of the existing instance models and save
* Open the project.properties file:
** Set the path to where this folder is located in your computer in all fields
** Set the instance-model field to the instance you have chosen
** Set the target-dir field to the directory where the project will be generated
* In your command line:
** Go to hephaestus folder
** Run VMCODE.exe
** Type project.properties and hit enter
** When the program asks to generate the product, type y and hit enter
** If no warnings appears, the product was generated with success

3. Run the generated product

* In the 101Companies folder rename grailsapp, webapp and WEBINF folders to grails-app, web-app and WEB-INF respectively
* Inside grailsapp\views\company, grailsapp\views\department and grailsapp\views\employee rename the form.gsp to  form.gsp
* In your command line:
** Go to the generated product directory type grails run-app and hit enter

== Metadata ==

* [[uses::Language:Groovy]]
* [[uses::Language:JavaScript]]
* [[uses::Technology:Grails]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Access control]]
* [[implements::Feature:Logging]]
* [[developedBy::Contributor:prga]]
* [[developedBy::Contributor:rcaa]]

",2013-06-12 14:57:20.943,2017-07-05 15:26:05.098228
Script,Higher-order functions in Haskell,"== Headline ==

Lecture ""Higher-order functions in Haskell"" as part of [[Course:Lambdas in Koblenz]]

== Description ==

[[Higher-order function]]s are functions that take functions as arguments or return functions as results. Much of the expressiveness and convenience of [[functional programming]] is a consequence of the status of functions to be first-class citizens. In this lecture, we focus on higher-order functions for [[list processing]], e.g., the [[map function]]. We also look at important related concepts such as [[partial application]] of functions or [[lambda abstraction]]s for constructing [[anonymous function]]s.

== Video ==

Some version of the lecture has been recorded.

<media url=""https://www.youtube.com/watch?v=f9zgfcfIjWo"" />

== Concepts ==

* [[Higher-order function]]
* [[Partial application]]
* [[Polymorphism]]
* [[Map function]]
* [[Fold function]]
* [[Filter function]]
* [[Zip function]]
* [[Uncurrying]]
* [[Currying]]
* [[List comprehension]]
* [[Lambda abstraction]]

== Languages ==

* [[Language:Haskell]]

== Contributions ==

* [[Contribution:haskellEngineer|haskellEngineer]]: No higher-order functions
* [[Contribution:haskellList|haskellList]]: Leverage [[map function|map]] and [[sum function|sum]]
* [[Contribution:haskellLambda|haskellLambda]]: Leverage [[anonymous function]]s
* [[Contribution:haskellProfessional|haskellProfessional]]: Richer demonstration

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Data modeling in Haskell]]

",2013-06-12 15:00:55.895,2017-07-04 13:46:58.690246
Concept,Parser generator,"== Headline ==

A [[program generator]] that generates [[parser]]s from enriched [[grammar]]s

== Metadata ==

* [[instanceOf::Language technology]]
* [[relatesTo::http://en.wikipedia.org/wiki/Compiler-compiler]]
* [[relatesTo::http://en.wikipedia.org/wiki/Comparison_of_parser_generators]]
",2013-06-12 14:55:18.199,2017-07-04 13:44:53.704029
Concept,Parsing,"== Headline ==

Analysis of text and construction of [[parse tree]]s

== Relationships ==

* [[Parsing]] is performed by a [[parser]].
* [[Parsing]] is the opposite of [[unparsing]].
* [[Parsing]] solves the [[parsing problem]].

== Illustration ==

See [[Contribution:haskellParsec]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Parsing]]
* [[memberOf::Vocabulary:Software language engineering]]
* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::Unparsing]]
",2013-06-12 14:55:18.579,2017-07-04 13:44:53.746406
Concept,Open serialization,"== Headline ==

Technology- and platform-independent [[serialization]]

== Description ==

[[Open serialization]] leverages a serialization format that can be interpreted on different platforms with different technologies, as opposed to a format that is only well-supported by a specific technology on a specific platform. In practice, open serialization is often achieved by means of [[Language:XML]] or [[Language:JSON]]. However, the mere use of these or other format languages does not imply that serialization is properly open. That is, the specific serialization format may still involve idiosyncratic aspects that make it hard to be used with diverse technologies on diverse platforms.

== Relationships ==

* See [[closed serialization]] for comparison.

== Metadata ==

* [[isA::Serialization]]
* [[relatesTo::http://en.wikipedia.org/wiki/Data_exchange]]
* [[relatesTo::http://en.wikipedia.org/wiki/Cross-platform]]
* [[memberOf::Vocabulary:Computing]]
",2013-06-12 14:55:12.15,2017-07-04 15:26:17.680373
Contribution,gwt,"== Headline ==

[[Web programming]] in [[Language:Java]] with [[Technology:GWT]]

== Characteristics ==

The present project provides a simple [[Web Application|WebApp]] for companies by making use of the [[Technology:GWT| Google Web Toolkit]] and therefore [[Technology:Ajax]].
Via [[asynchronous communication]] the server provides functionality for cutting and totaling salaries.
The server allows the client to retrieve instances of [[Serialization|serializable]] classes of the company's [[object model]].
The client presents the provided functionality and retrieved data via predefined [[GUI]] components.

== Illustration ==

The connection to the [[Server|server]] is provided by the service of this [[Technology:GWT]]-[[Application|application]]. The pre-requist of this connection is the [[Client|client-side]] invokation of this service:

<syntaxhighlight lang=""java"">
	private final ServiceAsync service = GWT.create(Service.class);
</syntaxhighlight>

After this initialization, the specific methods of this service are called by simply invoking those methods on the [[Client|client]]. The [[Feature:Cut]]-button, for example, creates a cut-request, with two possible results. If it is successfull, the new [[Feature:Total]]-value is returned and the specific field is set. If not, nothing happens. The following example shows the action for the company-cut button, which should, if successfull, refresh the text-field ''salaryInfoValue'':

<syntaxhighlight lang=""java"">
	cutButton.addClickHandler(new ClickHandler() {

		@Override
		public void onClick(ClickEvent event) {
			service.cutCompany(new AsyncCallback<Double>() {

				@Override
				public void onSuccess(Double result) {
					salaryInfoValue.setText(""Total salary = "" + result
							+ "" $"");
				}

				@Override
				public void onFailure(Throwable caught) {

				}
			});
		}
	});
</syntaxhighlight>

On the [[Server|server]] side, the [[method]] is implemented in the following way:

<syntaxhighlight lang=""java"">
	@Override
	public Double cutCompany() {
		company.cut();
		return company.total();
	}
</syntaxhighlight>

== Architecture ==

'''Client''':
Client classes are to be found in the client package. See ''org.softlang.client''.
There is the GUI and a special [[Feature:Hierarchical company]] object model for the client with classes that support [[closed serialization]]. See ''org.softlang.client.company'' for the latter.
This object model holds ""shallow"" data for the widgets. The entry point for the client is the [this!!src/org/softlang/client/Gwt.java Gwt.java] class.
Here we describe the app's client side appearance and functionality.

'''Server''':
Server classes are to be found in the server package. See ''org.softlang.server''.
We use an object model for [[Feature:Hierarchical company]] very much like in project [[Contribution:java]]
(We use a cloned object model for the sake of a simple build for this GWT project.)
The server maintains an index (see class [this!!src/org/softlang/server/Index.java Index.java]) between shallow and proper objects.
That is, departments and employees are identifiable by their ids (say, names).

The communication between client and server is modeled by the [this!!src/org/softlang/client/Service.java Service] interface. See the client package.
There is also the asynchronous version of it: [this!!src/org/softlang/client/ServiceAsync.java ServiceAsync.java].
These services allow the client to load and save data and perform scenarios [[Feature:Total]] and [[Feature:Cut]].

== Usage ==

The [[101implementation|implementation]] is created with [[Technology:Eclipse]] (3.6/Helios) and the [[Technology:GWT]]-plugin (Version 2.2). If you want to compile the code, you need these versions to run it safely. You can get them at:

* [http://www.eclipse.org/downloads/ Eclipse]
* [http://code.google.com/intl/de-DE/eclipse/docs/download.html GWT]

After installation and start, simply open this [[web application]] as project into eclipse:

* Please cleanup (Project -> Clean...) the project before running.
* Right-click on the project, left-click on ""Run As"" and left-click on ""Web-application"".
* Visit http://127.0.0.1:8888/GwtTree.html?gwt.codesvr=127.0.0.1:9997

If you want to recompile it, please end the old server-process by terminating the process in the [[Technology:Eclipse]] console first.

== Metadata ==

* [[instanceOf::Theme:Web programming]]
* [[developedBy::Contributor:tschmorleiz]]
* [[reviewedBy::Contributor:rlaemmel]]
* [[reviewedBy::Contributor:tzimmer]]
* [[memberOf::Theme:Web applications in Java]]

* [[uses::Language:Java]]
* [[uses::Language:JavaScript]]
* [[uses::Language:HTML]]
* [[uses::Language:XML]]
* [[uses::Language:CSS]]
* [[uses::Technology:GWT]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Ranking]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Web UI]]

",2013-06-12 14:57:23.862,2017-07-05 15:26:10.590921
Concept,UDP,"== Headline ==

A protocol for network/internet-based data connections

== Details ==

UDP stands for User Datagram Protocol.

See [[TCP]] for another such protocol.

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/User_Datagram_Protocol]]
* [[isA::Concept]]

",2013-06-12 14:56:41.852,2017-07-04 15:26:30.143225
Concept,Wiki software,"== Headline ==

A [[software system]] to run a wiki

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Wiki_software]]
* [[isA::Software technology]]
",2013-06-12 14:56:55.376,2017-07-04 15:26:31.065904
Concept,History,"== Headline ==

Maintain historical company data for analysis

== Description ==

Company data is to be maintained for a number of years so that some analysis are applicable. Specifically, management is interested in the development of salaries in terms of the [[total]] and the [[median]] of salaries over the years. To this end, the data may be visualized via a [[bar chart]].

== Motivation ==

The feature triggers the need to deal with historical data, which, in a practical setting would need to be obtained by regular snapshotting or the use of a temporal database. Simple implementations of the feature may simply assume sufficient historical data via test data. More interesting implementations may also model (simulate) the process of obtaining historical data.

== Illustration ==

See [[Contribution:haskellBarchart]] for an illustration.

== Relationships ==

The feature leverages [[Feature:Total]] and [[Feature:Median]].

== Metadata ==


* [[isA::Functional requirement]]
* [[isA::Data requirement]]
* [[relatesTo::http://en.wikipedia.org/wiki/Temporal_database]]
* [[isA::Optional feature]]
* [[implies::Feature:Total]]
* [[implies::Feature:Median]]
* ",2015-07-14 06:04:34.913,2017-07-04 15:26:43.214832
Contribution,haskellSyb,"== Headline ==

[[Generic programming]] in [[Language:Haskell|]] with [[SYB]]

== Motivation ==

The implementation demonstrates [[generic programming]] in [[Language:Haskell]] using ""[[Scrap your boilerplate]]"" ([[SYB]]) style. Generic programming is useful in so far that several operations of the 101companies features involve traversal over  nested data. For instance, totaling all salaries requires the location of salary subterms at all levels in a given company term. Accordingly, operations for totaling and cutting salaries are implemented as [[generic function]]s that traverse over the company structure while type-specific cases detect employees and access their salaries. (It happens that the original publication on [[SYB]] used these generic programming samples for motivation.) The resulting code is considerably more concise, when compared to a conservative style of functional programming; see [[Contribution:haskellComposition]]. Additional operations are implemented to exercise [[SYB]] for different idioms of query or transformation and to address additional structural concerns; see the implementations of [[Feature:Depth]], [[Feature:Mentoring]], and [[Feature:Depth]].

== Illustration ==

Several of the operations on companies can be implemented in a very concise manner based on the [[SYB]] style of generic programming. For instance, the operation for totaling salaries simply extracts all floats from the given term and reduces them by addition:

<fragment url=""src/Company/Total.hs/pattern/total""/>

== Architecture ==

The architecture is exactly the same as the one of [[Contribution:haskellComposition]] with one exception. There is an additional module Company.Generics which hosts stand-alone deriving clauses for instances of Data and Typeable classes, as needed for generic programming with Data.Generics.

== Usage ==

The Haskell module ''Main'' has to be consulted with GHCi, and the ''main'' function has to be applied so that output for the test scenarios is produced. The ''expected'' output is available through the file ''baseline''. There is a ''Makefile'' with a target ''test'' for [[test automation]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mentoring]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Ranking]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell potpourri]]
* [[memberOf::Theme:Scrap your boilerplate]]
* [[memberOf::Theme:Haskell genericity]]
* [[memberOf::Theme:Haskell introduction]]


      ",2013-06-12 14:57:46.684,2017-07-05 15:27:49.538477
Contribution,haskellVariation,"== Headline ==

[[Data variation]] in [[Language:Haskell]] with [[algebraic data type]]s
== Characteristics ==

The [[data model]] leverages [[data variation]] for companies with departmental nesting. Thus, an [[algebraic data type]] is used for subunits of departments (i.e., employees and departments) so that recursive nesting can be expressed. The algebraic data type needs indeed two [[data constructor]]s. Thus, [[data variation]] is exercised, but see [[Contribution:haskellComposition]] for an alternative without data variation.
== Illustration ==

The data model leverages an [[algebraic data type]] for subunits of departments; in this manner recursion is enabled:

<fragment url=""src/Company/Data.hs""/>

A sample company looks like this:

<fragment url=""src/Company/Sample.hs""/>

[[Feature:Total]] is implemented as follows:

<fragment url=""src/Company/Total.hs""/>

The following salary total is computed for the sample company:

<syntaxhighlight lang=""haskell"">
399747.0
</syntaxhighlight>
== Relationships ==

See [[Contribution:haskellComposition]] for a contribution with a similar data model such that [[data variation]] is not exercised, but only [[data composition]].
== Architecture ==

See [[Contribution:haskellComposition]].
== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md.
== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell data]]
* [[memberOf::Theme:Haskell introduction]]
* [[varies::Contribution:haskellComposition]]
* [[basedOn::Contribution:haskellEngineer]]

",2013-06-12 14:57:48.612,2017-07-05 15:27:54.747332
Contribution,silverlight,"== Headline ==

[[Web programming]] in [[Language:CSharp|C#]] with [[Technology:Silverlight|]]

== Motivation ==

The implementation illustrates the development of a [[Client|client]]-side [[user interface]] accessible via [[Web browser|web browser]]. We used [[Technology:Silverlight]] in combination with the [[Technology:Navigation framework]] [http://msdn.microsoft.com/en-us/library/cc838245(v=vs.95).aspx#application navigation] to create an [[MVC]] based implementation. The [[Web application|web application]] is tied to a [[Web service|web service]], which is implemented in [[Contribution:wcf]]. An advantage of Silverlight is the out-of-the-box back button support.

== Illustration ==

There have to be proxy DTOs enabling the [[Client|client]] to receive the serialized data from the [[Web service|web service]]. These proxies are generated from a [[Language:WSDL]] file. The namespace for the generated classes is
<syntaxhighlight lang=""csharp"" enclose=""none"">silverlight.CompanyServiceReference</syntaxhighlight>. These proxies are [[Language:CSharp]] classes located in [this!silverlight/Service References/CompanyServiceReference/Reference.cs]:

<syntaxhighlight lang=""csharp"" source=""silverlight/silverlight/Service References/CompanyServiceReference/Reference.cs"">
namespace silverlight.CompanyServiceReference {
	using System.Runtime.Serialization;

	// The class ""CompanyDto"" is the proxy DTO for serialized company data.
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute(""System.Runtime.Serialization"", ""4.0.0.0"")]
	[System.Runtime.Serialization.DataContractAttribute(Name=""CompanyDto"", Namespace=""http://schemas.datacontract.org/2004/07/wcf.Dto"")]
	public partial class CompanyDto : object, System.ComponentModel.INotifyPropertyChanged {

		...

	}

	...

	// The connection point to the company service provided by the wcf implementation.
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute(""System.ServiceModel"", ""4.0.0.0"")]
	public partial class CompanyServiceClient : System.ServiceModel.ClientBase<silverlight.CompanyServiceReference.ICompanyService>, silverlight.CompanyServiceReference.ICompanyService {

		...

	}

	...

}
</syntaxhighlight>

=== GUI ===

The proxy in combination with the <syntaxhighlight lang=""csharp"" enclose=""none"">CompanyServiceClient</syntaxhighlight> allows us to create an [[asynchronous communication]] asynchronous request.

<syntaxhighlight lang=""csharp"" source=""silverlight/silverlight/Home.xaml.cs"">
// Create a service client for companies and ...
var client = new CompanyServiceClient();
client.GetCompanyCompleted += client GetCompanyCompleted;
// ... wait for the requested company.
client.GetCompanyAsync();
</syntaxhighlight>

The illustrated code creates a service client and waits, until the company data are completely delivered to the client. The result is a DTO, which is stored in the <syntaxhighlight lang=""csharp"" enclose=""none"">DataContext</syntaxhighlight>:

<syntaxhighlight lang=""csharp"" source=""silverlight/silverlight/Home.xaml.cs"">
 void client GetCompanyCompleted(object sender, GetCompanyCompletedEventArgs e)
{
	DataContext = e.Result;
}
</syntaxhighlight>

We are now able to fill the [[GUI]] with the help of the <syntaxhighlight lang=""csharp"" enclose=""none"">DataContext</syntaxhighlight>. Each field of the DTO is automatically binded to the GUI defined by the [[Language:XAML]] files by using binding properties. For example, the [this!!silverlight/Home.xaml] contains a field <syntaxhighlight lang=""xml"" enclose=""none"">txtCompanyName</syntaxhighlight> binded to the field ''Name'' of the DTO.

<syntaxhighlight lang=""xml"" source=""silverlight/silverlight/Home.xaml"">
<TextBlock Height=""23"" HorizontalAlignment=""Left"" Margin=""59,46,0,0"" Name=""txtCompanyName"" Text=""{Binding Name}""
</syntaxhighlight>

== Architecture ==

The project is represented as two Visual Studio projects:

* ''silverlight.Web'' contains the generated bootstrap code for launching the silverlight application.
* ''silverlight''  contains the actual implementation. The [[Language:WSDL]] file and the generated DTO proxies are located in the folder ''silverlight/ServiceReferences/CompanyServiceReference''. The [[GUI]] is provided by [[Language:XAML]] files located in the base folder of the project.

== Usage ==

* Follow the Usage section for the [[Contribution:wcf]] to create a WCF service.
* Build the project using Visual Studio.
* Open the [this!!silverlight.Web/silverlightTestPage.html silverlightTestPage.html] from ''silverlight.Web'' folder.

This contribution has been tested under C# and .NET Version 4.0.

== Metadata ==
* [[memberOf::Theme:Web programming]]
* [[uses::Language:CSharp]]
* [[uses::Technology:csc.exe]]
* [[uses::Technology:.NET]]
* [[uses::Technology:Silverlight]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:avaranovich]]
* [[reviewedBy::Contributor:tzimmer]]

",2013-06-12 14:58:55.468,2017-07-05 15:29:47.294932
Java,javax.swing,"== Headline ==

primary package of the GUI API [[Technology:Swing]] for the Java platform

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/1.4.2/docs/api/javax/swing/package-summary.html]]
* ",2013-06-12 15:00:10.562,2017-07-04 13:46:37.771392
Contribution,hbase,"== Headline ==

A NoSQL implementation based on [[Technology:HBase]]

== Motivation ==

In this implementation, the features of a [[Technology:Column-oriented database]] by example of [[Technology:HBase]]. It employs the column-wise ordering of data to accomplish data operations. The query language used is [[Language:Ruby|JRuby]].

== Illustration ==

A company is organized in two tables, one for employees and one for departments.

The employees table contains two column families: personal and corporate. The personal column family contains name and address columns, while the corporate family contains a salary column.

In the departments table there are two column families for personnel and corporate structure. Under personnel, employee and manager columns are maintained while the structure family contains a column for information on subdepartments.

Totalling employee salaries is implemented in a JRuby script that is executed by the HBase shell using a few helper classes from HBase's [[Language:Java]] library. First, the script establishes an access object to the employees table:

<syntaxhighlight lang=""ruby"">
employees = HTable.new(@hbase.configuration, ""meganalysis employees"")
</syntaxhighlight>

Then, a cursor on the table is obtained via a Scanner object. The scanner is iterated over and for each entry, the salary value is extracted and added to the total. Because the database just stores raw byte arrays, the stored value first has to be converted back into a floating point number which is taken care of by an HBase helper class.

<syntaxhighlight lang=""ruby"">
total = 0.0
while (result = scanner.next())
  id = Bytes.toString(result.getRow())
  name = Bytes.toString(result.getValue(*jbytes('personal', 'name')))
  salary = Bytes.toDouble(result.getValue( *jbytes('corporate', 'salary')))

  print ""ID: #{id}, Name: #{name}, Salary: #{salary}\n""
  total += salary
end
</syntaxhighlight>

Cutting salaries is implemented similarily although rather than totalling the extracted salary, the new value is written back into the table by creating and submitting a proper put request.

<syntaxhighlight lang=""ruby"">
  put cut = Put.new(namebytes)
  put cut.add( *(jbytes('corporate', 'salary') << Bytes.toBytes(salary / 2.0)))
  employees.put(put cut) if put cut
</syntaxhighlight>

== Usage ==

In the dbs subfolder are two HBase database dumps. Make sure to have a local installation of HBase running and execute

<syntaxhighlight lang=""bash"">
$ ./rebuild.sh
</syntaxhighlight>

This will restore the employee and department tables for the meganalysis company.

The feature demonstrations are executed using the HBase shell. Simply run

<syntaxhighlight lang=""bash"">
$ ./total.sh # or cut.sh
</syntaxhighlight>.

The scripts will drop into the HBase shell which can be quit by simply typing 'quit'.

== Metadata ==

* [[memberOf::Theme:NoSQL]]
* [[uses::Technology:HBase]]
* [[uses::Technology:Data aggregation]]
* [[uses::Language:Ruby]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:DerDackel]]

",2013-06-12 14:57:49.55,2017-07-05 15:27:56.523308
Contribution,kiama,"== Intent ==

demonstrate Kiama

== Motivation ==

Kiama provides several advanced programming concepts:
context-sensitive attribute equations, circular attribute equations,
rewrite rules and higher-order rewriting strategies.  The present
implementation puts to work some of them for the benefit of a
declarative and concise implementation of the 101companies system.

== Usage ==

Use the simple-build-tool to build: sbt script for Unix and MacOSX and
sbt.bat script for Windows.

(One time only) Download Scala compiler and needed libraries:

<pre>
$ ./sbt update
</pre>

This downloads and installs the relevant jars in your project, so you
need to be on the net for it to work.

The remaining steps can be performed without a net connection.

To compile the project (if necessary) and run the main program:

<pre>
$ ./sbt run
399747.0
199873.5
3
</pre>

To run the tests with logging:

<pre>
$ ./sbt info test
</pre>

== Metadata ==
* [[uses::Language:Scala]]
* [[uses::Technology:Kiama]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Ranking]]
* [[developedBy::Contributor:inkytonik]]
",2013-06-12 14:58:27.323,2017-07-05 15:29:12.004437
Contribution,javaTree,"== Intent ==

Tree based implementation in [[Language:Java]].

== Motivation ==

''This project was created at the PTT-Hackathon 2011.''

The tree-based view allows the user to get a large overview of the hierarchy of the [[system:Company]]. The tree allows easy navigation within this hierarchy. The tree also provides quick adjustment on changes of the [[Feature:Hierarchical company]] data.

== Illustration ==

The main features [[Feature:Cut]], [[Feature:Total]] and [[Feature:Hierarchical company]] are adopted from [[Contribution:javaInheritance]]. The main difference to [[Contribution:swing]] is, that the navigation is simplified with a tree view. This tree has to be initialized recursively with the company as root:

<syntaxhighlight lang=""java"">
/*
 * This method initializes the tree-view.
 */
private Component createTree() {
	Company company = model.getCompany(); // get company data

	DefaultMutableTreeNode root = new DefaultMutableTreeNode(company); // create root element

	for (Department d : company.getDepts()) { // run through the departments and add them to the root
		root.add(addDepartmentNode(d)); // create department subtrees
	}

	tree = new JTree(root);

	return new JScrollPane(tree); // return the JTree within a scroll pane
}
</syntaxhighlight>

The department subtrees are created in a similar way.

== Architecture ==

The main architecture of this project is [[Architecture:MVC|MVC]]. The class [this!!org/softlang/tests/Interaction.java Interaction.java] starts the application and creates the main parts of the [[Architecture:MVC|MVC]]-structure: The [this!!org/softlang/swing/view/MainView.java MainView.java] creates the tree and provides a container for the single views of the company, departments and employees. These views are initialized by the [this!!org/softlang/swing/controller/Controller.java Controller.java] while the data and the selected element of the tree is stored in the [this!!org/softlang/swing/model/Model.java Model.java]. The main features [[Feature:Cut]] and [[Feature:Total]] can be found in ''org.softlang.operations'' while the classes for the data structure are in ''org.softlang.company''.

== Usage ==

* This project is provided as an [[Technology:Eclipse]] project.
* After importing the project into [[Technology:Eclipse]] as ''Java Project'', just run Interaction.java as ''Java Application''.

The implementation has been tested with Java version 5.

== Metadata ==

* [[uses::Language:Java]]
* [[uses::Technology:Swing]]
* [[uses::Technology:Eclipse]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Browsing]]
* [[developedBy::Contributor:eduard-ditler]]
* [[developedBy::Contributor:Hanna-Marike Reger]]
* [[developedBy::Contributor:Helena Swerdlow]]
* [[developedBy::Contributor:todeslord]]
* [[developedBy::Contributor:tzimmer]]

",2013-06-12 14:58:15.836,2017-07-05 15:28:53.356742
Contribution,html5ajax,"== Headline ==

[[Web programming]] based on the [[Language:HTML5]] ecosystem using [[Ajax]] style

== Motivation ==

This [[Web application|web application]] provides an optimized data exchange between the [[client]] and the [[server]]. It is achieved by the use of the [[Ajax]] principle. Optimized data exchange with Ajax means, that only necessary parts of the current page are reloaded and only necessary data are transmitted from the server to the client. This web application uses the [[Technology:XMLHttpRequest]] [[API]] included in [[Language:HTML5]] and is developed without any supporting [[Language:JavaScript]] [[Framework|framework]].

== Illustration ==

This implementation is [[MVC]] and [[Client-server architecture|client-server]] based. In order to create a reasonable illustration of the different layers of this application, this section is geared to this layers. The view, controller and some parts of the model are located on the [[client]] side.

=== Client ===

The view is mainly [[Language:HTML]] based, even though there are [[Language:JavaScript]] parts. The following example shows a table row in the [[Language:HTML5]] [this!!client/company.html company.html] document, which creates the textfield for the companies' total output and the cut button:

<syntaxhighlight lang=""xml"" source=""html5ajax/client/company.html"">
<table>

	...

	<tr>
		<td>Total:</td>
		<td><input type=""text"" name=""total"" class=""text"" readonly=""readonly""/></td>
		<td><input type=""button"" class=""button"" value=""cut"" onClick=""controller.cut()""/></td>
	</tr>

	...

</table>
</syntaxhighlight>

If the user presses the cut button, the corresponding JavaScript [[method]] located in the client side model [this!!/client/model/companyModel.js companyModel.js] is invoked through the [this!!client/javascript/controller.js controller.js]. The ''initCompany'' method, used in ''cut'', initializes an object with all necessary data to identify the company on the [[server]] side:

<syntaxhighlight lang=""java"" source=""html5ajax/client/model/companyModel.js"">
// cut company
model.cut = function(strategy) {
	model.initCompany();
	model.company.action = ""cut"";

	model.sendRequest(strategy, model.company);
}
</syntaxhighlight>

The sent request contains a strategy, which defines the reaction after receiving the response. In case of a non error response the strategy refreshes the total field of the company.

The use of [[Language:JSON]] instead of [[Language:XML]] for request and response messages has a major advantage: The messages are created in an [[OO programming]] style and can easily be transformed into JSON strings. There is no additional effort for creating and interpreting complex [[Language:XML]] messages. The JSON message for the specific cut request contains the necessary information about the action and the entity:

<syntaxhighlight lang=""text"">
{
	""id"":1,
	""table"":""company"",
	""action"":""cut""
}
</syntaxhighlight>

The message is received by the server, which cuts the company with the identifier 1.

=== Server ===

After receiving the cut request, the server performs the corresponding action within the [[Language:PHP]] script [this!!server/companyServer.php companyServer.php]. After that, it returns the new information for the company to the [[client]]:

<syntaxhighlight lang=""php"" source=""html5ajax/server/companyServer.php"">
// ---------------------------------------- cut company
function cut($jsonObject) {
	$id = $jsonObject->id;
	$request = ""UPDATE employee SET salary = salary / 2 WHERE cid = $id"";
	mysql query($request);

	return loadCompany($jsonObject);
}
</syntaxhighlight>

The answer is a stringified company object containing all necessary information about the company (and nothing more):

<syntaxhighlight lang=""text"">
{
	""name"":""meganalysis"",
	""departments"":[""Research"",""Development""],
	""total"":199873.5
}
</syntaxhighlight>

This application implements the [[Feature:Editing]] feature. Hence, there is also validation. The client side validation is performed within the client side part of the model, while the [[Server|server]] side validation is performed within the PHP scripts. If there is a client side input error, no request will be created and the error is displayed directly. If there is a server side error, the PHP script responds with an appropriate JSON message.

== Architecture ==

The architecture is based upon the [[MVC]] pattern. While the view (example: [this!!/client/company.html company.html], [this!!/client/javascript/view/companyView.js companyView.js]) and the controller ([this!!/client/javascript/controller.js controller.js]) are parts of the [[Client|client]], the model is part of the [[server]] and the client.

* The view is based on pure [[Language:HTML]] (see [this!!client/]) and [[Language:JavaScript]]. The corresponding JavaScript files (see [this!!/client/javascript/views]) are used to fill the fields of the [[user interface]].

* The model on the server side (see [this!!server/]) is a [[Language:PHP]] script and receives the requests and responds in [[Language:JSON]]. The model on the [[Client|client-side]] (see [this!!client/javascript/model]) receives the JSON message and refreshes its data (example: [this!!/server/companyServer.php companyServer.php], [this!!/client/javascript/requests/companyModel.js companyModel.js]).

* All requests and responses via the [[Technology:XMLHttpRequest]] [[API]] are handled by the function defined in [this!!client/javascript/model/XMLHttpRequest.js].

* The JavaScript based controller (see [this!!client/javascript/controller.js controller.js]) handles the actions invoked by the user and refreshes the [[GUI]] at the client side.

== Usage ==

You need a web and sql server to use this application. In this tutorial both will be taken care of by XAMPP: http://www.apachefriends.org/en/xampp.html

This tutorial adopts some parts of [[Contribution:mySqlMany]]. The company.sql and sampleCompany.sql are modified for this project. They are located in the ""sqlScripts"" folder.

* Download and install XAMPP
* Open the ""XAMPP Control Panel"" and start ""Apache"" and ""MySQL""
* Use the guideline of [[Contribution:mySqlMany]] up to ""Populate tables..."" with the modified sql scripts.

Once the database is running, follow the next steps:

* To start the application, you need to download all project files
* Put the files into the htdocs directory of your XAMPP (a new sub-directory in ""htdocs"" is recommended)
* Run index.html

The project is provided as a netbeans project. If you want to change the code, you have to:

* Download (http://netbeans.org/) and install [[Technology:NetBeans]]
* ""Open project"" and select the html5ajax folder

== Metadata ==

* [[memberOf::Theme:Web programming]]
* [[uses::Language:HTML5]]
* [[uses::Language:JavaScript]]
* [[uses::Language:PHP]]
* [[uses::Language:SQL]]
* [[uses::Language:JSON]]
* [[uses::Technology:MySQL]]
* [[uses::Technology:XAMPP]]
* [[uses::Technology:Apache HTTP Server|Apache HTTP Server]]
* [[uses::Technology:XMLHttpRequest]]
* [[uses::Web browser]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:tzimmer]]",2013-06-12 14:57:56.246,2017-07-05 15:28:11.362497
Concept,Packaging,"== Headline ==

Complementing a [[program]] or [[software system]] by external components

== Illustration ==

See [[Technology:Cabal]], for example.

== Metadata ==

* [[memberOf::Vocabulary:Software engineering]]
* [[relatesTo::http://en.wikipedia.org/wiki/Software_package]]
* [[relatesTo::http://en.wikipedia.org/wiki/Bundled_software]]
* [[isA::Concept]]

",2013-06-12 14:55:16.204,2017-07-04 15:26:18.230579
Contribution,javaComposition,"== Headline ==

[[Object composition]] in [[Language:Java|]]

== Characteristics ==

Basic style of [[OO programming]] is applied. A simple [[object model]] is provided for [[Feature:Hierarchical company]]. The object model leverages [[object composition]] to compose companies from (nested) departments and employees. The operations for [[Feature:Total]] and [[Feature:Cut]] are implemented as [[instance method]]s on the classes for companies, departments, and employees. [[Closed serialization]] is enabled for all the classes with the help of Java's [[Technology:Object Streams]]. To this end, the [[Marker interface pattern|marker interface]] ''Serializable'' is applied to the classes of the object model for companies. This form of serialization counts as [[closed serialization]] because the serialization format is definitely Java-specific.

== Illustration ==

The data model is implemented as [[POJO]]s. For example [[Feature:Company]] looks like this:

<fragment url=""src/main/java/org/softlang/company/model/Company.java/class/Company""/>

[[Feature:Closed serialization]] is implemented using [[Language:Java]] [[Technology:Object Streams]]:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented as calls of [[POJO]] methods:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For basic OO without inheritance see [[Contribution:javaComposition]].

For basic OO with inheritance see [[Contribution:javaInheritance]].

For modular OO programming with static methods see [[Contribution:javaStatic]].

For use of Java reflection see [[Contribution:javaReflection]] (data processing) and [[Contribution:javaSyb]] (SYB-style generic programming).

For design patterns see [[Contribution:javaTemplate]] (template design pattern), [[Contribution:javaVisitor]] (visitor design pattern) and [[Contribution:javaExorcism]] (excessive illustration of design patterns).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.model for implementations of [[Feature:Company]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[memberOf::Theme:Starter]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:10.008,2017-07-05 15:28:39.573104
Concept,Push-based XML parsing,"== Intent ==

Sequential XML processing such that the input is present as an event stream to a programmer-defined handler

== Discussion ==

Such parsing provides one option of achieving [[streaming]] for XML processing. The idea is that programmer define handlers for events such as ""open element"", ""close element"", ""text node"", and a library sequentially processes actual XML and pushes events to the hander.

== Metadata ==

* [[instanceOf::XML processing]]
",2013-06-12 14:55:35.372,2017-07-04 13:44:54.688765
Contribution,performance1,"<fragment url=""src/Main.hs/type/Employee""/>",2014-09-24 15:01:54.388,2017-07-04 13:48:05.160507
Contribution,heavyLb,"== Headline ==

A [[Technology:LogicBlox]]-based implementation that is rich on functional requirements

== Motivation ==

This implementation enhances [[Contribution:basicLb]] to cover additional structural and behavioral features: computation of the depth of companies, support for mentoring, enforcement of the precedence-like constraint for salaries to get higher within the company hierarchy. In fact, this implementation can serve as an executable specification for the functional requirements and the data model of 101companies. It is both specification and implementation because the specification is executable in a pretty useful manner: in terms of efficiency and provided persistence.

== Architecture ==

When compared to [[Contribution:basicLb]], there are these additional files:
* ''depth.logic'': determine the depth of department nesting.
* ''precedence.logic'': check whether salaries with position in hierarchy.
There is no additional file for mentoring, as all related code is integrated into ''schema.logic'' and ''instance.logic''.

== Usage ==

Tested with [[Technology:LogicBlox]] 3.7.

Run ""make"" for a self-testing illustration.

== Metadata ==

* [[memberOf::Theme:Datalog basics]]
* [[uses::Language:DatalogLB]]
* [[uses::Technology:LogicBlox]]
* [[uses::Technology:Make]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Ranking]]
* [[implements::Feature:Mentoring]]
* [[developedBy::Contributor:Thiago Tonelli Bartolomei]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:57:51.211,2017-07-05 15:27:59.643962
Contributor,dblM90,"",2015-07-12 13:39:50.767,2017-07-04 13:48:06.600606
Concept,Database schema,"== Headline ==

A description of a [[database]]'s structure

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Database_schema]]
* [[memberOf::Vocabulary:Data modeling]]
* [[isA::Concept]]

",2013-06-12 14:53:41.303,2017-07-04 15:26:08.819193
Contribution,html5session,"== Intent ==

[[Web programming]] based on the [[Language:HTML5]] ecosystem with session storage
== Motivation ==

This implementation provides session [[Technology:Web storage|web storage]]. Apart from that, it is identical to [[Contribution:html5local]]. The illustration, architecture and usage is explained on that implemenation page.
== Metadata ==

* [[developedBy::Contributor:tzimmer]]
* [[uses::Language:HTML5]]
* [[uses::Language:JavaScript]]
* [[uses::Language:JSON]]
* [[uses::Technology:Web storage]]
* [[uses::Web browser]]
* [[uses::Feature:Hierarchical_company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Web UI]]
",2013-06-12 14:58:01.752,2017-07-05 15:28:21.348008
Concept,Streaming,"== Headline ==

The [[capability]] of processing data in a stream

== Metadata ==

* [[instanceOf::Capability]]
* [[sameAs::http://en.wikipedia.org/wiki/Stream_(computing)]]

",2013-06-12 14:56:10.808,2017-07-04 13:44:58.316366
Concept,Queue,"== Headline ==

A first in, first out (FIFO) [[abstract data type]]

== Citation ==

(http://en.wikipedia.org/wiki/Queue_(abstract_data_type), 19 November 2015)

In computer science, a queue is a particular kind of abstract data type or collection in which the entities in the collection are kept in order and the principal (or only) operations on the collection are the addition of entities to the rear terminal position, known as enqueue, and removal of entities from the front terminal position, known as dequeue. This makes the queue a First-In-First-Out (FIFO) data structure. In a FIFO data structure, the first element added to the queue will be the first one to be removed. This is equivalent to the requirement that once a new element is added, all elements that were added before have to be removed before the new element can be removed. Often a peek or front operation is also entered, returning the value of the front element without dequeuing it.

== Metadata ==

* [[instanceOf::Abstract data type]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Queue_(abstract_data_type)]]

",2013-06-12 14:55:36.98,2017-07-04 13:44:54.788166
Concept,Quicksort,"== Headline ==

The Quicksort [[sorting algorithm]]

== Citation ==

(http://en.wikipedia.org/wiki/Quicksort, 21 April 2013)

Quicksort is a divide and conquer algorithm. Quicksort first divides a large list into two smaller sub-lists: the low elements and the high elements. Quicksort can then recursively sort the sub-lists.

== Illustration ==

See the visualization of Quicksort on Wikipedia:

http://en.wikipedia.org/wiki/Quicksort

See various illustrations of Quicksort as available on YouTube, e.g.:

<media url=""http://www.youtube.com/watch?v=ywWBy6J5gz8""/>

=== Quicksort in Haskell ===

<syntaxhighlight language=haskell>
-- Polymorphic sorting
sort :: Ord a => [a] -> [a]
sort [] = []
sort (pivot:rest) =
             (sort lesser)
          ++ [pivot]
          ++ (sort greater)
  where
    lesser  = filter (< pivot) rest
    greater = filter (>= pivot) rest
</syntaxhighlight>

The first equation models that an empty list is sorted vacuously. The second equation picks the head of the list as the 'pivot' element, which is used to partition the input. Indeed, all elements 'lesser' than 'pivot' are collected in one helper list and all elements 'greater' (or equal) than 'pivot' are collected in another helper list. Quicksort is then invoked recursively on 'lesser' and 'greater' and the intermediate results are appended with the 'pivot' element in between.

The implementation is exercised as follows:

<syntaxhighlight language=haskell>
main = do
  let input = [2,4,3,1,4]
  print $ sort input -- [1,2,3,4,4]
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Quicksort]]
* [[instanceOf::Sorting algorithm]]
* [[instanceOf::Divide and conquer algorithm]]
",2013-06-12 14:55:38.208,2017-07-04 13:44:55.118479
Contributor,diego9627,"",2015-04-25 20:29:03.174,2017-07-04 13:48:06.522096
Contributor,derzufall,"",2015-07-24 13:22:11.952,2017-07-04 13:48:06.679272
 Technology,Email,"",2015-08-13 14:57:57.797,2017-07-04 13:48:07.49456
Contribution,modularLb,"== Headline ==

A [[Technology:LogicBlox]]-based implementation that makes good use of [[Language:DatalogLB]] modules

== Motivation ==

This is a fully modularized variation on [[Contribution:basicLb]]. There are modules for the schema, the instance, the query for totaling salaries, the transformation for cutting salaries. The modules for query and transformation use inactive blocks. [[Technology:LogicBlox]] also enables modularity and separate compilation for basic [[Language:DatalogLB]] files; see [[Contribution:projectLb]] for an illustration. The present implementation uses proper module syntax though; each module declares explicitly the module and visibility of declarations and rules.

== Architecture ==

The implementation consists of these modules:
* ''oneOone/Schema.logic'': the schema for companies
* ''oneOone/Instance.logic'': the Acme company (and another company for testing)
* ''oneOone/total.logic'': the query for totaling salaries
* ''oneOone/cut.logic'': the delta for cutting salaries

There are these additional files:
* ''modularLb.project'': LogicBlox project description
* ''Makefile'': script for running the implementation
* ''baseline'': baseline for regression testing

== Usage ==

Tested with [[Technology:LogicBlox]] 3.7.

This implementation requires that lb-services is running.

Run ""make"" for a self-testing illustration.

== Metadata ==
* [[memberOf::Theme:Datalog basics]]
* [[uses::Language:DatalogLB]]
* [[uses::Technology:LogicBlox]]
* [[uses::Technology:Make]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:Thiago Tonelli Bartolomei]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:30.743,2017-07-05 15:29:16.880026
Contribution,mvar,"== Headline ==

[[Concurrent programming]] in [[Language:Haskell]] with [[MVar]]s

== Motivation ==

The implementation demonstrates [[concurrent programming]] in [[Language:Haskell]] with Haskell's [[MVar]]s, i.e., thread synchronization variables. To this end, [[task parallelism]] is leveraged in a manner that computations for the operations for totaling and cutting salaries are organized in multiple threads. In fact, a new thread is created for each new sub-department as it is encountered along the computation. The result of from each thread is stored in an [[MVar]] and then collected and aggregated with other results by the ""upper"" thread. Clearly, if efficiency rather than illustration was the objective here, then a more resource-aware strategy is needed.

== Illustration ==

=== Concurrent cutting ===

We create new threads using <syntaxhighlight lang=""haskell"" enclose=""none"">forkIO :: IO () -> IO ThreadId</syntaxhighlight> provided by Haskell's concurrency library <syntaxhighlight lang=""haskell"" enclose=""none"">Control.Concurrent</syntaxhighlight>. This function executes the given IO action in a new thread and returns a <syntaxhighlight lang=""haskell"" enclose=""none"">ThreadId</syntaxhighlight> value. On the top company level we do so for every department:

<syntaxhighlight lang=""haskell"">
cutCompany :: Company -> IO Company
cutCompany (Company n depts) = do
    mvars <- forM depts $ \d -> do
        mvar' <- newEmptyMVar
        forkIO $ cutDept mvar' d
        return mvar'
    cutDepts <- takeAllMVars mvars
    return $ Company n cutDepts
</syntaxhighlight>

We iterate over the departments by making use of <syntaxhighlight lang=""haskell"" enclose=""none"">forM</syntaxhighlight> in line 3. For each department we create a new empty <syntaxhighlight lang=""haskell"" enclose=""none"">MVar</syntaxhighlight> value, which we then pass to the cut function, which we start in a new thread. We collect all <syntaxhighlight lang=""haskell"" enclose=""none"">MVar</syntaxhighlight> values in <syntaxhighlight lang=""haskell"" enclose=""none"">mvars</syntaxhighlight>. In line 7 we wait for the results of the computations. The new company is returned in line 8. Similar to this we cut departments:

<syntaxhighlight lang=""haskell"">
cutDept :: MVar Department -> Department -> IO ()
cutDept mvar (Department n m dus eus) = do
    mvars <- forM dus $ \d -> do
        mvar' <- newEmptyMVar
        forkIO $ cutDept mvar' d
        return mvar'
    cutDus <- takeAllMVars mvars
    putMVar mvar $ Department n (cutEmployee m)
                                (cutDus)
                                (map cutEmployee eus)
</syntaxhighlight>

The difference to <syntaxhighlight lang=""haskell"" enclose=""none"">cutCompany</syntaxhighlight> is that <syntaxhighlight lang=""haskell"" enclose=""none"">cutDept</syntaxhighlight> puts the new department in a given <syntaxhighlight lang=""haskell"" enclose=""none"">MVar</syntaxhighlight> value.

The cutting of direct department employees is not performed in a new thread:

<syntaxhighlight lang=""haskell"">
cutEmployee :: Employee -> Employee
cutEmployee (Employee name address salary) = Employee name address $ salary / 2
</syntaxhighlight>

=== Collecting results ===

Both functions <syntaxhighlight lang=""haskell"" enclose=""none"">cutCompany</syntaxhighlight> and <syntaxhighlight lang=""haskell"" enclose=""none"">cutDept</syntaxhighlight> need to wait for the child-threads to terminate. To do so we provide a function <syntaxhighlight lang=""haskell"" enclose=""none"">takeAllMVars</syntaxhighlight>:

<syntaxhighlight lang=""haskell"">
takeAllMVars ::  [MVar a] -> IO [a]
takeAllMVars = mapM takeMVar
</syntaxhighlight>

This function takes all <syntaxhighlight lang=""haskell"" enclose=""none"">MVar</syntaxhighlight> values one by one blocking on every empty MVar.

== Architecture ==

[this!!Total.hs] and [this!!Cut.hs] provide functionality for totaling and cutting salaries in a concurrent way.
[this!!Utils.hs] contains a function to collect content of a list of <syntaxhighlight lang=""haskell"" enclose=""none"">MVar</syntaxhighlight> values.
The algebraic datatype for companies can be found in [this!!Company.hs].
[this!!Main.hs] collects test scenarios for totaling and cutting a sample company hosted by [this!!SampleCompany.hs].

== Usage ==

* [this!!Main.hs] has to be loaded into GHCi.
* The <syntaxhighlight lang=""haskell"" enclose=""none"">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Issues ==

* The current implementation does not address the problem of a possibly unbalanced department tree.
* The collection function for MVars blocks on every empty element. We may need a more sophisticated collection function.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Task parallelism]]
* [[developedBy::Contributor:tschmorleiz]]
* [[memberOf::Theme:Haskell potpourri]]
",2013-06-12 14:58:34.991,2017-07-05 15:29:26.149975
Contribution,haskellBarchart,"== Headline ==

Analysis of historical company data with [[Language:Haskell]]
== Characteristics ==

Historical data is simply represented as list of year-value pairs so that company data is snapshotted for a number of years and any analysis of historical data can simply map over the versions. A simple chart package for Haskell is leveraged to visualize the development of salary total and median over the years. In this manner, the contribution demonstrates how to declare external dependences via [[Technology:Cabal]]. Further, the contribution also demonstrates [[modularization]] and code organization. In particular, where clauses for [[local scope]] and export/import clauses for [[modularization]] are used carefully.
== Illustration ==

We would like to generate barcharts as follows:

[[media:https://raw.github.com/101companies/101haskell/master/contributions/haskellBarchart/baselines/total.svg]]

[[media:https://raw.githubusercontent.com/101companies/101haskell/master/contributions/haskellBarchart/baselines/median.svg]]

These barcharts are generated by the following functionality. Given a filename, a title (such as ""Total"" or ""Median"") and a year-to-data mapping, generate a PNG file with the barchart for the distribution of the data.

<fragment url=""src/Company/History.hs/function/chart""/>

== Metadata ==


* [[implements::Feature:Flat company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Median]]
* [[implements::Feature:History]]
* [[developedBy::Contributor:rlaemmel]]
* [[relatesTo::http://hackage.haskell.org/package/Chart-0.16]]
* [[basedOn::Contribution:haskellEngineer]]
",2013-06-12 14:57:32.44,2017-07-05 15:26:30.366076
Contributor,kkraemer,"
      Das ist die Seite von kkraemer.",2015-07-16 21:43:21.867,2017-07-04 13:48:06.675876
Contribution,haskellComposition,"== Headline ==

[[Data composition]] in [[Language:Haskell|]] with [[algebraic data type]]s

== Characteristics ==

The [[data model]] leverages [[data composition]] for companies with departmental nesting. Thus, an [[algebraic data type]] is used for departments so that recursive nesting can be expressed. The algebraic data type only needs a single [[data constructor]]. Thus, [[data variation]] is not exercised, but see [[Contribution:haskellVariation]] for an alternative with data variation.

== Illustration ==

The data model leverages an [[algebraic data type]] for departments; in this manner recursion is enabled:

<fragment url=""src/Company/Data.hs""/>

A sample company looks like this:

<fragment url=""src/Company/Sample.hs""/>

[[Feature:Total]] is implemented as follows:

<fragment url=""src/Company/Total.hs""/>

The following salary total is computed for the sample company:

<syntaxhighlight lang=""haskell"">
399747.0
</syntaxhighlight>

== Relationships ==

* See [[Contribution:haskellVariation]] for a contribution with a similar data model such that [[data variation]] is exercised in addition to [[data composition]].
* See [[Contribution:haskellEngineer]] for a contribution with a simple data model without support for departmental nesting. No algebraic data types are leveraged.
* See [[Contribution:haskellData]] for a contribution with a simple data model without support for departmental nesting. Algebraic data types are leveraged systematically for all types to distinguish the types nominally.

== Architecture ==

There are these modules:

<file url=""src/Company/Data.hs""/>: a data model for [[Feature:Hierarchical company]]
<file url=""src/Company/Sample.hs""/>: a sample company
<file url=""src/Company/Total.hs""/>: the implementation of [[Feature:Total]]
<file url=""src/Company/Cut.hs""/>: the implementation of [[Feature:Cut]]
<file url=""src/Main.hs""/>: Tests

The types of <file url=""src/Company/Data.hs""/> implement [[Feature:Closed serialization]] through Haskell's read/show.

== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell data]]
* [[memberOf::Theme:Haskell introduction]]
* [[varies::Contribution:haskellVariation]]
* [[basedOn::Contribution:haskellEngineer]]

",2013-06-12 14:57:37.775,2017-07-05 15:26:41.728552
Concept,Relational algebra,"== Headline ==

An algebra dealing with sets of finitary relations

== Details ==

Relational algebra is particularly relevant in the context of [[database]] [[query|queries]].

== Metadata ==

* [[instanceOf::Algebra]]
* [[sameAs::http://en.wikipedia.org/wiki/Relational_algebra]]
",2013-06-12 14:55:45.853,2017-07-04 13:44:55.907863
Feature,Grouping,"== Headline ==

Report salary distribution for different grouping criteria
== Description ==

Management needs to understand the distribution of salaries over the employees in the company and apply different criteria (dimensions) for grouping. Employees could be grouped by gender, age (in fact, age range), department, and job role. For any given criterion, an appropriate chart may be used to visualize the distribution. For instance, distribution for age ranges could be visualized with a bar chart with one bar per age range.
== Motivation ==

This feature calls for a number of extensions to the data model: gender (male, female, or unspecified), date of birth (to be able to compute the age of an employee), and job role (such as developer, tester, and program manager). These extension are not in any way interesting on their own, but they prepare the data model for multi-dimensional data aggregation for reporting as commonly used in the area of Business Intelligence possibly with the use of OLAP cubes. Here, the addition of the gender is the most basic as it corresponds to a simple enumeration type. The addition of the date of birth is somewhat more interesting because age or age range need to be computed from the date of birth. The addition of job roles triggers the need for extra joins in data aggregation, if we assume that job roles are organized, for example, in a designated table in a database with a normalized schema.
== Illustration ==

Under construction.
== Relationships ==

* See [[Feature:Reporting]] for the abstact base feature of [[Feature:Charting]].
* See [[Feature:Median]] and [[Feature:Charting]] for further aspects of reporting.
== Metadata ==

* [[isA::Optional feature]]
* ",2013-06-12 14:59:46.25,2017-07-04 15:26:32.280598
Concept, Standard Library,"",2015-08-12 14:42:47.382,2017-07-04 13:48:07.454206
Contribution,projectLb,"== Headline ==

A [[Technology:LogicBlox]]-based implementation that makes use of a project file

== Motivation ==

This implementation revises [[Contribution:basicLb]] to use compilation. To this end, a project file is used to collect all compilable blocks. The actual [[Language:DatalogLB]] files are retained, as is. That is, no extra module declarations are added to the files. (Using this approach, active blocks can be compiled, whereas inactive blocks are execcuted with bloxbath with the help of .lb files.) See [[Contribution:modularLb]] for a fully modularized implementation which also uses ""lb"" instead ""bloxbatch"".

== Architecture ==

The implementation consists of these files:
* ''schema.logic'': the schema for companies
* ''instance.logic'': the Acme company (and another company for testing)
* ''instance.lb'': a bloxbatch script to process ''instance.logic''.
* ''total.logic'': the query for totaling salaries
* ''total.lb'': a bloxbatch script to process ''total.logic''.
* ''cut.logic'': the delta for cutting salaries
* ''Makefile'': script for running the implementation
* ''baseline'': baseline for regression testing

== Usage ==

Tested with [[Technology:LogicBlox]] 3.7.

Run ""make"" for a self-testing illustration.

== Metadata ==
* [[memberOf::Theme:Datalog basics]]
* [[uses::Language:DatalogLB]]
* [[uses::Technology:LogicBlox]]
* [[uses::Technology:Make]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:Thiago Tonelli Bartolomei]]
* [[developedBy::Contributor:rlaemmel]]
",2013-06-12 14:58:38.65,2017-07-05 15:29:30.870357
Contribution,hibernate2,"== Headline ==

[[Object-Relational mapping]] with [[Technology:Hibernate]]

== Implementations ==

[[Contribution:hibernate|Contribution:hibernate]] is a technical '''prerequisite''' for this implementation, since it holds the hibernate jars.

The given implementation is also a '''variation''' of [[Contribution:hibernate|hibernate]]. The variation is concerned with object model and relational schema details.
That is, this project's object model is mapped to a relational schema, which represents the company structure in a compositional way, while [[Contribution:hibernate|hibernate]]'s relational schema uses backward references.

== Motivation ==

An [[object model]] for companies is provided, as well as classes to total and cut salaries.
This is, we apply a basic style of [[OO programming]]. Instances the company model are [[Persistence|persisted]] by making use of the [[Technology:Hibernate]]
technology. To that end the [[O/R mapping]] is realized by making use of [[Language:XML]]-mapping files for departments, employees, subunits and persons.

== Architecture ==

Package ''org.softlang.om'' holds the java object model for [[Feature:Hierarchical company]] and the xml-mapping files.
''org.softlang.hibernate'' provides functionality to [[Feature:Total]] and [[Feature:Cut]] salaries.
This package also hosts ''Init.java'' which tells hibernate to create tables; also test cases (see below) and
and ''HibernateConnectivity.java'' to easily load and save company objects. This class uses the ''SessionFactory'' provided by ''HibernateUtil.java'' in ''org.softlang.util''.
The folder ''scripts'' contains sql-scripts to create tables (extracted from the hibernate log), populate data and to drop tables.
Hibernate configuration files (see below) can be found in the project's root folder.

== Usage ==

'''Steps of a typical demo:'''
* Make sure you start from an initial distribution.
* Build the project with Eclipse.
(The following steps are explained in detail below.)
* Start the HSQL database server.
* Run ''org/softlang/hibernate/Init.java'' to create tables.
* Run the database monitor and populate the tables with scripts/PopulateTables.
* Patch hibernate.cfg.xml to disable ""drop and re-recreate"".
* Run ''org/softlang/hibernate/Tests.java''.


'''How to start the database server:'''
* Start it from the command line.
* Go to the data dir of the distribution.
* Run the following command:
** > java -classpath ../../hibernate/lib/hsqldb.jar org.hsqldb.Server
** You can also send it to the background if you like.
You can also go to the root dir and run a ""make start-db"".


'''How to create new tables:'''
* Run ''Init.java'' in ''org.softlang.hibernate''.


'''How and why to start the database monitor:'''

* Start it from the command line.
* Run the following command:
** > java -classpath ../hibernate/lib/hsqldb.jar org.hsqldb.util.DatabaseManagerSwing
** You can also send it to the background if you like.
You can also go to the root dir and run a ""make start-gui"".
* When the GUI pops up, make sure to select ""HSQL Database Engine Server"".
* If you had performed Main already, you see the tables of the app.
* Populate these tables:
** Open scripts/PopulateTables (File -> Open Script)
** Press ""Execute SQL""


'''How and why to patch ''hibernate.cfg.xml?'' '''

You can edit that XML file in Eclipse.
It is the configuration that is used for Hibernate for persistency.
Upon the first use the EventManager the database must be initialized.
Hence it says:
: <property name=""hbm2ddl.auto"">create</property>
Subsequently, we want to keep all data.
Hence the line should be commented out.

'''How to test:'''

* Run ''Tests.java'' in ''org.softlang.hibernate''.

== Metadata ==

* [[uses::Language:XML]]
* [[uses::Language:Java]]
* [[uses::Language:SQL]]
* [[uses::Technology:Hibernate]]
* [[uses::Technology:HSQLDB]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Mapping]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]
",2013-06-12 14:57:52.488,2017-07-05 15:28:02.790076
Concept,Modularization,"== Headline ==

The process towards [[modularity|modular]] [[software]]

== Illustration ==

Consider, for example, [[Contribution:haskellStarter]], which is a non-modular ([[Language:Haskell]]-based) implementation of the [[system:Company]]. Also, consider [[Contribution:haskellEngineer]], which is a modular ([[Language:Haskell]]-based) implementation. In fact, the latter was obtained from the former by modularization. That is, both implementations implement the same features with the same code, except that the former implementation collects all code in one monolithic module, whereas the latter [[seperation of concerns|separates concerns]] by dedicating modules to the different implemented features.

== Metadata ==

* [[relatesTo::Modularity]]
* [[relatesTo::Modular programming]]
* [[relatesTo::Separation of concerns]]
* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Software engineering]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:56.045,2017-07-04 13:44:47.634698
Concept,Ambiguity,"",2015-08-21 15:51:12.508,2017-07-04 13:48:07.710848
Theme,Data parallelism,"== Headline ==

Data-parallelism theme of implementations

== Metadata ==

* [[isA::Namespace:Theme]]
* ",2013-06-12 15:02:24.413,2017-07-04 15:26:32.655982
Contribution,javaReflection,"== Headline ==

Data processing in [[Language:Java]] with [[Technology:java.lang.reflect]]

== Characteristics ==

[[Language:Java]]'s [[reflection]] is put to work to walk object graphs in a generic manner so that queries and transformations can be expressed very concisely. The sub-objects in an object graph are made available through a reusable [[iterator]]. Simple queries and transformations (such as [[Feature:Total]] and [[Feature:Cut]]) can be simply implemented by accessing the list of subobjects. The resulting code is thus rather concise, when compared to a conservative implementation, e.g., in [[Contribution:javaComposition]] (and many others). The particular approach implies the use of type casts and thus is limited in terms of static type checking.

== Metadata ==

* [[uses::Language:Java]]
* [[uses::Technology:java.lang.reflect]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]

* [[developedBy::rlaemmel]]

",2013-06-12 14:58:12.729,2017-07-05 15:28:46.951093
Contribution,emfReflexive,"== Headline ==

reflexive [[Technology:EMF]] [[Model to Model transformation]]

== Motivation ==

This implementation demonstrates [[Model to Model transformation]]s with [[Technology:EMF]] for [[Language:Java]]. Contrary to [[Contribution:emfGenerative]], the [[model]]s properties are accessed and modified by [[reflexive]] method calls to the EMF [[Model]] itself. The [[metamodel]]s used in this implementation are given in [[Language:Ecore]], models are in [[Language:XMI]]. The implementation uses the Total scenario to show a [[exogenous model transformation]]. The Cut scenario shows an [[endogenous model transformation]].

== Illustration ==

The structure of a company can be modeled as a metamodel. By doing so, one can load any company conforming to this metamodel by first loading the metamodel and then loading the actual model:
<syntaxhighlight lang=""java"">
/* Load metamodel */
Resource companyMetamodel = resourceSet.createResource(URI.createFileURI(""Metamodels/Company.ecore""));
companyMetamodel.load(null);
EPackage.Registry.INSTANCE.put(""http://www.company.com"", companyMetamodel.getContents().get(0));

/* code ommited */

/* Load model */
Resource companySampleModel = resourceSet.createResource(URI.createFileURI(""Models/sampleCompany.xmi""));
companySampleModel.load(null);
</syntaxhighlight>


Then, attributes can be modified using reflexive calls. For example, the Cut operation can be implemented by iterating over all elements of the model, retrieving the value for the salary if the current element is a Employee and then setting the salary attribute for this employee to the half of what was returned earlier:
<syntaxhighlight lang=""java"">
if( currentModelElement.eClass().getName().equals(""Employee"") ) {
   EStructuralFeature salaryAttribute = currentModelElement.eClass().getEStructuralFeature(""salary"");
   double currentSalary = (Double) currentModelElement.eGet(salaryAttribute);
   currentModelElement.eSet(salaryAttribute, currentSalary/2);
}
</syntaxhighlight>

== Architecture ==

Company.ecore is the implements the data model for [[Feature:Hierarchical company]]. It is the metamodel used for the transformation and can be found in the ""Metamodels"" directory.

The model that holds the actual data is sampleCompany.xmi and can be found in the ""Models"" directory.

The model sampleCompany holds the data for the [[Feature:Hierarchical company]].

The metamodel Total is used for the [[Feature:Cut]] feature.


The actual transformations are implemented in the class RunTransfo.

== Usage ==
In order to execute the transformations, a Eclipse version with EMF support is needed (e.g. [http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/junor the Eclipse EMF version]).

The project can then be imported in Eclipse. To excercise the transformations, compile and execute the Java class RunTransfo.java.

== Metadata ==

* [[uses::Language:Ecore]]
* [[uses::Language:Java]]
* [[uses::Language:XMI]]
* [[uses::Technology:EMF]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Mapping]]
* [[developedBy::Contributor:Hugo Brunelière]]
* [[reviewedBy::Contributor:martinleinberger]]
* [[memberOf::Theme:MDE]]

",2013-06-12 14:57:16.545,2017-07-05 15:25:55.940032
Concept,Relationalware,"== Intent ==

a technological space focused on relational databases

== Metadata ==

* [[instanceOf::Space]]

",2013-06-12 14:55:46.977,2017-07-04 13:44:55.958989
Technology,Bottle,"== Headline ==

A micro [[Web-application framework]] written in [[Language:Python]], inspired by [[Technology:Sinatra]].

== Illustration ==

Bottl employs an embedded [[Domain-specific language]] to route and handle requests:

<syntaxhighlight lang=""python"">
#!/usr/bin/env python
from bottle import get, run

# A static route
@get('/')
def hello_world():
    return ""Hello, World!""

# A route with a parameter
@get('/hello/<name>')
def hello_name(name):
    return ""Hello, {0}!"".format(name);

run(port = 3000)
</syntaxhighlight>

When visiting this server's root page, it will show ""Hello, world!"". When visiting a URL like ""/hello/Human"", it will pattern-match the route and display ""Hello, Human!"".

== Metadata ==

[[uses::Language:Python]]
[[sameAs::http://bottlepy.org/]]
[[isA::Web-application_framework]]
[[uses::External DSL]]

",2014-08-19 23:53:33.729,2017-07-04 15:26:36.31989
Concept,Reverse function,"== Headline ==

a [[Function]] for reversing a [[list]]

== Illustration ==

[[Language:Haskell]]'s ''reverse'' function for lists works like this:

<syntaxhighlight lang=""haskell"">
Prelude> reverse [1,2,3]
[3,2,1]
Prelude> reverse ""ABBA""
""ABBA""
</syntaxhighlight>

In the first example, reverse is applied to a list of numbers.

In the second example, reverse is applied to a string, i.e., a list of characters.

[[Language:Haskell]]'s ''reverse'' function for lists is defined like this:

<syntaxhighlight lang=""haskell"">
reverse :: [a] -> [a]
reverse =  foldl f []
 where f = flip (:)
</syntaxhighlight>

That is, ''reverse'' performs a left-associative [[Fold function|fold]] that composes the current element and the recursive result of folding.
We illustrate this by inlining the definition of ''foldl'' for a specific argument list:

<syntaxhighlight lang=""haskell"">
reverse [1,2,3] = (([] `f` 1) `f` 2) `f` 3
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Common function]]
",2013-06-12 14:55:49.907,2017-07-04 13:44:56.254166
Concept,Remote procedure call,"== Headline ==

Execute of a [[procedure]] on a remote computing node

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Remote_procedure_call]]
* [[isA::Concept]]

",2013-06-30 13:48:26.844,2017-07-04 15:26:33.491647
Contribution,html5tree,"== Intent ==

[[Web programming]] based on the [[Language:HTML5]] ecosystem using [[Ajax]] style and a tree view
== Motivation ==

This [[Web application|web application]] extends the [[Contribution:html5ajax|html5ajax]] implementation with a tree view, thereby improving the [[Feature:Browsing]]. This is necessary to guarantee a clear overview while deleting, moving and creating departments and employees due to [[Feature:Restructuring]]. [[Language:JavaScript]] is very suitable for trees, because it allows [[Client|client side]] [[Technology:DOM]] manipulation. This is necessary for creating fast, expandable tree structures. We have used the [[Technology:jQuery]] [[Library|library]] to gain proper [[Technology:DOM]] manipulation.
== Illustration ==

The first part of this illustration shows, how the tree view is created. The second part illustrates the deletion of a department as it is part of the [[Feature:Restructuring]] feature.

=== Tree creation ===

As shown in [[Contribution:html5ajax]], the data is stored within a [[Technology:MySQL]] database. After the client creates the initial request, a [[Server|server]] side [[Language:PHP]] script called [this!!server/treeServer.php] prepares the data for a [[Language:JSON]] response. The initial [[Technology:XMLHttpRequest]] is rather simple:

<syntaxhighlight lang=""java"" source=""html5tree/client/javascript/model/treeModel.js"">
...

treeModel.load = function(strategy, id) {
    treeModel.initCompany(id);
    treeModel.company.action = ""load"";

    requestUnit.sendRequest(strategy, treeModel.url, treeModel.company);
}

...
</syntaxhighlight>

The <syntaxhighlight lang=""java"" enclose=""none"">requestUnit</syntaxhighlight> (file: [this!!client/javascript/model/XMLHttpRequest.js]) is developed to create generic requests. The given strategy updates the tree view with the retrieved data.

==== Server ====

The server side [[Language:PHP]] script [this!!/server/treeServer.php treeServer.php] creates the objects necessary for the tree. Therefore, it loads the entities from the database with the ids and names, bacause there is no need for total oder address values within the tree display. The following function illustrates the initialization of the [[Feature:Hierarchical_company]]:

<syntaxhighlight lang=""php"" source=""html5tree/server/treeServer.php"">

...

function perform($jsonObject) {
    $action = $jsonObject->action;

    switch ($action) {
        case ""load"":
            return loadCompany($jsonObject);
    }
}

function loadCompany($jsonObject) {
    // The $jsonObject contains the request of the client.
    $id = $jsonObject->id;

    // This is the SQL statement to get the company with a given id.
    $request = ""SELECT * FROM company WHERE id = $id"";
    $result = mysql query($request);
    $row = mysql fetch object($result);

    // These few commands create a new company and set the id and the name.
    $company = new Company();
    $company->setId($row->id);
    $company->setName($row->name);

    // The subdepartments are added to the company.
    $company->setDepartments(loadDepartmentsForCompany($id));

    return $company;
}

...
</syntaxhighlight>

The <syntaxhighlight lang=""php"" enclose=""none"">perform($jsonObject)</syntaxhighlight> method interprets the request of the [[Client|client]]. After the server retrieves the company id, it is able to select the company out of the [[Technology:MySQL]] [[DBMS]]. After that, a new company object is filled with id and name. The subdepartments are added to the company within a nested tree structure. The <syntaxhighlight lang=""php"" enclose=""none"">$company</syntaxhighlight> is transformed to [[Language:JSON]] before the response is returned to the client:

<syntaxhighlight lang=""php"" source=""html5tree/server/databaseConnection/connection.php"">
...

echo json encode(perform($jsonObject));

...
</syntaxhighlight>

==== Client ====

In the introduction of the tree creation section we have introduced the parameter <syntaxhighlight lang=""java"" enclose=""none"">strategy</syntaxhighlight>, which is used for the views callback initialization after the response is returned [[Asynchronous communication|asynchronously]]. This strategy is initialized in the [this!!client/javascript/controller.js controller.js] and simply invokes the method <syntaxhighlight lang=""java"" enclose=""none"">refresh</syntaxhighlight> of the [this!!client/javascript/view/treeView.js treeView.js]:

<syntaxhighlight lang=""java"" source=""html5tree/client/javascript/view/treeView.js"">
...

// This method refreshs the tree view.
treeView.refresh = function() {
    // The content variable contains the generated html string for a nested unordered list.
    content = ""<ul>"";

    // If there are subdepartments, create a list item with a 'plus' symbol
    if (treeModel.response.departments.length > 0) {
        // The 'plus' symbol is the button for expanding the tree.
        content += ""<li> <input id=\""0\"" ""
            + ""type=\""image\"" src=\""symbols/plus.gif\"" ""
            + ""onclick=\""treeNavigation.toggleList(this)\"">"";
        // The name of the company is the button for company load.
        content += ""<input type=\""button\"" class=\""companyButton\"" value=\""""
            + treeModel.response.name
            + ""\"" onclick=\""controller.loadCompany(""
            + treeModel.response.id
            + "")\"">"";
        // The subdepartments are added as sublists of the company list item.
        content += treeView.showDepartments(treeModel.response.departments);
        content += ""</li>"";
    // If there are no subdepartments, create a list item with a 'dot' symbol
    } else {
        content += ""<li> <img src=\""symbols/leaf.gif\""> <b>""
            + treeModel.response.name
            + ""</b></li>"";
    }

    content += ""</ul>"";

    // This replaces the content of the tree division with the generated html code in 'content'.
    document.querySelector('#tree').innerHTML = content;
}

...
</syntaxhighlight>

Every tree item is a list item of a nested unordered list and consists of two visible parts, a symbol and a name. The symbol refers to the position of the item within the tree. There are ''dots'' for leafs and ''plus'' and ''minus'' symbols for unexpanded and expanded tree items. The name is a link, which refers to a load function. This function returns a complete data set for the requested entity.

=== Delete department ===

The following part illustrates an example for the deletion of a department according to the [[Feature:Restructuring]]. Please visit [[Contribution:html5ajax]] to get an overview over loading company entities with XMLHttpRequest and JSON. Keep in mind, that there is no need to load subdepartments or employees for a specific department, since the tree provides the structure to pick these subelements.

After a department is selected, the user can press the ''delete'' button to invoke the corresponding [[Client|client]] side delete method implemented in [this!!/client/javascript/model/departmentModel.js departmentModel.js]:

<syntaxhighlight lang=""java"" source=""html5tree/client/javascript/model/departmentModel.js"">
departmentModel.deleteEntity = function(strategy) {
	departmentModel.initDepartment(departmentModel.response.id);
	departmentModel.department.action = ""delete"";
	requestUnit.sendRequest(strategy, departmentModel.url, departmentModel.department);
}
</syntaxhighlight>

This method will send a request in the JSON format, which contains all necessary informations to delete a department with a given id. Most of the JSON messages in the web application are simplified versions of the messages in [[Contribution:html5ajax]].

<syntaxhighlight lang=""text"">
{
	""id"":1,
	""table"":""department"",
	""action"":""delete""
}
</syntaxhighlight>

This request is received by the [[Server|server]] side [[Language:PHP]] script, which deletes the department with the id 1. The cascading delete anchored in the database provides a recursive deletion for all containing subdepartments. Hence, the following shows the simple delete request:

<syntaxhighlight lang=""php"" source=""html5tree/server/departmentServer.php"">
$request = ""DELETE FROM department WHERE id = "" . $id;
mysql query($request);
</syntaxhighlight>
== Architecture ==

The basic architecture is similar to the architecture of [[Contribution:html5ajax]]. It is based on the [[MVC]] [[Architectural pattern|architectural pattern]] in combination with a [[Client-server architecture|client-server architecture]]. The key difference is the encapsulation of all views within one [[Language:HTML]] file named [this!!client/index.html index.html], controlled by different [[Language:JavaScript]] files, which are located in [this!!client/javascript/view] and the [this!!client/javascript/controller.js].
== Usage ==

You need a web and [[Technology:MySQL]] server to run this application. In this tutorial both will be taken care of by XAMPP: http://www.apachefriends.org/en/xampp.html

This tutorial adopts some parts of [[Contribution:mySqlMany]]. The company.sql and sampleCompany.sql are modified for this project. They are located in the ""sqlScripts"" folder.

* Download and install XAMPP
* Open the ""XAMPP Control Panel"" and start ""Apache"" and ""MySQL""
* Use the guideline of [[Contribution:mySqlMany]] up to ""Populate tables..."" with the modified sql scripts.

Once the database is running, follow the next steps:

* To start the application, you need to download all project files except the README
* Put the files into the htdocs directory of your XAMPP (a new subdirectory in ""htdocs"" is recommended)
* Run index.html

The project is provided as a netbeans project. If you want to change the code, you have to:

* Download (http://netbeans.org/) and install [[Technology:NetBeans]]
* ""Open project"" and select the html5tree folder
== Metadata ==
* [[developedBy::Contributor:tzimmer]]
* [[uses::Language:HTML5]]
* [[uses::Language:JavaScript]]
* [[uses::Language:PHP]]
* [[uses::Language:SQL]]
* [[uses::Language:JSON]]
* [[uses::Technology:MySQL]]
* [[uses::Technology:XAMPP]]
* [[uses::Technology:Apache HTTP Server|Apache HTTP Server]]
* [[uses::Technology:XMLHttpRequest]]
* [[uses::Technology:jQuery]]
* [[uses::Web browser]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Ranking]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Restructuring]]
* [[implements::Feature:Web UI]]
",2013-06-12 14:58:03.556,2017-07-05 15:28:25.467247
Concept,Foo,"",2015-11-12 06:55:33.045,2017-07-04 13:48:08.247095
Concept,X y,"",2015-11-12 06:57:20.807,2017-07-04 13:48:08.250451
Concept,Schema-first mapping,"== Intent ==

start from a schema rather than an object model in [[O/X mapping|O/X]] or [[O/R mapping]]

== Description ==

TBD

== Discussion ==

See [[Code-first mapping]] for the counter-part.

== Metadata ==

* [[instanceOf::Mapping]]
",2013-06-12 14:55:54.361,2017-07-04 13:44:56.491901
Concept,Continuous Integration,== Introduction ==,2015-11-19 18:34:30.693,2017-07-04 13:48:08.518047
Contributor,felix-kloft,"",2015-11-29 15:44:32.558,2017-07-04 13:48:08.651516
Concept,Around_advice,"== Metadata ==
* [[instanceOf::Advice]]
",2013-06-12 14:53:18.726,2017-07-04 13:44:37.714067
Theme,NoSQL,"== Headline ==

Modern database theme of implementations
== Description ==

Classically, relational (SQL-based) databases were used to manage large-volume data. These days, additional options have become commonplace. For instance, there are technologies serving the MapReduce programming model on distributed file systems; there are various NoSQL approaches, e.g., document-based databases or BigTable clones. '''This theme is under construction.'''
== Metadata ==

* [[isA::Namespace:Theme]]
* [[sameAs::http://en.wikipedia.org/wiki/NoSQL]]
* [[relatesTo::https://github.com/avaranovich/datatechcourse/wiki]]

",2013-06-12 15:02:27.137,2017-07-04 15:26:32.774877
Concept,Selection sort,"== Headline ==

The Selection sort [[sorting algorithm]]

== Citation ==

(http://en.wikipedia.org/wiki/Selection_sort, 21 April 2013)

The algorithm divides the input list into two parts: the sublist of items already sorted, which is built up from left to right at the front (left) of the list, and the sublist of items remaining to be sorted that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.

== Illustration ==

See the visualization of Selection sort on Wikipedia:

http://en.wikipedia.org/wiki/Selection_sort

See various illustrations of Selection sort as available on YouTube, e.g.:

<media url=""http://www.youtube.com/watch?v=Ns4TPTC8whw""/>

=== Selection sort in Haskell ===

<syntaxhighlight language=haskell>
-- Polymorphic sorting
sort :: Ord a => [a] -> [a]
sort xs = selects xs

-- Repeat selection of smallest element
selects :: Ord a => [a] -> [a]
selects [] = []
selects xs = x : selects xs'
  where
    x = smallest (head xs) (tail xs)
    xs' = remove x xs

-- Find smallest element
smallest :: Ord a => a -> [a] -> a
smallest x [] = x
smallest x (y:ys) = smallest (min x y) ys

-- Remove a given element
remove :: Eq a => a -> [a] -> [a]
remove _ [] = error ""Element not found for removal.""
remove x (y:ys) =
  if x==y
    then ys
    else y : remove x ys
</syntaxhighlight>

The main sorting function relies on helpers to model sorting as repeated selection of the smallest element from the unsorted input. That is, the ''selects'' helper repeats selection combined with removal of the smallest element; the ''smallest'' helper determines the smallest element in an unsorted list while starting with its head as the first candidate; the ''remove'' helper removes a given element from a list following the pattern of [[linear search]].

The implementation is exercised as follows:

<syntaxhighlight language=haskell>
main = do
  let input = [2,4,3,1,4]
  print $ sort input -- [1,2,3,4,4]
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Selection_sort]]
* [[instanceOf::Sorting algorithm]]
",2013-06-12 14:55:58.865,2017-07-04 13:44:56.958859
Concept,Serialization,"== Headline ==

The ability of de-/serializing program data

== Details ==

[[Serialization]] relies an serialization [[format]], e.g., one that is based on [[Language:XML]] or [[Language:JSON]]. Serialization also necessitates some [[library]] support for routines for serialization and deserialization. Some serialization approaches use [[metadata]] to control details of mapping and representation for serialized data. Serialization may be more or less technology- or platform-dependent; see the distinction of [[open serialization|open]] versus [[closed serialization]].

== Relationships ==

* [[Serialization]] and [[persistence]] are similar concepts. Typically, serialization aims at serializing program data as a monolithic unit, whereas persistence aims at storing and resurrecting program data at a more fine-grained level, also for the benefit of performance. In the case of serialization, data of a given program is often stored in just a single file or transmitted as a stream, whereas in the case of persistence, program data may be stored in a database with several tables also enabling on-demand resurrection.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Serialization]]
",2013-06-12 14:56:00.414,2017-07-04 13:44:57.218881
Contributor,cEhlen,"",2015-12-09 23:11:51.145,2017-07-04 13:48:08.695967
Contribution,tabaluga,"== Headline ==

Dealing with [[large banana]]s in [[Language:Haskell|Haskell]]

== Characteristics ==

[[Large banana]]s are put to work as a means of [[generic programming]] so that operations for cutting or totaling salaries are implemented concisely. Only problem-specific aspects need to be specified. The overall data traversal is provided the [[generalized fold]]s and suitably predefined [[fold algebra]]s.

== Illustration ==

See the concept of [[large banana]]s for an illustration that actually involves the present contribution.

== Architecture ==

There are these modules:

* <file url=""src/Company/Data.hs""/>: a data model for [[Feature:Hierarchical company]]
* <file url=""src/Company/Algebra.hs""/>: support for [[large banana]]s
* <file url=""src/Company/Sample.hs""/>: a sample company
* <file url=""src/Company/Total.hs""/>: the implementation of [[Feature:Total]]
* <file url=""src/Company/Cut.hs""/>: the implementation of [[Feature:Cut]]
* <file url=""src/Company/Depth.hs""/>: the implementation of [[Feature:Depth]]
* <file url=""src/Main.hs""/>: Tests

== Usage ==

See [[Contribution:haskellComposition]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:HUnit]]
* [[uses::Technology:Cabal]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell genericity]]
",2013-06-12 14:59:02.766,2017-07-05 15:29:52.064473
Concept,Server-side scripting,"== Intent ==

A [[programming method]] for generating web content on the [[server]] dynamically

== Metadata ==

* [[instanceOf::Programming Method]]
* [[sameAs::http://en.wikipedia.org/wiki/Server-side\_scripting]]
",2013-06-12 14:56:00.93,2017-07-04 13:44:57.263879
Concept,Set,"== Headline ==

A container type without order and duplicates

== Metadata ==

* [[instanceOf::Abstract data type]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Set_(abstract_data_type)]]
",2013-06-12 14:56:01.7,2017-07-04 13:44:57.289934
Concept,Setter,"== Intent ==

write the state (a specific attribute) of an object

== Discussion ==

See the discussion of [[getter]]s.

== Metadata ==

* [[instanceOf::Instance method]]
",2013-06-12 14:56:01.94,2017-07-04 13:44:57.302512
Concept,Abbreviation,"",2015-12-12 18:57:32.568,2017-07-04 13:48:09.349395
Concept,QT,"",2015-12-13 12:43:42.466,2017-07-04 13:48:09.425378
Concept,Singleton pattern,"== Headline ==

A [[design pattern]] that restricts the instantiation of a [[class]] to one [[object]]

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Singleton_pattern]]
* [[instanceOf::Design pattern]]
",2013-06-12 14:56:02.981,2017-07-04 13:44:57.33414
Contribution,jqueryDom,"== Intent ==

Demonstrate a term-rewriting style of programmnig using jQuery, JavaScript and the DOM

== Motivation ==

jQuery is a library for DOM manipulation in Javascript. The DOM is a tree-structured view of a HTML page and jQuery allows programming this tree with a ""select and manipulate"" style. Term-rewriting is a style of programming which adopts a ""traverse and match"" approach. Rules are written which fire on any matching value and all values in the program are checked against that rule during a traversal of data. While ""select and manipulate"" is not quite the same as ""traverse and match"" style, the two overlap considerably.  This 101Companies implementation aims to demonstrate that overlap by using jQuery/DOM for a task which is very well suited to term-rewriting.

== Illustration ==

A commentry on the implementation is online at [[http://mattr.net.au/articles/101jquery/]].

== Architecture ==

The entire program is in one HTML file.  Static HTML is used to set up an initial state and Javascript does the rest.

== Usage ==

Open the <tt>101jquery.html</tt> file in your web browser (development is done in Safari4+ but the code works in many browsers), this sets up the static data and registers the javascript code to certain events.  The data is displayed as a series of nested boxes.  You can use the buttons at the top of the page to perform calculations on the data.  Calculations which generate a mega-company will replace the existing data with the result of the computation, and you will see the results on the page.  Refresh the page in your browser to return to the initial state.

== Metadata ==

* [[uses::Technology:jQuery]]
* [[uses::Language:Javascript]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Ranking]]
* [[implements::Feature:Depth]]
* [[developedBy::Contributor:Matt Roberts]]

",2013-06-12 14:58:21.904,2017-07-05 15:29:04.047066
Contribution,antlrObjects,"== Headline ==

[[Technology:ANTLR|]]-based [[object-text mapping]] for [[Language:Java|]]

== Characteristics ==

An [[Technology:ANTLR]]-based parser for a concrete syntax of companies is provided. The underlying grammar is LL(1). The parser translates text into company objects. To this end, a straightforward object model for companies is used. (In fact, the object model is very similar to the one of [[Contribution:javaComposition]]. The mapping is described by the semantic actions within the [[Technology:ANTLR]]-based parser description. Pretty printing is also supported in the manner that objects can be exported in the concrete syntax. Pretty printing provides an implementation of [[Feature:Unparsing]]. Basic operations are implemented on top of the object model in basic OO programming style.

== Illustration ==

The data model is implemented as [[POJO]]s. For example [[Feature:Company]] looks like this:

<fragment url=""src/main/java/org/softlang/company/model/Company.java/class/Company""/>

A Parser for [[Feature:Company]] will be generated by [[Technology:ANTLR]] using src/main/antlr/Company.g.

A Company if defined by:

<syntaxhighlight lang=""antlr"">
company returns [Company c]:
  { $c = new Company(); }
  'company' STRING
  { $c.setName($STRING.text); }
  '{'
  ( topdept=department
    { $c.getDepts().add($topdept.d); }
  )*
  '}'
  ;
</syntaxhighlight>

[[Feature:Parsing]] is implemented using the generated Parser:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java/class/Parsing""/>

[[Feature:Unparsing]] pretty prints the company:

<fragment url=""src/main/java/org/softlang/company/features/Unparsing.java/class/Unparsing/method/unparseCompany""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented using [[POJO]] methods:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut""/>

Test cases are implemented for all [[Namespace:Feature]]s. There are also a valid and an invalid input:

<fragment url=""inputs/sample.Company""/>

<fragment url=""inputs/nonSample.Company""/>

== Relationships ==
This contribution shows [[Object-Text mapping]] using [[Technology:ANTLR]] and [[Language:Java]].

For plain syntax checking with [[Technology:ANTLR]] see [[Contribution:antlrAcceptor]].

For a basic example of lexing/tokenization with [[Technology:ANTLR]] see [[Contribution:antlrLexer]].

For an implementation of [[Feature:Parsing]] using semantic actions with [[Technology:ANTLR]] see [[Contribution:antlrParser]]

For walking a parsed [[Feature:Company]]-tree with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].

== Architecture ==
The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/antlr contains grammar files for [[Technology:ANTLR]].
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.model for implementations of [[Feature:Company]].
** org.softlang.company.antlr for [[Technology:ANTLR]]-generated Java classes (post build).
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==
This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:57:01.866,2017-07-05 15:25:26.766416
Feature,Serialization,"== Headline ==

Serialize companies

== Description ==

Company data must be serializable so that data is preserved also during downtimes of the [[system:Company]]. Any [[serialization]] format is conceivable here. Serialized data would be typically stored in the file system between program runs.

== Motivation ==

Programming languages differ in terms of [[serialization]] approaches in interesting ways. In addition, multiple reasonable [[serialization]] options may exist for even the same language.

== Illustration ==

One reasonable [[serialization]] format is [[Language:JSON]]. The typical sample company is represented in [[Language:JSON]] as follows:

<syntaxhighlight lang=""javascript"">
{
  ""name"" : ""Acme Corporation"",
  ""departments"" : [
    {
      ""name"" : ""Research"",
      ""manager"" : {
        ""name"" : ""Fred"",
        ""salary"" : 88888
      }
    },
    {
      ""name"" : ""Development"",
      ""manager"" : {
        ""name"" : ""Marie"",
        ""salary"" : 77777
      },
      ""departments"" : [
        {
          ""name"" : ""Dev1"",
          ""manager"" : {
            ""name"" : ""Bob"",
            ""salary"" : 77776
          }
        },
        {
          ""name"" : ""Dev2"",
          ""manager"" : {
            ""name"" : ""Alice"",
            ""salary"" : 77775
          },
          ""employees"" : [
            {
              ""name"" : ""Ralf"",
              ""salary"" : 4711
            }
          ]
        }
      ]
    }
  ]
}
</syntaxhighlight>

Various languages blend well with [[Language:JSON]] as [[serialization]] format. For instance, [[Language:Python]] provides library support to serialize [[Language:Python]]'s [[dictionary|dictionaries]] in [[Language:JSON]]. For instance, in the following code, the ''load'' method of a [[Language:JSON]] [[API]] is used to deserialize on-file [[Language:JSON]] content.

<syntaxhighlight lang=""python"">
company = json.load(open(sys.argv[1], 'r'))
</syntaxhighlight>

The snippet originates from [[Contribution:pyjson]].

== Relationships ==

* See [[Feature:Open serialization]] and [[Feature:Closed serialization]] for concrete serialization features.
* [[Feature:Persistence]] is concerned with [[persistence]] instead of [[serialization]].

== Guidelines ==

* This is an abstract (an XOR) feature, which should not be chosen as such, but instead either [[Feature:Open serialization]] or [[Feature:Closed serialization]] is to be selected.
* A suitable ''demonstration'' of serialization should deserialize company data so that the ""resurrected"" company can be processed, e.g., by totaling salaries according to [[Feature:Total]]. Also, round-tripping of serialization should be demonstrated such that serialization of given data following by de-serialization returns the same data.

== Metadata ==

* [[instanceOf::Non-functional requirement]]
* [[instanceOf::Optional feature]]
* [[instanceOf::Alternative feature]]
* [[facilitates::Serialization]]
* [[relatesTo::System:FSML]]
",2013-06-12 14:59:53.679,2017-07-04 13:46:36.197977
Concept,Random number,"== Headline ==

a number in a sequence obtained by a [[random number generator]]

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Random_number_generation]]
* [[isA::Concept]]

",2013-06-12 14:55:38.855,2017-07-04 15:26:20.317194
Concept,Offline mode,"",2015-12-15 10:35:48.562,2017-07-04 13:48:09.911874
Concept,Synonym,"",2015-12-15 14:00:32.036,2017-07-04 13:48:09.915359
Vocabulary,Mathematics,"== Headline ==

The vocabulary in the context of [[mathematics]]

== Metadata ==

* [[isA::Namespace:Vocabulary]]
* ",2013-06-12 15:02:32.418,2017-07-04 15:26:33.158371
Contribution,hxtPickler,"== Headline ==

[[XML data binding]] for [[Language:Haskell]] with [[Technology:HXT]]'s [[Technology:XML pickler]]

== Motivation ==

The implementation demonstrates [[XML data binding]] for [[Language:Haskell]] with [[Technology:HXT]]'s [[Technology:XML pickler]]. As a result, companies can be imported from and exported to [[Language:XML]] while using [[algebraic data type]]s for companies in the core functional programming. The mapping between XML and algebraic data type relies on [[Technology:XML pickler]]'s [[type class]] <syntaxhighlight lang=""haskell"" enclose=""none"">XMLPickler</syntaxhighlight> for type-specific pickler functions. [[Type-class instance]]s are defined for the types for companies, departments, and employees. These definitions leverage [[Technology:XML pickler]]'s predefined [[arrow]]s for picklers, predefined picklers and pickler combinators.

== Illustration ==

=== A Pickler for Companies ===

To define a pickler for companies we declare an instance of <syntaxhighlight lang=""haskell"" enclose=""none"">XMLPickler</syntaxhighlight>:

<syntaxhighlight lang=""haskell"" source=""hxtPickler/Pickler.hs"">
instance XmlPickler Company where
    xpickle = xpCompany
</syntaxhighlight>

The pickler function <syntaxhighlight lang=""haskell"" enclose=""none"">xpCompany</syntaxhighlight> is defined as follows:

<syntaxhighlight lang=""haskell"" source=""hxtPickler/Pickler.hs"" line>
xpCompany :: PU Company
xpCompany
      = xpElem ""company"" $
        xpWrap ( uncurry Company
               , \c -> ( cname c
                       , depts c
                       )
                ) $
        xpPair  (xpAttr ""name"" xpText)
                (xpList xpickle)
</syntaxhighlight>

For implementing <syntaxhighlight lang=""haskell"" enclose=""none"">xpCompany</syntaxhighlight> we use <syntaxhighlight lang=""haskell"" enclose=""none"">xpElem</syntaxhighlight> in line 3.
By using this function we define that a company, represented in XML, should be inside a XML tag labeled ""company"". The pickler for the content of the tag is defined by the second argument of <syntaxhighlight lang=""haskell"" enclose=""none"">xpElem</syntaxhighlight>.

<syntaxhighlight lang=""haskell"" enclose=""none"">xpWrap</syntaxhighlight> is of type <syntaxhighlight lang=""haskell"" enclose=""none"">(a -> b, b -> a) -> PU a -> PU b</syntaxhighlight>.
It returns a Pickler (PU) for <syntaxhighlight lang=""haskell"" enclose=""none"">b</syntaxhighlight> and expects a pair of functions from <syntaxhighlight lang=""haskell"" enclose=""none"">a</syntaxhighlight> to <syntaxhighlight lang=""haskell"" enclose=""none"">b</syntaxhighlight> and vice versa and a Pickler for <syntaxhighlight lang=""haskell""  enclose=""none"">a</syntaxhighlight> (<syntaxhighlight lang=""haskell"" enclose=""none"">PA a</syntaxhighlight>).

In lines 4-8 the first part of the first argument of the wrapping pickler is <syntaxhighlight lang=""haskell"" enclose=""none"">uncurry Company</syntaxhighlight>. It defines how to construct a <syntaxhighlight lang=""haskell"" enclose=""none"">Company</syntaxhighlight> value from a pair of name and departments. The second part of the pair defines the opposite direction: How to disassemble a company into its components.

The second argument of <syntaxhighlight lang=""haskell"" enclose=""none"">xpWrap</syntaxhighlight> in lines 9-10 defines the actual pickler for the (name, departments) pair (this is <syntaxhighlight lang=""haskell"" enclose=""none"">PA a</syntaxhighlight> in the type signature of the wrapping pickler).
We use the combinator for pairs <syntaxhighlight lang=""haskell"" enclose=""none"">xpPair :: PU a -> PU b -> PU (a, b)</syntaxhighlight>. The pickler for the company name is defined by using a pickler for XML attributes and a pickler for text. That is, the company name should be an attribute of the ""company"" tag.
The pickler for the list of departments is defined by making use of a combinator for lists and <syntaxhighlight lang=""haskell"" enclose=""none"">xpickle</syntaxhighlight>.
Because of type inference and because we also declare a <syntaxhighlight lang=""haskell"" enclose=""none"">XMLPickler</syntaxhighlight> instance for departments, Haskell will choose the appropriate pickler function for departments.

=== Pickling a Company ===

Pickling a company is realized by using arrows:

<syntaxhighlight lang=""haskell"" source=""hxtPickler/Main.hs"">
runX ( constA company
       >>>
       xpickleDocument xpCompany [withIndent yes] $
       ""sampleCompanyCut.xml""
     )
</syntaxhighlight>

A lifted sample company is passed to the arrow for pickling a document. In this case <syntaxhighlight lang=""haskell"" enclose=""none"">xpickleDocument</syntaxhighlight> expects a pickler for companies, some writing options and a file name.

=== Unpickling a Company ===

To unpickle a company the arrow function <syntaxhighlight lang=""haskell"" enclose=""none"">xunpickleDocument</syntaxhighlight> is used:

<syntaxhighlight lang=""haskell"" source=""hxtPickler/Main.hs"">
[company1] <- runX ( xunpickleDocument xpCompany $
                     [withRemoveWS yes] $
                     ""sampleCompany.xml"" )
</syntaxhighlight>

<syntaxhighlight lang=""haskell"" enclose=""none"">runX</syntaxhighlight> returns a list of arrow results, which we except to be a singleton list. On success <syntaxhighlight lang=""haskell"" enclose=""none"">company1</syntaxhighlight> should hold the unpicklered company.

== Architecture ==

[this!!Pickler.hs] holds the pickler definitions for companies, departments and employees. The algebraic data type for companies can be found in [this!!Company.hs].[this!!Total.hs] and [this!!Cut.hs] provide totaling and cutting functionality. [this!!sampleCompany.xml] holds a sample company. [this!!Main.hs] collects test scenarios for pickling/unpickling, totaling and cutting companies.

== Usage ==

* [this!!Main.hs] has to be loaded into GHCi.
* The <syntaxhighlight lang=""haskell"" enclose=""none"">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Metadata ==

* [[uses::Language:XML]]
* [[uses::Language:Haskell]]
* [[uses::Technology:HXT]]
* [[uses::Technology:XML pickler]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Open serialization]]
* [[developedBy::Contributor:tschmorleiz]]
",2013-06-12 14:58:09.563,2017-07-05 15:28:38.27207
Script,Metaprograms and metadata,"== Headline ==

A lecture on the [[metaprogram]]s and [[metadata]] (mainly [[reflection]]) as part of the [[Course:Programming in Koblenz]]
== Material ==

<media url=""http://www.slideshare.net/rlaemmel/metaprograms-and-metadata""/>
== Concepts ==

* [[Reflection]]
* [[Metaprogram]]
* [[Metaprogramming]]
* [[Metalanguage]]
* [[Object language]]
* [[Metadata]]
* [[Annotation]]
== Contributions ==

* [[Contribution:javaReflection]]
== Metadata ==


* [[instanceOf::Course:Programming in Koblenz]]
* ",2013-06-12 15:00:56.34,2017-07-04 13:47:07.913043
Contributor,aseggebaeing,"",2016-04-25 19:16:08.605,2017-07-04 13:48:10.310777
Contributor,nicoell,"",2016-04-27 18:31:08.719,2017-07-04 13:48:10.314086
Contributor,neutrino,"",2016-05-02 07:24:24.493,2017-07-04 13:48:10.317502
Contributor,andi,"== Metadata ==

* [[moreComplexThan::others]]",2016-05-05 11:24:13.523,2017-07-04 13:48:10.324876
Concept,Conversion,"== Headline ==

Implement conversion routines to unify different schemas and data structures.
== Description ==

The data model of 101companies has no differences in its data structure or schema.
Especially in the area of Business Intelligence it is a common task to unify data from various different systems.
Adding structural differences, such as currencies will help us illustrating procedures on how to transform data.
== Motivation ==

A globally operating company needs to analyze data from various locations (also meaning companies). Each location operates the 101companies HR-System. The HR-System is missing a feature to distinguish between currencies. But for analysis it is mandatory to unify all data to one target currency.
== Illustration ==

This feature will be illustrated using [[Contribution:pyDWH]].


=== Configuration ===
The configuration file '' config.cfg '' contains all needed information for the conversion.
Each source database reflects a specific company or location (in a country).
It has a currency for the salaries. There is also a base currency which is the target currency.
In addition there is an option for an API to calculate the current exchange rates.


'' Excerpt of config.cfg ''
<pre>
[source_1]
company_id = 1
currency = EUR
...

[source_2]
company_id = 2
currency = USD
...

[target]
...

[general]
base_currency = EUR

# usage: http://finance.yahoo.com/d/quotes.csv?f=sl1&s=USDEUR=X
exchange_rate_api = http://finance.yahoo.com/d/quotes.csv?f=sl1&s=__DATA__=X
</pre>


While running the ETL (Extract, Transform, Load) it extracts all data from the given source databases, transforms* it and loads it in a unified database schema.

=== Transformation ===
First it checks whether we need to convert the currencies. In case the source and target currencies differ it will query the API to retrieve the current exchange rate between both currencies.

'' etl/exchange.py ''
<syntaxhighlight language=""python"">
import logging
import urllib2
from decimal import Decimal

# Supported currencies based on the list from European Central Bank:
# http://www.ecb.int/stats/exchange/eurofxref/html/index.en.html
CURRENCIES = [
    ""AUD"", ""BGN"", ""BRL"", ""CAD"", ""CHF"", ""CNY"", ""CZK"", ""DKK"", ""EUR"", ""GBP"",
    ""HKD"", ""HRK"", ""HUF"", ""IDR"", ""ILS"", ""INR"", ""JPY"", ""KRW"", ""LTL"", ""LVL"",
    ""MXN"", ""MYR"", ""NOK"", ""NZD"", ""PHP"", ""PLN"", ""RON"", ""RUB"", ""SEK"", ""SGD"",
    ""THB"", ""TRY"", ""USD"", ""ZAR""
]


class ExchangeError(Exception):
    """"""
    Exchange exception for all conversion errors.
    """"""
    pass


class Exchange(object):
    """"""
    Performs currency conversion using an external API specified in the
    configuration file.
    """"""
    def __init__(self, config):
        self.base_currency = config['base_currency']
        assert self.base_currency in CURRENCIES
        self.exchange_rate_api = config['exchange_rate_api']
        self.exchange_rate = None

    def set_exchange_rate(self, source_currency, target_currency=None):
        """"""
        Fetches current exchange rate from Yahoo! Finance API and set
        instance's exchange_rate with respect to the given target currency.
        """"""
        if target_currency is None:
            target_currency = self.base_currency

        if source_currency == target_currency:
            # Same currency, i.e. no conversion
            self.exchange_rate = 1
            return

        if source_currency not in CURRENCIES:
            raise ExchangeError(""unknown currency: {}"".format(source_currency))
        if target_currency not in CURRENCIES:
            raise ExchangeError(""unknown currency: {}"".format(target_currency))

        data = ""{}{}"".format(source_currency, target_currency)
        url = self.exchange_rate_api.replace(""__DATA__"", data)
        response = """"
        logging.debug(""url={}"".format(url))
        request = urllib2.Request(url=url)
        try:
            response = urllib2.urlopen(request).read()
        except (urllib2.HTTPError, urllib2.URLError) as err:
            raise ExchangeError(err)
        response = response.strip()

        logging.debug(""response={}"".format(response))
        if data not in response:
            raise ExchangeError(""invalid data from {}: {}"".format(url, data))

        exchange_rate = response.split("","", 1)[1]
        self.exchange_rate = Decimal(exchange_rate)
</syntaxhighlight>

During the transformation is where the conversion actually happens.
For each employee 'apply_exchange_rate()' is being called.

'' Excerpt of etl/transform.py ''
<syntaxhighlight language=""python"">
    def _apply_exchange_rate(self, source_amount):
        """"""
        Applies exchange rate on the given amount, e.g. to convert it to
        an amount in base currency.
        """"""
        assert self.exchange is not None
        assert self.exchange.exchange_rate is not None
        if self.exchange.exchange_rate == 1:  # No conversion needed
            return source_amount
        target_amount = Decimal(source_amount) * self.exchange.exchange_rate
        logging.debug(""exchange_rate={} [{}]->[{}]"".format(
            self.exchange.exchange_rate, source_amount, target_amount))
        return target_amount.quantize(Decimal("".01""), rounding=ROUND_HALF_UP)
</syntaxhighlight>
",2016-05-08 00:48:55.041,2017-07-04 13:48:10.606924
Concept,Software language,"== Headline ==

A software language

== Description ==

The following quote, which was extracted on 1 March 2011 from the website http://www.sleconf.org/2011/ of ""The International Conference on Software Language Engineering (SLE 2011)"", serves as the approximation of a description: ''""The term “software language” comprises all sorts of artificial languages used in software development including general-purpose programming languages, domain-specific languages, modeling and meta-modeling languages, data models, and ontologies. Used in its broadest sense, examples include modeling languages such as UML-based and domain-specific modeling languages, business process modeling languages, and web application modeling languages. The term “software language” also comprises APIs and collections of design patterns that are implicitly defined languages.""''

== Metadata ==

* [[relatesTo::http://www.sleconf.org/2011/]]
* [[memberOf::Vocabulary:Software language engineering]]

",2013-06-12 14:56:05.825,2017-07-04 13:44:57.474141
Contribution,jena2,"== Metadata ==
* [[developedBy::Contributor:tschmorleiz]]

",2013-06-12 14:58:20.537,2017-07-04 13:46:13.913217
Contributor,dorchard,"",2016-06-07 15:25:58.997,2017-07-04 13:48:16.334655
Concept,Software technology,"== Headline ==

A software technology

== Description ==

Technologies may be subdivided into [[Development technology|development]] or [[Application technology|application technologies]] depending on whether they target the developer by providing some kind of tool support or the application by providing some kind of reusable components. For instance, [[IDE]]s or [[tool]]s count as development technologies whereas [[Library|libraries]] or [[framework]]s count as application technologies. Classification of technologies may also
apply to their possible status of being a [[programming technology]] in the sense that they serve specific programming domains;  consider, for example, [[web technology]] or [[data technology]]. Given the central role of [[Space|technological spaces]], classification of technologies may also apply to their possible status of being a [[mapping technology]] across spaces. Finally, some technologies specifically support some software language, giving rise to further classification according to [[language technology]]; consider, for example, [[compiler]]s or [[program generator]]s. All these categories of technologies may be broken down further into subcategories. Some technologies may be naturally instances of multiple categories. Technologies are further characterized by their [[Capability|capabilities]].

== Metadata ==

",2013-06-12 14:56:06.816,2017-07-04 13:44:57.564755
Concept,myaicloud,"",2016-06-14 23:06:18.29,2017-07-04 13:48:17.212836
Script,Monads,"== Headline ==

Lecture ""Monads"" as part of [[Course:Lambdas in Koblenz]]
== Description ==

Applications of pure functions return the same result whenever provided with the same arguments; they do not have any side effects. This may be viewed as a limitation when we need to model more general computations in functional programming. However, there is a functional programming abstraction, the [[monad]], which comes to rescue. A monad is essentially an abstract data type to facilitate the composition of computations as opposed to functions. There are various monads to deal with all the computations effects that one may encounter, e.g., the [[state monad]], the [[maybe monad]], the [[reader monad]], the [[writer monad]], and the [[IO monad]].
== Concepts ==

* [[Monad]]
* [[State monad]]
* [[Maybe monad]]
* [[Writer monad]]
== Languages ==

* [[Language:Haskell]]
== Features ==

* [[Feature:Logging]]
== Contributions ==

* [[Contribution:haskellLogging]]
* [[Contribution:haskellWriter]]
== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Functors_and_friends]]
* [[dependsOn::Script:Unparsing_and_parsing_in_Haskell]]
",2013-06-12 15:00:56.547,2017-07-04 13:47:08.001775
Contributor,mwvaughn,"",2016-06-22 09:20:31.527,2017-07-04 13:48:17.818378
Contribution,haskellProfessional,"== Headline ==

Idiomatic implementation of several feature in [[Language:Haskell]]..

== Characteristics ==

The objective of this contribution is to show idiomatic Haskell code for many [[Functional requirement|functional]] and  [[data requirement]]s. We leave out features which would require extra programming technologies as those would be covered by designated contributions. Also, some [[data requirement]]s are left out as they deal with more specialized features of the [[system:Company]]. There are several other [[Language:Haskell]]-based contributions (specifically those in [[Theme:Haskell introduction]]) that address smaller feature sets and limit their use of language features or focus on specific idioms (for pedagogical reasons). So the present contribution is more of an attempt as to how a knowledgeable Haskell programmer would possibly approach the features in serious way.

== Relationships ==

* The present contribution is engineered in much the same way as [[Contribution:haskellEngineer]].
* The present contribution uses the same data model as [[Contribution:haskellComposition]], which is also reused by yet other contributions.

== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md.

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Median]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Mentoring]]
* [[implements::Feature:Ranking]]
* [[implements::Feature:Closed serialization]]
* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[uses::Technology:HUnit]]
* [[uses::Technology:Haddock]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell introduction]]
* [[basedOn::Contribution:haskellEngineer]]
* [[basedOn::Contribution:haskellComposition]]
",2013-06-12 14:57:45.098,2017-07-05 15:27:45.173335
Contribution,haskellRecord,"== Headline ==

Use of [[record type]]s in [[Language:Haskell]]
== Characteristics ==

A data model for flat companies is defined in terms of Haskell's [[record type]]s. Such record types are essentially [[algebraic data type]]s. We only use record types for compound data. Otherwise, we use Haskell's [[newtype]]s, which is a special form of algebraic data type. Other than that, the contribution is a simple variation on [[Contribution:haskellData]] which uses plain algebraic data types for all types.
== Illustration ==

The data model looks like this:

<fragment url=""src/Company/Data.hs""/>

A sample company looks like this:

<fragment url=""src/Company/Sample.hs""/>

[[Feature:Total]] is implemented as follows:

<fragment url=""src/Company/Total.hs""/>
== Relationships ==

* The present contribution is a slightly more complex variation on [[Contribution:haskellEngineer]] in that it uses data types (in fact, record types) as opposed to type synonyms.
* See also [[Contribution:haskellData]], which uses plain data types instead of record types.
== Architecture ==

See [[Contribution:haskellEngineer]].
== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md.
== Metadata ==


* [[memberOf::Theme:Haskell data]]
* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Flat company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[varies::Contribution:haskellEngineer]]
* [[varies::Contribution:haskellData]]
* [[moreComplexThan::Contribution:haskellEngineer]]
",2013-06-12 14:57:45.389,2017-07-05 15:27:46.316456
Category,101view,"== Intent ==

a collection of views (visualizations) for the [[101project]]



== Metadata ==
* [[isA::101misc]]",2013-06-24 12:17:12.074,2017-07-04 15:26:33.407869
Contribution,mySqlOneReporting,"== Headline ==

[[Language:SQL]]-based implementation tailored to [[Technology:MySQL]]

== Motivation ==

To extend the data base structure of [[Contribution:mySqlOne]] by implementing [[Feature:Dimensionality]].

A [[relational schema]] is used as the [[data model]] of the [[system:Company]]. Some [[functional requirement]]s of the system are modelled as [[Language:SQL]] statements.

== Illustration ==
'' ERM of source database schema ''

[[media:https://raw.github.com/ydupont/101repo/master/wiki/feature dimensionality/img/src er.png]]

== Relationships ==

* See [[Contribution:mySqlOne]] which implements the base structure used in [[Contribution:mySqlOneReporting]]
* See [[Contribution:mySqlMany]] for a variation of the base structure which supports many companies instead a single company. The two variants are used for illustrating [[Feature:Singleton]] and [[Feature:Many companies]].

== Usage ==

=== Requirements ===
* MySQL Client >= 5.0
* MySQL Server >= 5.0

Create the database(s):

=== Installation ===

<pre>
    $ mysql> CREATE DATABASE onereporting;
</pre>
'' NOTE: Grant privileges in case you don´t want to use the root user. ''
'' You can use ""n"" source databases. ''

Load database schema:

<pre>
    $ mysql -u <USERNAME> -p -h <HOSTNAME> onereporting < sql/schema.sql
</pre>

OPTIONAL: Populate the databases using sample data:
<pre>
    $ mysql -u <USERNAME> -p -h <HOSTNAME> onereporting < sql/sample.sql
</pre>

== Metadata ==

* [[uses::Language:SQL]]
* [[uses::Technology:MySQL]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Singleton]]
* [[implements::Feature:Dimensionality]]
* [[developedBy::Contributor:ydupont]]
",2013-06-12 14:58:36.157,2017-07-05 15:29:27.207453
Contribution,pyFunctional,"== Headline ==

simple functional programming in [[Language:Python]]

== Motivation ==

This illustrates simple functional programming in Python. Using this style mostly reduces the code length and is more expressive although [[Language:Python]] doesnt offer full support for functional programming.

== Illustration ==

The company model is implemented by named tuples. One can instantiate the data
the same way as using classes.

<syntaxhighlight lang=""python"">
Company = namedtuple('Company', ['name', 'departments'])
Employee = namedtuple('Employee', ['name', 'salary'])
Department = namedtuple('Department', ['name', 'manager', 'subunits'])
</syntaxhighlight>

For the implementation of cut new objects have to be created because named tuples
are immutable.

<syntaxhighlight lang=""java"">
def cut(company):

    def cutSubunit(s):

        def cutEmployee(employee):
            return Employee(employee.name, employee.salary/2.0)

        def cutDepartment(department):
            return Department(department.name, cutEmployee(department.manager), map(cutSubunit, department.subunits))

        return cutEmployee(s) if isinstance(s, Employee) else cutDepartment(s)

    return Company(company.name, map(cutSubunit, company.departments))
</syntaxhighlight>

== Usage ==

Download the source and run <code>python operations.py</code>

== Metadata ==

* [[uses::Language:Python]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:kevin-klein]]
",2013-06-12 14:58:40.507,2017-07-05 15:29:32.694861
Concept,Relational schema,"== Headline ==

A [[database schema]] according to the [[relational model]]

== Metadata ==

* [[memberOf::Vocabulary:Data modeling]]
* [[isA::Concept]]

",2013-06-12 14:55:46.701,2017-07-04 15:26:22.185363
Concept,Pure IO behavior,"== Headline ==

An [[IO behavior]] that neither modifies the input and nor causes any other side effect

== Details ==

The constraint on side effects only applies to data that affects the I/O behavior. For instance, caching (for the purpose of performance improvements) does not count as a side effect.

== Metadata ==

* [[isA::IO behaviour]]

",2013-08-01 13:12:26.471,2017-07-04 15:26:34.313036
Property,facilitates,"== Headline ==

Facilitation relation between entities

== Description ==

* A technology facilitates a concept, if the ""typical"" system using the technology ends up using the concept. For instance, a web-application framework such as [[Technology:Rails]] facilites [[MVC]] because a typical system using the framework uses MVC as a pattern. (We could also say that the technology supports or enforces the concept; we use ""faciliation"" in an effort to use a more inclusive term.)
* A language facilitates a concept, if the ""typical"" system using the language may use the language for defining or implementing or supporting the concept. (Again, we use ""faciliation"" as a more inclusive term.) That is, the concept describes a/the purpose of the language. For instance, [[Language:XML]] facilitates [[data exchange]] because some systems may use XML indeed for data exchange. As another example, [[Language:Java]] facilitates [[OO programming]] because we end up exercising OO programming when programming in Java.
* A feature facilitates a concept, if the ""typical"" implementation of the feature (i.e., 'contribution') uses the concept.

== Metadata ==

* [[hasDomain::Type:Technology]]
* [[hasDomain::Type:Language]]
* [[hasDomain::Type:Feature]]
* [[hasRange::Type:Concept]]
* [[relatesTo::http://softlang.uni-koblenz.de/megaaxioms/]]
",2017-04-30 23:28:47.368618,2017-07-04 13:48:19.739866
Contribution,javaExorcism,"== Headline ==

Excessive illustration of design patterns in [[Language:Java|]]

== Characteristics ==

Consider [[Contribution:javaVisitor]] and [[Contribution:javaTemplate]] for simpler implementations that also put to work some design patterns for illustrative purposes. The present implementation is somewhat extreme in that it aims to illustrate a larger number of design patterns possibly for the argument's sake, without strong practical incentive. So please be careful about consuming this implementation. Please also observe the name of this implementation, ""...Exorcism"", which is supposed to be a clear
hint at the common danger of over-engineering a design. One way of going over the top is to prematurely weave an additional design pattern into a system without understanding the pros and cons of doing so, without actually establishing the proper incentive of deploying the pattern. To summarize, the present implementation stands out with its design density in terms of the number of patterns and pattern interactions as they are provoked, encountered, and addressed.

== Illustration ==

Package ''org.softlang.company.model'' and subpackages hosts two object models for [[Feature:Hierarchical company]].
Package ''org.softlang.company.features.features'' hosts feature implementations. Package ''org.softlang.company.tests'' hosts JUnit tests; see below. Package ''org.softlang.company.features.util'' hosts library-like extensions (thereby extending ''java.util''). All the remaining packages host pattern infrastructure and pattern instances.


'''Abstract Factory pattern'''


Package ''org.softlang.company.model'' defines the company object model in an interface-oriented manner.
There are two alternative implementations of these interfaces. That is, package ''org.softlang.company.model.company.impl.pojo'' provide a simple, POJO-like implementation, whereas ''org.softlang.company.model.company.impl.bean'' implements objects with observability (in the sense
of the ''Observable'' class of package ''java.util'') and a parent axis. Client code can be parametric in the implementation on the grounds of factories of package ''org.softlang.company.model.company.factory''. For instance, the code for constructing a sample company
uses a factory parameter; see the ''Basics'' class of package ''org.softlang.company.tests''. Some client code only works for one of the two implementations. For instance, the logging feature of package ''org.softlang.company.features.features'' relies on objects with observability specifically.


'''Adapter pattern'''


A class adapter is used when deriving the ''DepartmentImpl'' class of package ''org.softlang.company.model.company.impl.bean'' from the ''ContainerImpl'' class of the same package such that it implements the ''Department'' class of package ''org.softlang.company.model.company''.
An object adapter is used when down-grading the ''List'' interface of package ''java.util'' the interface ''SimpleList'' of package ''org.softlang.company.features.util'' such that much less methods are exposed for the rest of this projects. For instance, the class ''ObservableSimpleList'' of package ''org.softlang.company.features.util'' only implements the narrow interface.


'''Command pattern'''


The cut operation is implemented twice: once in package ''org.softlang.company.features.features'' and once in package ''org.softlang.company.features.command''. The later implementation uses command objects to defer the execution of the cut operation. To this end, each employee is encapsulated in an command object of class ''CutEmployee'' and the batch of the derived command objects for employees is maintained by a command object of class ''CutCompany''. All command objects provide ''execute'' and ''undo'' actions.
In particular, command objects for individual employees back up the salary before they cut.


'''Composite pattern'''


A company is a composite structure that breaks down into departments, employees, and their properties.
There is a rooting interface ''Component'' that provides the setter and getter for a name that is equally available on companies, departments, and employees. In the case of the package ''org.softlang.company.model.company.impl.bean'', there are even additional
shared methods because of the rooting class ''java.util.Observable''. In this case, overriding is also leveraged so that addition and removal of observers is pushed into sub-components in the case of composite-like as opposed to leaf-like components.


'''Decorator pattern'''


The ''ObservableSimpleList'' class of package ''org.softlang.company.features.util'' effectively decorates a given (simple) list with observability (in the sense of the ''Observable'' class of package ''java.util''). That is, an observable (simple) list combines the interfaces of (simple) lists and ''Observable''. The ''ObservableSimpleList'' class wraps the underlying (simple) list and it also incorporates additional state because it derives from the ''Observable'' class which manages observers (listeners). Observable (simple) lists are used in the non-POJO implementation of the company object model. That is, the list of subunits for companies and departments is set up to be observable.


'''Observer pattern'''


There is clearly value in making company object structure observable (in the sense of the ''Observable'' class of package ''java.util''). For instance, if we were providing a GUI, observability would help with implementing an MVC architecture. In this implementation, observability is leveraged for [[Feature:Logging]] and [[Feature:Ranking]];
see the corresponding classes of package ''org.softlang.features''. Objects of the company object model are made observable in a way that gives credit to the part-whole structure. That is, registration of an observer with a company object is
propagated down into all components. To this end, an observable (simple) list type is also used; see the ''ObserableSimpleList'' of package ''org.softlang.company.features.util''.


'''Proxy pattern'''


[[Feature:Access control]] is implemented in a way that access to employee salaries is regulated. Proxy objects are used to to enforce the access control policy. By default, read and write access is enabled, but it can be configured even once the proxies
have been deployed. All concrete classes of the object model for companies are proxied. That is, employees are proxied because their get/set salary members must be directly controlled, while departments and companies are proxied so that any added
subunit will be transparently proxied. To summarize, company objects are initially and continuously enhanced to provide proxies for every component so that all salary access must go through access control.


'''Singleton pattern'''


We use functor objects for the sake of parameterizing traversal functionality in monoids; see classes
''Monoid'' and ''AddDoubles'' of package ''org.softlang.company.features.util''. Those functor objects are good candidates for singletons; see the implementation of ''AddDoubles''. There is a static member ''getInstance'' to retrieve the singleton, which is constructed
upon request, if needed, or fetched from a static field otherwise. The use of a singleton helps here to emphasize the fact that no state is associated with monoids.


'''Template pattern'''


The cut operation can be understood as a ""walk"" over the company structure with a mutation to be applied
to any employee encountered. Likewise, the total operation can be understood as a ""reduction"" or a ""query"" over the company structure where salaries are extracted from any employee encountered and those salaries are combined systematically. Package
''org.softlang.company.features.template'' captures the general notions of walkers and reducers as template methods. The primitive operations of these templates are to be defined by visit methods of an appropriate visitor. The template methods essentially compose
the client visitors with traversal behavior. See the implementations of cut and total in package ''org.softlang.company.features.features''.


'''Visitor pattern'''


Nearly all operations including those for totaling and cutting salaries are implemented as visitors; see package ''org.softlang.company.features.visitor'' for the visitor framework. There are two kinds of visitors: void visitors, i.e., visitors with void visit methods as well as returning visitors, i.e., visitors with visit methods with some uniform result type. The use of visitors is deeply integrated into the rest of this implementation. In particular, the template methods of package ''org.softlang.company.features.template'' also leverage visitors. Arguably, visitors are needed for the chosen object model because there is polymorphism propperly involved due to the abstract ''Subunit'' class with the concrete subclasses ''Employee'' and ''Department''.


== Issues ==


Additional patterns could be considered:
* State pattern
* Memento pattern
* Strategy pattern
* ...

== Relationships ==

For basic OO without inheritance see [[Contribution:javaComposition]].

For basic OO with inheritance see [[Contribution:javaInheritance]].

For modular OO programming with static methods see [[Contribution:javaStatic]].

For use of Java reflection see [[Contribution:javaReflection]] (data processing) and [[Contribution:javaSyb]] (SYB-style generic programming).

For design patterns see [[Contribution:javaTemplate]] (template design pattern), [[Contribution:javaVisitor]] (visitor design pattern) and [[Contribution:javaExorcism]] (excessive illustration of design patterns).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
*** org.softlang.company.features.command for command pattern.
*** org.softlang.company.features.features for variations of [[Namespace:Feature]]s.
*** org.softlang.company.features.template for template pattern.
*** org.softlang.company.features.util for library-like extensions.
*** org.softlang.company.features.visitor for visitor pattern.
** org.softlang.company.model for implementations of [[Feature:Company]].
*** org.softlang.company.model.company for abstract factory pattern.
**** org.softlang.company.model.company.factory for factories.
**** org.softlang.company.model.company.impl for implementations of companies, departments and employees.
***** org.softlang.company.model.company.impl.bean for objects with observability.
***** org.softlang.company.model.company.impl.pojo for [[POJO]]s.
*** org.softlang.company.model.proxy for proxy pattern.
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Logging]]
* [[implements::Feature:Access control]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[uses::Visitor pattern]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:10.432,2017-07-05 15:28:40.706546
Contribution,javaLexer,"== Headline ==

[[lexer]]-based text processing in [[Language:Java]]

== Characteristics ==

A simple custom-made lexer is used to process a text-based representation of companies.
The lexer uses a lookahead of 1.
The lexer reports all tokens including whitespace.
Such processing implements [[Feature:Parsing]].
[[Feature:Total]] is implemented by means of finding token sequences
consisting of keyword ""salary"" followed by a number while ignoring whitespace
in between. (Just looking for a number would be sufficient for the situation at hand
because numbers are used for salaries only, but the extra test makes the
point that ad hoc tests may be needed when lexers are used for data processing.)
[[Feature:Cut]] copies lexemes to an output stream while
modifying salaries. The lexemes for whitespace token transport layout from
input to output. Such processing implements [[Feature:Unparsing]].

== Illustration ==

The data model is implemented as plain textual files:

<fragment url=""inputs/sample.Company""/>

[[Feature:Parsing]] is implemented using the helper class Recognizer to enable step-by-step lexing:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java/class/Parsing""/>

[[Feature:Unparsing]] demonstrates the use of the Recognizer to execute semantic actions (only write lexemes) during [[Feature:Parsing]]

<fragment url=""src/main/java/org/softlang/company/features/Unparsing.java/class/Unparsing""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented using [[Feature:Parsing]] with semantic actions:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For plain syntax checking with [[Technology:ANTLR]] see [[Contribution:antlrAcceptor]].

For lexer-based text processing in pure [[Language:Java]] see [[Contribution:javaScanner]].


For lexing/tokenization with [[Technology:ANTLR]] see [[Contribution:antlrLexer]].

For a custom made lexer in pure [[Language:Java]] see [[Contribution:javaLexer]].


For parsing with semantic actions with [[Technology:ANTLR]] see [[Contribution:antlrParser]].

For recursive-descent parsing in pure [[Language:Java]]] see [[Contribution:javaParser]].

For parser combinators in pure [[Language:Java]]] see [[Contribution:javaParseLib]].


For object/text mapping from test to companies with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].

For object/text mapping from text to trees with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
*** org.softlang.company.features.parsing for helper classes for [[Feature:Parsing]] and [[Feature:Unparsing]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:11.28,2017-07-05 15:28:43.766337
Concept,Crosscutting concern,"== Headline ==

Concerns of a [[program]] that affect other concerns

== Details ==

It is basically correct here to say ""[[requirement]]"" instead of ""concern"". [[Crosscutting concern]]s often resist to standard means of [[modularization]]. That is, [[crosscutting concern]]s make it hard to achieve [[separation of concerns]] with [[implementation]]s of [[software system]]s.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Cross-cutting_concern]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:53:36.256,2017-07-04 15:26:05.80904
Contribution,atl,"== Headline ==

[[Model to Model transformation]]s with [[Language:ATL]]

== Motivation ==
[[Model to Model transformation]]s with [[Language:ATL]] are exercised in this implementation. The [[metamodel]]s used are given in [[Language:Ecore]], models are in [[Language:XMI]]. Two different means of execution are shown. One based on loading the [[model]]s with [[Technology:EMF]] and one directly relying on the ATL Framework. The implementation uses the Total scenario to show a [[exogenous model transformation]]. The second transformation, the Cut scenario, is a [[endogenous model transformation]]. Additionally, for the Cut scenario, the [[Language:ATL]] [[refinement mode]] is used, in which only those model elements are altered for which rules exist.

== Illustration ==

The transformations used in this example are Model-To-Model Transformations. Therefore, all transformations use an model as input and create an model as an output.
The Cut transformation uses the Company metamodel and an company that conforms to this metamodel and produces an model, that conforms to the company metamodel. The transformation is refining, which means that every element for which no rule is defined isn't modified in the target model. Therefore, the only rule of the transformation is the Employee2Employee rule.
<syntaxhighlight lang=""text"">
rule Employee2Employee {
    from
	 s : Company!Employee
	to
	 t : Company!Employee (
	   salary <- s.salary / 2  -- cutting
	 )
}
</syntaxhighlight>
This rule just takes an Employee (called s) and creates an Employee in the target model (called t), whose salary is the same as the salary of s divided by 2.
The ComputeTotal transformation uses the Company metamodel and a company that conforms to this metamodel and creates an double value. Since ATL transformations are model to model transformations, a model representing the double value is used.
<syntaxhighlight lang=""text"">
rule Company2Total {
	from
	 company : Company!Company
	to
	 t : Total!TotalWrapper (
	   	total <- Company!Employee.allInstances() -> collect(e | e.salary) -> sum()
	 )
}
</syntaxhighlight>
The rule creates a collection of the salary values of all employees in the source model and then takes the sum from the values in the collection.

== Architecture ==
* Company.ecore is the metamodels for companies
* Total.ecore is a wrapper for a double value.
* metamodels can be found in the ""Metamodel"" directory


* The cut scenario is implementet in Cut.atl
* Company.ecore is used for input and output


* The total scenario is implemented in Total.atl
* Company.ecore is used for input
* Total.ecore is used for output


* sampleCompany.xmi is the source model for all transformations
* sampleCompany.xmi is in the ""Models"" directory

== Usage ==
A Eclipse version with an installed ATL plugin is needed to execute the transformations (e.g. [http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/junor the EMF version] with the installed ATL Framework).

Steps:
* The project should be imported into Eclipse
* It will provide a executable Java file called RunTransfoJava.java. It uses EMF to start the transformation.
* Right click on the java file and select ""Run As"" -> ""Java Application""

Comments:
* The output models can be found in Models/Java.
* The project might need to be refreshed, before Eclipse shows the results.

== Metadata ==
* [[uses::Language:ATL]]
* [[uses::Language:Ecore]]
* [[uses::Language:Java]]
* [[uses::Language:XMI]]
* [[uses::Technology:EMF]]
* [[uses::Technology:Eclipse]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:Hugo Brunelière]]
* [[reviewedBy::Contributor:rlaemmel]]
* [[reviewedBy::Contributor:martinleinberger]]
* [[memberOf::Theme:MDE]]

",2013-06-12 14:57:04.662,2017-07-05 15:25:32.625574
Service,termResources,"== Headline ==

termResources service

== Metadata ==

",2013-06-12 15:00:59.099,2017-07-04 13:47:26.54516
Concept,Syntax tree,"== Headline ==

A tree representing the grammatical structure of text

== Description ==

We explain the concept by means of an illustrative example.

== Illustration ==

Consider the following [[context-free grammar]]; we label the productions for convenience:

<pre>
[literal] expression ::= literal
[binary] expression ::= ""("" expression op expression "")""
[plus] op ::= ""+""
[times] op ::= ""*""
</pre>

We assume that literals are integers as in sequences of digits.

Now consider this input:

<pre>
((4 * 10) + 2)
</pre>

A [[parsing]] algorithm would basically accept the input string, as it is an element of the language generated by the grammar; see also the [[parsing problem]]. In addition, an actual parser would also represent the grammar-based structure of the input string by a parse tree. We represent the parse tree for the input string here as a prefix term such that we use production labels as function symbols:

<pre>
binary(
  ""("",
  binary(
    ""("",
    literal(""4""),
    times(""*""),
    literal(""10""),
    "")"",
  ),
  plus(""+""),
  literal(""2""),
  "")"",
)
</pre>

That is, each non-leaf node in the tree corresponds to a production label and each leaf node is a terminal. Further, each non-leaf node has as many branches as the underlying production has symbols in the right-hand side sequence. We assume that the branches are ordered in the same way as the underlying right-hand side and the subtrees are parse trees for the symbols in the right-hand side. A parse tree for a given nonterminal is rooted by a production with the nonterminal on the left-hand side.

The parse tree shown above is a [[concrete syntax tree]] in that it captures even the terminals of the derivation. We may also remove those symbols to arrive at an [[abstract syntax tree]]. Thus:

<pre>
binary(
  binary(
    literal(""4""),
    times,
    literal(""10"")
  ),
  plus,
  literal(""2"")
)
</pre>

== Metadata ==

* [[similarTo::http://en.wikipedia.org/wiki/Syntax_tree]]
* [[similarTo::http://en.wikipedia.org/wiki/Parse_tree]]
* [[memberOf::Vocabulary:Software language engineering]]
",2013-06-12 14:56:17.113,2017-07-04 13:44:58.842398
Concept,Tail function,"== Headline ==

A basic [[operation]] on a [[list]] to return its [[tail]]

== Illustration ==

Here is an application of [[Language:Haskell]]'s tail operation:

<syntaxhighlight lang=""haskell"">
Prelude> tail [1,2,3]
[2,3]
</syntaxhighlight>

There is the related [[head function]].

== Metadata ==

* [[instanceOf::Common function]]
",2013-06-12 14:56:18.862,2017-07-04 13:44:58.932703
Type,Year,"== Headline ==

101wiki's type of years
",2017-05-01 13:29:19.001233,2017-07-04 13:48:19.820533
Concept,Task parallelism,"== Headline ==

The capability of task [[parallelism]]

== Details ==

See the related capability of [[data parallelism]].

== Metadata ==

* [[instanceOf::Parallelism]]
* [[sameAs::http://en.wikipedia.org/wiki/Task_parallelism]]
",2013-06-12 14:56:19.138,2017-07-04 13:44:58.948775
Concept,Heap,"== Headline ==

A tree-based [[data structure]] satisfying the heap property

== Citation ==

(http://en.wikipedia.org/wiki/Heap_(data_structure), 9 July 2014)

In computer science, a heap is a specialized tree-based data structure that satisfies the heap property: If A is a parent node of B then the key of node A is ordered with respect to the key of node B with the same ordering applying across the heap. Either the keys of parent nodes are always greater than or equal to those of the children and the highest key is in the root node (this kind of heap is called max heap) or the keys of parent nodes are less than or equal to those of the children and the lowest key is in the root node (min heap).

== Metadata ==

* [[isA::Data structure]]
* [[sameAs::http://en.wikipedia.org/wiki/Heap_(data_structure)]]

",2014-07-09 09:43:20.765,2017-07-04 15:26:35.623892
Contribution,javaRmi,"== Headline ==

Distribution based on [[RMI]] in [[Language:Java|Java]]

== Characteristics ==

We can think of the server as a centralized information system that maintains a number of companies.
We can also think of the server as the information system for a given company.
In both cases, the client remote accesses the company objects.
For instance, the calculation of the salary total is to be done by the server.

== Architecture ==

Package ''org.softlang.shared.company'' defines interfaces for the company object model.
The members of these interfaces have a throws declaration for remote exceptions.
Also, the interfaces derive from the Remote interface.
Package ''org.softlang.server.company'' implements the aforementioned interfaces as POJOs with methods for total and cut.
There is also Factory class in that package for convenience.
The class ''Server'' in the package ''org.softlang.server'' implements an (RMI) server.
To this end, a sample company is bound in the registry.
The server keeps on running until terminated explicitly.
The class ''Client'' in the package ''org.softlang.client'' implements an (RMI) client.
To this end, the sample company is looked up from the server.
Methods for totaling and cutting salaries are executed on the resulting proxy object.

== Usage ==

* The implementation is provided as an Eclipse project.
* Hence, open the project with Eclipse; this will also build the project.
* The simple scenario of running server and client on the same machine is exercised as follows:
** Start the server from the command line; see the Makefile.
** Start the client from within Eclipse; class ''org.softlang.client.Client''.
** Both server and client produce some standard output.
** The client terminates automatically, and can be restarted any number of times.
** The server must be terminated explicitly at the command line.

=== General tips and tricks on RMI ===

a) Running the applications

Even if you are not using make, look at the Makefiles for illustration.

b) Running both server and client on the local machine.

The following advice may be helpful in running both the client and the
server parts of an RMI application on a single machine. When you use
RMI, and you want to connect in the client to the server, you need to
know the IP address (hostname) of the server. For testing purposes, it
is indeed common to run both client and server on the same
machine. One typically refers to the given machine by localhost or
127.0.0.1, but depending on network setup, the actual IP address
or the DNS-resolvable machine name may (need to) be used.

c) Ports and firewall exceptions

RMI requires some ports to be accessible.

Also RMI may require special firewall settings.

RMI uses port 1099 by default.
See: ""LocateRegistry.createRegistry(Registry.REGISTRY PORT);""
All ports from 1024 may be used.

In Windows, the following firewall exceptions may be needed:
 C:\WINDOWS\system32\java.exe
 C:\Programme\Java\jdk1.6.0 06\bin\rmiregistry.exe
 C:\Programme\Java\jdk1.6.0 06\bin\java.exe

d) Security policy

The server of the application is started with a security manager.
See org.softlang.server.Server.java.
Hence we *must* grant some RMI-related rights; see file security.policy.
Also, the policy file must be passed to the server.
See Makefile.
The policy is very permissive; see the wildcard.

The implementation has been tested with Java version 5.

== Metadata ==

* [[uses::Language:Java]] (Version 5)
* [[uses::Technology:Eclipse]]
* [[uses::Technology:java.rmi]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Distribution]]
* [[developedBy::Contributor:rlaemmel]]
* [[developedBy::Contributor:Jürgen Starek]]

",2013-06-12 14:58:13.085,2017-07-05 15:28:47.35867
Concept,Text-to-object mapping,"== Headline ==

The [[capability]] of mapping [[grammarware]] to [[objectware]]

== Discussion ==

Text-to-object mapping entails conversion of text-based (or otherwise grammar-ruled) structure to object-based structure. The assumption is here that a grammar and an object model are involved here which are meant to correspond to each other in some manner made explicit by the mapping.

== Metadata ==

* [[instanceOf::Mapping]]
",2013-06-12 14:56:25.54,2017-07-04 13:44:59.131553
Concept,101project,"== Headline ==

What's the [[101project]]

== Description ==

The 101companies  Project (or ""101project"" or even just ""101"" for short) is an open knowledge resource covering [[Software technology|software technologies]], [[technological space]]s, [[software language]]s, and [[software concept]]s. 101 targets programmers, software engineers, teachers, learners, and technologists; they can leverage 101 and they are encouraged to contribute to 101. The project relies on the aggregation, organization, annotation, and analysis of an open-source corpus of [[101contribution|contributions]]: these are implementations and other manifestations of the [[system:Company]], which is an imaginary ''Human Resource Management System'' with various (mostly) optional [[Namespace:Feature|features]]. Contributions are maintained in the [[101repo]] and documented on the [[101wiki]] and organized in [[Namespace:Theme|themes]]. All available knowledge is processed by the [[101worker]]; derived resources are made available as [[101data]]; all relevant resources are made available as Linked Data explorable through [[101explorer]].

=== Why the name ""101companies""? ===

The ""companies"" postfix in ""101companies"" refers to the kind of system that is built time again in this project: a system that models companies, department structure, employees, salaries, etc. The ""101"" prefix in ""101companies"" refers to the idiom of doing something in ""101 ways"", namely building said system. Actually, there are more than ""101 ways"" of building a human resource management system with different software technologies and software languages.

=== History of the [[101project]] ===

* Apr 2008: Ralf Lämmel initiates a related course on programming techniques and technologies at the University of Koblenz-Landau.
* June 2010: Jean-Marie Favre, Dragan Gasevic, and Ralf Lämmel meet in Malaga to discuss technological spaces and related publication and teaching efforts.
* Aug 2010: [[101repo]] starts to take shape thanks to Thomas Schmorleiz who enters the [[101project]] for several years to come.
* Oct 2011: Jean-Marie Favre, Dragan Gasevic, and Ralf Lämmel present a related tutorial at GPCE/SLE 2010 in Eindhoven.
* Feb 2011: Andrei Varanovich joins the Software Languages Team to focus his research and developer energy around the project.
* Mar 2011: Ralf Lämmel releases [[101wiki]] at AOSD 2011 in Brazil. Many other [[Information:Presentations|presentations]] of the project have followed.
* Spring 2012: First publication on the project at TOOLS 2012. Other [[Information:Papers|papers]] have followed at MODELS 2012 and WCRE 2012.
* Since summer 2012: many [[101contributor]]s have implemented the [[system:Company]] with their preferred languages and technologies and contributed thus to the [[101repo]].
* August 2012: The SoTeSoLa summer school leverages the project as part of its design, e.g., for hackathon-like efforts.
* Winter 2012-Summer 2013: Complete re-design of [[101wiki]], [[101repo]], [[101worker]] underway.
* April 2013: The project is now used in two [[Namespace:Course|courses]] simultaneously at the University of Koblenz-Landau.

<small>All 101companies content and code is subject to the [[101license]].</small>

<small>[http://www.youtube.com/channel/UCzecm5qz 9KDcxuhgbRDy-w Check out some videos on the YouTube channel of the project.]</small>

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/101 (number)]]
*

",2013-06-12 14:52:49.991,2017-07-04 13:44:34.855123
Concept,101wiki,"== Metadata ==
* [[instanceOf::Concept]]

",2013-06-12 14:53:05.873,2017-07-04 13:44:35.153933
Concept,Quadratic equation,"== Headline ==

An elementary algebra concept

== Illustration ==

In the domain of real numbers, such equations have 0 to 2 solutions that can be computed follows:

<syntaxhighlight lang=""haskell>
-- Solve a quadratic equation
solve a b c
  = if d < 0
      then Nothing
      else Just ((-b + s) / (2 * a), (-b - s) / (2 * a))
  where
    -- Discriminant
    d = b^2 - 4 * a * c
    -- Possibly undefined sqare root of discriminant
    s = sqrt d
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Quadratic_equation]]
* [[relatesTo::Algorithmic problem]]
* [[isA::Concept]]

",2014-03-23 22:02:32.484,2017-07-04 15:26:35.270006
Concept,Software architecture,"== Headline ==

A high-level depiction of a [[software system]] or [[software component|component]]

== Metadata ==

* [[relatesTo::http://www.sei.cmu.edu/architecture/]]
* [[relatesTo::http://dx.doi.org/10.1016/j.scico.2004.03.012]]
* [[relatesTo::http://en.wikipedia.org/wiki/Software_architecture]]
* [[relatesTo::http://en.wikipedia.org/wiki/ISO/IEC_42010]]
* [[relatesTo::http://msdn.microsoft.com/en-us/library/ee658098.aspx]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:56:03.793,2017-07-04 15:26:24.019068
Contribution,javaScanner,"== Headline ==

[[lexer]]-based text processing in [[Language:Java]]
== Characteristics ==

A simple custom-made lexer is used to process a text-based representation of companies.
The lexer leverages Java's basic Scanner API.
Hence, it uses a delimiter pattern to chop the input into candidate tokens;
it then uses regular expressions to recognize specific tokens.
The default delimiter pattern is used: whitespace.
This also means that whitespace itself is not reported as a token.
[[Feature:Total]] is implemented by means of finding token sequences
consisting of keyword ""salary"" followed by a number.
(Just looking for a number would be sufficient for the situation at hand
because numbers are used for salaries only, but the extra test makes the
point that ad hoc tests may be needed when lexers are used for data processing.)
[[Feature:Cut]] copies lexemes to an output stream while
modifying salaries and performing some ad hoc pretty printing.
Such a combination of lexer and pretty printing implements [[Feature:Parsing]] and [[Feature:Unparsing]].

Given java.util.Scanner's approach to scanning with its reliance
on delimiters, it is not straightforward to support proper string literals. The problem
is that the straightforward token delimiter, whitespace, can also occur inside
(proper) strings. No other definition of delimiter, not even a dynamically changing
definition seem to be applicable here. Hence, the present implementation simply
does not allow spaces in string literals---which is clearly a major limitation.

'''Note:''' Because of this issue, this is essentially a
suboptimal implementation. See [[Contribution:javaLexer]] for a more
robust lexer-based implementation in Java.
== Illustration ==

The data model is implemented as plain textual files:

<fragment url=""inputs/sample.Company""/>

[[Feature:Parsing]] is implemented using the helper class Recognizer to enable step-by-step lexing:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java/class/Parsing""/>

[[Feature:Unparsing]] demonstrates the use of the Recognizer to execute semantic actions (only write lexemes) during [[Feature:Parsing]]

<fragment url=""src/main/java/org/softlang/company/features/Unparsing.java/class/Unparsing""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented using [[Feature:Parsing]] with semantic actions:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.
== Relationships ==

For plain syntax checking with [[Technology:ANTLR]] see [[Contribution:antlrAcceptor]].

For lexer-based text processing in pure [[Language:Java]] see [[Contribution:javaScanner]].


For lexing/tokenization with [[Technology:ANTLR]] see [[Contribution:antlrLexer]].

For a custom made lexer in pure [[Language:Java]] see [[Contribution:javaLexer]].


For parsing with semantic actions with [[Technology:ANTLR]] see [[Contribution:antlrParser]].

For recursive-descent parsing in pure [[Language:Java]]] see [[Contribution:javaParser]].

For parser combinators in pure [[Language:Java]]] see [[Contribution:javaParseLib]].


For object/text mapping from test to companies with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].

For object/text mapping from text to trees with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].
== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
*** org.softlang.company.features.recognizer for helper classes.
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.
== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]
* [[developedBy::Contributor:Michael Kusenbach]]
",2013-06-12 14:58:13.693,2017-07-05 15:28:48.476534
Contribution,javaSyb,"== Headline ==

[[SYB]]-style generic programming with reflection in [[Language:Java|]]

== Characteristics ==

When implementing operations for totaling or cutting salaries in a regular object-oriented fashion (such as in the case of [[Contribution:javaComposition]]), it occurs that the implementations are unnecessarily concerned with the detailed object model. In contrast, some XML-based implementations (such as in the case of [[Contribution:javaDom]]) are much more concise because they can leverage extra query facilities, in fact, axes, such as the descendants axis of XPath. The [[SYB]] style of generic programming also provides such conciseness on the grounds of functional programming idioms. In particular, queries and transformations are supported by customizable traversal schemes.  Conceptually, these are higher-order functions that are to be parametrized by essential, problem-specific first-order functions. The present implementation applies SYB to Java. The implementation includes a simple [[SYB]]-style library for object traversals. The library relies on reflection, in fact, introspection--as provided by Java's reflection approach.

== Illustration ==

The data model is implemented with object composition. For example Companies:

<fragment url=""src/main/java/org/softlang/company/model/Company.java/class/Company""/>

[[Feature:Closed serialization]] is implemented using [[Language:Java]] [[Technology:Object Streams]]:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany""/>

[[Feature:Total]], [[Feature:Cut]] and [[Feature:Depth]] are implemented using functions. For example Total:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For basic OO without inheritance see [[Contribution:javaComposition]].

For basic OO with inheritance see [[Contribution:javaInheritance]].

For modular OO programming with static methods see [[Contribution:javaStatic]].

For use of Java reflection see [[Contribution:javaReflection]] (data processing) and [[Contribution:javaSyb]] (SYB-style generic programming).

For design patterns see [[Contribution:javaTemplate]] (template design pattern), [[Contribution:javaVisitor]] (visitor design pattern) and [[Contribution:javaExorcism]] (excessive illustration of design patterns).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** javaf.prelude for function patterns.
** javaf.syb for query patterns.
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.model for implementations of [[Feature:Company]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[memberOf::Theme:Scrap your boilerplate]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]


      ",2013-06-12 14:58:14.455,2017-07-05 15:28:51.261449
Concept,Adapter,"== Headline ==

A bridge between an Adapter View and the underlying data.

== Metadata ==
* [[memberOf::Android_UI]]
* [[sameAs::http://developer.android.com/reference/android/widget/Adapter.html]]
* [[relatesTo::http://developer.android.com/guide/topics/ui/binding.html]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:11.341,2017-07-04 13:44:36.931541
Concept,Three-tier architecture,"== Headline ==

An [[architectural pattern]] to seperate concerns

== Details ==

These are three tiers in this architecture:
* [[presentation layer]]
* [[business layer]]
* [[data-access layer]]

== Metadata ==

* [[instanceOf::Architectural pattern]]
* [[sameAs::http://en.wikipedia.org/wiki/Multitier_architecture#Three-tier_architecture]]
",2013-06-12 14:56:26.572,2017-07-04 13:44:59.191643
Concept,Static method,"== Headline ==

A [[method]] that does not dispatch on a receiver type

== Illustration ==

See [[Contribution:javaStatic]].

== Metadata ==

[[isA::Method]]

",2014-04-27 18:26:02.111,2017-07-04 15:26:35.449649
Concept,Application domain,"
== Metadata ==

[[isA::Concept]]",2014-06-25 14:33:46.263,2017-07-04 15:26:35.531342
Concept,Access control,"== Headline ==

The [[capability]] of controlling access to data and resources within programs

== Metadata ==

* [[instanceOf::Capability]]
* [[sameAs::http://en.wikipedia.org/wiki/Access_control]]

",2013-06-12 14:53:10.214,2017-07-04 13:44:36.744687
Concept,Amortized analysis,"== Headline ==

Analysis of algorithms based on sequences of operations

== Metadata ==

* [[isA::Complexity analysis]]
* [[sameAs::http://en.wikipedia.org/wiki/Amortized_analysis]]
* [[similarTo::https://www.cs.cmu.edu/~sleator/papers/adjusting-heaps.pdf]]

",2014-07-03 08:09:58.529,2017-07-04 15:26:35.570498
Contribution,haskellLambda,"== Headline ==

[[Anonymous function]]s in [[Language:Haskell|Haskell]]
== Characteristics ==

The contribution demonstrates functional programming in Haskell. Specifically, [[anonymous function]]s in the form [[lambda abstraction]]s are put to work as arguments of [[higher-order function]]s for [[list processing]].
== Illustration ==

Anonymous functions are functions without name. They can be used as ""in-place"" arguments of higher-order functions, thereby eliminating the need of a definition in a local or a global scope, thereby making some definitions more concise. For comparison, consider the following functions for totaling salaries, as part of [[Contribution:haskellWhere]]:

<syntaxhighlight lang=""haskell"">
-- Total all salaries in a company
total :: Company -> Float
total (n, es) = sum (map totalE es)

-- Extract the salary from an employee
totalE :: Employee -> Float
totalE ( ,  , s) = s
</syntaxhighlight>

When anonymous functions are put to work, then the same functionality is implemented as follows:

<syntaxhighlight lang=""haskell"">
-- Total all salaries in a company
total :: Company -> Float
total (n, es) = sum (map (\( , ,s) -> s) es)
</syntaxhighlight>

Thus, the named helper function ''totalE'' is gone; ''map'' is applied instead to an anonymous function.
== Relationships ==

* The present contribution revises [[Contribution:haskellList]] to use anonymous functions in combination with map and friends.
* The present contribution is thus also a variation on [[Contribution:haskellEngineer]].
== Architecture ==

See [[Contribution:haskellEngineer]].
== Usage ==

See [[Contribution:haskellEngineer]].
== Metadata ==


* [[memberOf::Theme:Haskell introduction]]
* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[implements::Feature:Flat company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:rlaemmel]]
* [[varies::Contribution:haskellEngineer]]
* [[varies::Contribution:haskellList]]
* [[basedOn::Contribution:haskellList]]
* [[moreComplexThan::Contribution:haskellList]]
* [[moreComplexThan::Contribution:haskellEngineer]]

",2013-06-12 14:57:43.346,2017-07-05 15:27:42.164213
Concept,Binary search,"== Headline ==

Solve the [[search problem]] for sorted input

== Description ==

Semi-formally, binary search can be described by an algorithm as follows:

* Given is a sorted list ''l'' and a value ''v'' of the element type of ''l''.
* If ''l'' is the empty list then return ''False''.
* Let ''m'' be the element in the ""middle"" of ''l''.
* If ''m'' equals ''v'', then return ''True''.
* If ''m < v'', then recursively search ''v'' in the list containing all elements to the right of ''m''.
* If ''m > v'', then recursively search ''v'' in the list containing all elements to the left of ''m''.

Please note that this formulation also expresses that the element type must admit comparison for comparison.

== Illustration ==

=== Binary search ===

<syntaxhighlight lang=""haskell>
-- Polymorphic binary search
-- Assume that input list is sorted
search :: Ord a => [a] -> a -> Bool
search [] _ = False
search xs x =
   if x < y then search ys1 x
   else if x > y then search ys2 x
   else True
  where
    ys1 = take l xs
    (y:ys2) = drop l xs
    l = length xs `div` 2
</syntaxhighlight>

The implemented search function can be applied as follows:

<syntaxhighlight lang=""haskell"">
-- Illustrate binary search
main = do
  let input = [1,2,3,4,4]
  print $ search input 1 -- True
  print $ search input 5 -- False
</syntaxhighlight>

Note that the input list is readily sorted. The less efficient, [[linear search]] does not require the input list to be sorted.

We may also represent the input as a sorted tree. In this manner, the decision of going to the left or the right side after ""halving"" is much more straightforward. Here is a suitable algebraic data type for trees:

<syntaxhighlight lang=""haskell"">
-- Binary trees
data Tree a = Empty | Fork a (Tree a) (Tree a)
</syntaxhighlight>

The corresponding search function looks like this:

<syntaxhighlight lang=""haskell"">
-- Polymorphic binary search
-- Assume that input tree is sorted
search :: Ord a => Tree a -> a -> Bool
search Empty _ = False
search (Fork x1 l r) x2 =
  if x2 < x1
    then search l x2
    else if x2 > x1
      then search r x2
      else True
</syntaxhighlight>

A demo follows:

<syntaxhighlight lang=""haskell"">
-- Illustrate binary search
main = do
  let input = Fork 3 (Fork 1 Empty Empty) (Fork 42 Empty Empty)
  print $ search input 1 -- True
  print $ search input 3 -- True
  print $ search input 42 -- True
  print $ search input 88 -- False
</syntaxhighlight>

== Citation ==

(http://en.wikipedia.org/wiki/Binary_search_algorithm, 21 April 2013)

In computer science, a binary search or half-interval search algorithm finds the position of a specified value (the input ""key"") within a sorted array. [...] In each step, the algorithm compares the input key value with the key value of the middle element of the array. If the keys match, then a matching element has been found so its index, or position, is returned. Otherwise, if the sought key is less than the middle element's key, then the algorithm repeats its action on the sub-array to the left of the middle element or, if the input key is greater, on the sub-array to the right. If the remaining array to be searched is reduced to zero, then the key cannot be found in the array and a special ""Not found"" indication is returned.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Binary_search_algorithm]]
* [[instanceOf::Search algorithm]]
* [[relatesTo::Search problem]]
* [[relatesTo::Linear search]]
",2013-06-12 14:53:23.531,2017-07-04 13:44:38.245137
Concept,API,"== Headline ==

An [[interface]] for reusable functionality

== Details ==

API stands for Application Programming Interface.

An API should not be confused with particular [[API implementation|implementations of the API]].

The reference to the term interface should be understood in a broad sense as opposed to concrete interface constructs in programming languages.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Application_programming_interface]]
* [[isA::Software technology]]

",2013-06-12 14:53:07.563,2017-07-04 15:25:57.485171
Contribution,c,"== Headline ==

Implementation in the widely used, low-level [[Language:C]].
== Characteristics ==

This contribution demonstrates the usage of the low-level, mostly [[structured_programming]] [[Language:C|C]] to solve the inherently [[OO_programming]] problems of 101companies. Companies, departments and employees are modelled as [[Record|behaviorless structs]] with functions operating on these [[Record|structs]]. The inheritance found in subunits is modelled using [[Union|manually tagged unions]].

The container type for subunits also makes use of some [[functional_programming]] features of [[Language:C|C]] to make traversal of containers more algorithmic and for application of the [[Visitor_pattern]] in various places.

Due to the nature of [[Language:C|C]], many operations in this contribution are type-unsafe and require [[Manual memory management|explicit allocation and deallocation of dynamic memory]]. Encapsulation of such operations into functions helps to prevent type errors, but such discipline is not enforced by the language. There is also significantly less syntactic sugar compared to other languages, but it also gives a view on how those features work under the hood of those other languages.
== Illustration ==

=== Data Model ===
The ""object"" model for companies, departments and employees is separated into [[Record|structs]] holding plain old data and functions that operate on them.
<syntaxhighlight language=""c"">
struct c101_Company {
    char*              name;
    struct c101_Vector subunits;
};

struct c101_Company* c101_newCompany(const char* name,
                                     size_t      subunitCount,
                                                 ...);
void                c101_freeCompany(struct c101_Company* company);

// More functions follow.
// Analogous for departments and employees.
</syntaxhighlight>

Departments and employees are grouped together as subunits into a [[Union|manually tagged union]] to allow for some primitive [[Polymorphism]]. The type of the subunit needs to be checked manually if it needs to be known.
<syntaxhighlight language=""c"">
struct c101_Subunit {
    bool isDepartment; // <- Union Tag
    union {
        struct c101_Employee   employee;
        struct c101_Department department;
    };
};
</syntaxhighlight>

=== Graph Traversal ===

Many of the implemented features rely on traversal of the ""object"" graph. This is implemented using the [[Visitor_pattern]], which is relatively common in C due to its ability to pass callback functions. The currently visited data type is passed via an enum and an untyped pointer (void*), which needs to be checked and cast appropriately. Arbitrary user data can also by passed via such an untyped pointer, which emulates closures.

Here is the code for [[Feature:Total]], which passes the result parameter as user data and adds an employee's salary to it whenever it encounters one.
<syntaxhighlight language=""c"">
static int
totalVisitor(enum c101_VisitorType type, void* unit, void* out)
{
    if (type == C101_EMPLOYEE)
        *(double*) out += ((struct c101_Employee*) unit)->salary;
    return 0;
}

double
c101_total(struct c101_Company* c)
{
    double out = 0.0;
    c101_visitCompany(c, &out, totalVisitor);
    return out;
}
</syntaxhighlight>
== Relationships ==

* [[Contribution:luaC]] extends this contribution with [[Feature:Parsing]] and [[Feature:Unparsing]], using [[Language:Lua]] as an embedded scripting language.
* [[Contribution:cpp]] uses [[Language:CPlusPlus]]. It makes clear the difference to [[Language:C|C]] and how ""C/C++"" is not a thing.
== Architecture ==

As is usual for [[Language:C|C]], interface and implementation are separated into header files (declarations) and implementation files (definitions). This is mostly due to the language's primitive import capabilities: when a file is included, its contents just get dumped into the current compilation unit, only after compilation are these separate parts linked together.

Header files (.h) are found in the [https://github.com/hartenfels/C101/tree/master/include include directory] and implementation files (.c) are found in the [https://github.com/hartenfels/C101/tree/master/src src directory].
== Usage ==

This contribution uses [[Technology:CMake]] for handling its build process and its [[Technology:CTest]] for testing. Please see the [https://github.com/hartenfels/C101/blob/master/readme.md readme.md on GitHub] for details.
== Metadata ==

* [[uses::Language:C]]
* [[uses::Technology:CMake]]
* [[uses::Technology:CTest]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Median]]
* [[implements::Feature:Total]]
* [[implements::Feature:Hierarchical_Company]]
* [[developedBy::Contributor:hartenfels]]
",2014-03-17 16:49:54.197,2017-07-05 15:30:16.410974
Concept,Polymorphic type,"== Headline ==

A [[type]] that contains type parameters

== Illustration ==

Let's use [[Language:Haskell]] here for illustration here. Consider this type:

<syntaxhighlight lang=""haskell"">
(b -> c) -> (a -> b) -> a -> c
</syntaxhighlight>

This type contains three type parameters: ''a'', ''b'', and ''c''. In fact, this is the type of function composition, which indeed is a [[polymorphic function]]. We can look at the function signature of function composition like this:

<syntaxhighlight lang=""haskell"">
> :t (.)
(.) :: (b -> c) -> (a -> b) -> a -> c
</syntaxhighlight>

(For what it matters, ""."" is a [[higher-order function]]).

Here are further examples of polymorphic types, again in the type system of [[Language:Haskell]]:
* ''Maybe a'': a [[Maybe type]]
* ''Either a b'': an [[Either type]]
* ''f a'': a higher-kinded polymorphic type, as ''f'' is a type-constructor position

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[isA::Concept]]
",2014-07-16 21:56:05.608,2017-07-04 15:26:35.786478
Concept,Anamorphism,"== Headline ==

A corecursion scheme for [[data type]]s dualizing [[catamorphism]]s

== Illustration ==

TBD

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[http://en.wikipedia.org/wiki/Anamorphism]]
",2013-06-12 14:53:13.609,2017-07-04 13:44:37.296006
Concept,Toolkit,"== Headline ==

A collection of libraries, tools, plugins, or other reuseware

== Details ==

On the one hand, there is no widely accepted definition of the term ""toolkit"". In fact, the term toolkit is also used in the sense of a GUI toolkit, where it refers to a set of widgets (e.g., OO classes) to implement GUIs.
On the other hand, there does not seem to be any established term that captures the above-mentioned intent.
Hence, the term ""toolkit"" is pragmatically claimed by this ontology.

== Metadata ==

* [[isA::Development technology]]

",2013-06-12 14:56:30.168,2017-07-04 15:26:27.290689
Technology,CTest,"== Headline ==

[[Testing framework]] built into [[Technology:CMake]] to generate, run and publish results of a test suite as a build target.

== Metadata ==

[[partOf::Technology:CMake]]
[[isA::Testing framework]]
[[relatesTo::Unit testing]]
[[sameAs::http://www.vtk.org/Wiki/CMake/Testing_With_CTest]]

",2014-07-24 21:38:22.18,2017-07-04 15:26:35.848753
Concept,Android Service,"== Headline ==

A component that runs in the background without Android-UI

== Metadata ==
* [[instanceOf::Android_term]]
* [[sameAs::http://developer.android.com/guide/components/services.html]]
* [[relatesTo::http://developer.android.com/reference/android/app/Service.html]]
",2013-06-12 14:53:14.894,2017-07-04 13:44:37.387219
Technology,Sinatra,"== Headline ==

A micro [[Web-application framework]] written in [[Language:Ruby]].

== Illustration ==

Sinatra employs an embedded [[Domain-specific language]] to route and handle requests:

<syntaxhighlight lang=""ruby"">
#!/usr/bin/env ruby
require 'sinatra'

# A static route
get '/' do
    return 'Hello, World!'
end

# A route with a parameter
get '/hello/:name' do
    name = params[:name]
    return ""Hello, #{name}!""
end
</syntaxhighlight>

When visiting this server's root page, it will show ""Hello, world!"". When visiting a URL like ""/hello/Human"", it will pattern-match the route and display ""Hello, Human!"".

== Metadata ==

[[uses::Language:Ruby]]
[[sameAs::http://www.sinatrarb.com/]]
[[sameAs::http://en.wikipedia.org/wiki/Sinatra_%28software%29]]
[[isA::Web-application_framework]]
[[uses::External DSL]]

",2014-08-19 23:44:01.728,2017-07-04 15:26:36.1756
Concept,Transcompiler,"== Headline ==

A [[Compiler]] that transforms source code from one [[Software language]] into the source code of another one.

== Illustration ==

Take for example this [[Language:CoffeeScript]] code:

<syntaxhighlight lang=""coffeescript"">
powers = (bases, pow) ->
    (Math.pow n, pow for n in bases)

list = [
    1
    2
    3
    4
    5
]

console.log powers list, 2
</syntaxhighlight>

It can be transcompiled to the following JavaScript code:

<syntaxhighlight lang=""javascript"">
var list, powers;

powers = function(bases, pow) {
  var n, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = bases.length; _i < _len; _i++) {
    n = bases[_i];
    _results.push(Math.pow(n, pow));
  }
  return _results;
};

list = [1, 2, 3, 4, 5];

console.log(powers(list, 2));
</syntaxhighlight>

== Metadata ==

* [[isA::Compiler]]
* [[sameAs::http://en.wikipedia.org/wiki/Source-to-source_compiler]]

",2014-08-21 04:46:52.487,2017-07-04 15:26:36.500435
Contribution,haskellTermRep,"== Headline ==

Data processing in [[Language:Haskell]] with a universal representation

== Characteristics ==

TBD

== Illustration ==

TBD

== Relationships ==

TBD

== Architecture ==

TBD

== Usage ==

See [[Contribution:haskellComposition]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHCi]]
* [[uses::Technology:Make]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell data]]
",2013-06-12 14:57:46.961,2017-07-05 15:27:50.11155
Concept,Web UI REST API,"== Headline ==

Documentation for the [[REST|REST]] [[API]] for [[Feature:Web UI|Web UIs]].

== Examples ==

The following [[Client]]s implement this API:

* [[Contribution:jsTree]]

The following [[Server]]s implement this API:

* [[Contribution:dancer]]
* [[Contribution:bottle2]]

== Overview ==

This [[API]] describes a [[Client-server architecture]]. All actions are initiated by the [[Client]] via sending a POST [[Technology:XMLHttpRequest|XMLHttpRequest]] containing the relevant data formatted in [[Language:JSON|JSON]]. The [[Server]] then processes this requests and sends a response, also in [[Language:JSON|JSON]].

First a connection is established and the [[Client]] receives the [[Server]] configuration and the data model. Afterwards, the client can perform actions on the data model and the server can respond to those with messages and various commands.

== Connecting ==

=== Initial Contact ===

This is the first thing the client shall sends to the server to retrieve information about its capabilites and which URLs it should be using for each request. This must always be POSTed against the root URL of the server (""/"").

The client's message schema looks like this:

<syntaxhighlight language=""json"">
{
    ""title""       : ""config request"",
    ""type""        : ""object"",
    ""required""    : [""type""],
    ""properties""  : {
        ""type"" : {""pattern"" : ""^config$""}
    }
}
</syntaxhighlight>

That is, the clients message is just:

<syntaxhighlight language=""json"">
{""type"" : ""config""}
</syntaxhighlight>

The server shall respond with a big object describing its configuration:

<syntaxhighlight language=""json"">
{
    ""title""      : ""config response"",
    ""type""       : ""object"",
    ""required""   : [""method"", ""types"", ""actions""],
    ""properties"" : {
        ""method""  : {
            ""type""       : ""object"",
            ""required""   : [""name"", ""tree url""],
            ""properties"" : {
                ""name""        : {
                    ""pattern""     : ""^ajax$"",
                    ""description"" : ""right now there's only one method: ajax""
                },
                ""tree url""    : {
                    ""type""        : ""string"",
                    ""description"" : ""the URL where the model can be retrieved""
                },
                ""action urls"" : {
                    ""type""              : ""object"",
                    ""description""       : ""mappings from actions to their URLs"",
                    ""patternProperties"" : {
                        "".*"" : {""type"" : ""string""}
                    }
                }
            }
        },
        ""types""   : {
            ""type""              : ""object"",
            ""description""       : ""types of the model, like company or employee"",
            ""patternProperties"" : {
                "".*"" : {
                    ""type""       : ""object"",
                    ""properties"" : {
                        ""icon""     : {
                            ""type""        : ""string"",
                            ""description"" : ""URL to an icon for this type""
                        },
                        ""printf""   : {
                            ""type""        : ""object"",
                            ""description"" : ""display text format for nodes of this type"",
                            ""required""    : [""format""],
                            ""properties""  : {
                                ""format"" : {
                                    ""type""        : ""string"",
                                    ""description"" : ""a printf-style format string""
                                },
                                ""args""   : {
                                    ""type""        : ""array"",
                                    ""items""       : {""type"" : ""string""},
                                    ""description"" : ""format argument keys from the node's fields""
                                }
                            }
                        },
                        ""children"" : {
                            ""type""        : ""array"",
                            ""items""       : {""type"" : ""string""},
                            ""uniqueItems"" : true,
                            ""description"" : ""keys of types that are valid children""
                        },
                        ""actions""  : {
                            ""type""        : ""array"",
                            ""items""       : {""type"" : ""string""},
                            ""description"" : ""list of actions for this type, empty string can be used as separator""
                        }
                    }
                }
            }
        },
        ""actions"" : {
            ""type""              : ""object"",
            ""description""       : ""mappings of action keys to the way they are displayed"",
            ""patternProperties"" : {
                "".*"" : {
                    ""oneOf"" : [
                        {
                            ""type""       : ""string""
                        },
                        {
                            ""type""       : ""object"",
                            ""required""   : [""text""],
                            ""properties"" : {
                                ""text"" : {""type"" : ""string""},
                                ""icon"" : {""type"" : ""string""}
                            }
                        }
                    ]
                }
            }
        }
    }
}
</syntaxhighlight>

Since the structural information above can be a bit overwhelming, it is probably easier to refer to these examples. They are in [[Language:YAML|YAML]], but are structurally equivalent to [[Language:JSON|JSON]]:

* [https://raw.githubusercontent.com/hartenfels/Dancer101/master/web ui.yml Example from Contribution:dancer]
* [https://raw.githubusercontent.com/hartenfels/Bottle101/master/web ui.yml Example from Contribution:bottle]

=== Retrieving the Model ===

After receiving a valid server configuration, the client shall send a request to the tree url it was given to retrieve the model. The request looks like this:

<syntaxhighlight language=""json"">
{
    ""title""       : ""tree request"",
    ""type""        : ""object"",
    ""required""    : [""type""],
    ""properties""  : {
        ""type"" : {""pattern"" : ""^tree$""}
    }
}
</syntaxhighlight>

So again, it's just a type in an object:

<syntaxhighlight language=""json"">
{""type"" : ""tree""}
</syntaxhighlight>

The server shall then respond with its current object model, whose schema looks like this:

<syntaxhighlight language=""json"">
{
    ""title"" : ""tree response"",
    ""type""  : ""array"",
    ""items"" : {""$ref"" : ""#/node""},
    ""node""  : {
        ""type"" : ""object"",
        ""description"" : ""recursive tree of nodes"",
        ""required""    : [""type"", ""text""],
        ""properties""  : {
            ""type""     : {
                ""type""        : ""string"",
                ""description"" : ""type of the node, must reference a type given in the configuration""
            },
            ""text""     : {
                ""type""        : ""string"",
                ""description"" : ""title, name, e.a. of a node""
            },
            ""children"" : {
                ""type""        : ""array"",
                ""items""       : {""$ref"" : ""#/node""},
                ""description"" : ""array of child nodes below a node""
            }
        }
    }
}
</syntaxhighlight>

Note that each node has a unique ID and child nodes of all types are in one array, there's no separation for departments, employees or managers. If your server-side model differs from this, you will need to convert it to this format.

An example response looks like this:

<syntaxhighlight language=""json"">
[
    {
        ""type""     : ""root"",
        ""id""       : ""1C4B98C6-2E48-11E4-8B8F-829F24AF2D0B"",
        ""text""     : ""Companies"",
        ""children"" : [
            {
                ""type""     : ""company"",
                ""text""     : ""ACME Corporation"",
                ""id""       : ""1C4B96B4-2E48-11E4-8B8F-829F24AF2D0B"",
                ""children"" : [
                    {
                        ""type""     : ""department"",
                        ""id""       : ""1C4B42CC-2E48-11E4-8B8F-829F24AF2D0B"",
                        ""text""     : ""Research"",
                        ""children"" : [
                            {
                                ""type""    : ""employee"",
                                ""text""    : ""Ralf"",
                                ""address"" : ""Koblenz"",
                                ""id""      : ""1C4AB564-2E48-11E4-8B8F-829F24AF2D0B"",
                                ""salary""  : ""1234""
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
</syntaxhighlight>

== Client Actions ==

Once the model has been received, the client can perform actions on it. The server shall respond to each action it has described in its configuration with a response (see next section). What the server decides to respond with is not defined by this protocol, it is up to the implementation to do something sensible and tell the client about it.

=== Regular Actions ===

A regular action is performed on a single node. The client shall only perform actions that are valid as per the configuration it received and they shall be POSTed against the appropriate URLs, also as per configuration received.

The schema for an action looks like this:

<syntaxhighlight language=""json"">
{
    ""title""     : ""regular action"",
    ""type""      : ""object"",
    ""required""  : [""type"", ""id""],
    ""properties"" : {
        ""type"" : {
            ""type""        : ""string"",
            ""description"" : ""the type of action being performed""
        },
        ""id""   : {
            ""type""        : ""string"",
            ""description"" : ""the ID of the node the action is being performed on""
        }
    }
}
</syntaxhighlight>

A sample action, which would be sent to the server's /total URL:

<syntaxhighlight language=""json"">
{
    ""type"" : ""total"",
    ""id""   : ""1C4B96B4-2E48-11E4-8B8F-829F24AF2D0B""
}
</syntaxhighlight>

=== Restructure Action ===

This action is for invoking [[Feature:Restructuring]]. The action is performed on two nodes: the source node that is being moved and the target node it is to become a child of.

The client shall only invoke this action if the configuration defines an action called ""restructure"", and POST it against the appropriate URL if it is given. It shall also not attempt to restructure incompatible types, as per the server's types' children configuration.

The schema for a restructure action looks like this:

<syntaxhighlight language=""json"">
{
    ""title""     : ""restructure action"",
    ""type""      : ""object"",
    ""required""  : [""type"", ""id"", ""target""],
    ""properties"" : {
        ""type""   : {
            ""pattern"" : ""^restructure$""
        },
        ""id""     : {
            ""type""        : ""string"",
            ""description"" : ""the ID of the node to be moved""
        },
        ""target"" : {
            ""type""        : ""string"",
            ""description"" : ""the ID of the node that should become the parent of the moving node""
        },
        ""pos""    : {
            ""type""        : ""integer"",
            ""description"" : ""the position in target's children the moving node should end up with""
        }
    }
}
</syntaxhighlight>

An example:

<syntaxhighlight language=""json"">
{
    ""type""   : ""total"",
    ""id""     : ""1C4B96B4-2E48-11E4-8B8F-829F24AF2D0B"",
    ""target"" : ""123E4567-E89B-12D3-A456-426655440000"",
    ""pos""    : 0
}
</syntaxhighlight>

== Server Responses ==

There are two things the server can send with a response: messages and commands. The server can send any number of these in its response to any action. What kind of response an action elicits is up to the implementation.

When the client submits a form the server should also send a response to the form. See [[#Form]] below for details.

The schema for a response looks like this:

<syntaxhighlight language=""json"">
{
    ""title""       : ""response"",
    ""type""        : ""object"",
    ""properties""   : {
        ""commands"" : {
            ""oneOf"" : [
                {
                    ""$ref""  : ""#/definitions/command""
                },
                {
                    ""type""  : ""array"",
                    ""items"" : {""$ref"" : ""#/definitions/command""}
                }
            ]
        },
        ""messages"" : {
            ""oneOf"" : [
                {
                    ""$ref""  : ""#/definitions/message""
                },
                {
                    ""type""  : ""array"",
                    ""items"" : {""$ref"" : ""#/definitions/message""}
                }
            ]
        },
        ""form""    : {
            ""type""       : ""object"",
            ""properties"" : {
                ""valid""  : {
                    ""description"" : ""anything truthy or falsey""
                },
                ""errors"" : {
                    ""type""        : ""object"",
                    ""description"" : ""mapping from field name to error message"",
                    ""patternProperties"" : {
                        "".*"" : {""type"" : ""string""}
                    }
                }
            }
        }
    },
    ""definitions"" : {
        ""command"" : {
            ""type""        : ""object"",
            ""description"" : ""see individual command types for structure information""
        },
        ""message"" : {
            ""oneOf"" : [
                {
                    ""type""        : ""string"",
                    ""description"" : ""just a message with no particular type""
                },
                {
                    ""type""        : ""object"",
                    ""description"" : ""a message with a type, such as 'error'"",
                    ""required""    : [""text""],
                    ""properties""  : {
                        ""text"" : {""type"" : ""string""},
                        ""type"" : {""type"" : ""string""}
                    }
                }
            ]
        }
    }
}
</syntaxhighlight>

=== Commands ===

There are various different types of commands that tell the client to do certain things. They will all be explained in the following.

==== add ====

The client shall add the given node to the parent node. The parent node must exist.

Schema:

<syntaxhighlight language=""json"">
{
    ""title""       : ""add command"",
    ""type""        : ""object"",
    ""required""    : [""type"", ""node""],
    ""properties""   : {
        ""type""   : {""pattern"" : ""^add$""},
        ""parent"" : {
            ""type""        : ""string"",
            ""description"" : ""ID of the parent node""
        },
        ""node""   : {
            ""description"" : ""same as nodes in initial model response""
        }
    }
}
</syntaxhighlight>

Example command:

<syntaxhighlight language=""json"">
{
    ""type""   : ""add"",
    ""parent"" : ""1C4B42CC-2E48-11E4-8B8F-829F24AF2D0B"",
    ""node""   : {
        ""type""    : ""employee"",
        ""id""      : ""1C4AB2B2-2E48-11E4-8B8F-829F24AF2D0B"",
        ""text""    : ""Erik"",
        ""address"" : ""Utrecht"",
        ""salary""  : ""12345""
    }
}
</syntaxhighlight>

==== edit  ====

The client shall find the node with the same ID and then set all fields of the local node that exist in the command node to the value of the command node's field.

Schema:

<syntaxhighlight language=""json"">
{
    ""title""       : ""edit command"",
    ""type""        : ""object"",
    ""required""    : [""type"", ""node""],
    ""properties""   : {
        ""type""   : {""pattern"" : ""^edit$""},
        ""node""   : {
            ""description"" : ""same as nodes in initial model response, except all fields but id are optional""
        }
    }
}
</syntaxhighlight>

As an example, take a local Node that looks like this:

<syntaxhighlight language=""json"">
{
    ""type""    : ""employee"",
    ""text""    : ""Ralf"",
    ""address"" : ""Koblenz"",
    ""id""      : ""1C4AB564-2E48-11E4-8B8F-829F24AF2D0B"",
    ""salary""  : ""1234""
}
</syntaxhighlight>

And the command looks like this:

<syntaxhighlight language=""json"">
{
    ""type"" : ""edit"",
    ""node"" : {
        ""id""      : ""1C4AB564-2E48-11E4-8B8F-829F24AF2D0B"",
        ""text""    : ""Ralph"",
        ""salary""  : ""123""
    }
}
</syntaxhighlight>

Then only the fields ""text"" and ""salary"" shall be changed, the fields not mentioned stay the same. The result is:

<syntaxhighlight language=""json"">
{
    ""type""    : ""employee"",
    ""text""    : ""Ralph"",
    ""address"" : ""Koblenz"",
    ""id""      : ""1C4AB564-2E48-11E4-8B8F-829F24AF2D0B"",
    ""salary""  : ""123""
}
</syntaxhighlight>

==== move ====

The client shall move the given source node under the given target node, either at the position that is given or at the end of the children list if none is given.

Schema:

<syntaxhighlight language=""json"">
{
    ""title""       : ""move command"",
    ""type""        : ""object"",
    ""required""    : [""type"", ""source"", ""target""],
    ""properties""   : {
        ""type""   : {""pattern"" : ""^move$""},
        ""source"" : {
            ""type""        : ""string"",
            ""description"" : ""ID of the node to be moved""
        },
        ""target"" : {
            ""type""        : ""string"",
            ""description"" : ""ID of the node that should become the parent""
        },
        ""pos""    : {
            ""type""        : ""integer"",
            ""description"" : ""the position in target's children the moving node should end up with""
        }
    }
}
</syntaxhighlight>

Example command:

<syntaxhighlight language=""json"">
{
    ""type""   : ""move"",
    ""source"" : ""1C4AB564-2E48-11E4-8B8F-829F24AF2D0B"",
    ""target"" : ""123E4567-E89B-12D3-A456-426655440000"",
    ""pos""    : 0
}
</syntaxhighlight>

==== delete ====

The client shall remove the given node and all of its children from the local model.

Schema:

<syntaxhighlight language=""json"">
{
    ""title""       : ""delete command"",
    ""type""        : ""object"",
    ""required""    : [""type"", ""id""],
    ""properties""   : {
        ""type""   : {""pattern"" : ""^delete$""},
        ""id""     : {
            ""type""        : ""string"",
            ""description"" : ""ID of the node to be deleted""
        }
    }
}
</syntaxhighlight>

Example command:

<syntaxhighlight language=""json"">
{
    ""type"" : ""delete"",
    ""id""   : ""1C4AB564-2E48-11E4-8B8F-829F24AF2D0B""
}
</syntaxhighlight>

==== form ====

See [[#Forms]] below.

=== Messages ===

Messages are just informational text for the client, which should just present them to the user.

== Forms ==

The server may send a form command to the client, which should show it to the user to be filled out.

The schema explains what the form command looks like and it should be clear how the client could display it:

<syntaxhighlight language=""json"">
{
    ""title""       : ""forms command"",
    ""type""        : ""object"",
    ""required""    : [""type"", ""submit"", ""fields""],
    ""properties""   : {
        ""type""   : {""pattern"" : ""^form$""},
        ""title""  : {
            ""type""        : ""string"",
            ""description"" : ""optional title for the form""
        },
        ""submit"" : {
            ""type""        : ""string"",
            ""description"" : ""URL to POST this form to""
        },
        ""fields"" : {
            ""type""        : ""array"",
            ""description"" : ""fields of the form"",
            ""items""       : {
                ""type""       : ""object"",
                ""required""   : [""name""],
                ""properties"" : {
                    ""name""  : {""type"" : ""string""},
                    ""label"" : {""type"" : ""string""},
                    ""value"" : {""type"" : ""string""}
                }
            }
        }
    }
}
</syntaxhighlight>

Example command:

<syntaxhighlight language=""json"">
{
    ""type""   : ""form"",
    ""title""  : ""Edit Employee"",
    ""submit"" : ""/save/edit/employee/1C4AB564-2E48-11E4-8B8F-829F24AF2D0B"",
    ""fields"" : [
        {
            ""name""  : ""text"",
            ""label"" : ""Name"",
            ""value"" : ""Ralf""
        },
        {
            ""name""  : ""address"",
            ""label"" : ""Address"",
            ""value"" : ""Koblenz""
        },
        {
            ""name""  : ""salary"",
            ""label"" : ""Salary"",
            ""value"" : ""1234""
        },
    ]
}
</syntaxhighlight>

The client shall POST the results of this form like a regular web form. The server should then respond with a form response (see [[#Server Responses]]) that tells the client if the submitted form was valid. If it's valid, the form should be closed. Otherwise there should be a mapping of errors that should be presented to the user.

Sample response:

<syntaxhighlight language=""json"">
{
    ""form"" : {
        ""valid""  : 0,
        ""errors"" : {
            ""name""   : ""This can't be empty."",
            ""salary"" : ""This can't be negative.""
        }
    }
}
</syntaxhighlight>

== Metadata ==

* [[isA::API]]
* [[uses::Language:JSON]]
* [[uses::Technology:HTTP]]
* [[uses::Technology:JSON Schema]]
* [[uses::REST]]
* [[uses::Technology:XMLHttpRequest]]",2014-08-22 03:42:33.194,2017-07-04 15:26:42.359866
Contribution,javaInheritance,"== Headline ==

[[Class inheritance]] in [[Language:Java|]]

== Characteristics ==

Basic style of [[OO programming]] is applied. A simple [[object model]]
for companies is provided with [[method]]s to implement a [[query]] for
totaling salaries and a [[transformation]] for cutting salaries.
In fact, [[class inheritance]] is leveraged. Because of the use of class
inheritance, the aforementioned methods are actually [[virtual method]]s.
[[Closed serialization]] in the sense of [[Technology:Object Streams]]
is enabled by means of the [[Marker interface pattern|marker interface]]
''Serializable'', which is applied to the [[class]]es of the object model
for companies.

== Illustration ==

The data model is implemented using [[class inheritance]]. A subunit of [[Feature:Company]] is defined like this:

<fragment url=""src/main/java/org/softlang/company/model/Subunit.java/class/Subunit""/>

Concrete subunits (Departments and Employees) extend this class. E.g. Department:

<fragment url=""src/main/java/org/softlang/company/model/Department.java/class/Department""/>

[[Feature:Closed serialization]] is implemented using [[Language:Java]] [[Technology:Object Streams]]:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented as calls of [[POJO]] methods:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For basic OO without inheritance see [[Contribution:javaComposition]].

For basic OO with inheritance see [[Contribution:javaInheritance]].

For modular OO programming with static methods see [[Contribution:javaStatic]].

For use of Java reflection see [[Contribution:javaReflection]] (data processing) and [[Contribution:javaSyb]] (SYB-style generic programming).

For design patterns see [[Contribution:javaTemplate]] (template design pattern), [[Contribution:javaVisitor]] (visitor design pattern) and [[Contribution:javaExorcism]] (excessive illustration of design patterns).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.model for implementations of [[Feature:Company]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[memberOf::Theme:Starter]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:beddims]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:10.82,2017-07-05 15:28:42.595787
Concept,Operating system,"== Headline ==

System software in a computer system

== Metadata ==

* [[isA::Software technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Operating_system]]
",2014-08-29 21:32:21.194,2017-07-04 15:26:42.686948
Contribution,javaMultithreading,"== Headline ==

Multithreading in [[Language:Java]]

== Characteristics ==

Multithreading enables parallel or concurrent data processing for the implementation of functional requirements of the [[system:Company]].

== Illustration ==

The data model is implemented as [[POJO]]s, as usual. A sequential implementation of the operations for totaling and cutting salaries is also included. For instance:

<fragment url=""src/main/java/org/softlang/company/model/Company.java/class/Company""/>

Concurrent computations rely on the identification of actions suitable for multithreading. Department-level actions for totaling and cutting salaries are chosen as the scope here. The following context class shows how an action is not performed sequentially but rather by submission to a thread pool.

<fragment url=""src/main/java/org/softlang/company/features/context/ConcurrentContext.java/class/ConcurrentContext""/>

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[functional requirement]]s.
*** org.softlang.company.features.action for helper classes for [[Feature:Total]] and [[Feature:Cut]].
*** org.softlang.company.features.context for helper classes for Multithreading.
** org.softlang.company.model for implementations of [[Feature:Company]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Data parallelism]]
* [[implements::Feature:Task parallelism]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Data parallelism]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[developedBy::Contributor:Christian Schlöffel]]
* [[developedBy::Contributor:Johann Tissen]]
* [[developedBy::Contributor:Rebecca Bindarra]]
* [[developedBy::Contributor:Tobias Schmidt]]
* [[developedBy::Contributor:tzimmer]]

",2013-06-12 14:58:11.644,2017-07-05 15:28:44.519962
Concept,Software product line,"== Headline ==

A collection of similar [[software system]]s from a shared set of software assets

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Software_product_line]]
* [[relatesTo::http://www.sei.cmu.edu/productlines/]]
* [[relatesTo::http://www.biglever.com/learn/whitepapers.html?source=spl]]
* [[isA::Concept]]

",2013-06-12 14:56:06.265,2017-07-04 15:26:24.290029
Contribution,seaside,"== Headline ==

[[Web programming]] in [[Language:Smalltalk]] with [[Technology:Seaside]]

== Motivation ==

TBD

== Architecture ==

== Illustration ==

There is a basic OO implemenetation.

Cut for the Employee
<syntaxhighlight lang=""smalltalk"">
cut
	salary := salary / 2
</syntaxhighlight>

Total for the Employee
<syntaxhighlight lang=""smalltalk"">
total
	^salary
</syntaxhighlight>

Cut for the Departmnent

<syntaxhighlight lang=""smalltalk"">
cut
	super cut.
	manager cut.
	employees do:[:each | each cut]
</syntaxhighlight>

Total for the Department

<syntaxhighlight lang=""smalltalk"">
total
	^self employees inject:((manager total) + (super total)) into:[:total :current | total + current total]
</syntaxhighlight>


The second part contains a layer of web-specific components.

== Usage ==

* 1. Download Seaside for Pharo (http://www.seaside.st/download/pharo).
* 2. Open Seaside environment.
* 3. Open ""world"" context menu within seaside (right click or double left click). Tools->File Browser. Navigate to the ""implementations\seaside"" folder in your svn repository.
* 4. Select ''101companies.st'' and click ""install"" on a toolbar.
* 5. Select ''101companies-Tests.st'' and click ""install"" on a toolbar.

At this point you should be able to see 101comanies and 101companiesTests in the components browser.
Next you have to start a web-server. For this go to the ""Seasise Control Panel"", select WAComancheAdaptor and click ""Start"" button.

If you don't see any adapters:
* 1. Open the 'Seaside Control Panel' in the 'Tools' submenu of the 'World' menu
* 2. Should there be no WAComancheAdaptor add one by right clicking and selecting 'Add adaptor...'
* 3. Select the WAComancheAdaptor and press 'Start'.

Open http://localhost:8080/101companies in your web-browser.

== Metadata ==
* [[memberOf::Theme:Web programming]]
* [[uses::Language:Smalltalk]]
* [[uses::Technology:Pharo]]
* [[uses::Technology:Seaside]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[developedBy::Contributor:Any Kellens]]
* [[reviewedBy::Contributor:avaranovich]]
",2013-06-12 14:58:53.793,2017-07-05 15:29:46.677348
Contribution,bottle2,"== Headline ==

An extension of [[Contribution:py3k]], using [[Technology:Bottle]] as a framework for [[Feature:Web UI]].

== Characteristics ==

The most prominent feature of this contribution is the [[Feature:Web UI]]. The [[Server]] is implemented using [[Technology:Bottle|Bottle]] and communicates with the [[Client]] using the [[Web UI REST API]].

== Illustration ==

[[Technology:Bottle]] uses route handlers to apply incoming connections to specified functions.

<syntaxhighlight lang=""python"">
# When a client GETs the root URL, send the default client page
@get('/')
def index():
    return static file('web ui.html', './public')
# Sends the model to the client (the request is usually made via AJAX)
@post('/')
def config():
    return web ui
</syntaxhighlight>

Each action from the client is handled via such a route handler.

Take for example the handler for [[Feature:Cut]]:

<syntaxhighlight lang=""python"">
@post('/cut')
def cut():
    # Get the node to start cutting from
    obj, error = object from('id')
    if not obj: return error
    # Aggregate the employees that have been cut so the client can update them
    commands  = []
    for employee in obj.cut():
        # Manual conversion of employees to JSON
        commands.append({'type' : 'edit', 'node' : employee.to json()})
    # Send AJAX response
    return {'commands' : commands}
</syntaxhighlight>

== Relationships ==

* [[Contribution:jsTree]] is the default [[Client]] for this contribution.
* [[Contribution:py3k]] was the base inspiration for this contribution, but the resemblance isn't too recognizable anymore.
* [[Contribution:dancer]] is a similar [[Server]], using [[Language:Perl]] and [[Technology:Dancer]] instead.

== Architecture ==

The [https://github.com/hartenfels/Bottle101/blob/master/Model.py model-related classes] and [https://github.com/hartenfels/Bottle101/blob/master/Validator.py validator] are both separate Python modules. The server itself is just a [https://github.com/hartenfels/Bottle101/blob/master/bottle101.py single Python script].

== Usage ==

Please see the [https://github.com/hartenfels/Bottle101/blob/master/readme.pod readme.md on GitHub] for details.

== Metadata ==
* [[basedOn::Contribution:py3k]]
* [[similarTo::Contribution:dancer]]
<!-- Next link is generated automatically-->
* [[developedBy::Contributor:hartenfels]]
* [[uses::Web UI REST API]]
* [[uses::Language:Python]]
* [[uses::Language:JSON]]
* [[uses::Technology:Bottle]]
* [[uses::REST]]
* [[uses::Contribution:jsTree]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Median]]
* [[implements::Feature:Total]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Web UI]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Restructuring]]

",2014-08-11 07:57:06.42,2017-07-05 15:30:22.471706
Script,Basic software engineering for Haskell,"== Headline ==

Basic software engineering practices for Haskell

== Description ==

Basic [[software engineering]] principles are instantiated for Haskell. That is, Haskell programs are [[modularization|modularized]] (based on a module system), organized (in terms of [[scoping]]), [[documentation|documented]] (based on idiomatic comments), [[packaging|packaged]] (in terms of dependencies), and [[testing|tested]] (specifically unit-tested). To this end, Haskell's where clauses and its [[module system]] as well as the Haskell technologies [[Technology:Haddock]], [[Technology:Cabal]], [[Technology:HackageDB]], and [[Technology:HUnit]] are leveraged.

== Concepts ==

* [[Software engineering]]
* [[Modularization]]
* [[Module]]
* [[Local scope]]
* [[Build tool]]
* [[Package]]
* [[Haskell package]]
* [[Package management system]]
* [[Testing]]
* [[Unit testing]]
* [[Testing framework]]
* [[Documentation]]
* [[Documentation generation]]
* [[Documentation generator]]

== Languages ==

* [[Language:Haskell]]

== Technologies ==

* [[Technology:Cabal]]
* [[Technology:HackageDB]]
* [[Technology:Haddock]]
* [[Technology:HUnit]]

== Features ==

* [[Feature:Total]]
* [[Feature:Median]]
* [[Feature:History]]

== Contributions ==

* [[Contribution:haskellStarter]]
* [[Contribution:haskellEngineer]]
* [[Contribution:haskellBarchart]]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[relatesTo::https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md]]
* [[dependsOn::Script:First steps in Haskell]]

",2013-06-12 15:00:54.119,2017-07-04 13:46:43.518932
Concept,Builder pattern,"== Metadata ==
* [[instanceOf::Design pattern]]
",2013-06-12 14:53:24.475,2017-07-04 13:44:38.365231
Concept,Type-based mapping,"== Headline ==

A mapping that refers to types (schemas, grammars)

== Metadata ==

* [[instanceOf::Mapping]]
",2013-06-12 14:56:34.163,2017-07-04 13:44:59.790852
Concept,ADO .NET,"==Links==

*[http://en.wikipedia.org/wiki/ADO.NET Wikipedia]
*[http://msdn.microsoft.com/en-us/library/aa286484.aspx MSDN]

== Metadata ==
* [[isA::Concept]]

",2013-06-12 14:53:06.319,2017-07-04 15:25:57.372177
Concept,Tuple,"== Headline ==

An ordered collection of component values

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Tuple]]
* [[instanceOf::Data structure]]
* [[memberOf::Vocabulary:Data structure]]
* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::Tuple type]]
* [[relatesTo::List]]
* [[relatesTo::Record]]

      ",2013-06-12 14:56:33.466,2017-07-04 13:44:59.641282
Concept,Traversal scheme,"== Headline ==

A reuseable [[abstraction]] for [[traversal]]

== Illustration ==

Consider the following [[Language:Java]] code from [[Contribution:xpathAPI]] which invokes an [[Language:XPath]] processor to retrieve all salary nodes so that they can be totaled:

<syntaxhighlight lang=""java"">
public class Total {

    public static double total(Document doc)
        throws Exception {

        // The aggregation variable
        double total = 0;

        // Get the matching elements
        NodeList nodelist = XPathAPI.selectNodeList(doc, ""//salary"");

        // Process the elements in the nodelist
        for (int i=0; i<nodelist.getLength(); i++) {
            // Get element
            Element elem = (Element)nodelist.item(i);
            total += Double.parseDouble(elem.getTextContent());
        }
        return total;
    }
}
</syntaxhighlight>

Specifically, the XPath [[API]] is invoked like this:

<syntaxhighlight lang=""java"">
        NodeList nodelist = XPathAPI.selectNodeList(doc, ""//salary"");
</syntaxhighlight>

The descendants axis of XPath (see ""//"") is leveraged here. This axis can be viewed as the provision of a traversal scheme.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:56:32.845,2017-07-04 15:26:28.127768
Contribution,scala,"== Intent ==

a very very OO implementation of the basic spec in Scala

== Motivation ==

This defines a minimal approach to realize the basic spec using Scala's OO features. In Scala terms this could be considered a ''Java without semicolons'' implementation.

== Architecture ==

The implementation features fully mutable classes and total and cut are implemented as instance methods. The implementation contains three files:

* ''Company.scala'' contains everything related to the Company entity
* ''Employee.scala'' contains classes describing the company personnel
* ''Dept.scala'' contains the implementation of Departments

== Usage ==

You need to install sbt to build and run this project as shown on the sbt [http://code.google.com/p/simple-build-tool/wiki/Setup website]. Then change into the base directory of the project and run
 <nowiki>sbt update</nowiki>
This should fetch all needed dependencies. After that you can compile the project by typing
 <nowiki>sbt compile</nowiki>
and then
 <nowiki>sbt test</nowiki>
to run the tests.

This contribution has been tested Scala Version 2.8.1, [[Technology:sbt]] Version 0.7.4, [[Technology:sbt-idea]] Version 0.4 and [[Technology:ScalaTest]] Version 1.3.

== Metadata ==
* [[uses::Language:Scala]]
* [[uses::Technology:Scala]]
* [[uses::Technology:sbt]]
* [[uses::Technology:sbt-idea]]
* [[uses::Technology:ScalaTest]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:DerDackel]]
",2013-06-12 14:58:49.798,2017-07-05 15:29:43.149136
Concept,Performance,"== Headline ==

The efficiency of a program or a system

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:55:20.83,2017-07-04 15:26:18.746116
Contribution,antlr4Acceptor,"== Headline ==

An ANTLR4-based acceptor for textual syntax

==Relationships==

This contribution is a ANTLR4 version of [[Contribution:antlrAcceptor]].

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[developedBy::Contributor:Manfred Jackel]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]

* [[uses::Language:Plain Text]]

",2014-08-17 13:25:16.233,2017-07-05 15:30:22.57127
Contribution,antlr4Lexer,"== Headline ==

Lexer-based processing with ANTLR4

==Relationships==

This contribution is an ANTLR4 version of [[Contribution:antlrLexer]].

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]
* [[developedBy::Contributor:Manfred Jackel]]

",2014-08-17 14:41:33.946,2017-07-05 15:30:22.646095
Contribution,scalaXML,"== Intent ==

an implementation of the basic spec in [[Language:Scala]] utilizing Scala's builtin XML handling features.

== Motivation ==

This implementation shows the use of XML literals which are built into Scala at language level. At no point, an object model is generated beyond Scala's internal XML representation.

== Architecture ==

All relevant code is contained in ''CompanyXMLReader.scala''. The cut and total capabilities are contained in a singleton object by the same name. In ''Validator.scala'', a default XML Schema validator is provided for testing purposes.

== Usage ==

This implementation uses sbt 0.10 as build tool, available at [http://github.com/harrah/xsbt/]. After installing sbt just change into the project directory and run
 <nowiki>sbt</nowiki>
to create the project, followed by
 <nowiki>sbt update</nowiki>
This should fetch any needed dependencies. After that you can compile the project by typing
 <nowiki>sbt compile</nowiki>
and then
 <nowiki>sbt test</nowiki>
to run the tests.

This contribution has been tested with Scala Version 2.9.0.1, sbt Version 0.10 and [[Technology:Specs]] Version 1.4.

== Metadata ==
* [[uses::Language:Scala]]
* [[uses::Technology:Scala]]
* [[uses::Technology:sbt]]
* [[uses::Technology:Specs]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:DerDackel]]
",2013-06-12 14:58:50.735,2017-07-05 15:29:43.699758
Concept,Complexity,"== Headline ==

Time and space complexity of algorithms and data structures

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[similarTo::http://en.wikipedia.org/wiki/Analysis_of_algorithms]]
* [[similarTo::http://en.wikipedia.org/wiki/Complexity_class]]
* [[similarTo::http://en.wikipedia.org/wiki/Computational_complexity_theory]]
",2013-06-12 14:53:31.003,2017-07-04 13:44:38.867143
Concept,Component,"== Metadata ==

* [[instanceOf::Abstraction mechanism]]
",2013-06-12 14:53:31.143,2017-07-04 13:44:38.875108
Concept,Type constructor,"== Headline ==

An abstraction for constructing new types

== Illustration ==

For instance, in functional programming with Haskell, these are typical type constructor:

* The [[list type]] constructor for constructing list types from an element type
* Any [[tuple type]] constructor for constructing types of products from two component types
* The [[maybe type]] constructor for adding partiality to a type
* The [[either type]] constructor for combining types as cases

These types could or are defined in Haskell in follows:

<syntaxhighlight lang=""haskell"">
data [a] = [] | (a:[a])
data (a, b) = (a, b)
data Maybe a = Nothing | Just a
data Either a b = Left a | Just a
</syntaxhighlight>

If we were to remove the special notation for lists and tuples, thus using ordinary type and constructor names, then the first two declarations take this form:

<syntaxhighlight lang=""haskell"">
data List a = Nil | Cons a (List a)
data Pair a b = Pair a b
</syntaxhighlight>

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[similarTo::http://www.haskell.org/haskellwiki/Constructor]]
* [[isA::Concept]]


      ",2013-06-12 14:56:38.565,2017-07-04 15:26:29.539839
Concept,Concurrency,"== Headline ==

The [[capability]] of simultaneous computations with interaction

== Metadata ==

* [[instanceOf::Capability]]
* [[sameAs::http://en.wikipedia.org/wiki/Concurrency_(computer_science)]]

",2013-06-12 14:53:33.421,2017-07-04 13:44:38.993067
Concept,Standard,"== Headline ==

An established norm or requirement about software technologies and languages

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Technical_standard]]
* [[isA::Concept]]

",2013-06-12 14:56:09.232,2017-07-04 15:26:24.958007
Contribution,h2jdbcManySum,"== Headline ==

Database programming with JDBC and H2-Database containing one or more companies and using SQL Sum
==Characteristics==

We use JDBC/SQL for data processing. That is, we use embedded SQL in Java.
==Illustration==

This contribtuion is using the ""SUM"" statement:
<syntaxhighlight lang=""SQL"">
SELECT SUM(salary) FROM employee
</syntaxhighlight>

SUM adds all salaries, there is no need for a loop for adding the single salaries like in [[Contribution:h2jdbcMany|]].
==Relationships==
For a [[Technology:MySQL|]] version see [[Contribution:mySqlMany]].

For a version not using [[Language:SQL|]] ""Sum"" statement see [[Contribution:h2jdbcMany]].
==Usage==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==
* [[developedBy::Contributor:mpaul138]]
* [[developedBy::Contributor:DerDackel]]

* [[uses::Language:Plain Text]]
* [[uses::Language:SQL]]
* [[uses::Language:Java]]
* [[uses::Technology:JDBC]]
* [[uses::Technology:Eclipse]]
* [[uses::Technology:H2]]
* [[implements::Feature:Total]]
",2014-08-23 20:06:34.511,2017-07-05 15:30:23.923172
Concept,Conditional,"== Headline ==

select computations based on a Boolean condition

== Metadata ==

* [[instanceOf::Language construct]]
* [[sameAs::http://en.wikipedia.org/wiki/Conditional_(programming)]]
",2013-06-12 14:53:34.07,2017-07-04 13:44:39.074244
Concept,Connectivity Manager,"== Headline ==

A manager to give information about the state of network connectivity

== Metadata ==

* [[instanceOf::Android_term]]
* [[sameAs::http://developer.android.com/reference/android/net/ConnectivityManager.html]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:34.218,2017-07-04 13:44:39.088531
Concept,Software feature,"== Headline ==

A property or characteristic of a [[software system]]

== Description ==

There exist various definitions of ""(software) feature"". We make no effort here to adopt any particular definition. In the context of the 101companies Project, it is important though that ""features"" are directly related to [[requirement]]s and are loosely related to feature-oriented software development in that one expects features to be actually or potentially implemented according to this paradigm.

The features of the 101companies System are aggregated by [[Namespace:Feature]].

== Metadata ==

* [[similarTo::http://en.wikipedia.org/wiki/Software feature]]
* [[relatesTo::http://en.wikipedia.org/wiki/Feature (software design)]]
* [[relatesTo::http://en.wikipedia.org/wiki/Feature]]
",2013-06-12 14:53:56.143,2017-07-04 13:44:41.147526
Concept,Type checking,"== Headline ==

Verification of programs or parts thereof to be of the right types

== Illustration ==

A [[programming language]] implementation may perform type checking at compile time or prior to interpretation or during run time. Consider, for example, the following function for incrementing [[Integer|ints]] in Haskell which favors compile-time type checking (or type checking prior to interpretation):

<syntaxhighlight lang=""haskell"">
inc :: Int -> Int
inc x = x + 1
</syntaxhighlight>

This function type-checks because the [[function definition]] is in compliance with the stated [[type signature]]. Now assume that the function signature would have been instead this one:

<syntaxhighlight lang=""haskell"">
inc :: Int -> Bool
inc x = x + 1
</syntaxhighlight>

Obviously, type checking would be bound to fail on this example, as the result type of the function is ''Int'' rather than ''Bool''.

== Metadata ==

* [[memberOf::Vocabulary:Programming language]]
* [[relatesTo::http://en.wikipedia.org/wiki/Type_system]]
* [[relatesTo::http://c2.com/cgi/wiki?TypeChecking]]
* [[isA::Concept]]

",2013-06-12 14:56:36.309,2017-07-04 15:26:28.987408
Concept,JavaGson,"== Headline ==

Working on JSON with Google [[Technology:Gson|Gson API]], mapping Json to a JsonTree representation

==Characteristics==

This contribution is using [[Language:JSON]] for storing the company structure and Gson API for parsing, unparsing and manipulating it the JSON.
The Gson API maps the input to an JSONTree representing the company.

==Relationships==

[[Contribution:javaGsonObjects]] is using the same Api and Features with a different JSON mapping

==Usage==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

==Temporary==
[https://github.com/https://github.com/101companies/101simplejava/tree/master/contributions/javaGson Gitlink]

== Metadata ==
<!-- Next link is generated automatically-->
* [[developedBy::Contributor:Matthias Paul]]
<!-- Next link is generated automatically-->
* [[uses::Language:JSON]]
<!-- Next link is generated automatically-->
* [[uses::Language:Plain Text]]
<!-- Next link is generated automatically-->
* [[uses::Language:Java]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Technology:Gson]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

",2015-12-11 14:35:46.207,2017-07-05 15:30:24.887348
Concept,Monad,"== Headline ==

A [[Functional programming|functional]] [[programming idiom]] for computing effects
== Illustration ==

The term ""monad"" originates from category theory, but this illustration focuses on the functional programming view where ""monad"" refers to a programming idiom for composing computations, specifically computations that may involve side effects or I/O actions. Monads have been popularized by [[Language:Haskell]].

In Haskell, monads are developed and used with the help of the [[type class]] ''Monad'' which is parametrized by a [[type constructor]] for the actual monad. Here is a sketch of the type class:

<syntaxhighlight lang=""haskell"">
class Monad m where
  return :: a -> m a
  (>>=) :: m a -> (a -> m b) -> m b
  (>>) :: m a -> m b -> m b
  -- ... some details omitted
</syntaxhighlight>

The ''return'' function serves the construction of trivial computations, i.e., computations that return values. The ''>>='' (also knows as the [[bind function]]) compose a computation with a function that consumes the value of said computation to produce a composed computation. Here are some informal descriptions of popular monads:

* [[State monad]]
** ''return'' v: return value ''v'' and pass on state
** ''bind'' c f: apply computation ''c'' as state transformer and pass on transformed state to ''f''
* [[Reader monad]]
** ''return'' v: return value ''v'' and ignore environment
** ''bind'' c f: pass environment to both ''c'' and ''f''
* [[Writer monad]]
** ''return'' v: return value ''v'' and empty output
** ''bind'' c f: compose output from both ''c'' and ''f''
* [[Maybe monad]]
** ''return'' v: return ""successful"" value ''v''
** ''bind'' c f: fail if ''c'' fails, otherwise, pass on successful result to ''f''
== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[instanceOf::Type class]]
* [[isA::Programming idiom]]
* [[sameAs::http://www.haskell.org/haskellwiki/Monad]]
* [[sameAs::http://en.wikipedia.org/wiki/Monad_%28functional_programming%29]]
* [[similarTo::http://en.wikipedia.org/wiki/Monad_(category_theory)]]
* [[relatesTo::http://en.wikibooks.org/wiki/Haskell/Understanding_monads]]



      ",2013-06-12 14:54:57.185,2017-07-04 15:26:16.84176
Concept,Type generalization,"== Headline ==

The extension of types to a less specific base type

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Generalization]]
* [[instanceOf::Data variation]]
* [[memberOf::Vocabulary:Data modeling]]
* [[relatesTo::Subtyping]]
",2013-06-12 14:56:39.122,2017-07-04 13:45:00.843042
Contribution,jmsPublishSubscribe,"== Headline ==

The contribution implements a distributed company system with JMS for messaging. It makes excessive use of asynchronous communication using message listeners and uses publish subscribe messaging as the messaging style. The server is automatically deployed at localhost.

== Metadata ==
* [[developedBy::Contributor:MarcelH91]]

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Task parallelism]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[uses::Technology:JMS]]
* [[uses::Language:Plain Text]]
* [[uses::Language:Java]]
* [[uses::Concept:Asynchronous Communication]]
* [[uses::Concept:Publish-Subscribe Messaging]]",2016-07-07 15:44:21.094,2017-07-05 15:30:25.195694
Contribution,jpa,"== Headline ==

[[Object-Relational mapping]] for [[Language:Java|Java]] with [[Technology:JPA]]


== Motivation ==

[[Object-Relational mapping]] or [[persistence]] on the Java platform is exercised using
[[Technology:JPA]]. The primary data model for companies is a straightforward
object model for [[POJO]]s. A mapping is defined in the object models as Java-Annotations.

== Illustration ==

Consider the following sketch of the class for departments:

<syntaxhighlight lang=""java"">
@Entity
public class Department {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;

	private String name;

	@OneToOne(cascade=CascadeType.ALL)
	private Employee manager;

	@OneToMany(cascade=CascadeType.ALL)
	private List<Department> subdepts = new LinkedList<Department>();

	@OneToMany(cascade=CascadeType.ALL)
	private List<Employee> employees = new LinkedList<Employee>();

	public int getId() { ... }
	public void setId(int id) { ... }
	public String getName() { ... }
	public void setName(String name) { ... }
	public Employee getManager() { ... }
	public void setManager(Employee manager) { ... }
	public List<Department> getSubdepts() { ... }
	public List<Employee> getEmployees() { ... }
}
</syntaxhighlight>

Each persistent class must provide a property (i.e., a getter and a setter) for
an ''id'' that can serve as primary key in the database. Properties of
collection types (in fact, list types) proxy for one-to-many relationships.
The ''id'' and the relationsship must have an appropriate annotation.
Other than that, a persistent class is not much different from a regular
[[POJO]]-like class. The ''Department'' class
is an Entity and is directly mapped to the ''DEPARTMENT'' table.
All properties of the class are associated with the table.
That is, the ''id'' property is directly mapped to a primary key column
''ID'' of the ''DEPARTMENT'' table. Also, the ''name'' property is mapped
to a column of just that name---applying default mapping rules between
SQL types and Java types. Further, the ''employees'' (one-to-many) property is
mapped to a new table ''DEPARTMENT_EMPLOYEE'' with the colums
''DEPARTMENT_ID'' and ''EMPLOYEE_ID''; likewise for sub-departments.
The manager (one-to-one) property is mapped with a foreign key ''MANAGER_ID''
of the ''EMPLOYEE'' table.


The EntityManager is used to communicate with the database:

<syntaxhighlight lang=""java"">
EntityManagerFactory emFactory = Persistence.createEntityManagerFactory(""jpa"");
em = emFactory.createEntityManager();
</syntaxhighlight>
The name ''jpa'' is defined in the JPA configuration.


Objects must be persist as follows:

<syntaxhighlight lang=""java"">
	public static void persistCompany(EntityManager em, Company c){
		if(!em.getTransaction().isActive())
			em.getTransaction().begin();
		em.persist(c);
		em.getTransaction().commit();
	}
</syntaxhighlight>

Persistent objects are brought back to life as follows:

<syntaxhighlight lang=""java"">
	public static Company loadCompany(EntityManager em, String name) {
		if(!em.getTransaction().isActive())
			em.getTransaction().begin();
		Company c =
				(Company) em.createQuery(""Select c from Company c where c.name = :name "", Company.class)
				.setParameter(""name"", name)
				.getSingleResult();
		return c;
	}
</syntaxhighlight>

Finally, consider the JPA configuration:

<syntaxhighlight lang=""xml"">
<?xml version=""1.0"" encoding=""UTF-8""?>
<persistence version=""2.1"" xmlns=""http://xmlns.jcp.org/xml/ns/persistence"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"">
	<persistence-unit name=""jpa"" transaction-type=""RESOURCE_LOCAL"">
		<provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
		<class>org.softlang.company.model.Company</class>
		<class>org.softlang.company.model.Department</class>
		<class>org.softlang.company.model.Employee</class>
		<properties>
		   <property name=""javax.persistence.jdbc.driver"" value=""org.sqlite.JDBC""/>
		   <property name=""javax.persistence.jdbc.url"" value=""jdbc:sqlite:data/jpa.db""/>
		   <property name=""eclipselink.logging.level"" value=""ALL""/>
		   <property name=""eclipselink.ddl-generation"" value=""create-tables""/>
		</properties>
	</persistence-unit>
</persistence>
</syntaxhighlight>

This configuration helps the runtime to connect to the right database, to find
all mapping files of interest, and to define some essential settings.


== Architecture ==

Package ''org.softlang.company.model'' hosts the java object model for [[Feature:Hierarchical company]]
and the O/R-mapping files. Package ''org.softlang.company.features'' provides functionality for
[[Feature:Total]] and [[Feature:Cut]] as well as boilerplate code for
[[Feature:Persistence]]. The JPA configuration
file is located in src/META-INF. The SQLite database file are located in the data dir.


=== Build the project ===

The project should built fine within Eclipse without additional efforts.


== Metadata ==

* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Language:SQL]]
* [[uses::Language:XML]]
* [[uses::Technology:JPA]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Mapping]]
* [[developedBy::Contributor:hakanaksu]]",2017-05-03 13:05:21.1139,2017-07-05 15:30:25.593842
Contributor,AndrEm12,"Actual pages:(work in progress)

[[Language:JML]]

[[Contribution:JML Specs]]

[[Model field]]

[[Ghost field]]

[[Programming by contract]]

[[Precondition]]

[[Postcondition]]",2015-11-08 15:03:17.189,2017-07-04 13:48:07.752964
Technology,Saxon,"== Intent ==

an implementation of [[Language:XSLT]] and [[Language:XQuery]]

== Metadata ==
* [[instanceOf::Language implementation]]
* [[sameAs::http://saxon.sourceforge.net]]
* ",2013-06-12 15:01:58.192,2017-07-04 13:47:31.906034
Concept,Pointer,"== Headline ==

data representing a reference to other data

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Pointer_(computer_programming)]]
* [[isA::Concept]]

",2013-06-12 14:55:22.47,2017-07-04 15:26:18.850087
Concept,Distributed programming,"== Metadata ==
* [[instanceOf::Programming domain]]
",2013-06-12 14:53:44.116,2017-07-04 13:44:40.339105
Module,themesextractor,"== Headline ==

Resolving of metadata and contributions
== Description ==

This module creates several files per theme and a folder for each theme having its name.

=== members.json ===

This is a list of theme members with some info per member.

Physically, this is a JSON array where each entry is a JSON object as follows:

* key = name; value = name of the contribution.
* key = headline; value = headline for the contribution as shown on 101wiki.
* key = features; value = number of features implemented by the contribution; see ""implements"".
* key = ufeatures; value = unique features, i.e., features not implemented by any other contribution in the given theme.
* key = languages; value = number of languages used by the contribution; see ""uses"".
* key = ulanguages; value = unique languages, i.e., languages not used by any other contribution in the given theme.
* key = technologies; value = number of technologies used by the contribution; see ""uses"".
* key = utechnologies; value = unique technologies, i.e., technologies not used by any other contribution in the given theme.
* key = concepts; value = number of concepts referenced by the contribution
* key = uconcepts; value = unique concepts

=== concepts.json ===

Conceptually, this is a list of referenced concepts (see above) with some info per concepts.

Physically, this is a JSON array where each entry is a JSON object as follows:

* key = name; value = name of the concept referenced by any member of the theme.
* key = headline; value = headline for the concept as shown on 101wiki.
* key = contributions; value = number of contribution pages referring to the concept.
* key = resolved; value = a boolean saying whether the concept page has a [[sameAs::...]]

=== features.json ===

Very much like concepts.json but for ""implemented features"" instead of ""referenced concepts"".

=== languages.json ===

Very much like concepts.json but for ""used languages"" instead of ""referenced concepts"".

=== technologies.json ===

Very much like concepts.json but for ""used technologies"" instead of ""referenced concepts"".
== Input ==

The wiki data as collected by [[Module:wiki2json]]
== Output ==

http://data.101companies.org/resources/themes/
== Metadata ==
* ",2013-06-14 07:59:33.409,2017-07-04 13:47:34.545142
Concept,Polymorphism,"== Headline ==

The ability of program fragments to operate on elements of several types

== Illustration ==

Consider the type of list append in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
(++) :: [a] -> [a] -> [a]
</syntaxhighlight>

This [[type signature]] uses a type variable ''a'' to express that list append is polymorphic in the element type ''a''. The operation can be applied for as long as the element type of both operand lists for an append are the same. We also speak of [[parametric polymorphism]] in this case.

Consider the type of addition in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
(+) :: Num a => a -> a -> a
</syntaxhighlight>

This [[type signature]] uses a [[type constraint]] on the operand type of addition to express that only ""suitable"" types (i.e., type-class instances of ''Num'') can be used for addition. We also speak of [[type-class polymorphism]] or more generally of [[bounded polymorphism]] in this case. Languages with [[subtyping]] may also use types in a subtyping hierarchy for bounds.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Polymorphism (computer science)]]
* [[relatesTo::http://en.wikipedia.org/wiki/Polymorphism in object-oriented programming]]
* [[memberOf::Vocabulary:Programming language]]
* [[isA::Concept]]

",2013-06-12 14:55:23.299,2017-07-04 15:26:19.102409
Concept,Polymorphic function,"== Headline ==

A [[Function]] of a [[polymorphic type]]

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[isA::Concept]]
",2013-06-12 14:55:22.754,2017-07-04 15:26:18.901659
Concept,ECommerce,"== Metadata ==

* [[instanceOf::Application domain]]
",2013-06-12 14:53:52.974,2017-07-04 13:44:40.490133
Contribution,pyBorg,"==Headline==
The Borg Pattern in [[Language:Python]]

==Motivation==

This implementation illustrates the Borg Pattern in Python, it is similar to the
singleton pattern but the singleton pattern ensures instance equality which
the Borg pattern does not, instead it ensures state equality. Using this pattern,
one has several instances but they all have the exact same state. An advantage of
this pattern is the possibility to write normal python classes and deriving from
the Borg class is sufficient to make it a ""Borg"".

==Illustration==

The data model is mostly adapted from [[Contribution:py3k]].

<syntaxhighlight lang=""python"" source=""program.py"">

class Borg(object):

      state = {}
    def   init  (self):
        self.  dict   = Borg.  state

</syntaxhighlight>

This class makes sure that all instances of a class derived from the Borg class
have the exact same state by writing to the ""  dict  "" attribute which holds all
attributes and methods of an object in Python. The Company class is very similar
to the normal version.

<syntaxhighlight lang=""python"" source=""program.py"">

class Company(Borg):

    def   init  (self, name, subunits):
        Borg.  init  (self)
        self.name = name
        self.subunits = subunits

</syntaxhighlight>

By deriving from the Borg class, you can do this:
<syntaxhighlight lang=""python"" source=""program.py"">

company = Company(
    ""Meganalysis"", [""...""])

    first total = company.total()

    company2 = Company(""Meganalysis"",[""...""])

    company2.cut()
    assert company.total() * 2.0 == first total

</syntaxhighlight>

== Usage ==

Just run <code>python program.py</code>

== Metadata ==

* [[uses::Language:Python]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:kevin-klein]]
",2013-06-12 14:58:40.074,2017-07-05 15:29:32.128278
Concept,Primitive data type,"== Headline ==

a [[data type]] that serves as base case in data type definition

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[sameAs::http://en.wikipedia.org/wiki/Primitive_data_type]]
* [[isA::Concept]]

",2013-06-12 14:55:26.401,2017-07-04 15:26:19.290818
Concept,Acceptor,"== Headline ==

A program that accepts input according to some formal definition
== Illustration ==

For instance, we may implement a [[context-free grammar]] for [[parsing]], e.g., as a [[recursive descent parser]] without adding any semantic actions, though, and thereby obtain an acceptor for the language generated by the grammar. The acceptor behaves essentially as a predicate on given input: accept (true) or reject (false).
== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Recognizer#Acceptors_and_recognizers]]
* [[instanceOf::Vocabulary:Software language engineering]]
* [[isA::Software technology]]
",2013-06-12 14:53:10.06,2017-07-04 15:25:58.771555
Contribution,haskellSpec,"== Headline ==

Applying specification theory to [[Language:Haskell|]]

== Characteristics ==

This contribution is inspired by specification theory and domain engineering in the sense of the [[Language:Magnolia]] and the Bergen Language Design Laboratory.

== Architecture ==

Modules:
* Company.Signature: Signature for covered features
* Company.Properties: Properties to be met by any implementation
* Company.Definitions: Definitional parts of implementation
* Company.Implementation: A straightforward implementation
* Company.Sample: A sample company
* Company.Tests: Tests
* Main: Run tests

== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[uses::Technology:HUnit]]
* [[uses::Technology:QuickCheck]]
* [[uses::Technology:Haddock]]
* [[implements::Feature:Flat company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:rlaemmel]]

",2013-09-05 19:52:50.98,2017-07-05 15:30:14.162436
Technology,javac,"== Headline ==

The [[Language:Java|]] compiler as part of [[Technology:JDK|]]

== Metadata ==

* [[instanceOf::Compiler]]
* [[partOf::Technology:JDK]]
* [[implements::Document:JLS]]
* [[implements::Language:Java]]
* [[sameAs::http://en.wikipedia.org/wiki/Javac]]
* [[similarTo::http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javac.html]]
* [[similarTo::http://docs.oracle.com/javase/7/docs/technotes/guides/javac/]]

",2013-06-12 15:02:18.727,2017-07-05 15:30:08.781255
Concept,101technology,"== Headline ==

A technology developed as part of the [[101project]]

== Description ==

A [[101technology]] is a [[software technology]] that was essentially developed as part of the [[101project]]. It is entirely possible and appreciated that some [[101technology|101technologies]] may be reused outside the [[101project]]. Vice versa, the [[101project]], of course, also reuses many existing technologies.

== Metadata ==

* [[isA::Software technology]]
",2013-06-12 14:52:50.65,2017-07-04 15:25:57.294291
Concept,Abstract data type,"== Headline ==

A [[data type]] that does not reveal representation

== Illustration ==

An abstract data type is usually just defined through the list of operations on the type, possibly enirched (formaly or informaly) by properties (invariants, pre- and postconditions).

Consider the following concrete data type for points:

<syntaxhighlight lang=""haskell"">
data Point = Point { getX :: Int, getY :: Int }
  deriving (Eq, Show, Read)
</syntaxhighlight>

Now suppose we want to hide the precise representation of points. In particular, we want to rule out that programmers can match and apply the constructor ''Point''. The existing getters are sufficient to observe points without matching, but we need to provide some ""public"" means of constructing points.

<syntaxhighlight lang=""haskell"">
mkPoint :: Int -> Int -> Point
mkPoint = Point
</syntaxhighlight>

The idea is now to export ''mkPoint'', but not the constructor, thereby making possible representation changes without changing any code that uses points. This is, of course, a trivial example, as the existing representation of points is probably quite appropriate, but see a more advanced illustration for an abstract data type [[Stack]].

A complete module for an abstract data type for points may then look like this:

<syntaxhighlight lang=""haskell"">
module Point(
  Point, -- constructor is NOT exported
  mkPoint,
  getX,
  getY
) where

data Point = Point { getX :: Int, getY :: Int }
  deriving (Eq, Show, Read)

mkPoint :: Int -> Int -> Point
mkPoint = Point
</syntaxhighlight>

When defining an abstract data type, we take indeed the point of view that the representation and thus the implementation as such is not known or not to be looked at. Hence, ideally, the intended functionality should be described in some other way. For instance, we may describe the functionality by properties. For instance, in Haskell we may declare testable [[Technology:QuickCheck]] properties like this:

<syntaxhighlight lang=""haskell"">
prop_getX :: Int -> Int -> Bool
prop_getX x y = getX (mkPoint x y) == x

prop_getY :: Int -> Int -> Bool
prop_getY x y = getY (mkPoint x y) == y
</syntaxhighlight>

These properties describe the (trivial) correspondence between construction with ''mkPoint'' and observation with ''getX'' and ''getY''. Logically, the first property says that for all given ''x'' and ''y'', we can construct a point and we can retrieve ''x'' again from that point with ''getX''.

== Relationships ==

* An abstract data type is the opposite of a [[concrete data type]].
* An abstract data type performs [[information hiding]].

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[sameAs::http://en.wikipedia.org/wiki/Abstract_data_type]]
* [[relatesTo::Concrete data type]]
* [[isA::Concept]]


      ",2013-06-12 14:53:09.431,2017-07-04 15:25:58.345722
Concept,Abstraction,"== Headline ==

the use of [[abstraction mechanism]]s to define new concepts

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Abstraction_(computer_science)]]
* [[isA::Namespace:Concept]]

",2013-06-12 14:53:09.81,2017-07-04 15:25:58.586892
Concept,Ad-hoc polymorphism,"== Headline ==

A form of [[polymorphism]] concerned with overloaded operations

== Illustration ==

[[Type-class polymorphism]] corresponds to an advanced form of [[ad-hoc polymorphism]]; see there for an illustration.

== Metadata ==

* [[isA::Polymorphism]]
* [[sameAs::http://en.wikipedia.org/wiki/Ad-hoc_polymorphism]]
",2013-06-12 14:53:11.174,2017-07-04 15:25:59.38929
Concept,File system,"== Headline ==

a means to store, retrieve, update, and organize data

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/File_system]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:56.948,2017-07-04 13:44:41.211163
Concept,Financial exchange,"== Metadata ==

* [[instanceOf::Application domain]]
",2013-06-12 14:53:57.42,2017-07-04 13:44:41.354752
Concept,Fold_function,"== Headline ==

A [[higher-order function]] for processing a [[data structure]]

== Illustration ==

[[Language:Haskell]]'s ''foldr'' function for lists is defined like as follows:

<syntaxhighlight lang=""haskell"">
-- The higher-order function foldr for lists
foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f z []     = z
foldr f z (x:xs) = f x (foldr f z xs)
</syntaxhighlight>

That is, ''foldr'', applied to a binary operator ''f'', a value ''z'', and a list, returns ''z'' for the empty list, and it recurses on the tail of a non-empty list such that the recursive result is combined with the head by means of ''f''. For instance:

<syntaxhighlight lang=""haskell"">
Prelude> foldr (+) 0 [1,2,3,4,5]
15
</syntaxhighlight>

The ""r"" in ""foldr"" hints at the right-associative bias of the function:

<syntaxhighlight lang=""haskell"">
foldr (+) 0 [1,2,3,4,5] = 1 + (2 + (3 + (4 + (5 + 0))))
</syntaxhighlight>

That is, parenthesization associates to the right. There is also a ''foldl'' function:

<syntaxhighlight lang=""haskell"">
-- The higher-order function foldl for lists
foldl :: (b -> a -> b) -> b -> [a] -> b
foldl f z []     = z
foldl f z (x:xs) = foldl f (f z x) xs
</syntaxhighlight>

Left-associative fold can be expressed in terms of right-associative fold:

<syntaxhighlight lang=""haskell"">
foldl f a bs = foldr (\b g x -> g (f x b)) id bs a
</syntaxhighlight>

The opposite direction is feasible too with some limitations regarding infinite lists and laziness. This is not further discussed here. There is yet other fold functions for lists, which we do not discuss here. Conceptually, fold functions are not limited to lists; they make sense for algebraic data types in general.

== Relationhips ==

* The application of a fold function is a [[catamorphism]].
* [[Fold]] is the dual of [[unfold]]; see the [[unfold function]].
* A fold function is also illustrated for [[Maybe type]]s.

== Citation ==

(http://en.wikipedia.org/wiki/Fold_(higher-order_function), 18 May 2013)

In functional programming, fold – also known variously as reduce, accumulate, aggregate, compress, or inject – refers to a family of higher-order functions that analyze a recursive data structure and recombine through use of a given combining operation the results of recursively processing its constituent parts, building up a return value. Typically, a fold is presented with a combining function, a top node of a data structure, and possibly some default values to be used under certain conditions. The fold then proceeds to combine elements of the data structure's hierarchy, using the function in a systematic way.

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[instanceOf::Common function]]
* [[instanceOf::Higher-order function]]
* [[relatesTo::http://en.wikipedia.org/wiki/Unfold_(higher-order_function)]]
* [[relatesTo::http://www.haskell.org/haskellwiki/Fold]]
* [[relatesTo::http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl']]
* [[relatesTo:Unfold function]]
",2013-06-12 14:53:58.471,2017-07-04 13:44:41.616819
Concept,Formatting,"== Headline ==

Format data according to some rule

== Details ==

This may be seen as a more liberal term than [[unparsing]] (or ""pretty printing"").

== Metadata ==

* [[relatesTo::Unparsing]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:01.327,2017-07-04 13:44:41.847229
Concept,Fragment location,"== Headline ==

The programmatic location of fragments in files

== Description ==

Fragment location aims at the location of fragments within files, subject to a description of the fragment of interest and tool support for the execution of fragment location, i.e., [[fragment locator]]s. Fragment descriptions are somewhat language-aware description of fragments, e.g., in terms of names of abstractions or regular expression matching on program text. A fragment locator takes a file on which to apply fragment locator as well as the description of the fragment to be located. It returns, in some way, the success or failure of location together with additional information geared at tools that should operate on the fragment level.

== Metadata ==

",2013-06-12 14:54:01.591,2017-07-04 13:44:41.865601
Concept,Calculation,"== Headline ==

A process for transforming one or more inputs into one or more results

== Metadata ==
* [[memberOf::Vocabulary:Programming theory]]
* [[sameAs::http://en.wikipedia.org/wiki/Calculation]]
* [[isA::Concept]]

",2013-06-12 14:53:25.969,2017-07-04 15:26:03.164317
Technology,StringTemplate,"== Headline ==

A [[template engine]] for [[Language:Java|]] with ports for other languages

== Metadata ==
* [[sameAs::http://www.stringtemplate.org/]]

* [[instanceOf::Template engine]]
* [[implements::Language:StringTemplate]]
* [[facilitates::Model to text transformation]]",2014-05-25 10:00:26.466,2017-07-05 15:30:19.074349
Contribution,javaDSLMethodChaining,"== Headline ==

[[Internal DSL]] implementation where modifier methods return the host object.
== Characteristics ==

An [[Internal DSL]] implementation to illustrate the pattern [[Method Chaining]]. Method Chaining is a good when working with optional arguments and when gives great possibilities to prey the IDEs auto completion.
Method Chaining should be implemented using an '''Expression Builder'''. The chaining of methods is achieved by always returning the host object or another builder. Often each step the expression changes to a new type, which is called '''type transmogrification'''. Always returning a builder object introduces the '''finishing problem''', which is solved in this implementation by the ''.end()'' method that initiated the object creation. The use of '''progressive interfaces''', as shown in the illustration, helps introducing mandatory parameters and orders them.
== Illustration ==
== Metadata ==
* [[developedBy::Contributor:todeslord]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Method Chaining]]
[[uses::Internal DSL]]
",2014-07-29 10:13:44.937,2017-07-05 15:30:22.058094
Concept,Function composition,"== Headline ==

Apply two functions, one after another

== Description ==

Function composition is a fundamental operation on functions so that they are applied one after another. That is the composition of ''f'' and ''g'' when applied to an argument ''x'' is the same as first computing the result ''y'' of applying ''g'' to ''x'' and then applying ''f'' to ''y''.

== Illustration ==

=== Function composition in Haskell ===

Let's assume the following function:

<syntaxhighlight lang=""haskell"">
-- Test an Int to be even
even :: Int -> Bool
even x = x `mod` 2 == 0
</syntaxhighlight>

The test for a number to be ''odd'' can be trivially described by composing ''even'' and logical negation. In [[Language:Haskell]], function composition is denoted by the infix operator ""."". Thus:

<syntaxhighlight lang=""haskell"">
-- Test an Int to be odd
odd :: Int -> Bool
odd = not . even
</syntaxhighlight>

We can always replace function composition by some pattern of function application. For instance, ''odd'' could also be expressed like this:

<syntaxhighlight lang=""haskell"">
-- Test an Int to be odd
odd' :: Int -> Bool
odd' x = not (even x)
</syntaxhighlight>

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Function_composition]]
* [[relatesTo::http://en.wikipedia.org/wiki/Function_composition_(computer_science)]]
",2013-06-12 14:54:03.142,2017-07-04 13:44:42.148847
Concept,Functional data structure,"== Headline ==

The specifically functional approach to the implementation of [[data structure]]s
== Illustration ==

See [[immutable list]]s as a simple example of a [[functional data structure]]. See [[Document:Okasaki96]] for a seminal resource (in fact, a PhD thesis) on the subject. See [[Document:Handbook of data structures and applications]] for a textbook with coverage of the subject. See [[Script:Functional data structures]] for a lecture on the subject.
== Metadata ==

* [[isA::Data structure]]
* [[relatesTo::Imperative data structure]]
* [[relatesTo::http://cstheory.stackexchange.com/questions/1539/whats-new-in-purely-functional-data-structures-since-okasaki]]
",2013-06-12 14:54:03.705,2017-07-04 15:26:11.486646
Contribution,akkaActor,"== Headline ==
Using [[Technology:akka|]] for a concurrent implementation of total and cut

==Illustration==
This contribution uses the akka technology for a concurrent running implementation for cut and total on a normal company structure.

<ins>Actors:</ins>
Cut and total have their own actor classes and both use the class DepartmentsActor for concurrency, which gets the employees from the company.
With each depth-step, not for each department, a new DepartmentsActor is created.

<ins>Messages:</ins>
Plain Java files for communication between the actors, containing informations like a department list.

For further explanation see comments in source code and the [http://akka.io/ akka website].

==Architecture==
This contribution has four main packages:
*model: normal 101companies model
*messages: the messages for communication between the actors
*features: normal 101companies features cut and total
*actors: containing the concurrent running actors

==Usage==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[developedBy::Contributor:mpaul138]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Task parallelism]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]
* [[memberOf::Theme:Data parallelism]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[uses::Language:Plain Text]]
* [[uses::Language:Java]]

",2014-07-04 02:07:20.816,2017-07-05 15:30:21.706515
Concept,Programming idiom,"== Headline ==

A means of expressing a recurring construct in one or more programming languages

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Programming_idiom]]
* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:55:31.9,2017-07-04 15:26:19.922418
Concept,GUI,"== Headline ==

A graphical user interface

== Metadata ==

* [[instanceOf::User interface]]
* [[sameAs::http://en.wikipedia.org/wiki/Graphical_user_interface]]

",2013-06-12 14:54:04.544,2017-07-04 13:44:42.521551
Contribution,antlr4Objects,"== Headline ==

Object/Test mapping for Java with ANTLR4 for parsing

==Relationships==

This is an ANTLR4 version of [[COntribution:antlrObjects]].

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:Manfred Jackel]]

",2014-08-17 15:14:03.246,2017-07-05 15:30:22.732822
Concept,Generic function,"== Headline ==

A [[function]] for [[datatype-generic programming]]

== Definition ==

Diverse and even conflicting definitions of ""generic function"" have been used in the past. The present ontology assumes the notion of generic function in the sense of [[datatype-generic programming]]. Thus, a generic function is a polymorphic function (because it can be applied to many types) that is also able to observe structure of (some of the) types in which it is parameterized.

== Illustration ==

For instance, the ""[[Scrap your boilerplate]]"" style of generic programming supports the definition of generic functions. See corresponding illustrations.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Generic_function]]
* [[memberOf::Vocabulary:Functional programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:04.967,2017-07-04 13:44:42.582989
Concept,Generic mapping,"== Headline ==

A mapping that is generically defined for the given technological spaces

== Metadata ==

* [[instanceOf::Mapping]]
",2013-06-12 14:54:05.115,2017-07-04 13:44:42.593985
Concept,Static annotation,"== Headline ==

An annotation that is used during compile-time

== Metadata ==
* [[sameAs::http://www.scala-lang.org/api/2.12.x/scala/annotation/StaticAnnotation.html]]
* [[instanceOf::Software concept]]
* [[isA::Annotation]]",2017-06-28 14:33:06.397194,2017-07-04 15:28:11.754535
Contribution,scala2,"== Intent ==

an implementation of the basic spec in [[Language:Scala]] providing typeclass based serialization using SJSON

== Motivation ==

This implementation utilizes a more idiomatic, functional style approach than [[implementation:scala]]. The model is realized using only immutable data structures and the total and cut computation are realized by recursively mapping over the elements of the department tree.
Because the model is immutable, it is easily serialized. In addition, an example of JSON serialization was implemented using the sjson Library by Debasish Ghosh. Serialization patterns for all types of the Company domain are realized by implementing typeclass for each one. Such serialization implements [[Feature:Parsing]] and [[Feature:Unparsing]].

== Architecture ==

The implementation is straightforward. All of the basic features are contained in ''Company.scala'' and serialization is implemented in ''JSONSerialization.scala''. Basic test cases are provided.

== Usage ==

You need to install sbt to build and run this project as shown on the sbt [http://code.google.com/p/simple-build-tool/wiki/Setup website]. Then change into the base directory of the project and run
 <nowiki>sbt update</nowiki>
This should fetch all needed dependencies. After that you can compile the project by typing
 <nowiki>sbt compile</nowiki>
and then
 <nowiki>sbt test</nowiki>
to run the tests.

== Metadata ==
* [[uses::Language:Scala]]
* [[uses::Technology:Scala]]: The Scala compiler and runtime library (Version 2.9.0.1)
* [[uses::Technology:sbt]]: Simple Build Tool - a build tool for Scala projects (Version 0.7.7)
* [[uses::Technology:sjson]]: sjson - an idiomatic JSON serialization library for Scala (Version 0.12)
* [[uses::Technology:ScalaTest]]: A library for BDD and unit testing in Scala (Version 1.4.1)
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:DerDackel]]
",2013-06-12 14:58:50.108,2017-07-05 15:29:43.335574
Contribution,seam,"== Intent ==

Web application development with [[Language:Java]] and the [[Technology:Seam]] [[Web-application framework|framework]]

== Motivation ==

[[Technology:Seam]] provides a great support for the development of [[Web application|web applications]] in [[Language:Java]] with easy [[Feature:Access control|access control]] and an integrated persistence layer. It combines the popular [[Technology:JSF]] (please visit [[Contribution:jsf]] for more information) approach for [[User interface|UI]] programming with [[Technology:Hibernate]] and [[Technology:JPA]]. Both [[Persistence technology|persistence technologies]] are directly integrated into the [[Web-application framework|web-application framework]].

== Illustration ==

[[Technology:Seam]] is based on the [[Three-tier architecture|three-tier architecture]]. Since the presentation is covered by [[Technology:JSF]], the focus of the Seam framework is the business and data access layer. This section illustrates the major components of the Seam framework and introduces its rights management.

=== Presentation ===

The presentation layer is based on the [[MVC]] architecture, because it is the main architecture of the [[Technology:JSF]] framework. From this it follows, that the view consists of [[Technology:Facelets]]. We will start our presentation illustration with the first page of the application: the company view. It contains four parts, at which there are two textfields for the name and the total of the company and two buttons for the department list and the cut of the company. In theory, the view is designed to show more than one company, but this is not demanded by the feature model.

<syntaxhighlight lang=""xml"" source=""seam/view/listAllCompanies.xhtml"">
...

<!-- 'c' is mapped to the field 'allCompanies' contained in the CompanyAction.java. -->
<rich:dataTable value=""#{allCompanies}"" var=""c"" width=""300px"">
	<rich:column>
		<f:facet name=""header"">Name</f:facet>
		<!-- The field displays the name of the company. -->
		<h:outputText value=""#{c.name}"" />
	</rich:column>
	<rich:column>
		<f:facet name=""header"">Total salaries</f:facet>
		<!-- The field displays the total value of the company. -->
		<h:outputText value=""#{c.total()}"" />
	</rich:column>
	<rich:column>
		<!-- This button opens the view for all departments contained by the company. -->
		<s:button value=""Show details"" action=""#{companyAction.showDetails()}"" />
	</rich:column>
	<rich:column>
		<!-- This is the cut button for the company. -->
		<s:button value=""Cut salaries"" action=""#{companyAction.cutSalaries()}"" />
	</rich:column>
</rich:dataTable>

...
</syntaxhighlight>

The <syntaxhighlight lang=""xml"" enclose=""none""><rich:dataTable ...> ... </rich:dataTable></syntaxhighlight> tags create a new [[Language:HTML]] table with a predefined <syntaxhighlight lang=""xml"" enclose=""none"">width=""300px""</syntaxhighlight>. The value <syntaxhighlight lang=""xml"" enclose=""none"">""#{allCompanies}""</syntaxhighlight> maps the table rows to the <syntaxhighlight lang=""java"" enclose=""none"">allCompanies</syntaxhighlight> list contained in the class [this!!src/hot/org/softlang/web/CompanyAction.java CompanyAction.java]. Each entry has a corresponding table row. The attribute <syntaxhighlight lang=""xml"" enclose=""none"">var=""c""</syntaxhighlight> helps to access one object of the list and get its informations. As mentioned above, the table has four columns: name, total, detail button and cut button. Each column is created by the use of the tags <syntaxhighlight lang=""xml"" enclose=""none""><rich:column> ... </rich:column></syntaxhighlight>. The methods of the class [this!!src/hot/org/softlang/web/CompanyAction.java CompanyAction.java] are directly accessed via the actions of the buttons, for example in <syntaxhighlight lang=""xml"" enclose=""none""><s:button value=""Cut salaries"" action=""#{companyAction.cutSalaries()}""/></syntaxhighlight>. [this!!src/hot/org/softlang/web/CompanyAction.java CompanyAction] is a [[Technology:Java Bean]], which receives the requests of the facelets.

The following example illustrates the <syntaxhighlight lang=""java"" enclose=""none"">cutSalaries()</syntaxhighlight> method implemented by the class [this!!src/hot/org/softlang/web/CompanyAction.java CompanyAction.java]:

<syntaxhighlight lang=""java"" source=""seam/src/hot/org/softlang/web/CompanyAction.java"">
...

public String cutSalaries() {
	try {
		// The method cuts the salaries for the selected company.
		companyService.cutSalaries(selectedCompany);
		// If the call is successful, a corresponding message is displayed.
		facesMessages.add(FacesMessage.SEVERITY INFO, ""The cut salary operation was successfully applied."");
	}
	catch(Exception e) {
		// If an exception occures, an error message is displayed.
		facesMessages.add(FacesMessage.SEVERITY ERROR, ""Error when trying to cut salaries. "" + e.getMessage());
		e.printStackTrace();
	}
	// The framework expects a view name for loading the next view. If this name is 'null', the current view will reloads.
	return null;
}

...
</syntaxhighlight>

The action invokes the <syntaxhighlight lang=""java"" enclose=""none"">cutSalaries(selectedCompany)</syntaxhighlight> method of the [this!!src/main/org/softlang/services/CompanyService.java CompanyService] and additionaly manages the loading of further pages. If an exception occurs, it returns an error message to the [[Technology:Facelets|facelet]]. The <syntaxhighlight lang=""java"" enclose=""none"">null</syntaxhighlight> return value simply means, that the current view has to be reloaded.

=== Business and Data access ===

The business layer manages the [[Feature:Access control|access control]] of the application. In addition, it is connected to the persistence layer, which is implemented with [[Technology:JPA]]. On cut, the following method of the service class [this!!src/main/org/softlang/services/CompanyService.java CompanyService] is invoked:

<syntaxhighlight lang=""java"" source=""seam/src/main/org/softlang/service/CompanyService.java"">
...

// The annotation manages the access control for this method.
@Restrict(""#{s:hasRole('admin')}"")
public void cutSalaries(Company company) {
	company.cut();
	entityManager.merge(company);
}

...
</syntaxhighlight>

A simple [[Annotation|annotation]] <syntaxhighlight lang=""java"" enclose=""none"">@Restrict</syntaxhighlight> provides [[Feature:Access control|access controll]] for the different users. The annotated method is restricted to a user or a group of users, in this case to the ""admin"" user. The cut is performed within the company object directly. The <syntaxhighlight lang=""java"" enclose=""none"">entityManager</syntaxhighlight> manages the company entities and provides an easy merge mechanism for all contained entities. In this case all manipulated employees of this company are merged automatically without explicit call.

== Architecture ==

* The [[Technology:Facelets]] defining the view are located in the folder ''[[this!!view]]''. The folder contains layout templates, images and [[Language:CSS|style sheets]] as well, which are provided directly by the [[Technology:Seam]] [[Web-application framework|web-application framework]].
* The [[Technology:Java Bean|Java bean]] [this!!src/hot/org/softlang/web/CompanyAction.java CompanyAction.java] is located in [this!!src/hot/org/softlang/web] and provides the connection point to the business layer.
* The entity classes for the company are located in the [this!!src/main/org/softlang/model] package.
* The [[Technology:Seam]] service class is located in the [this!!src/main/org/softlang/services] package.

There are some necessary configuration files like the ''build.xml'' and the ''build.properties''. Apart from that, everything else is generated or part of the [[Library|libraries]].

== Usage ==

This application requires the [[Technology:Eclipse]] and [[Technology:JBoss Application Server]] (Version 4.2.x). After downloading and installing both, follow these steps:

* Import the seam project from your file system to [[Technology:Eclipse]] as a java project.
* Change the [this!!build.properties] file located in the projects base folder. The ''jboss.home''-property must refer to your [[Technology:JBoss Application Server]] location: ''jboss.home = <your JBoss location>''.
* Run the seam project as ant build in eclipse (Right click on the ''build.xml'' file -> Run As -> Ant Script).
* Start JBoss using either ''<your JBoss location>/bin/run.bat'' for Windows OS or ''<your JBoss location>/bin/run.sh'' for Unix OS.
* Start a [[Web browser]] and go to http://localhost:8080/seam

It is possible to access the system with two different users: ""admin"" (Password: ""admin"") and ""user"" (Password: ""user""). If you are logged in as ""admin"", you are allowed to visit all departments and employees contained in the company and cut all salaries. If you are logged in as ""user"", you are only allowed to visit all elements of the company but not to cut salaries.

== Metadata ==
* [[instanceOf::Web application]]
* [[uses::Language:Java]]
* [[uses::Language:HQL]]
* [[uses::Language:XHTML]]
* [[uses::Language:SQL]]
* [[uses::Language:XML]]
* [[uses::Language:JavaScript]]
* [[uses::Technology:Seam]]
* [[uses::Technology:JBoss Application Server]]
* [[uses::Technology:Eclipse]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Access control]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:Rodrigo Bonifacio]]
* [[reviewedBy::Contributor:tzimmer]]
* [[carries::Tag:Legacy]]
* [[memberOf::Theme:Web applications in Java]]

",2013-06-12 14:58:53.08,2017-07-05 15:29:45.723036
Concept,Higher-kinded polymorphism,"== Headline ==

Type parameters of a higher [[kind]] than ""*""
== Illustration ==

Higher-kinded polymorphism is popular in [[Language:Haskell]] with several well-known [[type class]]es being parameterized in [[type constructor]]s rather than [[type]]s, e.g.:
* Type class ''Monad''; see the concept of [[monad]].
* Type class ''Functor''; see the concept of [[functor]].
Both use kind ""*->*"".

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Type_class#Higher-kinded_polymorphism]]
* [[memberOf::Vocabulary:Programming]]
* [[instanceOf::Concept]]
",2013-06-12 14:54:09.187,2017-07-04 13:44:43.202178
Contribution,h2jdbcOne,"== Headline ==

Database programming with JDBC and H2-Database containing one company
==Characteristics==

This contribution is using [[Language:SQL|]] and [[Technology:JDBC|]] to manipulate one company stored in a H2 database.

==Relationships==
For a [[Technology:MySQL|]] version see [[Contribution:mySqlOne]].

For a version with a database for one or more companies see [[Contribution:h2jdbcMany]].
==Architecture==
Overview of the [[Language:Java|]] classes:
*Total: Using [[Language:SQL|]] ""SELECT"" statement and ""SELECT SUM"" to get all salaries, then iterating over the ResultSet.
*Cut: Using [[Language:SQL|]] ""UPDATE"" statement to cut all salaries.
*Depth: Using [[Language:SQL|]] ""SELECT"" statement to get maximum depth of all departments.
==Usage==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==
* [[developedBy::Contributor:mpaul138]]
* [[developedBy::Contributor:DerDackel]]
* [[uses::Language:SQL]]
* [[uses::Language:Java]]
* [[uses::Technology:JDBC]]
* [[uses::Technology:Eclipse]]
* [[uses::Technology:H2]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
",2014-08-17 23:59:56.468,2017-07-05 15:30:23.582089
Contribution,antlr4ParseTreeVisitor,"== Headline ==

Parsing text to trees and walk them with [[Technology:ANTLR4|]] Visitors

==Realtionships==

This an ANTLR4 version of [[Contribution:antlrTrees]] using the Visitor pattern.

==Illustration==

Total and Cut are extensions of CompanyBaseVisitor using the visitor pattern ([[Visitor pattern]]).
The BaseVisitor iterates the whole company, the extensions for Cut and Total overrides only the visit methods of the employees, whereas the PrintVisitor overrides all methods.

Example of TotalVisitor:
<syntaxhighlight lang=""Java"">
@Override public Float visitEmployee(@NotNull CompanyParser.EmployeeContext ctx) {

    return Float.valueOf(ctx.salary.getText());
}
</syntaxhighlight>

To use a visitor invoke the visit method of the wanted visitor and give the company parse tree to the visit as argument.

Example of TotalTestVisitor(some parts are omitted):
<syntaxhighlight lang=""Java"">
	@Test
	public void testTotal() throws RecognitionException, IOException, PrintException {
		CompanyParser parser = Parsing.parse(sampleCompany);
		parser.setBuildParseTree(true);
		ParseTree tree = parser.company(); // top rule
		// Create the visitor, whoch totals
		TotalVisitor t= new TotalVisitor();

		assertEquals(399747, t.visit(tree) , 0);

	}
</syntaxhighlight>

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[developedBy::Contributor:Manfred Jackel]]
* [[reviewedBy::Contributor:mpaul138]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

",2014-08-17 15:51:40.937,2017-07-05 15:30:23.222821
Contribution,JML Behavior,"==Headline==
This Contribution is focussing on exception handling and behavior in [[Lanugage:JML]]

==Behavior==
JML is supporting two types of behavior '''normal behavior''' and '''exceptional behavior''', every behavior describes a other ""possible"" state in the code and has different expectations in the pre/postconditions. Those different cases get connected by the '''also''' combinator. So, if one behavior fails in its pre or postcondition,then (when there is one) the next behavior will be tried.
In the following example, we use the [[Feature:Cut]] and check the two different possibilites, which could occur:
#First, the total salarie (using the [[Feature:Total]]) is greater than zero, so that the new cutted salarie is also greater than zero.
#Second, the total salarie is equal to zero, so that the salarie after the cut is still equal to zero.
<syntaxhighlight lang=""java"">
/*@ private normal behavior
  @ requires total() == 0;
  @ ensures total() == 0;
  @ also
  @ private normal behavior
  @ requires total() >= 0;
  @ ensures total() >= 0;
  @*/
public void cut(){
    getManager().cut();
	if(getSubdepts() != null)
		for (Department s : getSubdepts())
			s.cut();
		for (Employee e : getEmployees())
			e.cut();
	}
</syntaxhighlight>


==Exceptional Behavior==
But, as said above, [[Language:JML]] is also supporting exceptional behavior, which allows us to check if some exceptions got to be thrown. Therefore we do not use the normal postcondition keyword ""requires"" anymore. By exceptional behavior we use '''signal''' and '''signals only'''. So, if the precondition is true we can define which exception is allowed to be true or false by the signal keyword, while the signals only keyword checks, that just a allowed exceptions had been thrown. In the following example we added to our previous code a exceptional state, which occurs when the total salary is less than zero. In this case we throw a Runtime Exception, which we await to be true in the signals clause and which is the onliest exception which is allowed to be thrown by our signals only clause.
<syntaxhighlight lang=""java"">
/*@ private normal behavior
  @ requires totalNoException() == 0;
  @ ensures totalNoException() == 0;
  @ also
  @ private normal behavior
  @ requires totalNoException() >= 0;
  @ ensures totalNoException() >= 0;
  @ also
  @ private exceptional behavior
  @ requires totalNoException() < 0;
  @ signals (RuntimeException e) true;
  @ signals only RuntimeException;
  @*/
public void cut(){
	if(total() < 0)
		throw new RuntimeException();
    //Rest of function ommited here
}
</syntaxhighlight>
It is also to say, that JML always accepts those Exceptions, which got declared in the throws-clause of every method.

== Metadata ==

*
* [[uses::Language:Java]]
* [[uses::Language:JML]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]


",2016-02-11 15:00:21.786,2017-07-05 15:30:25.06238
Technology,jinja2,"==Headline==

A template engine for [[Language:Python|Python]].

==Metadata==

* [[instanceOf::Framework]]
* [[facilitates::Template processing]]
* [[managedBy::https://github.com/pallets/jinja]]
* [[sameAs::http://jinja.pocoo.org/]]
* [[implements::Language:jinja2]]
* [[uses::Language:Python]]
",2017-06-06 09:04:58.553635,2017-07-05 15:30:25.661127
Concept,In-memory XML processing,"== Metadata ==

* [[instanceOf::XML processing]]
",2013-06-12 14:54:16.67,2017-07-04 13:44:43.77383
Concept,Underspecification,"== Headline ==

The circumstance of a specification that does not suffice

== Metadata ==

* [[instanceOf::Term]]
* [[relatesTo::http://en.wikipedia.org/wiki/Underspecification]]
",2013-06-12 14:56:44.333,2017-07-04 13:45:01.663633
Concept,Unfold,"== Headline ==

The [[unfold function]] or the [[unfold transformation]] or an [[anamorphism]]

== Details ==

See also the inverse notion of [[fold]].

== Metadata ==

* [[carries::Tag:Ambiguity]]

",2013-06-12 14:56:44.828,2017-07-04 13:45:01.678921
Concept,Unfold function,"== Headline ==

a [[higher-order function]] for building a [[data structure]]

== Synonym ==

* [[Unfold]]

== Details ==

The application of a unfold function is an [[anamorphism]].

Unfold is the dual of [[fold]]; see the [[fold function]].

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[instanceOf::Common function]]
* [[sameAs::http://en.wikipedia.org/wiki/Unfold_(higher-order_function)]]
",2013-06-12 14:56:45.632,2017-07-04 13:45:01.709509
Concept,Unfold transformation,"== Headline ==

The replacement of a reference to an abstraction by its definition

== Details ==

For instance, consider the following logic program:

<pre>
a(X) :- e(X), d(X).
e(X) :- b(X), c(X).
</pre>

The first clause admits unfolding as follows:

<pre>
a(X) :- b(X), c(X), d(X).
</pre>

That is, the reference to e/1 in the body of a/1 is replaced by a suitably substituted body of e/1.

The inverse transformation is the [[fold transformation]].

== Synonyms ==

* [[Unfold]]

== Metadata ==

* [[instanceOf::Transformation]]
* [[relatesTo::http://dx.doi.org/10.1017/S0960129500001419]]
",2013-06-12 14:56:46.375,2017-07-04 13:45:01.745083
Concept,Unit testing,"== Headline ==

A method of software testing

== Illustration ==

See [[Contribution:haskellEngineer]] for [[Language:Haskell]] style of unit testing based on [[Technology:HUnit]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Unit_testing]]
* [[memberOf::Vocabulary:Software engineering]]
* [[memberOf::Vocabulary:Programming]]
* [[instanceOf::Testing]]
",2013-06-12 14:56:46.868,2017-07-04 13:45:01.772365
Concept,Ajax,"== Intent ==

Concept for [[asynchronous communication|asynchronous]] requests in web applications

== Description ==

''Asynchronous JavaScript + XML'' <cite>ajaxJJGarrett</cite> or ''Asynchronous JavaScript and XMLHttpRequest'' <cite>schalk2007javaserver</cite> (AJAX) is a concept for [[web programming]]. The core idea is to manipulate page content ([[Language:HTML]] and [[Language:CSS]]) instead of reloading the whole page. Hence, the advantage is a more fluent interaction between user and application. The basic language for Ajax is [[Language:JavaScript]], the basic technology is [[Technology:XMLHttpRequest]]. The data exchange is handled via [[asynchronous communication]].

== Technologies ==

The main parts of AJAX are:

* [[Language:HTML]], [[Language:XHTML]], [[Language:CSS]]
* [[Technology:DOM]]
* [[Language:XML]], [[Language:JSON]], ... (depends on the message format)
* [[Technology:XMLHttpRequest]]
* [[Language:JavaScript]]

== Metadata ==
* [[isA::Language concept]]
* [[relatesTo::http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications]]
* [[relatesTo::http://jsfcompref.com/]]
",2013-06-12 14:53:12.152,2017-07-04 15:25:59.50555
Concept,Algebraic data type,"== Headline ==

A [[type]] for the construction of terms

== Illustration ==

Algebraic data types are typically supported by [[functional programming language]]s. For instance, [[Language:Haskell]], [[Language:Scala]], and [[Language:SML]] support algebraic data types. Illustrations are given here for [[Language:Haskell]].

A data type for shapes can be defined as follows:

<syntaxhighlight lang=""haskell"">
data Shape = Circle Float
           | Rectangle Float Float
</syntaxhighlight>

The [[data contructor]] ''Circle'' serves for the representation of circles; the one and only [[constructor component]] serves for the radius. The [[data constructor]] ''Rectangle'' serves for the representation of rectangles; the two [[constructor component]]s serve for width and height.

Constructors can be used as functions to construct terms:

<syntaxhighlight lang=""haskell"">
myCircle :: Shape
myCircle = Circle 42

myRectangle :: Shape
myRectangle = Rectangle 77 88
</syntaxhighlight>

In fact, constructors are functions with the types of the constructor components as argument types and the type of algebraic data type as the result type:

<syntaxhighlight lang=""haskell"">
> :t Circle
Circle :: Float -> Shape
> :t Rectangle
Rectangle :: Float -> Float -> Shape
</syntaxhighlight>

Pattern matching can be applied to terms of algebraic data types:

<syntaxhighlight lang=""haskell"">
-- Test whether the shape is a circle
isCircle (Circle _) = True
isCircle (Rectangle _ _) = False
</syntaxhighlight>

See [[Contribution:haskellData]] for a simple implementation of the [[@system]] which makes systematic use of algebraic data types]].

All predefined, compound types of Haskell are essentially algebraic data types. For instance, Haskell's Booleans could be defined by an algebraic data type with two [[data constructor]]s as follows:

<syntaxhighlight lang=""haskell"">
data Bool = True | False
</syntaxhighlight>

Haskell's lists could be defined by an algebraic data type with two construtors as follows:

<syntaxhighlight lang=""haskell"">
data List a = Nil | Cons a (List a)
</syntaxhighlight>

The constructors ''Nil'' and ''Cons'' are meant to correspond to the empty list and "":"" of Haskell's built-in lists. The ''Nil'' constructor has no [[constructor component]], whereas the ''Cons'' constructor has two [[constructor component]]s.

See also [[Maybe type]]s for yet another illustration of algebraic data types.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Algebraic_data_type]]
* [[sameAs::http://www.haskell.org/haskellwiki/Algebraic_data_type]]
* [[isA::Type]]
* [[memberOf::Vocabulary:Functional programming]]
",2013-06-12 14:53:12.406,2017-07-04 15:26:00.028849
Concept,Algorithm,"== Headline ==

A step-by-step procedure for achieving a certain [[IO behavior]]

== Illustration ==

See [[greatest common divisor]] and [[linear search]] for examples of an algorithm which is described both semi-formally and in an actual programming language.

== Citation ==

(http://en.wikipedia.org/wiki/Algorithm, 14 April 2013)

In mathematics and computer science, an algorithm [...] is a step-by-step procedure for calculations. Algorithms are used for calculation, data processing, and automated reasoning.

More precisely, an algorithm is an effective method expressed as a finite list [...] of well-defined instructions [...] for calculating a function. [...] Starting from an initial state and initial input (perhaps empty), [...] the instructions describe a computation that, when executed, proceeds through a finite [...] number of well-defined successive states, eventually producing ""output"" [...] and terminating at a final ending state. The transition from one state to the next is not necessarily deterministic; some algorithms, known as randomized algorithms, incorporate random input.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Algorithm]]
* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::Program]]
* [[relatesTo::Algorithmic problem]]
* [[isA::Namespace:Concept]]

",2013-06-12 14:53:12.615,2017-07-04 15:26:00.169378
Concept,Algorithmic problem,"== Headline ==

A problem that can be solved with an [[algorithm]]

== Illustration ==

* Examples of algorithmic problems: [[greatest common divisor]], the [[factorial]], and the [[search problem]].
* An example of non-algorithmic problems: the [[Halting problem]].

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::http://en.wikipedia.org/wiki/Algorithm]]
* [[isA::Concept]]

",2013-06-12 14:53:12.982,2017-07-04 15:26:00.33365
Concept,Validator,"== Headline ==

A program that checks the validity of software artifacts

== Details ==

For instance, in the technological space of [[XMLware]], a validator corresponds to the kind of program that performs [[schema-based validation]]. In the technological space of [[grammarware]], a parser may serve as a validator or an ""acceptor"", i.e., a program that does not even need to build a parse tree.

== Metadata ==

* [[memberOf::Vocabulary:Software language engineering]]
* [[relatesTo::http://en.wikipedia.org/wiki/Validator]]
* [[isA::Software technology]]

",2013-06-12 14:56:49.136,2017-07-04 15:26:30.792421
Concept,Alternative feature,"== Headline ==

An alternative [[software feature]] in [[feature modeling]]

== Illustration ==

[[Feature:Serialization]] and [[Feature:Company]] of the [[@system]] are alternative features in that they provide fundamentally different (mutually exclusive) options for [[serialization]] and [[data modeling]].

== Metadata ==

* [[isA::Software feature]]
* [[memberOf::Vocabulary:Software engineering]]
",2013-06-12 14:53:13.081,2017-07-04 15:26:00.418518
Concept,Struct,"== Headline ==

A datatype that is composed out of datatypes

== Metadata ==

* [[sameAs::https://docs.racket-lang.org/reference/define-struct.html]]
* [[sameAs::https://en.wikipedia.org/wiki/Struct_(C_programming_language)]]
* [[instanceOf::Software_concept]]",2017-06-28 14:23:43.244314,2017-07-04 15:06:00.720447
Concept,Architectural pattern,"== Headline ==

A standard design in the field of software architecture
== Metadata ==
* [[memberOf::Vocabulary:Software architecture]]
* [[sameAs::http://en.wikipedia.org/wiki/Architectural_pattern]]
* [[isA::Concept]]
",2013-06-12 14:53:18.215,2017-07-04 15:26:01.433897
Concept,Metaprogram,"== Headline ==

A [[program]] that manipulates [[program]]s

== Illustration ==

Consider the following simplify for arithmetic expressions, written in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
-- Simple arithmetic expressions
data Expr = Const Int | Add Expr Expr
  deriving (Eq, Show)

-- Simplification for unit law of addition
simplify :: Expr -> Expr
simplify t@(Const c) = t
simplify (Add (Const 0) x) = simplify x
simplify (Add x (Const 0)) = simplify x
simplify t@(Add x y) =
   if t==t'
     then t
     else simplify t'
  where
    t' = Add (simplify x) (simplify y)
</syntaxhighlight>

For instance, the simplifier works as follows:

<syntaxhighlight lang=""haskell"">
> simplify (Add (Const 20) (Const 22))
Add (Const 20) (Const 22)
> simplify (Add (Const 0) (Const 42))
Const 42
</syntaxhighlight>

The simplifier is a metaprogram, as it is a [[program]] that manipulates another program. The [[metalanguage]] used here is [[Language:Haskell]]. The [[object language]] used here is ''Expr'', the language of expression.

See the concept of [[reflection]] for a more specific form of metaprogramming for further illustrations.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Metaprogramming]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:50.551,2017-07-04 13:44:47.34627
Concept,Variant,"== Headline ==

A value with a discriminator label

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Variant_type]]
* [[instanceOf::Data structure]]
* [[instanceOf::Vocabulary:Data structure]]
* [[relatesTo::Variant type]]
* [[relatesTo::Data variation]]

",2013-06-12 14:56:49.678,2017-07-04 13:45:01.930436
Concept,Test data generation,"== Headline ==

the automated generation of test data for a given software component

== Details ==

See the related term of [[data generator]]s.

== Resource ==

* [http://en.wikipedia.org/wiki/Test_Data_Generation Test Data Generation] @ Wikipedia

== Metadata ==

* [[memberof::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:56:24.107,2017-07-04 15:26:26.951044
Contribution,spreadsheet,"== Headline ==

Use a [[Technology:spreadsheet]] with a flat structure and formulas expressed in terms of a [[Language:spreadsheetLanguage]]
== Characteristics ==

[[Technology:spreadsheet]] (e.g. [[Technology:MicrosoftExcel]], [[Technology:OpenOfficeCalc]] , or [[Technology:GoogleSpreadsheet]] are very common in data management.

Demonstrated aspects:
* How the data model of 101companies can be flattened in one table.
* How simple formulas can be used to implement [[Feature:Total]] and [[Feature:Cut]].
* How more sophisticated formulas can be used to deal with tree-based features including [[Feature:Depth]].
* How such programs provide for free a user interface to edit and visualize the data.
== Usage ==

The file meganalysis.xls can be open either via Microsoft Excel, OpenOffice

The file is protected so by default you can only change the data.
== Metadata ==

* [[carries::Tag:Stub]]
* [[uses::Technology:MicrosoftExcel]]
* [[uses::Technology:OpenOfficeCalc]]
* [[uses::Technology:GoogleSpreadsheet]]
* [[uses::Language:spreadsheetLanguage]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Ranking]]
* [[implements::Feature:Logging]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Undo-Redo]]
* [[developedBy::Contributor:jeanmariefavre]]
",2013-06-12 14:58:58.49,2017-07-05 15:29:47.859051
Concept,Lambda abstraction,"== Headline ==

The language construct for [[anonymous function]]s according to the lambda calculus

== Illustration ==

Suppose you want to increment all numbers in a list. Let us use [[Language:Haskell]] for illustration:

<syntaxhighlight lang=""haskell"">
-- Sample input
sample = [1,3,5,7,11,13,17]
-- Expected output
expected = [2,4,6,8,12,14,18]
</syntaxhighlight>

We shall use the [[map function]] to increment all elements of the input. We may apply the map function to a suitable increment function as follows:

<syntaxhighlight lang=""haskell"">
-- Use a plain increment function
output = map inc sample
  where
    inc :: Int -> Int
    inc x = x + 1
</syntaxhighlight>

Arguably, we may want to omit an explicit declaration of the increment function as its definition is trivial, not much insight can be gained from its definition, and no further reuse is intended (as we assume here). Thus, we may use an [[anonymous function]] instead of an extra increment function:

<syntaxhighlight lang=""haskell"">
-- Use an anonymous increment function
output' = map (\x -> x + 1) sample
</syntaxhighlight>

Thus, increment is expressed inline by an anonymous function that takes one argument ''x'' which is mapped to ''x + 1''. Arguably, a Haskell programmer may actually also consider the following form where addition is refined into increment by means of [[partial application]], possibly even using Haskell's specific section notation:

<syntaxhighlight lang=""haskell"">
-- Use partial application of (+) for increment
output'' = map ((+) 1) sample

-- Use a section for increment
output''' = map (+1) sample
</syntaxhighlight>

All these attempts compute the expected result.

== Metadata ==

* [[sameAs::http://www.haskell.org/haskellwiki/Lambda_abstraction]]
* [[relatesTo::http://en.wikipedia.org/wiki/Lambda_calculus]]
* [[instanceOf::Language construct]]
* [[memberOf::Vocabulary:Functional programming]]
",2013-06-12 14:54:26.739,2017-07-04 13:44:44.695157
Contribution,trivialLb,"== Headline ==

A very basic [[Technology:LogicBlox]]-based implementation

== Motivation ==

This is a very basic [[Language:DatalogLB]]-based implementation. The goal was here to set up a first [[Language:DatalogLB]] example that is as easy as it can be in terms of 101companies features to be demonstrated, data modeling to be considered, and [[Technology:LogixBlox]] technology footprint to surface. In terms of features, the implementation totals and cuts salaries based on the basic tree structure for companies. The data model is kept very simply by assuming a single company and leaving out the issue of management. In terms of technology usage, all relevant blocks are installed and executed in the workspace consecutively with the help of bloxbatch. No modules are used.

== Architecture ==

The implementation consists of these files:
* ''schema.logic'': the schema for companies
* ''instance.logic'': the Acme company (and another company for testing)
* ''total.logic'': the query for totaling salaries
* ''cut.logic'': the delta for cutting salaries
* ''Makefile'': script for running the implementation
* ''baseline'': baseline for regression testing

== Usage ==

Tested with [[Technology:LogicBlox]] 3.7.

Run ""make"" for a self-testing illustration.

== Metadata ==
* [[uses::Language:DatalogLB]]
* [[uses::Technology:LogicBlox]]
* [[uses::Technology:Make]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:Thiago Tonelli Bartolomei]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Datalog basics]]

",2013-06-12 14:59:10.122,2017-07-05 15:29:57.123617
Concept,Android Manifest,"== Headline ==

The essential information about the application to the [[Technology:Android]] system

== Metadata ==
* [[memberOf::Vocabulary:Android]]
* [[sameAs::http://developer.android.com/guide/topics/manifest/manifest-intro.html]]
* [[isA::Concept]]

",2013-06-12 14:53:14.245,2017-07-04 15:26:00.49142
Concept,Software concept,"== Headline ==

An (ontological) concept in the broader context of software

== Description ==

Software concepts are (ontological) concepts in the broader context of software. They are not tied to the 101companies project. Software concepts are supposed to be described already elsewhere on the web.

== Discussion ==

In the 101wiki, this is not properly instantiated. Everything that is in the namespace ""Concept"" should be instance of this.",2013-06-12 14:56:04.814,2017-07-04 13:44:57.396625
Concept,Variant type,"== Headline ==

A [[data type]] of [[variant]]s

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Variant_type]]
* [[instanceOf::Data type]]
* [[memberOf::Vocabulary:Data structure]]
",2013-06-12 14:56:49.916,2017-07-04 13:45:01.946476
Contribution,jsSyb,"== Headline ==

[[Generic programming]] in [[Language:Javascript]] with [[SYB]]

==Motivation==

This implementation shows [[generic programming]] in [[Language:Javascript]] using [[SYB]] style. The data model relies on (recursive) [[data composition]] alone. Generic Programming simplifies the traversal over nested data. Functions for total and cut are implemented as generic functions, they contain type specific cases for employees  to extract salaries. This library is a port of [[SYB]], in JS this implementation's mapping functions are easily possible due to the simple object structure in Javascript.

== Illustration ==

<syntaxhighlight lang=""javascript"" source=""101companies.js"">
function cutOne(e) {
    if(e.salary != null) {
        return {
            salary: e.salary/2,
            name: e.name
        };
    }
    else {
        throw new Error(""fail"");
    }
}

cut = everywhere(mkT(cutOne))
cut company = cut(company);
console.log(cut company)

</syntaxhighlight>

This implementation of total takes the salary of every employee and folds them by adding.

== Relationships ==

* See [[Contribution:haskellSyb]] for the haskell version
* See [[Contribution:pythonSyb]] for the python version
* See [[Contribution:coffeeSyb]] for the coffee script version

== Usage ==

Use node.js to run the example, you can embedd it to an html file too.

<pre>
$ node syb.js
12345
6172.5
</pre>

== Metadata ==

* [[uses::Language:Javascript]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mentoring]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:kevin-klein]]
* [[memberOf::Theme:Scrap your boilerplate]]
",2013-06-12 14:58:22.816,2017-07-05 15:29:04.646111
Concept,Menu,"== Headline ==

A list of options or commands presented to an operator

== Metadata ==

* [[instanceOf::Computing_term]]
* [[sameAs::http://en.wikipedia.org/wiki/Menu_%28computing%29]]
",2013-06-12 14:54:46.897,2017-07-04 13:44:46.824324
Technology,WCF,"== Intent ==

A [[Framework|framework]] for [[asynchronous communication]] between [[Web service|web service]] endpoints

== Discussion ==

Windows Communication Foundation (WCF) is a framework used for [[asynchronous communication]] between [[Web service|web services]] and [[Client|clients]]. The supported message formats are single characters up to xml or binary files<cite>MSDN2012WCF</cite>.

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://msdn.microsoft.com/en-us/library/ms731082.aspx]]
* ",2013-06-12 15:02:03.044,2017-07-04 13:47:32.285095
Concept,Android Menu,"== Headline ==

A [[Menu]] in [[Technology:Android]]

== Metadata ==
* [[instanceOf::Android UI]]
* [[sameAs::http://developer.android.com/guide/topics/ui/menus.html]]
* [[relatesTo::http://developer.android.com/reference/android/view/Menu.html]]
* [[isA::Concept]]

",2013-06-12 14:53:14.386,2017-07-04 15:26:00.561937
Concept,OOP,"== Headline ==

[[OO programming]]

== Metadata ==

* [[carries::Tag:Abbreviation]]

",2013-06-12 14:55:04.514,2017-07-04 13:44:53.089107
Concept,Virtual method,"== Intent ==

[[Instance method]]s that may be overridden and dispatch is based on runtime receiver types

== Metadata ==

* [[instanceOf::Instance method]]
",2013-06-12 14:56:50.667,2017-07-04 13:45:01.991696
Concept,Expression problem,"== Headline ==

A problem in [[software design]] to retain [[extensibility]] of different kinds

== Description ==

The [[Expression problem]] is this: Given a system that implements a number of operations on certain data where such data is formed recursively according to a number data variants, can we extend the system modularly (without revising existing code units, possibly without recompilation, possibly with strong guarantees such as static typing for the initial system and any extension in separation) so that additional operations are implemented for the existing data variants or additional data variants are introduced and existing operations are extended for those.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Expression_problem]]
* [[relatesTo::http://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt]]
* [[relatesTo::http://channel9.msdn.com/Shows/Going+Deep/C9-Lectures-Dr-Ralf-Laemmel-Advanced-Functional-Programming-The-Expression-Problem]]
* [[memberOf::Vocabulary:Software engineering]]
",2013-06-12 14:53:55.283,2017-07-04 13:44:40.963221
Technology,Apache Commons,"== Headline ==

an Apache project on reusable Java components

== Metadata ==
* [[instanceOf::Application technology]]
* [[sameAs::http://commons.apache.org/]]
* ",2013-06-12 15:01:03.555,2017-07-04 13:47:27.005812
Concept,Modelware,"== Headline ==

a technological space focused on modeling and model-driven engineering

== Metadata ==

* [[instanceOf::Space]]
",2013-06-12 14:54:54.996,2017-07-04 13:44:47.521822
Contribution,javaObserver,"== Headline ==

Implement [[Feature:Logging|logging]] my means of the [[Observer pattern|observer pattern]] in [[Language:Java]]

== Characteristics ==

The present  implementation can be viewed as a variation on [[Contribution:javaInheritance]].
The [[Observer pattern|observer pattern]] is applied to implement the logging of salary cutting.

== Illustration ==

The data model is implemented with [[class inheritance]]. For example Departments:

<fragment url=""src/main/java/org/softlang/company/model/Department.java/class/Department""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented as in [[Contribution:javaInheritance]]:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

In addition the Employee class extends the ""Observerable"" class, implements methods for adding and notifying observers,
and notifies them when salaries are cut:

<fragment url=""src/main/java/org/softlang/company/model/Employee.java/class/Employee""/>

The actual [[Feature:Logging]] happens in the ""EmployeeObserver"":

<fragment url=""src/main/java/org/softlang/company/EmployeeObserver.java/class/EmployeeObserver""/>

The ""update"" method is called one anyone notifies the observer, leading to a logging of the new salary.

== Relationships ==


For basic OO with inheritance see [[Contribution:javaInheritance]].

== Architecture ==

The contribution follows a standardized structure:
* src/main/java contains the following packages:
** org.softlang.company.model for implementations of [[Feature:Company]].
** org.softlang.company holds the observer which implements [[Feature:Logging]].

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Logging]]
* [[uses::Language:Java]]

* [[developedBy::Contributor:tschmorleiz]]
",2013-08-13 10:31:18.213,2017-07-05 15:30:12.41346
Concept,Module,"== Headline ==

A unit of composition and separation of concerns

== Illustration ==

Consider the following ""naive"" (inefficiently recursive) definition of the [[Fibonacci number]]s in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
-- Naive definition of Fibonacci numbers
fib :: Int -> Int
fib 0 = 0
fib 1 = 1
fib x = fib (x-2) + fib (x-1)
</syntaxhighlight>

For what it matters, we may place the function in a module as follows:

<syntaxhighlight lang=""haskell"">
module Fibonacci.Inefficient where

-- The Fibonacci numbers
fib :: Int -> Int
fib 0 = 0
fib 1 = 1
fib x = fib (x-2) + fib (x-1)
</syntaxhighlight>

Suppose you want to compute the [[Fibonacci number]]s more efficiently. To this end, you need an auxiliary function which keeps track of the two previous [[Fibonacci number]]s so that binary (exponential) recursion can be avoided:

<syntaxhighlight lang=""haskell"">
-- The Fibonacci numbers
fib :: Int -> Int
fib x = fib2 x 0 1

-- Helper function for efficient Fibonacci numbers
fib2 :: Int -> Int -> Int -> Int
fib2 0 y _ = y
fib2 1 _ y = y
fib2 x y1 y2 = fib2 (x-1) y2 (y1+y2)
</syntaxhighlight>

These two functions are reasonably embedded into a module as follows:

<syntaxhighlight lang=""haskell"">
module Fibonacci.Efficient (
  fib
) where

-- The Fibonacci numbers
fib :: Int -> Int
fib x = fib2 x 0 1

-- Helper function for efficient Fibonacci numbers
fib2 :: Int -> Int -> Int -> Int
fib2 0 y _ = y
fib2 1 _ y = y
fib2 x y1 y2 = fib2 (x-1) y2 (y1+y2)
</syntaxhighlight>

Notably, the primary function for the [[Fibonacci number]]s is exported while the helper function isn't. In this manner, we express that one function is of general interest whereas the other one is an implementational artifact.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Software architecture]]
* [[instanceOf::Abstraction mechanism]]
* [[relatesTo::Modularization]]
* [[relatesTo::Modular_programming]]
* [[relatesTo::http://en.wikipedia.org/wiki/Modular_programming]]
* [[relatesTo::http://www.haskell.org/tutorial/modules.html]]
",2013-06-12 14:54:56.808,2017-07-04 13:44:47.773525
Concept,Monadic value,"== Headline ==

a computation in the sense of [[monad]]s

== Details ==

Suppose ''m'' is the type constructor for a monad.

Further suppose, ''x'' is some type of values over which we want to construct computations.

Then, ''m x'' is a ""computation type"".

Any value of ''m x'' is a monadic value.

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:57.987,2017-07-04 13:44:47.9112
Concept,Tree Walker,"== Headline ==
Performs a kind of [[Iteration]] along a [[Tree]]

== Metadata ==

* [[sameAs::https://developer.mozilla.org/de/docs/Web/API/TreeWalker]]
* [[instanceOf::Software concept]]",2017-06-28 14:41:06.960782,2017-07-05 10:58:21.327879
Concept,Android Resource,"== Headline ==

The Resource [[file]]s of an Android application

== Metadata ==
* [[memberOf::Vocabulary:Android]]
* [[sameAs::http://developer.android.com/guide/topics/resources/available-resources.html]]
* [[relatesTo::http://developer.android.com/guide/topics/resources/providing-resources.html]]
* [[relatesTo::http://developer.android.com/guide/topics/resources/accessing-resources.html]]
* [[isA::Concept]]

",2013-06-12 14:53:14.683,2017-07-04 15:26:00.640227
Concept,Android project,"== Headline ==

A generated project with [[Technology:Android Development Tool]] for [[Technology:Android]] applications

== Metadata ==
* [[memberOf::Vocabulary:Android]]
* [[sameAs::http://developer.android.com/tools/projects/index.html]]
* [[isA::Concept]]

",2013-06-12 14:53:15.323,2017-07-04 15:26:00.722467
Concept,Nominal typing,"== Headline ==

Equivalence of types based on their names

== Illustration ==

See [[structural typing]] for illustration.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Nominative_type_system]]
* [[relatesTo::http://c2.com/cgi/wiki?NominativeAndStructuralTyping]]
* [[relatesTo::Structural typing]]
",2013-06-12 14:55:02.891,2017-07-04 13:44:52.998298
Concept,Object language,"== Headline ==

The [[programming language]] of programs manipulated by [[metaprogram]]s

== Illustration ==

See the concept of [[metaprogram]]s for an illustration.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Object_language]]
* [[relatesTo::Metalanguage]]
* [[instanceOf::Concept]]

",2013-06-12 14:55:08.827,2017-07-04 13:44:53.247112
Contribution,javaDSLNestedFunction,"== Headline ==

[[Internal DSL]] implementation illustrating the [[Nested Function]] technique.
== Characteristics ==

An [[Internal DSL]] implementation to illustrate the pattern [[Nested Function]]. Its ideal to map hierarchic structure into the DSL. Notable: The evaluation order is from the inside to the outside, compared to [[Method Chaining]] and [[Function Sequence]]. This leads to build-in context for the arguments.
On the other hand [[Nested Function]] has problems with optional arguments. Additionally the arguments are not labeled. This can be solved by using '''Subtype Tokens''' as done in this implementation, which leads to more IDE-autocompletion.
== Illustration ==

[https://github.com/https://github.com/101companies/101simplejava/tree/master/contributions/javaDSLNestedFunction here].
== Metadata ==
* [[developedBy::Contributor:todeslord]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Nested Function]]
[[uses::Internal DSL]]
",2014-07-29 10:14:48.527,2017-07-05 15:30:22.138398
Concept,Lookahead,"== Headline ==

Incoming tokens used by a parser for decision making

== Illustration ==

Consider the following trivial context-free grammar:

<syntaxhighlight lang=""text"">
s : 'a' 'x' | 'b' 'x' ;
</syntaxhighlight>

A [[parser]] needs lookahead of length 1 to decide on what alternative to select. If the lookahead token is 'a', then the first alternative is chosen; if the lookahead token is 'b', then the second alternative is chosen; otherwise, a syntax error is evident.

== Metadata ==

* [[relatesTo::Parsing]]
* [[relatesTo::http://en.wikipedia.org/wiki/Parsing#Lookahead]]
* [[relatesTo::https://github.com/slecourse/slecourse/tree/master/sources/grammarClassesForANTLR]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:38.182,2017-07-04 13:44:46.037184
Concept,Visitor pattern,"== Headline ==

A [[design pattern]] to separate operations from an object model

== Illustration ==

See [[Contribution:javaVisitor]] for an illustration.

== Quote ==

(http://en.wikipedia.org/wiki/Visitor_pattern, 18 April 2013)

In essence, the visitor allows one to add new virtual functions to a family of classes without modifying the classes themselves; instead, one creates a visitor class that implements all of the appropriate specializations of the virtual function. The visitor takes the instance reference as input, and implements the goal through double dispatch.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Visitor_pattern]]
* [[sameAs::http://www.oodesign.com/visitor-pattern.html]]
* [[instanceOf::Design pattern]]

",2013-06-12 14:56:50.929,2017-07-04 13:45:02.026162
Technology,Java Print Service,"== Headline ==

a library for printing in a Java environment

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://docs.oracle.com/javase/1.4.2/docs/api/javax/print/package-summary.html]]
* ",2013-06-12 15:01:37.066,2017-07-04 13:47:29.966254
Concept,Web programming,"== Headline ==

The [[programming domain|domain]] of [[web application]] development

== Metadata ==

* [[instanceOf::Programming domain]]
* [[sameAs::http://en.wikipedia.org/wiki/Web_development]]
* [[relatesTo::http://code.google.com/edu/ajax/index.html]]

",2013-06-12 14:56:53.894,2017-07-04 13:45:02.093633
Concept,Anonymous class,"== Headline ==

A [[nested class]] that is anonymous

== Metadata ==

* [[relatesTo::http://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html]]
* [[relatesTo::http://en.wikipedia.org/wiki/Inner_class]]
* [[relatesTo::Nested class]]
* [[retatesTo::Closure]]
* [[isA::Concept]]

",2013-06-12 14:53:15.822,2017-07-04 15:26:00.804981
Concept,Web-application framework,"== Headline ==

A programming technology for web applications

== Metadata ==

* [[isA::Web technology]]
* [[isA::Framework]]

",2013-06-12 14:56:51.767,2017-07-04 15:26:30.915901
Concept,Web browser,"== Headline ==

A system for retrieving and presenting Web resources

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Web_browser]]
* [[isA::Software technology]]

",2013-06-12 14:56:53.233,2017-07-04 15:26:31.006368
Concept,Interpreter,"== Headline ==

A program that executes programs in a software language

== Illustration ==

Let's assume that we want to interpret the [[Language:Python]] variation on the [[Hello world program]].

That is, the source code of the program is available as a file ""HelloWorld.py"".

We simply invoke the Python interpreter at the command line:

<pre>
$ python HelloWorld.py
Hello, world!
</pre>

This is different from compilation, where we would first use a [[compiler]] to produce object code that is eventually also interpreted. In fact, Python scripts could also be compiled in the interest of performance. The use of the interpreter may be more convenient in scripting.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Interpreter_(computing)]]
* [[relatesTo::Compiler]]
",2013-06-12 14:54:23.568,2017-07-04 13:44:44.48165
Concept,Writer monad,"== Headline ==

A [[monad]] for synthesizing results or [[output]]

== Illustration ==

Let us put to work the writer monad in a simple interpreter.

There are these expression forms:

<syntaxhighlight lang=""haskell"">
-- Simple Boolean expressions
data Expr = Constant Bool | And Expr Expr | Or Expr Expr
  deriving (Eq, Show, Read)
</syntaxhighlight>

For instance, the following expression should evaluate to true:

<syntaxhighlight lang=""haskell"">
-- A sample term with two operations
sample = And (Constant True) (Or (Constant False) (Constant True))
</syntaxhighlight>

Here is a simple interpreter, indeed:

<syntaxhighlight lang=""haskell"">
-- A straightforward interpreter
eval :: Expr -> Bool
eval (Constant b) = b
eval (And e1 e2) = eval e1 && eval e2
eval (Or e1 e2) = eval e1 || eval e2
</syntaxhighlight>

Now suppose that the interpreter should also return the number of operations applied. We count ''And'' and ''Or''as operations. Thus, the sample term should count as 2. We may incorporate counting into the initial interpreter as follows:

<syntaxhighlight lang=""haskell"">
-- Interpreter with counting operations
eval' :: Expr -> (Bool, Int)
eval' (Constant b) = (b, 0)
eval' (And e1 e2) =
  let
   (b1,i) = eval' e1
   (b2,i') = eval' e2
  in (b1 && b2, i+i'+1)
eval' (Or e1 e2) =
  let
   (b1,i) = eval' e1
   (b2,i') = eval' e2
  in (b1 || b2, i+i'+1)
</syntaxhighlight>

Alas, the resulting interpreter is harder to understand. The collection of counts is entangled with the basic logic. By conversion to monadic style, we can hide counting except when we need increment the counter. We use the writer monad here so that we simply combine counts from subexpression (as also done in the non-monadic code above). We could also be using the [[state monad]], if we wanted to really track the operations counter along evaluation; this would be useful if we were adding an expression form for retrieving the count.

<syntaxhighlight lang=""haskell"">

</syntaxhighlight>

We can also use do notation:

<syntaxhighlight lang=""haskell"">
-- Monadic style interpreter
evalM :: Expr -> Writer (Sum Int) Bool
evalM (Constant b) = return b
evalM (And e1 e2) =
  evalM e1 >>= \b1 ->
  evalM e2 >>= \b2 ->
  tell (Sum 1) >>
  return (b1 && b2)
evalM (Or e1 e2) =
  evalM e1 >>= \b1 ->
  evalM e2 >>= \b2 ->
  tell (Sum 1) >>
  return (b1 || b2)
</syntaxhighlight>

The data type for the state monad looks like this:

<syntaxhighlight lang=""haskell"">
-- Computations as pairs of value and ""output""
newtype Writer w a = Writer { runWriter :: (a, w) }
</syntaxhighlight>

Thus, a stateful computation is basically a function a value with some output. The output type is assumed to be [[monoid]] because an empty output and the combination of outputs is uniformly defined in this manner.

The corresponding instance of the [[type class]] ''Monad'' follows:

<syntaxhighlight lang=""haskell"">
-- Monad instance for Writer
instance Monoid w => Monad (Writer w)
  where
    return a = Writer (a, mempty)
    (Writer (a, w)) >>= f =
      let (Writer (b, w')) = f a in
        (Writer (b, w `mappend` w'))
</syntaxhighlight>

The definition of ''return'' conveys that a pure computation produces the empty output. The definition of ''bind'' conveys that outputs are to be combined (in a certain order) from the operands of ''bind''. Finally, we need to define the writer-specific operation ''tell'' for producing ouput:

<syntaxhighlight lang=""haskell"">
-- Produce output
tell :: w -> Writer w ()
tell w = Writer ((), w)
</syntaxhighlight>

In modern Haskell, we also need to make ''Writer'' an instance of ''Applicative'' (for [[applicative functor]]s and ''Functor'' (for [[functor]]s). This code is omitted here, but see the 101repo.

See [[Contribution:haskellWriter]] for a contribution which uses the [[writer monad]].

== Metadata ==
* [[relatesTo::http://en.wikipedia.org/wiki/Monad (functional programming)#Writer monad]]
* [[relatesTo::http://dl.acm.org/citation.cfm?id=647698.734150]]
* [[relatesTo::http://books.google.com/books?id=miO8bwAACAAJ]]
* [[isA::Monad]]
* [[memberOf::Vocabulary:Functional programming]]

      ",2013-06-12 14:56:56.281,2017-07-04 15:26:31.788859
Concept,Anonymous function,"== Headline ==

A function without a name based on [[lambda abstraction]]

== Metadata ==

* [[sameAs::http://www.haskell.org/haskellwiki/Anonymous_function]]
* [[relatesTo::http://en.wikipedia.org/wiki/Lambda_calculus]]
* [[memberOf::Vocabulary:Functional programming]]
* [[isA::Concept]]

",2013-06-12 14:53:15.988,2017-07-04 15:26:00.914817
Technology,WEBrick,"== Headline ==

A [[web server]] for [[Technology:Ruby on Rails|]]

== Metadata ==

* [[instanceOf::Web server]]
* [[partOf::Technology:Ruby on Rails]]

",2013-06-12 15:02:03.353,2017-07-04 13:47:32.300154
Concept,AppWidget,"== Headline ==

Miniature application views that can be embedded in other applications.

== Metadata ==
* [[instanceOf::Android_UI]]
* [[sameAs::http://developer.android.com/guide/topics/appwidgets/index.html]]
* [[relatesTo::http://developer.android.com/guide/practices/ui_guidelines/widget_design.html]]
* [[isA::Concept]]

",2013-06-12 14:53:16.143,2017-07-04 15:26:00.989914
Concept,Nested data parallelism,"== Headline ==

A form of [[data parallelism]] dealing with highly irregular structures

== Metadata ==

* [[instanceOf::Parallelism]]
* [[relatesTo::http://www.cs.cmu.edu/~scandal/cacm/node4.html]]
* [[relatesTo::http://www.haskell.org/haskellwiki/GHC/Data_Parallel_Haskell]]
",2013-06-12 14:55:01.243,2017-07-04 13:44:52.788251
Contribution,antlrParser,"== Headline ==

An [[Technology:ANTLR|]]-based parser with semantic actions

== Characteristics ==

An [[Technology:ANTLR]]-based parser for a concrete syntax of companies is provided. The underlying grammar is LL(1). The parser uses semantics actions to implement [[Feature:Total]].

== Illustration ==

The data model is implemented as plain textual files:

<fragment url=""inputs/sample.Company""/>

A Parser for [[Feature:Company]] will be generated by [[Technology:ANTLR]] using src/main/antlr/Company.g.

A Company is defined by:

<syntaxhighlight language=""antlr"">
company :
  'company' STRING '{' department* '}' EOF;

department :
  'department' STRING '{'
    'manager' employee
    ('employee' employee)*
    department*
  '}';

employee :
  STRING '{'
    'address' STRING
    'salary' FLOAT
    { total += Double.parseDouble($FLOAT.text); }
  '}';

STRING  :   '""' (~'""')* '""';
FLOAT   :   ('0'..'9')+ ('.' ('0'..'9')+)?;
WS      :   (' '|'\r'? '\n'|'\t')+ {skip();};
</syntaxhighlight>

[[Feature:Parsing]] is implemented using the generated Parser:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java""/>

[[Feature:Total]] is implemented as part of [[Feature:Parsing]] with a semantic action (see Company.g):

<syntaxhighlight lang=""antlr"">
employee :
  STRING '{'
    'address' STRING
    'salary' FLOAT
    { total += Double.parseDouble($FLOAT.text); }
  '}';
</syntaxhighlight>

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

Test cases are implemented for all [[Namespace:Feature]]s. There is also an invalid input:

<fragment url=""inputs/nonSample.Company""/>

== Relationships ==

This contribution shows [[Feature:Parsing]] with semantic actions using [[Technology:ANTLR]] and [[Language:Java]]

For an ANTLER4 version see [[Contribution:antlr4Parser]].

For plain syntax checking see [[Contribution:antlrAcceptor]].

For a basic example of lexing/tokenization see [[Contribution:antlrLexer]].

For [[Object-Text mapping]] with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].

For walking a parsed [[Feature:Company]]-tree with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].

== Architecture ==
The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/antlr contains grammar files for [[Technology:ANTLR]].
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.antlr for [[Technology:ANTLR]]-generated Java classes (post build).
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==
This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:57:02.44,2017-07-05 15:25:28.039259
Concept,Database,"== Headline ==

An organized collection of data in digital form

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Database]]
* [[memberOf::Vocabulary:Data modeling]]
* [[isA::Concept]]

",2013-06-12 14:53:41.009,2017-07-04 15:26:08.753117
Concept,Type synonym,"== Headline ==

Abstraction over type expressions

== Illustration ==

The name [[type synonym]] is specifically used in [[Language:Haskell]]. (The same concept goes by the name ""typedef"" in, for example, [[Language:C]].) For instance, the following Haskell declaration introduces a type synonym for salaries to be represented as floats.

<syntaxhighlight lang=""haskell"">
type Salary = Float
</syntaxhighlight>

The choice of a type synonym implies that salaries and floats are compatible in a typing sense: any float is immediately acceptable whereever a salary is expected, and vice versa. The type synonym is merely a convenience without any proper effect on typing.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Typedef]]
* [[sameAs::http://www.haskell.org/haskellwiki/Type_synonym]]
* [[memberOf::Vocabulary:Functional programming]]
* [[relatesTo::Structural typing]]
* [[isA::Concept]]

",2013-06-12 14:56:40.764,2017-07-04 15:26:29.980546
Contribution,haskellMonoid,"== Headline ==

Modeling queries in [[Language:Haskell]] with the help of [[monoid]]s

== Characteristics ==

Several functional requirements are implemented while making explicit use the [[monoid]]s. For instance, [[Feature:Total]] is implemented with the help of the [[sum monoid]]. Only those functional requirements are implemented that indeed may benefit from monoids as such. For instance, [[Feature:Cut]] is not implemented.

== Illustration ==

Consider the implementation of [[Feature:Total]]:

<fragment url=""src/Company/Total.hs/function/total""/>

That is, lists of departments and employees are processed by the [[map function]] resulting in lists of intermediate results in the monoid's ''Sum'' type to be reduced accordingly by the monoid's ''mconcat'' operation, which, in turn, is uniformly defined by applying the [[fold function]] to the monoid's binary operation and its identity.

== Relationships ==

* The data model of [[Contribution:haskellComposition]] is reused.
* See [[Contribution:haskellProfessional]] for an implementation of all relevant features without the use of monoids.

== Architecture ==

There are these modules:

<file url=""src/Company/Data.hs""/>: a data model for [[Feature:Hierarchical company]]
<file url=""src/Company/Sample.hs""/>: a sample company
<file url=""src/Company/Total.hs""/>: the implementation of [[Feature:Total]]
<file url=""src/Company/Depth.hs""/>: the implementation of [[Feature:Depth]]
<file url=""src/Company/Ranking.hs""/>: the implementation of [[Feature:Ranking]]
<file url=""src/Data/Max.hs""/>: a monoid for optional maxima
<file url=""src/Main.hs""/>: Tests

The types of <file url=""src/Company/Data.hs""/> implement [[Feature:Closed serialization]] through Haskell's read/show.

== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[uses::Technology:HUnit]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Ranking]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell introduction]]
* [[basedOn::Contribution:haskellProfessional]]
* [[varies::Contribution:haskellProfessional]]
* [[moreComplexThan::Contribution:haskellProfessional]]
",2013-06-12 14:58:31.984,2017-07-05 15:29:19.647252
Concept,Listener,"== Headline ==

An interface in the [[View]] class that contains a single callback method

== Details ==

Look also [[Observer pattern]]

== Metadata ==

* [[instanceOf::Android_UI]]
* [[sameAs::http://developer.android.com/guide/topics/ui/ui-events.html]]
* [[relatesTo::http://developer.android.com/guide/topics/ui/controls.html]]
",2013-06-12 14:54:36.452,2017-07-04 13:44:45.848464
Concept,Pattern matching,"== Headline ==

Matching values against [[pattern]]s to bind variables

== Description ==

Pattern matching may be concerned with different kinds of types, e.g., [[text]] or [[tree]]s. In the case of text, [[regular expression]]s provide the foundation for patterns. In the case of trees and specifically in the context of [[functional programming]], [[algebraic data type]]s provide the foundation for patterns; in this case, pattern matching is concerned with case discrimination on different constructor patterns such that variables are bound in successfully matched patterns for use in expressions.

== Illustration ==

=== Pattern matching in Haskell ===

The basics of Haskell's pattern matching are very similar to those of other functional programming languages.

==== Pattern matching on pairs ====

<syntaxhighlight lang=""haskell"">
-- Project a pair to first component
fst :: (a,b) -> a
fst (x,_) = x

-- Project a pair to second component
snd :: (a,b) -> b
snd (_,x) = x
</syntaxhighlight>

These two functions ''fst'' and ''snd'' are defined like this (or similarly) in the [[Prelude module]] of [[Language:Haskell]]. They are defined by pattern matching on the structure of tuples; see the the left-hand sides of the [[function definition]]s. The idea of such pattern matching is of course that variables in the pattern (on the left-hand side) can be used in the expression of the definition (on the right-hand side).

==== Pattern matching on lists ====

<syntaxhighlight lang=""haskell"">
-- Retrieve head (first element) of a list
head :: [a] -> a
head (x:_) = x

-- Retrieve tail (all but first element) of a list
tail :: [a] -> [a]
tail (_:xs) = xs
</syntaxhighlight>

These two functions ''head'' and ''tail'' are defined like this (or similarly) in the [[Prelude module]] of [[Language:Haskell]]. They demonstrate that non-empty lists are constructed with the cons constructor "":"" from a head and a tail.

Pattern matching is particularly convenient, when functions should be defined by case discrimination on the different constructor patterns for a data type. Consider, for example, the length function (again borrowed from the Prelude); this definition consists of two equations: one for the case of an empty list and another case for non-empty lists:

<syntaxhighlight lang=""haskell"">
-- Determine length of list
length :: [a] -> Int
length [] = 0
length (_:xs) = length xs + 1
</syntaxhighlight>

==== Other forms of pattern matching ====

* Pattern matching is particularly useful for user-defined [[algebraic data type]]s.
* Pattern matching is not limited to the use on left-hand sides of equations. Instead, pattern matching can also be performed through [[case expression]]s in an expression context.
* Haskell patterns may involve so-called [[guard]]s to control the selection of equations (cases) not just purely on the grounds structure but also computations on top of bound variables.
* Haskell provides different forms of patterns to deal with [[laziness]]. This is not further discussed here.

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[memberOf::Vocabulary:Data]]
* [[sameAs::http://en.wikipedia.org/wiki/Pattern_matching]]
* [[similarTo::http://en.wikibooks.org/wiki/Haskell/Pattern_matching]]
",2013-06-12 14:55:20.441,2017-07-04 13:44:54.044698
Concept,AngryBird,"== Angry coffee bird ==

[[media:https://dl.dropboxusercontent.com/u/795699/pic.jpg]]",2014-04-28 13:02:07.203,2017-07-04 13:47:56.050078
Contribution,mySqlMany,"== Headline ==

A [[Technology:MySQL|]] database with [[Language:SQL|]] scripts

== Motivation ==

A [[relational schema]] provides the [[data model]] of the [[system:Company]]. Some [[functional requirement]]s of the system are modeled as [[Language:SQL|SQL]] statements.

== Relationships ==

* See [[Contribution:mySqlOne]] for a slightly simpler variation which does not support multiple companies.
* Various contributions (see the backlinks) use the present contribution (or its variant [[Contribution:mySqlOne]]) for their database components.

== Usage ==

See [[Contribution:mySqlOne]].

== Metadata ==

* [[uses::Language:SQL]]
* [[uses::Technology:MySQL]]
* [[uses::Technology:XAMPP]]
* [[uses::Technology:MySQL Workbench]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:NoSQL]]
* [[developedBy::Contributor:rlaemmel]]
* [[developedBy::Contributor:tschmorleiz]]

",2013-06-12 14:58:35.295,2017-07-05 15:29:26.559805
Concept,Argument,"== Headline ==

The argument of an [[abstraction]]

== Details ==

For instance, a function may have an argument or several.

There are formal and actual arguments.

A formal argument is declared by the abstraction, e.g., in a function definition.

An actual argument is provided by the use of the abstraction, e.g., in a function application.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::Result]]
* [[isA::Concept]]

",2013-06-12 14:53:18.561,2017-07-04 15:26:01.705528
Concept,Association,"== Headline ==

A relationship between [[class]]es of [[object]]s

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Association_(object-oriented_programming)]]
* [[memberOf::Vocabulary:Data modeling]]
* [[memberOf::Vocabulary:OO programming]]
* [[isA::Namespace:Concept]]

",2013-06-12 14:53:19.432,2017-07-04 15:26:01.861406
Concept,Association list,"== Headline ==

A list of key-value pairs

== Synonyms ==

* Dictionary
* Map

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Association_list]]
* [[isA::Concept]]

",2013-06-12 14:53:19.625,2017-07-04 15:26:01.972579
Technology,Android Development Tool,"== Headline ==

A plugin for [[Technology:Eclipse]] to integrate [[Technology:Android]]

== Description ==

ADT is a [[plugin]] for the [[Technology:Eclipse]] IDE. It gives a integrated environment in which to develop apps for the [[Technology:Android]] platform. It extends the capabilites of [[Technology:Eclipse]] to let a quickly set up new [[Android project]]s, build an app UI, debug a app, and export signed (or unsigned) app packages (APKs) for distribution.

== Technologies ==

* [[Technology:Eclipse]]

== Metadata ==
* [[instanceOf::toolkit]]
* [[sameAs::http://developer.android.com/tools/help/adt.html]]
* [[relatesTo::http://developer.android.com/sdk/installing/installing-adt.html]]
* ",2013-06-12 15:01:02.452,2017-07-04 13:47:26.916514
Concept,Runtime,"== Headline ==

The runtime system needed for program execution

== Metadata ==

* [[isA::Software technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Runtime_system]]",2014-08-29 21:37:13.398,2017-07-04 15:26:42.704781
Concept,Management system,"== Headline ==

A framework of procedures and processes supporting an organization's objectives

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Management_system]]
* [[relatesTo::http://en.wikipedia.org/wiki/PDCA]]
* [[relatesTo::http://www.bsiamerica.com/en-us/Assessment-and-Certification-services/Management-systems/At-a-glance/What-are-management-systems/]]
* [[memberOf::Vocabulary:Information system]]
* [[isA::Concept]]

",2013-06-12 14:54:40.338,2017-07-04 15:26:15.757281
Technology,Spoofax,"== Headline ==

A platform for DSL implementation

== Metadata ==

* [[sameAs::http://www.metaborg.org/]]
* [[instanceOf::Platform]]
* [[supports::Metaprogramming]]
* [[implements::Language:NABL]]
* [[implements::Language:Stratego]]
* [[implements::Language:SDF3]]
* [[uses::Language:Java]]

",2017-06-23 14:26:49.494577,2017-07-05 15:30:25.76959
Technology,Android SDK,"== Headline ==

The libraries and [[toolkit]]s for [[Technology:Android]] programming

== Description ==

The Android SDK provides the tools and libraries necessary to begin developing applications that run on Android-powered devices.

== Languages ==

* [[Language:Java]]
* [[Language:XML]]

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::toolkit]]
* [[relatesTo::http://developer.android.com/tools/help/index.html]]
* [[relatesTo::http://developer.android.com/reference/packages.html]]
* [[relatesTo::https://developers.google.com/android/add-ons/google-apis/]]
* ",2013-06-12 15:01:02.712,2017-07-04 13:47:26.952928
Concept,Backup,"== Headline ==

Copying and archiving files to respond to loss of data

== Metadata ==
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Backup]]
* [[isA::Namespace:Concept]]

",2013-06-12 14:53:20.391,2017-07-04 15:26:02.080855
Concept,Proxy pattern,"== Metadata ==

* [[instanceOf::Design pattern]]
* [[sameAs::http://en.wikipedia.org/wiki/Proxy_pattern]]

",2013-06-12 14:55:33.831,2017-07-04 13:44:54.639393
Concept,Pull-based XML parsing,"== Metadata ==

* [[instanceOf::XML processing]]
",2013-06-12 14:55:34.112,2017-07-04 13:44:54.646761
Concept,Proof,"== Headline ==

a demonstration of the truth of a formal statement

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[sameAs::http://en.wikipedia.org/wiki/Mathematical_proof]]
* [[isA::Concept]]

",2013-06-12 14:55:33.552,2017-07-04 15:26:20.08215
Contribution,rubyonrails,"== Headline ==

[[Web programming]] in [[Language:Ruby]] with [[Technology:Ruby on Rails]]
== Characteristics ==

We exercise [[Web programming]] using [[Technology:Ruby on Rails]]. That is, we use the [[MVC]] pattern for the companies model in the scope of a dynamically typed language. We make use of several framework tools for generating code and migration.
== Illustration ==

Most of the code was generated using the ''rails generate scaffold'' command. This generates
* a model for the given class and attributes
* a view including pages for editing, indexing, and showing instances
* a controller for actions like creating, updating, and removing instances

Then, we used ''rake db:migrate'' to migrate the tables in the underlining database.

In the next section, we will illustrate how routing rules and resources are defined.

=== Routes ===

The ''routes.rb'' file defines a default route when entering the application:

<syntaxhighlight lang=""ruby>
get ""home/index""
</syntaxhighlight>

That is, when entering the URL ""http://localhost:3000/"", the user is redirected to the specified page.

This file also defines Ruby resources:

<syntaxhighlight lang=""ruby"">
resources :employees

resources :departments do
  resources :departments
  resources :employees
end

resources :companies do
  resources :departments
end
</syntaxhighlight>

These rules define what kind of resources the application contains and how these resources should be nested. For instance, a company resource has many department resources.

The framework also provides routes for both index pages and pages for showing a concrete instance. For companies these helpers are provided as follows:
<syntaxhighlight lang=""ruby"" enclose=""none"">companies path</syntaxhighlight> provides the URL for the index page for all companies.
<syntaxhighlight lang=""ruby"" enclose=""none"">company path(someCompany)</syntaxhighlight> provides the URL for the given company.

This example also shows the use of pluralisation for name conventions.

In the next section we will continue by illustration the binding between models and views.

=== Model/View binding ===

We will illustrate this topic by showing how one can add an employee to an existing department using the edit page for departments.

In the ''edit.html.erb'' template file for departments we define a form for adding an employee:

<syntaxhighlight lang=""rails"">
<%= form for([@department, @department.employees.build]) do |f| %>
  <div class=""field"">
    <%= f.label :name %><br />
    <%= f.text field :name %>
    Set as manager?
    <%= f.check box :isManager %>
  </div>
  <div class=""actions"">
    <%= f.submit %>
  </div>
<% end %>
</syntaxhighlight>

We use <syntaxhighlight lang=""ruby"" enclose=""none"">form for</syntaxhighlight> to generate a form for a new employee. Submitting this form sends a request including the new employee in JSON and the department id of the owning department. This behavior is caused by the fact that we added employees as a nested resource of departments.

In the form <syntaxhighlight lang=""ruby"" enclose=""none"">f</syntaxhighlight> we then bind the name of the new employee to a textfield and the <syntaxhighlight lang=""ruby"" enclose=""none"">isManager</syntaxhighlight> property to a checkbox.

Submitting this form will call the employee controller's <syntaxhighlight lang=""ruby"" enclose=""none"">create</syntaxhighlight> method:

<syntaxhighlight lang=""ruby"">
def create
      @department = Department.find(params[:department id])
      @employee = @department.employees.create(params[:employee])
      redirect to department path(@department)
  end
</syntaxhighlight>

This method starts by searching the department instance by the given id. It then calls the <syntaxhighlight lang=""ruby"" enclose=""none"">create</syntaxhighlight> method of the employees collection of this department. Finally the method redirects the user to this department.
== Architecture ==

The MVC code for this implementation can be found in [this!!companies/app]. The [this!!companies/app/models models] folder holds models for companies, departments and employees. The [this!!companies/app/controllers controllers] folder holds the controllers for actions like indexing, creating, updating and destroying of instances. The [this!!companies/app/views views] folder contains the views for all classes including editing, showing and indexing views.

The schema for the underlining database can be found in [this!!companies/db/schema.rb schema.rb]. The migration files in the [this!!companies/db/migrate migrate] folder.

The routing rules can be found in  [this!!companies/config/routes.rb routes.rb].
== Usage ==

* Run ''rails s'' in the project's root folder.
* Run ''rake db:migrate'' in the project's root folder
== Metadata ==

* [[memberOf::Theme:Web programming]]
* [[uses::Language:Ruby]]
* [[uses::Language:JavaScript]]
* [[uses::Language:HTML]]
* [[uses::Language:CSS]]
* [[uses::Technology:Ruby on Rails]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Restructuring]]
* [[developedBy::Contributor:tschmorleiz]]
* [[documentedBy::Contributor:arkadi-schmidt]]
* [[carries::Tag:Stub]]
",2013-06-12 14:58:48.62,2017-07-05 15:29:42.471363
Concept,Base case,"== Headline ==

a step in an [[induction]] proof

== Metadata ==
* [[memberOf::Vocabulary:Programming theory]]
* [[isA::Namespace:Concept]]

",2013-06-12 14:53:22.767,2017-07-04 15:26:02.199757
Concept,Bottom-up parsing,"== Headline ==

A [[parsing]] strategy starting at the leaves of the parse tree

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Bottom-up_parsing]]
* [[isA::Parsing]]
* [[instanceOf::Software language engineering]]
* [[relatesTo::Top-down parsing]]
* [[isA::Concept]]

",2013-06-12 14:53:24.016,2017-07-04 15:26:02.365803
Contribution,dph,"== Headline ==

[[Data parallelism]] in [[Language:Haskell]] with [[Technology:DPH]]

== Motivation ==
The implementation demonstrates [[data parallelism]] in [[Language:Haskell]] with [[Technology:DPH]]. The operations for totaling and cutting salaries are implemented on top of DPH's [[parallel array]]s. In this manner, we encounter some limitations of DPH with regard to data parallelism. In particular, data parallelism is limited to arrays over primitive types from a DPH-specific [[Prelude module]]; there is no support for user-defined types. Hence, we need to flatten the company to a list of salary values, which are of a DPH-specific type for floating point numbers, before salaries can be totaled and cut. The resulting list of cut salaries needs to be reintegrated into the company in question. These conversions obviously take more time than we gain by data parallelism. Hence, the present illustration of DPH is of limited use.

== Illustration ==

=== Cutting in Parallel ===

As we mentioned in the motivation section, data parallelism can only be applied to arrays.
We therefore flatten the company to become a list of salaries (see [this!!SalaryFlattener.hs] for details).

==== Non-parallel code ====

Unfortunately the normal Prelude list type <syntaxhighlight lang=""haskell"" enclose=""none"">[a]</syntaxhighlight> is not amenable to data parallelism, but a special array type called <syntaxhighlight lang=""haskell"" enclose=""none"">PArray a</syntaxhighlight>. We therefore need a special function in a non-parallel module for converting between <syntaxhighlight lang=""haskell"" enclose=""none"">[Float]</syntaxhighlight> and <syntaxhighlight lang=""haskell"" enclose=""none"">PArray Float</syntaxhighlight> before we can cut in parallel:

<syntaxhighlight lang=""haskell"" source=""dph/Cut.hs"">
cut :: Company -> Company
cut c = (consumeSalaries c) (toList $ cutV $ fromList $ flattenSalaries c)
</syntaxhighlight>

We first flatten the company, then convert the salary list to <syntaxhighlight lang=""haskell"" enclose=""none"">PArray Float</syntaxhighlight> and call the cut function <syntaxhighlight lang=""haskell"" enclose=""none"">cutV</syntaxhighlight> from a parallelism-ready module. After that we convert back to <syntaxhighlight lang=""haskell"" enclose=""none"">[Float]</syntaxhighlight> and call <syntaxhighlight lang=""haskell"" enclose=""none"">consumeSalaries</syntaxhighlight> to replace all salaries in the company tree.

==== Parallel code ====

Parallel and non-parallel code cannot be mixed in the same module. Hence, we set up separate modules.
In the module for parallel for cut, we declare:

<syntaxhighlight lang=""haskell"" source=""dph/CutV.hs"">
{-# LANGUAGE ParallelArrays #-}
{-# OPTIONS GHC -fvectorise #-}
</syntaxhighlight>

This tells [[Technology:GHC]] to vectorise this module, i.e., to apply data parallelism, and that this module uses parallel arrays. We then define the interface function between vectorised and non-vectorised code <syntaxhighlight lang=""haskell"" enclose=""none"">cutV</syntaxhighlight>:

<syntaxhighlight lang=""haskell"" source=""dph/CutV.hs"">
cutV :: PArray Float -> PArray Float
{-# NOINLINE cutV #-}
cutV v = toPArrayP (cutVP (fromPArrayP v))
</syntaxhighlight>

This function converts from <syntaxhighlight lang=""haskell"" enclose=""none"">PArray Float</syntaxhighlight> to a parallel array <syntaxhighlight lang=""haskell"" enclose=""none"">[:Float:]</syntaxhighlight>, calls the
parallel code and converts back to <syntaxhighlight lang=""haskell"" enclose=""none"">PArray Float</syntaxhighlight>. A parallel array can only be used in a vectorised module, so only here can we convert to it. Marking this function <syntaxhighlight lang=""haskell"" enclose=""none"">{-# NOINLINE cutV #-}</syntaxhighlight> makes it usable in non-vectorised modules. <syntaxhighlight lang=""haskell"" enclose=""none"">cutP</syntaxhighlight> calls the actual data parallel function <syntaxhighlight lang=""haskell"" enclose=""none"">cutVP</syntaxhighlight>, which uses a parallel map function to cut all list values:

<syntaxhighlight lang=""haskell"" source=""dph/CutV.hs"">
cutVP :: [:Float:] -> [:Float:]
cutVP = mapP (/2)
</syntaxhighlight>

== Architecture ==

The module in [this!!SalaryFlattener.hs] contains functionality to flatten a company and to replace all salaries.
[this!!Total.hs] and [this!!Cut.hs] host the code for converting between <syntaxhighlight lang=""haskell"" enclose=""none"">[Float]</syntaxhighlight> and <syntaxhighlight lang=""haskell"" enclose=""none"">PArray Float</syntaxhighlight> and calling data parallel functions for totaling and cutting salaries, which can be found in [this!!TotalV.hs] and [this!!CutV.hs].
The algebraic datatype for companies can be found in [this!!Company.hs]. [this!!SampleCompany.hs] holds a sample company.
[this!!Main.hs] collects test scenarios for totaling and cutting.

== Usage ==

Tested with GHC/GHCi version 7.2.1.

* All sources have to be compiled using the GHC-options <syntaxhighlight lang=""make"" enclose=""none"">-c -Odph -fdph-seq</syntaxhighlight>.
* [this!!Main.hs] has to be loaded into GHCi.
* The <syntaxhighlight lang=""haskell"" enclose=""none"">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Technology:GHC]]
* [[uses::Technology:GHCi]]
* [[uses::Technology:DPH]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Data parallelism]]
* [[developedBy::Contributor:tschmorleiz]]
* [[memberOf::Theme:Data parallelism]]

",2013-06-12 14:57:13.644,2017-07-05 15:25:49.756764
Concept,Model to Text transformation,"== Headline ==

A [[transformation]] that transforms a [[model]] into text

== Metadata ==

* [[instanceOf::Transformation]]
* [[instanceOf::MDE_term]]
* [[sameAs::http://en.wikipedia.org/wiki/Model_transformation]]
",2013-06-12 14:54:53.757,2017-07-04 13:44:47.497611
Contribution,ef,"== Headline ==

[[Object-Relational mapping]] with [[Technology:.NET|]]'s [[Technology:Entity Framework|]]

== Status ==

[[101status:Featured]]

== Languages ==
* [[Language:CSharp]] (C#): Programming language used for all code (Version 4.0)

== Technologies ==
* [[Technology:csc.exe]]: C# compiler (Version 4.0)
* [[Technology:.NET]]: Framework used to execute compiled code (Version 4.0)
* [[Technology:Entity Framework]] Entity Framework toolkit (Version 3.0)
* [[Technology:NUnit]]: Unit testing framework used for testing (Version 2.5.9)
* [[Technology:SQL Server]]: SQL Server 2008 used as a data storage. (Free Express edition is enough)

== Features ==

* [[Feature:Hierarchical company]]
* [[Feature:Total]]
* [[Feature:Cut]]
* [[Feature:Depth]]
* [[Feature:Persistence]]

== Motivation ==

Entity Framework object model is generated for SQL Server representation of 101companies model.  We use LINQ queries over entities to implement [[Feature:Total]], [[Feature:Cut]] and
[[Feature:Depth]] features by showing different types of data tranformations happening on the database level. These transformations (SQL statements) are generated by [[Technology:Entity Framework]] using [[O/R Mapping]]
metadata stored in [[Language:XML]] file, which was also automatically generated from the database 101companies model representation.

== Architecture ==
CompanyModel.edmx represents all Entity Framework artifacts required for O/R Mapping. This is an XML file contains:
* SSDL content
* CSDL content
* C-S mapping content
* EF Designer content
<nowiki>and also a *.cs file with C# objects.</nowiki>

<nowiki>*.edmx files are visualized in Entity Data Model Designer by default, but also can be opened as raw xml files.</nowiki>
The Entity Data Model Designer (Entity Designer) stores storage model information in an .edmx file at design time.
At build time the Entity Designer uses information in an .edmx file to create the .ssdl file that is needed by the Entity Framework at runtime.

Tests folder contains unit tests showing implemented features.

== Usage ==
[[Contribution:sqlServer]] should be evaluated as soon as current implementation requires [[Feature:Hierarchical company]] to be created in the database.

[[Technology:Visual Studio]] 2010 should be used to open a project file.
The project itself is a class-library and compiles into a DLL. To run a project you must execute at least one unit test (or all at once).
Nunit GUI or other Visual studio extension (e.g. Resharper) should be used for executing unit tests.

== Metadata ==
* [[developedBy::Contributor:avaranovich]]

",2013-06-12 14:57:13.962,2017-07-04 13:45:08.142177
Contribution,egl,"== Headline ==

Demonstrate modular code generation using symmetric aspects in EGL for generating 101companies attributes, associations, and basic methods.

== Technologies ==
* [[Technology:EMF]]
* [[Technology:Java]]
* [[Technology:Epsilon Generation Language]] including aspect-oriented extensions
* [[Technology:Ant]]

== Languages ==
* [[Language:Ecore]]
* [[Language:Java]]

== Features ==
* [[Feature:Hierarchical company]]
* [[Feature:Cut]]
* [[Feature:Code generator]]

== Motivation ==

This implementation makes the contribution of demonstrating symmetric aspects in code generation using Epsilon Generation Language for Ecore to Java code generation such that the basic features can be generated in a modular way.

This is specifically interesting for a number of reasons:

1. It demonstrates basic code generation using Epsilon Generation Language and Ecore as a modelling language for basic class models.

2. It demonstrates various ways of modularising code-generation templates, including aspect-oriented techniques.

3. It demonstrates how aspect-oriented techniques can be used to introduce variability into the code-generation workflow---specifically, allowing to choose between different realisation of associations in the code generated without affecting any of the other parts of the code generation.

== Illustration ==

The code generator demonstrated is relatively generic in that it does not contain any information specific to the 101companies example system. All the system-specific information is kept in a separate model model/101companies.ecore. This is essentially a class diagram (expressed in ECore rather than UML) of the key classes and their relationships.

From this model, the code generators will produce Java code implementing the classes described. The code generators are kept in directory templates/ and are expressed in the Epsilon Generation Language (EGL). There are two kinds of generation templates present:

* Templates for coordination of generation (e.g., templates/Associations.egl): These do not produce any code themselves, but invoke other templates for each class or association in the model given.

* Templates for generating parts of individual files (e.g., templates/AssociationsOneClass.egl): These are invoked once for each file to be generated and produce all or part of that file.

More detailed information on EGL can be found at http://www.eclipse.org/epsilon/ The language basically allows generation templates to be expressed from two parts: target-language code, which will be included verbatim in the generation result, and control code, which allows navigating source models and producing text based on source-model information. The latter code can be identified easily because it is always enclosed by [% %]. So, the following code generates a basic class skeleton, assuming a variable cl of type EClass to be passed in as a parameter:

<syntaxhighlight lang=""java>
public class [%=cl.name%] {
  public [%=cl.name%] () {}
}
</syntaxhighlight>

More complex code generation is possible by using more complex control structures. For example, the following code generates attributes and setters + getters (simplified from templates/AttributesOneClass.egl):

<syntaxhighlight lang=""java>
public class [%=cl.name%] {
[%
  for (attr in cl.eAllAttributes) {
    %]
  private [%=attr.type.name%] [%=attr.name%];

  public [%=attr.type.name%] get[%=attr.name.firstToUpperCase()%] () {
    return [%=attr.name%];
  }
  [%if (attr.changeable) {%]

  public void set[%=attr.name.firstToUpperCase()%] ([%=attr.type.name%] [%=attr.name%]) {
    this.[%=attr.name%] = [%=attr.name%];
  }
  [%}%]

    [%
  }
%]
}
</syntaxhighlight>

Directory templates/ contains a number such templates for generating different aspects of a class's structure. In a normal use of EGL, most of these would have to be combined into one template. In this example 101companies implementation we demonstrate some more advanced modularity techniques for code generation templates. Specifically, we show two forms of modularity:

1. Use of a shared library of functions to ensure consistent use of coding conventions across generation templates: CoreOps.eol contains some functions encoding how type names are derived from model information. This is imported from a range of EGL files ensuring consistent generation of types across all files generated.

2. Use of symmetric aspect technology to allow separation of different features of the code generation and enable variability in code generation: We have implemented separate templates for dealing with attributes and associations. In fact, there are two sets of templates for dealing with associations. Depending on which set is used, a different implementation of associations is generated.

Which set of templates is chosen and how they are combined (where appropriate) is defined in file workflow/build.xml (which is also the file to be executed to test the example). This is a normal ANT build file, using some Epsilon-specific tasks. Notice the use of epsilon.eglRegister to invoke a generation template. This will perform the code generation described in that template and register the result against the file name indicated (in this case, the file names are specified inside the template itself). Note that you could also ask for the generation result to be output to a file directly using the epsilon.egl task instead. The template would not need to be adjusted.

Once all code has been generated and registered, epsilon.eglMerge is used to merge all code generated for the same file and to output to a file.

Note that the build.xml file contains two alternate top-level targets: generate all and generate all assocclasses. These generate code with different implementations of associations. Note that they both reuse the same templates for generating attribute-related code.

Feature [type-driven transformation] is implemented manually in the java source files in model/src/. These are merged with the generated code by explicitly registering them using the epsilon.eglRegisterFile task.

More information about symmetric aspects for EGL is available from [1]

[1] Steffen Zschaler and Awais Rashid: Towards Modular Code Generators Using Symmetric Language-Aware Aspects. In Proc. 1st Workshop on Free Composition (FREECO'11).

== Architecture ==

There are a number of folders including different components of the overall architecture. File workflow/build.xml is the overall configuration binding these components together. It has two main targets demonstrating different compositions of components (producing different implementations of associations, but otherwise identical).

* Folder model/ contains the Ecore model of the 101companies scenario, with each class modelled as an EClass (implementing [Tree structure]). It also contains a number of manually written pieces of source code implementing the [Type-driven transformation] feature (folder model/src). These will be merged with the generated code.

* Folder template contains the EGL templates that specify the generation. Note that some templates only serve to coordinate the invocation of other templates.

* Folder src will contain the generated sources ready to be run.

== Usage ==

* Open Eclipse and ensure Epsilon and the symmetric AO extensions are installed. Epsilon is available as an Eclipse project from [EPSILON]. The symmetric AO extensions are available from [EPSILONLABS] and best run from source (see general documentation on how to run Eclipse plugins from source).

* Import the package provided as an Eclipse project.

* Execute workflow/build.xml as an Ant build file (making sure to run it in the same JRE as the Eclipse workbench). You can choose either of the first two targets; the output will differ in the way in which it handles associations.

* Refresh the project and inspect the src folder. You may need to auto-format the generated files.

== Issues ==

* The implementation currently only supports a limited number of features. The [Type-driven transformation] feature implementation is not actually generated, but integrated from manually written code. Instead, these files could be generated from a suitable model.

* Other more interesting features could be added, such as generating EJB annotations through a separate EGL template.

== Metadata ==
* [[developedBy::Contributor:Steffen Zschaler]]

",2013-06-12 14:57:14.706,2017-07-04 13:45:08.652101
Contribution,emfGenerative,"== Headline ==

[[Model-Object mapping]] for [[Language:Ecore]] and [[Language:Java]] with [[Technology:EMF]]

== Motivation ==

[[Model to Model transformation]]s with the help of [[Model-Object mapping]] within the Java platform is exercised. The Cut feature shows an [[endogenous model transformation]], the Total feature shows an [[exogenous model transformation]]. The primary data model
for companies is an Ecore model from which an object model for ""[[Model]] Code""
in [[Technology:EMF]]'s sense is derived. The classes of the Ecore-derived object model are
somewhat richer than [[POJO]], but their core properties and relationships
are similar to a regular OO design (such as the one of
[[Contribution:javaComposition]]), and operations on the [[Technology:EMF]] objects can
be implemented as [[instance method]]s on the Ecore-derived classes.
It should be noted that instance methods on generated classes survive
re-generation because [[Technology:EMF]] is capable of distinguishing generated versus
programmer-inserted class members. The [[Language:Ecore]] model is interesting in so far that it
clearly demonstrates the difference between [[Containment relationship|containment]]
vs. [[reference relationship]]s. In particular, the association of mentees and mentores
requires a reference.

== Illustration ==

Ecore supports modeling of structure. Ecore models are represented as XML documents.
The following excerpt shows the declaration of the ""classifier"" for companies: elements in
the Ecore-specific namespace are used to break down companies into a name and
a list of departments:

<syntaxhighlight lang=""xml"">
<eClassifiers xsi:type=""ecore:EClass"" name=""Company"">
  <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""name""
    ordered=""false"" lowerBound=""1""
    eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
  <eStructuralFeatures xsi:type=""ecore:EReference"" name=""depts""
    ordered=""false"" upperBound=""-1""
    eType=""#//Department"" containment=""true""/>
</eClassifiers>
</syntaxhighlight>

The Ecore-derived, Java-based object model will not be illustrated here because it covers
properties and relationships that are similar to a regular OO design, and all additional fields
and methods are not used in the basic scenario at hand.

Objects of the Ecore-derived model can also be serialized to or de-serialized from XML (XMI).
To this end, the namespace for the model and its implementing package need to be registered
with the ''registry of EMF EPackage''. Thus:

<syntaxhighlight lang=""java"">
EPackage.
  Registry.
  INSTANCE.
  put(CompanyPackage.eNS URI, CompanyPackage.eINSTANCE);
</syntaxhighlight>

Further, a specific serialization format has to be chosen. To this end, a number of idiosyncratic
objects have to be constructed and configured so that a preferred file extension is mapped to
the intended serialization behavior. For instance, the process of loading a company from an "".xmi""
file is organized as follows:

<syntaxhighlight lang=""java"">
ResourceSet resourceSet = new ResourceSetImpl();
resourceSet.
  getResourceFactoryRegistry().
  getExtensionToFactoryMap().
  put(""xmi"", new XMIResourceFactoryImpl());
Resource xmiResource =
  resourceSet.
  createResource(URI.createFileURI(""sampleCompany.xmi""));
xmiResource.load(null);
Company c = (Company)xmiResource.getContents().get(0);
</syntaxhighlight>

That is, ''XMIResourceFactoryImpl'' is a resource factory for XMI; there is also a resource factory ''XMLResourceFactoryImpl'' for XML. When they are used upon saving, XMI and XML output are almost identical; the XMI file though contains a namespace declaration and an attribute referring to XMI.

== Architecture ==

=== Summary ===

File ''model/Company.ecore'' is the Ecode model of companies. File ''model/Company.genmodel'' is the EMF generator model which has been derived from the Ecore model; see below. Files ''model/Company*.xsd'' are XML schemas for XML instances of the Ecore model; they were derived with the Export functionality from the generator model; see below. Package ''company'' and subpackages contain the model code for companies. Most of this code has been generated from the generator model (see below) but the generated code has been enriched with instance methods for [[Feature:Total]] and [[Feature:Cut]]. (We leverage the EMF convention that all generated members are marked by @generated whereas the manually injected members do not carry such markers. In this manner the model code can be regenerated without overriding manually injected members.) Package ''org.softlang.features.Serialization'' contains boilerplate code for serialization. Package ''org.softlang.tests'' contains JUnit tests for operations on companies and serialization.

=== Transcript ===

Creation and evolution of an EMF project with support for serialization is not straightfoward.

The following transcript documents the essential steps and constraints.

==== Create EMF Project ====

* -> New -> Empty EMF Project ...

==== Create Ecore Model ====

* -> New -> Ecore Model
* Choose the ""model"" folder of the EMF project.
* Adjust name of model (default My.ecore) if needed.
* Now it is time to work out the Ecore model.
* One needs to define name of the package, namespace URI, and prefix.

A minimal example follows:

<syntaxhighlight lang=""xml"">
<?xml version=""1.0"" encoding=""UTF-8""?>
<ecore:EPackage xmi:version=""2.0""
    xmlns:xmi=""http://www.omg.org/XMI"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xmlns:ecore=""http://www.eclipse.org/emf/2002/Ecore"" name=""foo""
    nsURI=""www.foo.com"" nsPrefix=""bar"">
  <eClassifiers xsi:type=""ecore:EClass"" name=""xyz""/>
</ecore:EPackage>
</syntaxhighlight>

==== Create EMF Generator Model ====

* Select the Ecore model in the package explorer.
* -> New -> Generator model
* Choose the ""model"" folder of the EMF project.
* When asked for a Model Importer, choose Ecore Model.
* When asked for Model URIs, '''you must Browse Workspace, and select the Ecore file'''.

==== Generate Model Code ====

* Open the generator model.
* Right click on it in the opened view.
* -> Generate Model Code

This will generate several files and folders:
* build.properties
* plugin.properties
* plugin.xml
* src/<your-ecore-name>
* src/<your-ecore-name/impl>
* src/<your-ecore-name/util>

==== Enable XMI/XML resources ====

* Open ''plugin.xml'' with ''plug-in manifest editor''.
* Select ''Dependencies'' tab.
* Add ''org.eclipse.emf.ecore.xmi.impl'' to ''imported packages''.

==== Create XML Schemas ====

* Right click on Company.genmodel.
* Select ""Export Model ..."".
* Select ""XML Schema"" and provide name such as ""Company.xsd"".
* Select ""XML Schema for XMI"" and provide name such as ""CompanyXMI.xsd"".

== Usage ==

If you use ''Eclipse Modeling Tools'', then you have everything you need.

If you use a different Eclipse Download, you may need to add the EMF plugin (it is tested with Version 2.6.1).

Update-Site: http://download.eclipse.org/modeling/emf/updates/releases/

* The implementation is provided as an Eclipse project.
* Hence, open the project with Eclipse; this will also build the project.
* There are JUnit tests available in package ''org.softlang.tests''.
* If you change the Ecore or generator models, you may need to rerun some EMF tools; see the transcript above.

== Issues ==

* It is not obvious how to make good use of the generated XML schemas. Validation code should be added so that it is shown how the two schemas Company.xsd and CompanyXMI.xsd can be used for actual validation of presumably sampleCompany.xml and sampleCompany.xmi. In fact, it would also be good to some negative testcases such as an XMI file that can be validated with the XML schema, but which cannot be loaded as a resource. This would make the point that extra validation is performed by EMF. The particular negative test case could exercise, for example, stress the issue of references for mentors. Likewise, some test case should demonstrate the substantial differences between Company.xsd and CompanyXMI.xsd; to this end, it needs to be understood how these different schemas are actually supposed to be used.
* The generated types end up in the ""company"" package at the top, whereas it should be ""org.softlang.company"" for better alignment with other implementations. It is not obvious how to control the package accordingly.
* This is more of an idea for another implementation. The generated classes are only used in the simplest POJO-like manner. The generated code also supports richer idioms/design patterns, which should be possibly demonstrated. Likewise, an editor for companies based on EMF or GMF could be targeted.

== Metadata ==

* [[uses::Language:Ecore]]
* [[uses::Language:Java]]
* [[uses::Technology:EMF]]
* [[uses::Technology:Eclipse]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Mentoring]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Mapping]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:MDE]]
* [[memberOf::Theme:Java mapping]]
",2013-06-12 14:57:15.915,2017-07-05 15:25:54.860386
Concept,Bounded polymorphism,"== Headline ==

A form of [[polymorphism]] with a bound for feasible actual type parameters

== Illustration ==

See [[polymorphism]].

== Metadata ==

* [[isA::Polymorphism]]
* [[relatesTo::http://en.wikipedia.org/wiki/Bounded_quantification]]
* [[relatesTo::http://en.wikipedia.org/wiki/Polymorphism_(computer_science)]]
",2013-06-12 14:53:24.196,2017-07-04 15:26:02.464709
Concept,Build tool,"== Headline ==

A tool for build automation
== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Build_automation]]
* [[isA::Software technology]]
* [[memberOf::Vocabulary:Software engineering]]
* [[memberOf::Vocabulary:Programming]]
",2013-06-12 14:53:24.341,2017-07-04 15:26:02.613198
Concept,Business process,"== Headline ==

The collection of activities or tasks that produce a specific service or product

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Business_process]]
* [[memberOf::Vocabulary:Software engineering]]
* [[memberOf::Vocabulary:Information system]]
* [[isA::Concept]]

",2013-06-12 14:53:24.755,2017-07-04 15:26:02.87397
Technology,Ant,"== Headline ==

A [[build tool]] primarily for the Java platform

== Details ==

There is also an associated Java package for ANT tasks.

== Metadata ==

* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://ant.apache.org/]]
* [[sameAs::http://www.jajakarta.org/ant/ant-1.6.1/docs/ja/manual/api/org/apache/tools/ant/package-summary.html]]
* [[sameAs::http://en.wikipedia.org/wiki/Apache_Ant]]
* [[instanceOf::Build tool]]
* ",2013-06-12 15:01:02.998,2017-07-04 13:47:26.981513
Concept,Job role,"== Headline ==

Add job roles for employees
== Description ==

The database structure shall be extended by introducing job roles for employees.
== Motivation ==

The current data structure of [[Contribution:mySqlMany]] and [[Contribution:mySqlOne]] only allows two-dimensional aggregation and analysis of data. Adding [[Feature:Job role]] enables us aggregating data multi-dimensional and therefore creating a more advanced reporting commonly used in the area of Business Intelligence (i.e. OLAP cubes).
In addition, if implemented in a normalized structure, it motivates to use more complex join queries across several tables.
== Relationships ==

* See [[Contribution:mySqlOneReporting]] for an implementation of this feature
* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical_company]].
== Metadata ==

* [[isA::Functional requirement]]
* [[isA::Optional feature]]
* ",2015-04-23 15:54:18.455,2017-07-04 15:26:43.059527
Contribution,happstack,"== Headline ==

[[Web programming]] in [[uses::Language:Haskell]] with [[uses::Technology:Happstack]]

== Motivation ==

The implementation demonstrates [[web programming]] in [[uses::Language:Haskell]] with the [[uses::Technology:Happstack]] [[framework]]. The templating engine [[uses::Technology:Heist]] for [[uses::Language:XHTML]]
is used for the composition of dynamic web pages. The [[system:Company]] is implemented as a [[web application]] using a [[client-server architecture]]. The company is stored in a client-side [[cookie]]. (The server initializes the cookie with a sample company.) URLs are used to encode requests and ids of involved data. There are these requests, which essentially correspond to user actions: a user can either view a specific part of the company, save an edited part, or cut salaries in the selected scope. The part to be viewed, cut, or saved is specified by making use of a [[Zipper]]-inspired focus concept that is also leveraged by [[Contribution:wxHaskell]]. Modified data is validated. That is, when processing a save request, sent by an HTML form, the server applies various validators and potentially returns error messages, which will be displayed to the user in the [[web browser]]. As a response, the client receives HTML documents, which are composed using [[uses::Technology:Heist]].

== Illustration ==

In the following we will demonstrate how a specific request is processed by the server.

=== Saving an Employee ===

'''Scenario:''' After requesting to view a manager the user manipulates the input fields and submits a request by clicking a save button.
The browser sends an HTTP-request together with a company-cookie to the server. The URL looks like this:

''<nowiki>http://localhost:8000/Employee/Save/ManagerFocus%20[0]/?Name=Erik&Address=</nowiki>''

''<nowiki>Utrecht&Salary=1234.0</nowiki>''

==== Routing filter ====

We set up a simple HTTP server:

<syntaxhighlight lang=""haskell"" source=""happstack/Main.hs"" line>
main = simpleHTTP nullConf $
  msum [ path $ \v -> path $ \a -> path $
           \f -> mainPart a v f
       , serveDirectory EnableBrowsing [] ""static""]
</syntaxhighlight>
We specify two possible server behaviours (values of <syntaxhighlight lang=""haskell"" enclose=""none"">ServerPartT</syntaxhighlight>) in a list, which we then apply to the <syntaxhighlight lang=""haskell"" enclose=""none"">MonadPlus</syntaxhighlight>-function <syntaxhighlight lang=""haskell"" enclose=""none"">msum</syntaxhighlight>. This function tries to run each server until one serverstart succeeds.
The first list element uses Happstack's <syntaxhighlight lang=""haskell"" enclose=""none"">path</syntaxhighlight> function to extract:

The view (here <syntaxhighlight lang=""haskell"" enclose=""none"">Employee</syntaxhighlight>)
The action (here <syntaxhighlight lang=""haskell"" enclose=""none"">Save</syntaxhighlight>)
The focus (here <syntaxhighlight lang=""haskell"" enclose=""none"">ManagerFocus [0]</syntaxhighlight>)
In case the extraction fails the server falls back to being a file server in line 4.
In case extraction succeeds <syntaxhighlight lang=""haskell"" enclose=""none"">mainPart</syntaxhighlight> is called passing the action, the view and the focus:

<syntaxhighlight lang=""haskell"" source=""happstack/Serverparts.hs"">
mainPart :: Action -> View -> Focus -> ServerPartT IO Response
mainPart View = viewPart
mainPart Cut  = cutPart
mainPart Save = savePart
</syntaxhighlight>
In this scenario <syntaxhighlight lang=""haskell"" enclose=""none"">mainPart</syntaxhighlight> matches on <syntaxhighlight lang=""haskell"" enclose=""none"">Save</syntaxhighlight> and calls
<syntaxhighlight lang=""haskell"" enclose=""none"">savePart</syntaxhighlight> passing the view and the focus:

==== Saving ====

<syntaxhighlight lang=""haskell"" source=""happstack/Serverparts.hs"" line>
savePart :: View -> Focus -> ServerPartT IO Response
savePart v f = do
  s <- save
  case s of
    (Left errs) -> do
      c <- readCCookie
      displayPart v f c errs
    (Right newc) -> displayPart v f newc []
    where
      save = case v of
        CompanyV  -> saveCompany f
        DeptV     -> saveDepartment f
        EmployeeV -> saveEmployee f
</syntaxhighlight>
The function starts by calling a save function, which is chosen based on the given <syntaxhighlight lang=""haskell"" enclose=""none"">View</syntaxhighlight> value. The <syntaxhighlight lang=""haskell"" enclose=""none"">save</syntaxhighlight>-functions, which are all of type <syntaxhighlight lang=""haskell"" enclose=""none"">Focus -> ServerPartT IO (Either [(ENames,String)] Company)</syntaxhighlight> either return a list of error information or the new company. In case of errors <syntaxhighlight lang=""haskell"" enclose=""none"">savePart</syntaxhighlight> calls <syntaxhighlight lang=""haskell"" enclose=""none"">displayPart</syntaxhighlight> in line 7 passing the old company (read from the cookie) and the errors. In case of success the new company and an empty list of errors is passed to <syntaxhighlight lang=""haskell"" enclose=""none"">displayPart</syntaxhighlight> in line 8.
In this scenario  <syntaxhighlight lang=""haskell"" enclose=""none"">saveEmployee</syntaxhighlight> is called by <syntaxhighlight lang=""haskell"" enclose=""none"">savePart</syntaxhighlight>:

<syntaxhighlight lang=""haskell"" source=""happstack/Save.hs"" line>
saveEmployee :: Focus -> ServerPartT IO (Either [(ENames,String)] Company)
saveEmployee f = do
  c <- readCCookie
  name <- look ""Name""
  address <- look ""Address""
  salary <- lookRead ""Salary""
  let newe = Employee name address salary
  let ev = validateEmployee c f newe
  case ev of
    (Just errs)
        -> return $ Left errs
    Nothing
        -> do
            let newc = writeEM f c newe
            addCookie Session $
              (mkCookie ""company"" (show newc))
            return $ Right newc
</syntaxhighlight>
<syntaxhighlight lang=""haskell"" enclose=""none"">saveEmployee</syntaxhighlight> reads the company from a cookie and extracts the request parameters from the URL in lines 3-6. These values are used to compose the new <syntaxhighlight lang=""haskell"" enclose=""none"">Employee</syntaxhighlight> value in line 7.
In line 8 this employee is then passed to the validation function <syntaxhighlight lang=""haskell"" enclose=""none"">validateEmployee</syntaxhighlight> of type <syntaxhighlight lang=""haskell"" enclose=""none"">Company -> Focus -> a -> Maybe [(ENames,String)]</syntaxhighlight>. If the validation succeeds, <syntaxhighlight lang=""haskell"" enclose=""none"">validateEmployee</syntaxhighlight> returns <syntaxhighlight lang=""haskell"" enclose=""none"">Nothing</syntaxhighlight>. In this case the employee is replaced within the company, which is then re-stored in the cookie and returned by the function (lines 14-16). Otherwise <syntaxhighlight lang=""haskell"" enclose=""none"">validateEmployee</syntaxhighlight> returns error information, which is then also returned by <syntaxhighlight lang=""haskell"" enclose=""none"">saveEmployee</syntaxhighlight> in line 11.

==== Validation ====

The validation functionality can be found in the ''Validators'' module:

<syntaxhighlight lang=""haskell"" source=""happstack/Validators.hs"">
validateEmployee :: Validations Employee
validateEmployee c f (Employee n a s) = if null vs
                           then Nothing
                           else Just $ concat vs
                             where
                               vs = catMaybes
                                [ validateNA c f (n,a)
                                , validateSalary c f s]
</syntaxhighlight>
<syntaxhighlight lang=""haskell"" enclose=""none"">validateEmployee</syntaxhighlight> composes two validations (see [this!!Validators.hs] for details):
<syntaxhighlight lang=""haskell"" enclose=""none"">validateNA</syntaxhighlight> checks whether the employee's name/address pair is unique in the company <syntaxhighlight lang=""haskell"" enclose=""none"">c</syntaxhighlight>.
<syntaxhighlight lang=""haskell"" enclose=""none"">validateSalary</syntaxhighlight> checks two things regarding the employee's salary:
** It checks whether by changing the salary the employee's department-manager still receives the highest salary within the department.
** It checks whether the salary has a positive value.
In case both validations return <syntaxhighlight lang=""haskell"" enclose=""none"">Nothing</syntaxhighlight>, <syntaxhighlight lang=""haskell"" enclose=""none"">validateEmployee</syntaxhighlight> returns <syntaxhighlight lang=""haskell"" enclose=""none"">Nothing</syntaxhighlight>. Otherwise it returns the list of all error messages.

==== Binding and Responding ====

The user might have tried to assign an invalid salary and an invalid name/address pair to the manager in question. Validation therefore would return error information.
<syntaxhighlight lang=""haskell"" enclose=""none"">savePart</syntaxhighlight> would call <syntaxhighlight lang=""haskell"" enclose=""none"">displayPart</syntaxhighlight> passing the old company and the error messages:

<syntaxhighlight lang=""haskell"" source=""happstack/Serverparts.hs"" line>
displayPart :: View -> Focus -> Company -> [(ENames,String)] -> ServerPart Response
displayPart v f c errs = do
      td <- newTemplateDirectory' tDir $
              eNamesBinder errs $ binder f c $
                emptyTemplateState tDir
      render td (B.pack tname)
          where
            binder = case v of
              CompanyV  -> companyBinder
              DeptV     -> departmentBinder
              EmployeeV -> employeeBinder
                where
            tname = case v of
              CompanyV  -> ""company""
              DeptV     -> ""department""
              EmployeeV -> ""employee""
</syntaxhighlight>
In lines 8-16 <syntaxhighlight lang=""haskell"" enclose=""none"">displayPart</syntaxhighlight> decides which template and which binder to apply by making use of a <syntaxhighlight lang=""haskell"" enclose=""none"">case</syntaxhighlight> expression on the given view. The binder will bind all template variables to strings or small HTML fragments (splices). After that <syntaxhighlight lang=""haskell"" enclose=""none"">eNamesBinder</syntaxhighlight> will bind the error messages to template variables. Both binders can be found in [this!!Binder.hs].
They return a function of type <syntaxhighlight lang=""haskell"" enclose=""none"">Monad m => TemplateState m -> TemplateState m</syntaxhighlight>. That is, binders are state transformers for templates.
<syntaxhighlight lang=""haskell"" enclose=""none"">displayPart</syntaxhighlight> then renders the HTML document, which is sent to the client as the response in line 6.

== Architecture ==

[this!!Main.hs] holds the server using various server parts in [this!!Serverparts.hs]. The actual save action is performed by functionality in [this!!Save.hs]. [this!!Binder.hs] contains functions to bind template variables. The validators can be found in [this!!Validators.hs] using helper functions hosted by [this!!Utils.hs]. The algebraic datatype for companies can be found in [this!!Company.hs], a sample company in [this!!SampleCompany.hs]. Functionality to total and cut is provided by [this!!Total.hs] and [this!!Cut.hs]. [this!!Focus.hs] provides a focus datatype and functions on top of it. Various types used by the server can be found in [this!!Types.hs]. The [this!!static] folder contains the sytlesheet for the application and images, while [this!!templates] contains the (X)HTML templates.

== Usage ==

=== Build ===

A number of cabal packages are needed:
* happstack
* xmlhtml
* heist
* happstack-heist

=== Run ===
* [this!!Main.hs] can to be consulted with runhaskell to avoid the compilation step.
There is a [this!!Makefile] with a target ''run'' to do this.
* Open ''http://localhost:8000/Company/View/CompanyFocus'' to demo, starting with the root view.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:JavaScript]]
* [[uses::Language:XHTML]]
* [[uses::Language:CSS]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Happstack]]
* [[uses::Technology:Heist]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:tschmorleiz]]
* [[memberOf::Theme:Web programming]]
* [[memberOf::Theme:Haskell potpourri]]
",2013-06-12 14:57:32.189,2017-07-05 15:26:29.799266
Technology,JXPath,"====Headline====
Traversing Java-Objects with [[Language:XPath|]] syntax

",2014-05-07 00:56:20.288,2017-07-04 13:47:56.117446
Concept,Requirements analysis,"== Headline ==

An analysis that determines [[requirement]]s

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Requirements_analysis]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:55:48.273,2017-07-04 15:26:22.500592
Contribution,fsharpClasses,"== Headline ==

A simple implementation in [[Language:FSharp|F#]] for the [[Technology:.NET]] Framework
== Characteristics ==

The contribution demonstrates object oriented style of [[functional programming]] in [[Language:FSharp|F#]].
Persons, Employees, Departments and Companies are represented via [[class]] types.  [[Pure function]]s are implemented
in pipelining style to realize totaling and cutting salaries.
== Illustration ==

The company model uses classes for [[data composition]]:

Basic types for [[string]]s and [[float]]s are used to represent names, addresses and salaries.
More advanced [[list]]s are used to represent a collection of the recently named [[class]]es (Employee, Department).


[[Feature:Total]] and [[Feature:Cut]] are implemented by families of functions on the company types.
We only show the family for totaling salaries here which uses pipelining style.

<syntaxhighlight lang=""fsharp"">
-- Total all salaries in a company
-- TotalSalaries:: Company -> Decimal
member this.TotalSalaries =
      List.fold (fun (acc) (elem:Department) -> acc + elem.Total) 0M (List.ofSeq departments)

-- Total all salaries in a department
-- Total:: Department -> Decimal
member this.Total with get() =
         manager.Salary
          |> fun t -> List.fold (fun (acc) (elem:Department) -> acc + elem.Total) t (List.ofSeq subUnits)
          |> fun t -> List.fold (fun (acc) (elem:Employee) -> acc + elem.Salary) t (List.ofSeq employees)
</syntaxhighlight>
== Architecture ==

The contribution consists of four modules: ""CompanyModels.fs"" which contains the definition of the used classes (including the total / cut function);
""CompanyBuilder.fs"" which creates a sample instance of a company;
""Program.fs"" which basically creates a sample company through ""buildCompany"" of ""CompanyBuilder.fs"" and executes total printing the results (simple testing);
""Test.fs"" which contains a professional NUnit Test scenario.
== Metadata ==

* [[uses::Language:FSharp|F#]]
* [[uses::Technology:fcs.exe]]
* [[uses::Technology:.NET]]
* [[uses::Technology:NUnit]]
* [[uses::Technology:Visual Studio]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Company]]
* [[developedBy::Contributor:MightyNoob]]
",2013-06-12 14:57:18,2017-07-05 15:26:00.073214
Concept,Non-functional requirement,"== Headline ==

A required quality of a [[software system]] or a [[software component|component]]

== Details ==

See the following concepts for classifiers of non-functional requirements:
* [[Development-time quality]]
* [[Run-time quality]]

(These classifiers are not standardized, but similar concepts appear under different names in various sources.)

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Non-functional_requirement]]
* [[relatesTo::http://www.architecting.co.uk/presentations/NFRs.pdf]]
* [[isA::Requirement]]
* [[memberOf::Vocabulary:Software engineering]]
",2013-06-12 14:55:03.175,2017-07-04 15:26:17.462286
Contribution,hadoop,"== Headline ==

Data-parallel processing with [[Technology:Hadoop|]]

== Motivation ==

Companies are processed in parallel manner according to the [[MapReduce]] programming
model. To this end, primitive data of companies, departments, and employees can be stored
in [[file]]s of fixed-size [[record]]s in a [[distributed file system]].

== Illustration ==

While data is stored in files, the records can be de-serialized into objects
for the convenience of MapReduce functionality. For instance, an object type for
employees is designed as follows:

<source lang=""java"">
class Employee
   implements WritableComparable<Employee> {

	private Text name;
	private Text address;
	private DoubleWritable salary;
	private Text company;

   // getters, setters and omitted

   public void readFields(DataInput in)
         throws IOException {
      name = new Text();
      name.readFields(in);
      address = new Text();
      address.readFields(in);
      ...
   }
}
</source>

That is, there are properties for name, address, and salary---as usual. In
addition, there is a property for the the company so that the company of each
employee is immediately known without any traversal or state-based effort.
Objects are populated from records on file through a ''readFields'' method
that is required for any deserializable type.

A MapReduce computation consists of a mapper and a reducer. The
essential methods of these components, i.e., methods ''map'' (extraction)
and ''reduce'' (aggregation) are shown below:

<source lang=""java"">
protected void map(
   Text key, Employee value, Context context)
   throws ... {
      context.write(
         value.getCompany(),
         value.getSalary());
}
</source>

<source lang=""java"">
protected void reduce(
   Text key, Iterable<...> values, Context context)
   throws ... {
      double total = 0;
      for(DoubleWritable value: values)
         total += value.get();
      context.write(key, new DoubleWritable(total));
}
</source>

That is, the ''map'' method constructs an intermediate key-value
pair from each employee such that the company of an employee
(say, the company name) serves as key and the employee's salary
serves as value. In this manner, the MapReduce framework will correctly group
together all salaries per company. Hence, the ''reduce'' method
simply iterates over all salaries, grouped by key, and sums them
up by a trivial aggregation loop so that a pair of the company key
with the total of salaries is written to the output file.

== Architecture ==

Package ''org.softlang.company'' hosts the object model for [[Feature:Hierarchical_company]].
Package ''org.softlang.operations'' hosts designated classes with static methods for
the MapReduce jobs [[Feature:Total]] and [[Feature:Cut]]. Some boilerplate code for
[[closed serialization]] is implemented in the class ''org.softlang.company.Company''
(see methods ''readObject'' and ''writeObject''). Package ''org.softlang.tests''
hosts JUnit tests; see below.

== Usage ==

* The implementation is provided as an Eclipse project.
* Hence, open the project with Eclipse; this will also build the project.
* The default settings runs Hadoop on your local machine. For distributed setup see below.
* There are JUnit tests available as the package ''org.softlang.tests''.
** Run class ''Serialization'' with JUnit to create and serialize an example Company.
** Run class ''Basics'' with JUnit to exercise basic features.

== Distributed Setup ==

An official release for Hadoop can be downloaded here: http://hadoop.apache.org/common/releases.html
The Hadoop Wiki describes how to set up Hadoop in local (http://hadoop.apache.org/common/docs/current/single node setup.html)
and distributed mode (http://hadoop.apache.org/common/docs/current/cluster setup.html).

These configurations require jobs being run via the command line using a jar file. The jar can be build
from our Eclipse project by simply specifying the class ''OperationRunner'' as main class.

Using Hadoop in distributed mode under Eclipse is not that trivial. Instructions can be found here:
http://wiki.apache.org/hadoop/EclipseEnvironment

== Possible issues ==

Running Hadoop under Windows requires ''Cygwin'' being installed. Instructions can be found here:
http://wiki.apache.org/hadoop/GettingStartedWithHadoop

Hadoop also requires ''ssh'' to access all machines (including ''localhost'') without password prompt.
Instructions how to do this can be found for example here: http://www.maths.qmul.ac.uk/~dhruba/tips and tricks/node2.html

== Metadata ==

* [[developedBy::Contributor:rlaemmel]]
* [[developedBy::Contributor:David Saile]]
* [[memberOf::Theme:NoSQL]]
* [[memberOf::Theme:Data parallelism]]
* [[uses::Language:Java]]
* [[uses::Technology:Hadoop]]
* [[belongsTo::ClusterComputingWare]]
* [[supports::DistributedComputing]]

* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Data parallelism]]
",2013-06-12 14:57:26.702,2017-07-30 13:30:28.029543
Property,implements,"== Headline ==

A relation between an implementing artifact and an implemented entity

== Description ==

There are scenarios like this:
* An artifact (such as language implementation) implements a language.
* An artifact (such as a program) defines a function.
* An artifact (such as a program) defines a concept that proxies for a function.

== Metadata ==

* [[hasDomain::Type:Technology]]
* [[hasRange::Type:Language]]
* [[hasRange::Type:Function]]
* [[hasRange::Type:Concept]]
* [[hasRange::Type:Feature]]
* [[relatesTo::Property:defines]]
",2017-05-03 20:34:45.84493,2017-07-05 15:30:25.948368
Concept,Semantic equality,"== Headline ==

[[Equality]] with taking into account semantics of data

== Illustration ==

We speak of semantic equality when we take semantic properties of the underlying data into account. Semantic equality is to be contrasted with [[structural equality]].

Consider the following type for the representation of arithmetic expressions:

<syntaxhighlight lang=""haskell"">
-- Simple arithmetic expressions
data Expr = Const Int | Add Expr Expr
</syntaxhighlight>

When assuming straightforward structural equality, then the following properties should hold:

<syntaxhighlight lang=""haskell"">
> Const 42 == Const 42
True
> Const 42 == Add (Const 20) (Const 22)
False
</syntaxhighlight>

The second equality test fails because the constant term is clearly structurally unequal to the addition term. Let us take semantic properties of the underlying data into account. One option for the given example is that we say that two arithmetic expressions are equal if and only if they evaluate to the same result. In Haskell, this is expressed with the following [[type-class instance]] for the [[type class]] ''Eq'':

<syntaxhighlight lang=""haskell"">
-- Equality based on evaluation
instance Eq Expr
  where
    x == y = eval x == eval y
      where
        eval (Const i) = i
        eval (Add e1 e2) = eval e1 + eval e2
</syntaxhighlight>

For instance:

<syntaxhighlight lang=""haskell"">
*Main> Const 42 == Add (Const 20) (Const 22)
True
*Main> Const 42 == Const 41
False
</syntaxhighlight>

Semantic equality based on proper evaluation does not quite generalize because, we may not be able to evaluate the structure at hand. Think of arithmetic expressions, for example, when they contain free variables. Often, semantic equality is defined relative to selected semantic properties that are readily attainable. For instance, consider semantic equality of our arithmetic expressions modulo associativity of addition. In Haskell, this is expressed as follows:

<syntaxhighlight lang=""haskell"">
-- Lawful equality
instance Eq Expr
  where
    x == y = eq (normalize x) (normalize y)
      where

        -- Associate addition to the right
        normalize :: Expr -> Expr
        normalize x@(Const i) = x
        normalize (Add x@(Const i) y) = Add x (normalize y)
        normalize (Add (Add x y) z) = normalize (Add x (Add y z))

        -- Uniform (structural) equality
        eq :: Expr -> Expr -> Bool
        eq (Const i) (Const j) = i == j
        eq (Add e1 e2) (Add e3 e4) = eq e1 e3 && eq e2 e4
        eq _ _ = False
</syntaxhighlight>

For instance:

<syntaxhighlight lang=""haskell"">
> let c1 = Const 1
> let c2 = Const 2
> let c3 = Const 3
> Add c1 (Add c2 c3) == Add (Add c1 c2) c3
True
</syntaxhighlight>

== Metadata ==

* [[isA::Equality]]
* [[relatesTo::Structural equality]]
",2013-06-12 14:55:59.784,2017-07-04 15:26:23.906901
Concept,CRUD,"== Headline ==

The basic functions of persistent storage

== Details ==

CRUD stands for Create, read, update, and delete.

== Metadata ==
* [[memberOf::Vocabulary:Data]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Create,_read,_update_and_delete]]
* [[isA::Namespace:Concept]]

",2013-06-12 14:53:25.814,2017-07-04 15:26:03.020438
Concept,Object Role Modeling,"== Headline ==

A data modeling approach based on predicate logic

== Metadata ==

* [[memberOf::Vocabulary:Software modeling]]
* [[sameAs::http://en.wikipedia.org/wiki/Object_Role_Modeling]]
* [[instanceOf::Concept]]

",2013-06-12 14:55:08.114,2017-07-04 13:44:53.214774
Contribution,mySqlOne,"== Headline ==

[[Language:SQL|SQL]]-based implementation tailored to [[Technology:MySQL|MySQL]]

== Motivation ==

A [[relational schema]] provides the [[data model]] of the [[system:Company]]. Some [[functional requirement]]s of the system are modeled as [[Language:SQL|SQL]] statements.

== Relationships ==

* See [[Contribution:mySqlMany]] for a slightly more complicated variation which supports many companies instead of a single company.
* Various contributions (see the backlinks) use the present contribution (or its variant [[Contribution:mySqlMany]]) for their database components.

== Usage ==

All steps are supported by SQL scripts. Different database setups are conceivable. In the following, we assume a local database MySQL database server based on [[Technology:XAMPP|XAMPP]]. Different means of executing [[Language:SQL|SQL]] statements are conceivable. In the following, we assume the use of the [[Technology:MySQL Workbench|MySQL Workbench]].

The following steps were tested with XAMPP 1.7.3 and MySQL Workbench 5.2.33 on Mac OSX 10.6.
* Download and install XAMPP and MySQL Workbench.
* Open the ""XAMPP Control Panel"" and start ""Apache"" and ""Mysql"".
** Thereby, a local MySQL Server is now running:
*** Server Host : ""localhost""
*** Port : 3306
*** Username : ""root""
*** Password : """" (no password)
* Connect to the database in MySQL Workbench.
* Create schema ""test"".
* Select schema ""test"" and make it the default.
* Create tables (run SQL script Company.sql).
* Populate tables (run SQL script sampleCompany.sql).
* Total all salaries (run SQL script Total.sql).
* Cut all salaries (run SQL script Cut.sql).
* Total all salaries, again (run SQL script Total.sql).

== Metadata ==

* [[uses::Language:SQL]]
* [[uses::Technology:MySQL]]
* [[uses::Technology:XAMPP]]
* [[uses::Technology:MySQL Workbench]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Singleton]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:NoSQL]]
* [[developedBy::Contributor:rlaemmel]]
* [[developedBy::Contributor:tschmorleiz]]
",2013-06-12 14:58:35.582,2017-07-05 15:29:26.946975
Concept,Catamorphism,"== Headline ==

A recursion scheme for [[data type]]s

== Illustration ==

See the concepts of [[fold algebra]] and [[generalized fold]] for related illustrations.

The dual concept is [[anamorphism]].

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[relatesTo::http://en.wikipedia.org/wiki/Catamorphism]]
* [[isA::Concept]]

",2013-06-12 14:53:26.46,2017-07-04 15:26:03.277187
Contribution,haskellCGI,"== Headline ==

[[Technology:CGI]] style [[Web programming]] in [[Language:Haskell]]

== Motivation ==

The implementation demonstrates [[Technology:CGI]] style [[web programming]] in [[Language:Haskell]].
We make use of a CGI [[library]] for Haskell. A [[Language:XHTML]] combinator [[library]] is used for the composition of dynamic web pages. The [[system:Company]] is implemented as a [[web application]] using a [[client-server architecture]]. The company is stored in a client-side [[cookie]]. (The server initializes the cookie with a sample company.) The [[server]] processes HTTP requests from and returns HTTP responses to a web client using the CGI technology. Request parameters are extracted from the request's URL in the sense of [[Technology:HTTP]]'s GET parameters. The user can either request to view a company, department, or employee; the user can also cut salaries or save edits in the selected scope. The part to be viewed, cut or saved is specified by making use of a [[Zipper]]-inspired focus concept that is also leveraged by [[Contribution:wxHaskell]]. Such a focus parameter is included into the URL.

== Illustration ==

The server is set up as follows:

<syntaxhighlight lang=""haskell"" line>
main = runCGI $ handleErrors cgiMain
</syntaxhighlight>

We use a default error handler provided by the CGI library ''Network.CGI''. <syntaxhighlight lang=""haskell"" enclose=""none"">cgiMain</syntaxhighlight> is the main request handler, which is shown in the next section.
In the following we will demonstrate how a specific request is processed by the server.

=== Cutting an employee's salary ===

'''Scenario:''' After receiving an employee view the user clicks the cut button in the browser. The browser sends a request to the server using this URL:

''<nowiki>http://localhost/cgi-bin/HaskellCgi/company.cgi?focus=EmployeeFocus%20[1,0,0]%200&</nowiki>''
''<nowiki>action=Cut</nowiki>''

Because of the fact that the CGI library does not support any extraction of information out of the URL path (as opposed to the [[Contribution:happstack|happstack]] implementation), parameters are encoded as URL parameters:

* The action (here <syntaxhighlight lang=""haskell"" enclose=""none"">Cut</syntaxhighlight>)
* The focus (here <syntaxhighlight lang=""haskell"" enclose=""none"">EmployeeFocus [1,0,0]</syntaxhighlight>)

==== Main request handler ====

The main request handler is defined as follows:

<syntaxhighlight lang=""haskell"" line>
cgiMain :: CGI CGIResult
cgiMain =  do
    f <- getInput ""focus""
    let focusP = maybe CompanyFocus read f
    a <- getInput ""action""
    let actionP = maybe View read a
    chtml <- (doAction actionP) focusP
    let title = ""101companies WebApp""
    output $ renderHtml $ page title $ chtml
      where
        doAction ap = case ap of
          View  -> doView
          Cut   -> doCut
          Save  -> doSave
</syntaxhighlight>

We are working inside the <syntaxhighlight lang=""haskell"" enclose=""none"">CGI</syntaxhighlight> monad, which is provided by the CGI library. In lines 3 and 5 <syntaxhighlight lang=""haskell"" enclose=""none"">getInput :: MonadCGI m => String -> m (Maybe String)</syntaxhighlight> tries to get the focus and action input parameters as <syntaxhighlight lang=""haskell"" enclose=""none"">String</syntaxhighlight> values, which we process in lines 4 and 6. If a parameter is set, that is, <syntaxhighlight lang=""haskell"" enclose=""none"">getInput</syntaxhighlight> returns <syntaxhighlight lang=""haskell"" enclose=""none"">Just a</syntaxhighlight>, we <syntaxhighlight lang=""haskell"" enclose=""none"">read</syntaxhighlight> the String to values of <syntaxhighlight lang=""haskell"" enclose=""none"">Focus</syntaxhighlight> and <syntaxhighlight lang=""haskell"" enclose=""none"">Action</syntaxhighlight>. If a parameters is not set, we use a default focus respectively a default action.

We call <syntaxhighlight lang=""haskell"" enclose=""none"">doAction</syntaxhighlight>, which is defined in lines 11-14. Based on the <syntaxhighlight lang=""haskell"" enclose=""none"">Action</syntaxhighlight> value <syntaxhighlight lang=""haskell"" enclose=""none"">doAction</syntaxhighlight> returns one of the action functions <syntaxhighlight lang=""haskell"" enclose=""none"">doView</syntaxhighlight>, <syntaxhighlight lang=""haskell"" enclose=""none"">doCut</syntaxhighlight> or <syntaxhighlight lang=""haskell"" enclose=""none"">doSave</syntaxhighlight>. In this scenario the <syntaxhighlight lang=""haskell"" enclose=""none"">case</syntaxhighlight> expression matches on <syntaxhighlight lang=""haskell"" enclose=""none"">Cut</syntaxhighlight> and <syntaxhighlight lang=""haskell"" enclose=""none"">doAction</syntaxhighlight> returns <syntaxhighlight lang=""haskell"" enclose=""none"">doCut</syntaxhighlight>. <syntaxhighlight lang=""haskell"" enclose=""none"">cgiMain</syntaxhighlight> applies the focus to the action function in line 7. The action function returns an <syntaxhighlight lang=""haskell"" enclose=""none"">Html</syntaxhighlight> value, which is used in line 9 as the content of a new page, rendered to an HTML document and returned as the <syntaxhighlight lang=""haskell"" enclose=""none"">CGIResult</syntaxhighlight>.

==== Cutting the cookie ====

The function <syntaxhighlight lang=""haskell"" enclose=""none"">doCut</syntaxhighlight> performs the actual cut action on the company cookie:

<syntaxhighlight lang=""haskell"">
doCut :: Focus -> CGI Html
doCut f = do
    c <- tryReadCCookie
    let cutC = readCutWrite f c
    writeCCookie cutC
    return $ html f cutC
</syntaxhighlight>

The company cookie is read using <syntaxhighlight lang=""haskell"" enclose=""none"">tryReadCCookie</syntaxhighlight>:

<syntaxhighlight lang=""haskell"" line>
tryReadCCookie = liftM (fromMaybe company) $
                 readCookie ""companyCookie""
</syntaxhighlight>

This function tries to read the company cookie. If the client does not have this cookie stored, the default company is returned.
In line 4 <syntaxhighlight lang=""haskell"" enclose=""none"">doCut</syntaxhighlight> calls <syntaxhighlight lang=""haskell"" enclose=""none"">readCutWrite</syntaxhighlight>, which reads a company, department or employee based on the focus, cuts it and replaces it within the company (see [this!!Cut.hs] for details). In line 5 the manipulated company is written back into the cookie using <syntaxhighlight lang=""haskell"" enclose=""none"">writeCCookie</syntaxhighlight>:

<syntaxhighlight lang=""haskell"" line>
writeCCookie s = setCookie $
                 newCookie ""companyCookie"" $
                 show s
</syntaxhighlight>

==== Returning HTML ====

After the company data is saved in the cookie <syntaxhighlight lang=""haskell"" enclose=""none"">doCut</syntaxhighlight> calls <syntaxhighlight lang=""haskell"" enclose=""none"">html</syntaxhighlight> passing the focus and the new company:

<syntaxhighlight lang=""haskell"" line>
html :: Focus -> Company -> Html
html f = case f of
  CompanyFocus        -> companyHtml f
  (DeptFocus  )       -> deptHtml f
  (EmployeeFocus    ) -> employeeHtml f
  (ManagerFocus  )    -> employeeHtml f
</syntaxhighlight>

Based on the focus <syntaxhighlight lang=""haskell"" enclose=""none"">html</syntaxhighlight> calls one of the functions for composing HTML. In this scenario <syntaxhighlight lang=""haskell"" enclose=""none"">case</syntaxhighlight> matches on <syntaxhighlight lang=""haskell"" enclose=""none"">(EmployeeFocus    )</syntaxhighlight> and <syntaxhighlight lang=""haskell"" enclose=""none"">employeeHtml</syntaxhighlight> is called. This function composes HTML for the employee in question using various HTML combinators (see [this!!CompanyHtml.hs] for details).

== Architecture ==

In [this!!Main.hs] the server is set up using request handlers provided by [this!!Response.hs]. The save actions are performed by functionality hosted by [this!!Save.hs]. An algebraic datatype for actions is definied in [this!!Types.hs]. HTML pages are composed in [this!!CompanyHtml.hs].
The algebraic datatype for companies can be found in [this!!Company.hs]. [this!!Focus.hs] provides a focus datatype and functions on top of it. A sample company can be found in [this!!SampleCompany.hs]. [this!!Cut.hs] and [this!!Total.hs] provide cut and total functionality.

== Usage ==

* First you need a webserver. In the following we explain the steps for XAMPP<cite>xampp</cite>.
* Compile [this!!Main.hs] to a CGI file using GHC: <syntaxhighlight lang=""make"">ghc --make -o company.cgi Main.hs</syntaxhighlight>
* Place ''company.cgi'' in the folder ''cgi-bin'' of your XAMPP installation.
* Place [this!!style.css] in the folder ''htdocs'' of your XAMPP installation.
* Open ''http://localhost/cgi-bin/haskellCGI/company.cgi'' in a web browser to see the application's root view.
Compiling the project is scripted by the ''run'' target in [this!!Makefile.hs].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:XHTML]]
* [[uses::Language:CSS]]
* [[uses::Technology:CGI]]
* [[uses::Technology:GHC]]
* [[uses::Technology:XAMPP]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:tschmorleiz]]
* [[memberOf::Web application]]

",2013-06-12 14:57:37.26,2017-07-05 15:26:39.677344
Concept,Shell script,"== Headline ==

A script file for command-line processing

== Details ==

See also the concept of [[batch file]]s.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::http://en.wikipedia.org/wiki/Shell_script]]
* [[instanceOf::Concept]]

",2013-06-12 14:56:02.213,2017-07-04 13:44:57.320772
Concept,Class,"== Headline ==

An [[OO class]] or a [[type class]]

== Metadata ==

* [[isA::Language concept]]
* [[carries::Tag:Ambiguity]]",2013-06-12 14:53:27.262,2017-07-04 15:26:03.404367
Contribution,javaStringTemplate,"== Headline ==

Unparsing company structure using [[Technology:StringTemplate]] in [[Language:Java]]
==Illustration==
This contribution uses the StringTemplate API to unparse a company to a string build using templates from a StringTemplate file.
Templates can be compared to functions, which takes arguments and returns a string:
<syntaxhighlight lang=""Text"">
delimiters ""<"", "">""

company(c) ::=<<company ""<c.name>"" {
    <c.departments:{x|<x:department()>}; separator=""\n"">
}>>

department(d) ::=<<department ""<d.name>"" {
	<{manager <d.manager:employee()>}>
	<d.employees:{x|employee <x:employee()>}; separator=""\n"">
	<d.subDepartments:{x|<x:department()>}; separator=""\n"">
}>>

employee(e) ::=<<""<e.name>"" {
	address ""<e.address>""
	salary <e.salary>
}>>
</syntaxhighlight>

For further information on StringTemplates see [https://theantlrguy.atlassian.net/wiki/display/ST4/Templates here].

The class Unparsing.java loads the template file companyUnparsing.stg and puts the values from the company to the template methods:

<syntaxhighlight lang=""Java"">
public static String unparse(Company c) {
    //load template
    STGroup group = new STGroupFile(""templates"" + File.separatorChar
			+ ""companyUnparsing.stg"");
    //get right template method
	ST st = group.getInstanceOf(""company"");
	st.add(""c"", c);
	return st.render();
}
</syntaxhighlight>
==Usage==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==

* [[uses::Language:Java]]
* [[uses::Technology:StringTemplate]]
* [[developedBy::Contributor:mpaul138]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Unparsing]]
",2014-05-25 09:44:31.563,2017-07-05 15:30:19.008647
Concept,Client,"== Headline ==

A component accessing a service provided by a [[server]]

== Details ==

A client can be a part of a [[client-server architecture]].

== Metadata ==

* [[isA::Architectural component]]
* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Client_(computing)]]

",2013-06-12 14:53:28.075,2017-07-04 15:26:03.49
Concept,Closed serialization,"== Headline ==

Technology- and platform-dependent [[serialization]]

== Description ==

[[Closed serialization]] leverages a serialization format that is only well-supported by a specific technology on a specific platform. For instance, the serialization format may involve idiosyncratic aspects that make it hard to be used with diverse technologies on diverse platforms.

== Relationships ==

* See [[open serialization]] for comparison.

== Metadata ==

* [[isA::Serialization]]
* [[memberOf::Vocabulary:Computing]]
",2013-06-12 14:53:28.361,2017-07-04 15:26:03.629589
Concept,101contributor,"== Headline ==

A contributor to the [[101project]]

== Description ==

The most obvious type of [[101contributor]] is the developer, co-developer, or maintainer of a [[101contribution]], i.e., an implementation or a model of the [[system:Company]]. Such work on [[101contribution]]s includes indeed efforts on programming and documentation. Another type of [[101contributor]] is concerned with the infrastructure and foundation of the [[101project]] such as the [[101repo]], the [[101wiki]], and the [[101worker]].

== Metadata ==


* [[relatesTo::@contribution]]
*

",2013-06-12 14:52:49.166,2017-07-04 13:44:34.62735
Concept,101data,"== Headline ==

The Linked Data access point of the [[101project]]
== Description ==

Various data is synthesized from the [[101repo]] and the [[101wiki]]. All such data is provide online through [[101data]], more specifically through the following link:

http://data.101companies.org

The synthesis of all such data is coordinated by the [[101worker]] which executes various [[101module]]s. The data may be conveniently explored (discovered) with the [[101explorer]]. The data is organized in a way that applies Linked Data principles. In particular, both dumps and smaller slices are provided. JSON is used as the primary format for outputs of [[101module]]s, but RDF is also supported increasingly.

=== Data from the [[101repo]] ===

A systematic documentation effort is underway for [[Namespace:Module]].

Here are some pointers:

* [http://data.101companies.org/dumps/Wiki101Full.json '''101wiki dump'''] synthesized by [[Module:wiki2json]].
* [http://data.101companies.org/resources '''per-file resources'''] synthesized by various modules.
* [http://data.101companies.org/dumps/rules.json 101meta '''rules dump'''] synthesized by [[Module:rules101meta]].
* [http://data.101companies.org/dumps/matches.json basic '''metadata dump'''] synthesized by [[Module:matches101meta]].
* [http://data.101companies.org/dumps/predicates.json predicative '''metadata dump'''] synthesized by [[Module:predicates101meta]].

== Metadata ==
* ",2013-06-12 14:52:49.338,2017-07-04 13:44:34.688746
Contribution,javaGsonObjects,"== Headline ==

Working on [[Language:JSON|]] with Google [[Technology:Gson|Gson API]], mapping Json to a direct object representation
==Characteristics==

This contribution is using [[Language:JSON]] for storing the company structure and Gson API for parsing, unparsing and manipulating it the JSON.
==Relationships==

[[Contribution:javaGson]] is using the same Api and Features with aa different JSON mapping
==Usage==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==
* [[developedBy::Contributor:mpaul138]]
* [[uses::Language:JSON]]
* [[uses::Language:Plain Text]]
* [[uses::Language:Java]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Technology:Gson]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
",2014-06-02 16:15:38.651,2017-07-05 15:30:19.439694
Concept,101haskell,"== Headline ==

The [[Language:Haskell|Haskell]]-related sub-chrestomathy of the [[101project]]
== Descrciption ==

101haskell, as part of 101companies, collects tiny or small Haskell-based software systems (""contributions"") designed to serve the didactic purpose of a) presenting Haskell-based solutions to a number of general system requirements as defined by the [[101project]] and b) exercising alternative applicable programming techniques and technologies for the requirements. 101haskell is essentially the Haskell-specific sub-chrestomathy of the 101companies chrestomathy which covers dozens of programming and software languages. It happens that Haskell has played a special role in the 101com- panies project, i.e., Haskell has been used to bootstrap and demonstrate many capabilities of 101, e.g., the use of semantic properties, the use of metamodels and namespaces in content management, and the curation of Wikipedia and textbook links. (To a slighly reduced extent, this is also true for Java.)

All 101haskell contributions are readily linked to [[Language:Haskell]].

The contributions are also organized in themes as follows:

* [[Theme:Haskell introduction|Haskell introduction]]: Introduction to the Haskell language
* [[Theme:Haskell data|Haskell data]]: Data modeling techniques and variations
* [[Theme:Haskell potpourri|Haskell potpourri]]: Diverse feature and technology coverage
* [[Theme:Haskell genericity|Haskell genericity]]: Generic functional programming, e.g., with [[SYB]].

The contributions follow the overall feature model of the [[system:Company]].

Most of the contributions are closs-room-tested, e.g., in the [[Course:Lambdas in Koblenz]].
== Metadata ==

* [[sameAs::http://softlang.uni-koblenz.de/101haskell]]
* [[sameAs::https://github.com/101companies/101haskell]]
* ",2013-06-12 14:52:49.66,2017-07-04 13:44:34.743874
Contribution,scalaAkkaActors,"== Headline ==

This is an implementation of the basic spec using [[Language:Scala]] together with the [[Technology:Akka]] toolkit's actor library as well as Akka's Typed Actors.

== Motivation ==

This implementation uses Akka to show how a strong, static type system can serve to type check the inherently dynamic actor pattern by encapsulating actors behind typesafe proxy interfaces.

== Architecture ==

In ''Company.scala'' a regular Akka actor-based implementation is given as a reference. ''TypedCompany.scala'' shows how the message passing is hidden behind traits that provide a front from which Akka can construct a proxy object to interact with.

== Usage ==

This implementation uses sbt 0.10 as build tool, available at [http://github.com/harrah/xsbt/]. After installing sbt just change into the project directory and run
 <nowiki>sbt</nowiki>
to create the project, followed by
 <nowiki>sbt update</nowiki>
This should fetch any needed dependencies. After that you can compile the project by typing
 <nowiki>sbt compile</nowiki>
and then
 <nowiki>sbt test</nowiki>
to run the tests.

This contribution has been tested with Scala Version 2.9.0.1, [[Technology::Akka]] Version 1.1.3 and [[Technology::sbt]] Version 0.10.

== Issues ==

Akka is currently transitioning to version 2.0 which radically changes and simplifies the implementation of TypedActors. Upon release of Akka 2.0, a revision of this implementation is to be scheduled.

== Metadata ==
* [[uses::Languages:Scala]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Task parallelism]]
* [[uses::Technology:Scala]]
* [[uses::Technology:Akka]]
* [[uses::Technology:sbt]]
* [[uses::Technology:specs2]]
* [[developedBy::Contributor:DerDackel]]
",2013-06-12 14:58:50.395,2017-07-05 15:29:43.531673
Concept,Closure,"== Headline ==

A reference to a function with a referencing environment
== Illustration ==

As an example, take [[Language:Perl]]'s anonymous subroutines, which act as closures over all lexical variables in their scope:

<syntaxhighlight lang=""perl"">
#!/usr/bin/perl
use strict;
use warnings;

sub make_anonymous_sub {
    my $greeting = shift;   # lexical, block-scoped variable
    return sub {
        my $who = shift;
        print ""$greeting $who!\n"" # $greeting refers to above lexical variable
    };
    # $greeting goes out of scope here, but is still referenced by the returned
    # anonymous subroutine. The subroutine ""remembers"" its environment.
}

my $hello = make_anonymous_sub('Hello');
my $greet = make_anonymous_sub('Greetings');

$hello->('World'  ); # prints ""Hello World!""
$greet->('Terrans'); # prints ""Greetings Terrans!""
</syntaxhighlight>
== Citation ==

(http://en.wikipedia.org/wiki/Closure_(computer_science), 4 June 2013)

In computer science, a closure (also lexical closure or function closure) is a function or reference to a function together with a referencing environment—a table storing a reference to each of the non-local variables (also called free variables) of that function. [...]

The concept of closures was developed in the 1960s and was first fully implemented in 1975 [...] as a language feature in the Scheme programming language to support lexically scoped first-class functions.
== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Closure_(computer_science)]]
* [[memberOf::Vocabulary:Functional programming]]
* [[isA::Concept]]
",2013-06-12 14:53:28.466,2017-07-04 15:26:04.043685
Contribution,haskellTree,"== Headline ==

Data processing in [[Language:Haskell]] with [[functor]]s and [[foldable type]]s

== Characteristics ==

The data structure of a company is converted to a leaf-labeled [[rose tree]] which preserves the tree-like shape of the input but otherwise only represents the salary values at the leaves. Thus, names and other properties of departments and employees are not exposed. Such trees are declared as a [[functor]] and a [[foldable type]]. A [[bidirectional transformation]] is then employed to model a salary cut. That is, the company structure is converted to the leaf-labeled tree, then, in turn, to a list, on which to perform salary cut so that finally the modified salaries are integrated back into the company structure.

== Illustration ==

Consider the following sample company:

<syntaxhighlight lang=""haskell"">
sampleCompany :: Company
sampleCompany =
  Company
    ""Acme Corporation""
    [
      Department ""Research""
        (Employee ""Craig"" ""Redmond"" 123456)
        []
        [
          (Employee ""Erik"" ""Utrecht"" 12345),
          (Employee ""Ralf"" ""Koblenz"" 1234)
        ],
      Department ""Development""
        (Employee ""Ray"" ""Redmond"" 234567)
        [
          Department ""Dev1""
            (Employee ""Klaus"" ""Boston"" 23456)
            [
              Department ""Dev1.1""
                (Employee ""Karl"" ""Riga"" 2345)
                []
                [(Employee ""Joe"" ""Wifi City"" 2344)]
            ]
            []
        ]
        []
    ]
</syntaxhighlight>

When converted to a leaf-labeled rose tree, the sample company looks as follows:

<syntaxhighlight lang=""haskell"">
sampleTree :: LLTree Float
sampleTree =
  Fork [
    Fork [
      Leaf 123456.0,
      Leaf 12345.0,
      Leaf 1234.0],
    Fork [
      Leaf 234567.0,
      Fork [
        Leaf 23456.0,
        Fork [
          Leaf 2345.0,
          Leaf 2344.0]]]]
</syntaxhighlight>

Here is the corresponding conversion function; it is a get function in the terminology of bidirectional transformation:

<syntaxhighlight lang=""haskell"">
get :: Company -> LLTree Float
get (Company n ds) = Fork (map getD ds)
  where
    getD :: Department -> LLTree Float
    getD (Department n m ds es) =  Fork (   [getE m]
                                         ++ map getD ds
                                         ++ map getE es )
      where
        getE :: Employee -> LLTree Float
        getE (Employee     s) = Leaf s
</syntaxhighlight>

Because ''LLTree'' is a foldable type, it is trivial to further convert the tree to a plain list. Accordingly, salary cut can be expressed at the level of lists. The modified salaries are then put back into the tree with a put function, which we skip here for brevity.

<syntaxhighlight lang=""haskell"">
cut :: Company -> Company
cut c = put fs' c
  where
    fs = toList (get c)
    fs' = map (/2) fs
</syntaxhighlight>

== Architecture ==

There are these modules:

A data model for [[Feature:Hierarchical company]]

<file url=""src/Company/Data.hs""/>

A sample company

<file url=""src/Company/Sample.hs""/>

The implementation of [[Feature:Total]]

<file url=""src/Company/Total.hs""/>

The implementation of [[Feature:Cut]]

<file url=""src/Company/Cut.hs""/>

A bidirectional transformation

<file url=""src/Company/BX.hs""/>

Leaf-labeled rose trees

<file url=""src/Data/LLTree.hs""/>

Tests

<file url=""src/Main.hs""/>

The types of <file url=""src/Company/Data.hs""/> implement [[Feature:Closed serialization]] through Haskell's read/show.

== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[uses::Functor]]
* [[uses::Foldable type]]
* [[uses::Bidirectional transformation]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell genericity]]
",2013-06-12 14:57:48.177,2017-07-05 15:27:53.159722
Concept,101repo,"== Headline ==

The repository of the [[101project]]

== Description ==

[[101repo]] is a confederated (thus, virtual) repository in that it actually consists of many physical repositories. The confederated repositories may either cover some architectural component of the [[101project]] (such as the [[101worker]]) or individual [[101contribution]]s or collections thereof (such as [[101haskell]] or [[101simplejava]]).

== Download ==

A zip file with all contributions: http://data.101companies.org/zips/101repo.zip

== Metadata ==

* [[relatesTo::https://github.com/101companies/101repo/blob/master/.gitdeps]]
*

",2013-06-12 14:52:50.156,2017-07-04 13:44:34.885764
Concept,Style sheet language,"== Headline ==

A software language for presenting structured documents
== Metadata ==

* [[isA::Software language]]
* [[sameAs::http://en.wikipedia.org/wiki/Style_sheet_language]]
",2013-06-12 14:56:13.529,2017-07-04 15:26:26.1701
Concept,101simplejava,"== Headline ==

The 101simplejava repository as part of [[101repo]]

== Descrciption ==

See the corresponding repository description: [[Repository:101simplejava]]

== Metadata ==
* ",2013-06-12 14:52:50.318,2017-07-04 13:44:34.897582
Concept,State monad,"== Headline ==

A [[monad]] for [[state]]

== Illustration ==

Let us put to work the state monad in a simple interpreter.

There are these expression forms:

<syntaxhighlight lang=""haskell"">
-- Simple Boolean expressions
data Expr = Constant Bool | And Expr Expr | Or Expr Expr
  deriving (Eq, Show, Read)
</syntaxhighlight>

For instance, the following expression should evaluate to true:

<syntaxhighlight lang=""haskell"">
sample = And (Constant True) (Or (Constant False) (Constant True))
</syntaxhighlight>

Here is a simple interpreter, indeed:

<syntaxhighlight lang=""haskell"">
-- A straightforward interpreter
eval :: Expr -> Bool
eval (Constant b) = b
eval (And e1 e2) = eval e1 && eval e2
eval (Or e1 e2) = eval e1 || eval e2
</syntaxhighlight>

Now suppose that the interpreter should keep track of the number of operations applied. We count ''And'' and ''Or''as operations. Thus, the sample term should count as 2. We may incorporate counting into the initial interpreter by essentially passing state for the counter. (We could also synthesize the count as output; see the illustration of the [[writer monad]].) Thus:

<syntaxhighlight lang=""haskell"">
-- Interpreter with counting operations
eval' :: Expr -> Int -> (Bool, Int)
eval' (Constant b) i = (b, i)
eval' (And e1 e2) i =
  let
   (b1,i') = eval' e1 i
   (b2,i'') = eval' e2 i'
  in (b1 && b2, i''+1)
eval' (Or e1 e2) i =
  let
   (b1,i') = eval' e1 i
   (b2,i'') = eval' e2 i'
  in (b1 || b2, i''+1)
</syntaxhighlight>

Alas, the resulting interpreter is harder to understand. The threading of counts is entangled with the basic logic. By conversion to monadic style, we can hide counting except when we need increment the counter. We use the state monad here so that we really track the operations counter along evaluation; this would be useful if we were adding an expression form for retrieving the count. We could also be using the [[writer monad]], if we were only interested in the final count.

<syntaxhighlight lang=""haskell"">
-- Monadic style interpreter
evalM :: Expr -> State Int Bool
evalM (Constant b) = return b
evalM (And e1 e2) =
  evalM e1 >>= \b1 ->
  evalM e2 >>= \b2 ->
  modify (+1) >>
  return (b1 && b2)
evalM (Or e1 e2) =
  evalM e1 >>= \b1 ->
  evalM e2 >>= \b2 ->
  modify (+1) >>
  return (b1 || b2)
</syntaxhighlight>

We can also use do notation:

<syntaxhighlight lang=""haskell"">
-- Monadic style interpreter in do notation
evalM' :: Expr -> State Int Bool
evalM' (Constant b) = return b
evalM' (And e1 e2) = do
  b1 <- evalM' e1
  b2 <- evalM' e2
  modify (+1)
  return (b1 && b2)
evalM' (Or e1 e2) = do
  b1 <- evalM' e1
  b2 <- evalM' e2
  modify (+1)
  return (b1 || b2)
</syntaxhighlight>

The data type for the state monad looks like this:

<syntaxhighlight lang=""haskell"">
-- Data type for the state monad
newtype State s a = State { runState :: s -> (a,s) }
</syntaxhighlight>

Thus, a stateful computation is basically a function on state which also returns a value.

The corresponding instance of the [[type class]] ''Monad'' follows:

<syntaxhighlight lang=""haskell"">
-- Monad instance for State
instance Monad (State s)
  where
    return x = State (\s -> (x, s))
    c >>= f = State (\s -> let (x,s') = runState c s in runState (f x) s')
</syntaxhighlight>

The definition of ''return'' conveys that a pure computation preserves the state. The definition of ''bind'' conveys that the state is to be threaded from the first argument to the second. Finally, we need to define the state-specific operation ''modify'' for accessing state:

<syntaxhighlight lang=""haskell"">
-- Modification of state
modify :: (s -> s) -> State s ()
modify f = State (\s -> ((), f s))
</syntaxhighlight>

In modern Haskell, we also need to make ''State'' an instance of ''Applicative'' (for [[applicative functor]]s and ''Functor'' (for [[functor]]s). This code is omitted here, but see the 101repo.

== Metadata ==

* [[isA::Monad]]
* [[sameAs::http://www.haskell.org/haskellwiki/State_Monad]]
* [[relatesTo::http://cvs.haskell.org/Hugs/pages/libraries/mtl/Control-Monad-State.html]]
",2013-06-12 14:56:09.75,2017-07-04 15:26:25.621319
Concept,Code,"== Headline ==

the (source) code developed along [[programming]]

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:53:28.603,2017-07-04 15:26:04.171157
Concept,Concrete syntax,"== Headline ==

[[Syntax]] aimed at reading and writing as opposed to processing

== Metadata ==

* [[isA::Syntax]]
* [[relatesTo::Abstract syntax]]
* [[relatesTo::https://en.wikipedia.org/wiki/Abstract_syntax]]
",2013-06-12 14:53:33.019,2017-07-04 15:26:04.724333
Concept,Concrete syntax tree,"== Headline ==

A [[syntax tree]] showing concrete syntax

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Parse_tree]]
* [[memberOf::Vocabulary:Software language engineering]]
* [[relatesTo::Abstract syntax tree]]
* [[isA::Syntax tree]]
",2013-06-12 14:53:33.16,2017-07-04 15:26:04.831204
Contribution,hibernate,"== Headline ==

[[Object-Relational mapping]] for [[Language:Java|Java]] with [[Technology:Hibernate|Hibernate]]

== Motivation ==

[[Object-Relational mapping]] or [[persistence]] on the Java platform is exercised using
[[Technology:Hibernate]]. The primary data model for companies is a straightforward
object model for [[POJO]]s. A mapping is defined to associate a relational schema
with the classes. The mapping is specified in an [[Language:XML]] language and organized
in a per-class manner. For each class, properties and [[relationship]]s are specified by
the mapping. It is insightful to compare the object model and the mapping-implied relational
schema. It is also insightful to compare the latter schema with one that was ''natively''
designed from a relational database point of view; see [[Contribution:mySqlMany]]. In
particular, the object model and the implied relational schema are essentially ""optimized""
for downwards traversal of the company structure whereas a native relational schema would
rather provide foreign keys for upwards navigation (such as navigating from an employee to
its department or company).

== Illustration ==

Consider the following sketch of the class for departments:

<syntaxhighlight lang=""java"">
public class Department {
  private Long id;
  private String name;
  private Set<Employee> employees;
  private Set<Department> subdepts;

  public Long getId() { ... }
  private void setId(Long id) { ... }
  public String getName() { ... }
  public void setName(String name) { ... }
  public Set<Employee> getEmployees() { ... }
  private void setEmployees(Set<Employee> employees) { ... }
  public Set<Department> getSubdepts() { ... }
  private void setSubdepts(Set<Department> subdepts) { ... }
}
</syntaxhighlight>

Each persistent class must provide a property (i.e., a getter and a setter) for
an ''id'' that can serve as primary key in the database. Properties of
collection types (in fact, set types) proxy for one-to-many relationships.
Other than that, a persistent class is not much different from a regular
[[POJO]]-like class. (There are some private setters that would be missing
from a native object model. These setters are needed for object population.)

Consider the mapping file of class ''Department'' to table ''DEPARTMENT'':

<syntaxhighlight lang=""xml"">
<hibernate-mapping>
 <class name=""org.softlang.company.Department"" table=""DEPARTMENT"">
  <id name=""id"" column=""ID"">
    <generator class=""native"" />
  </id>
  <property name=""name"" />
  <set name=""employees"" cascade=""all"">
   <key column=""DEPT ID"" />
   <one-to-many class=""org.softlang.company.Employee"" />
  </set>
  <set name=""subdepts"" cascade=""all"">
   <key column=""DEPT ID"" />
   <one-to-many class=""org.softlang.company.Department"" />
  </set>
 </class>
</hibernate-mapping>
</syntaxhighlight>

All properties of the class are associated with the table.
That is, the ''id'' property is directly mapped to a primary key column
''ID'' of the ''DEPARTMENT'' table. Also, the ''name'' property is mapped
to a column of just that name---applying default mapping rules between
SQL types and Java types. Further, the ''employees'' property is
non-trivially associated with a foreign key ''DEPT ID'' of the
''EMPLOYEE'' table---which is only indirectly identified through the
mentioning of the ''Employee'' class; likewise for sub-departments.

Persistent objects are brought back to life as follows:

<syntaxhighlight lang=""java"">
public Company loadCompany(String name) {
  this.session = getSessionFactory().getCurrentSession();
  this.session.beginTransaction();
  List<?> result = this.session.createQuery(
    ""from Company where name = '"" + name + ""'"").list();
  for (Object o : result)
    return (Company)o;
  return null;
}
</syntaxhighlight>

That is, an [[Language:HQL]] query is executed to retrieve a company
that is identified by name; the Hibernate framework takes care of populating
the company object and all its sub-objects. If the requested company cannot be found,
then ''null'' is returned.

Finally, consider the Hibernate configuration:

<syntaxhighlight lang=""xml"">
<hibernate-configuration>
 <session-factory>
  <!-- Database connection settings. -->
  <property name=""connection.driver class"">org.hsqldb....
  <property name=""connection.url"">...
  <property name=""connection.username"">...
  <property name=""connection.password"">...
   <!-- Create the database schema, if needed; update otherwise -->
  <property name=""hbm2ddl.auto"">update</property>
  <!-- This part lists all the mapping files present in the project -->
  <mapping resource=""org/softlang/company/Company.hbm.xml"" />
  <mapping resource=""org/softlang/company/Department.hbm.xml"" />
  <mapping resource=""org/softlang/company/Employee.hbm.xml"" />
  ...
 </session-factory>
</hibernate-configuration>
</syntaxhighlight>

This configuration helps the runtime to connect to the right database, to find
all mapping files of interest, and to define some essential settings. For instance,
Hibernate is informed here that the database catalog is to be updated automatically
(see ''hbm2ddl.auto'' ... ''update'') upon starting a Hibernate session. In particular,
if the mapping-implied tables are not yet declared in the database, then they will
be created automatically.

== Architecture ==

Package ''org.softlang.company'' hosts the java object model for [[Feature:Hierarchical company]]
and the O/R-mapping files. Package ''org.softlang.features'' provides functionality for
[[Feature:Total]] and [[Feature:Cut]] as well as boilerplate code for
[[Feature:Persistence]]. The folder ''scripts'' contains SQL-scripts to create tables
(extracted from the hibernate log; there is no need to execute these statements), and to
populate the tables (needed in the workflow described below). The Hibernate configuration
file is located in the root dir. The HSQLDB database files are located in the data dir.

== Usage ==

Please follow these steps carefully.

=== Start from a clean setup ===

Upon checking out the implementation, you are clean.

The ""make clean"" target in the root dir should bring you back to a clean setup.

However, make sure the HSQL database server is shutdown as you go clean.

=== Build the project ===

This is an Eclipse project.

Everything is included.

The project should built fine within Eclipse without additional efforts.

=== Start the HSQL database server ===

* Go to the data dir of the distribution.
* Run the following command in the command line:
** > java -classpath ../lib/hsqldb.jar org.hsqldb.Server
** You can also send it to the background if you like.
** You can also go to the root dir and run ""make start-db"" instead.

=== Start the database monitor ===

* Go to the root dir of the distribution.
* Run the following command in the command line:
** > java -classpath lib/hsqldb.jar org.hsqldb.util.DatabaseManagerSwing
** You can also send it to the background if you like.
** You can also go to the root dir and run ""make start-gui"" instead.
* When the GUI pops up, make sure to select '''""HSQL Database Engine Server""'''.

=== Create tables ===

The tables are automatically created by trying to query them.

There is JUnit test ''Load'' in package ''org.softlang.tests'' which just does that.

Do ''refresh'' in the database monitor to see all tables in the left panel.

=== Populate tables ===

Suitable INSERT statements for population are to be found in scripts/PopulateTables.sql

Open the file and copy and paste its content over to the database monitor, and execute the statements.

You may want to double-check that the tables were populated.

To this end, enter a SQL statement such as ""select * from EMPLOYEE;"".

=== Proper testing ===

Several test cases are collected in package ''org.softlang.tests'':
* Run the JUnit test ''Check'' for checking for the ranking constraint. This test does not modify the state of the database. This test succeeds repeatedly (since even the cut transformation does not end up violating the constraint).
* Run the JUnit test ''Query'' for computing the salary total. This test does not modify the state of the database. This test succeeds repeatedly for as long as the computed total equals the baseline that is hard-coded in that test.
* Run the JUnit test ''TransformNoSave'' for cutting all salaries. This test does not modify the state of the database. This test succeeds repeatedly (since the totals before and after cut are compared without using any hard-coded baseline for total).
* Run the JUnit test ''TransformAndSave'' for cutting all salaries. This test modifies the state of the database and thus makes fail test ''Query''. This test succeeds repeatedly (since the totals before and after cut are compared without using any hard-coded baseline for total).

=== Finish off ===

Go to the database monitor and enter and execute ""shutdown;"".

Quit the database monitor.

You may also want to run ""make clean"" in the root dir to be clean for next time.

== Metadata ==

* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Language:SQL]]
* [[uses::Language:HSQLDialect]]
* [[uses::Language:HQL]]
* [[uses::Language:XML]]
* [[uses::Technology:Hibernate]]
* [[uses::Technology:HSQLDB]]
* [[uses::Technology:Make]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Mentoring]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Mapping]]
* [[developedBy::Contributor:Jürgen Starek]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]
* [[reviewedBy::Contributor:avaranovich]]

",2013-06-12 14:57:52.12,2017-07-05 15:28:02.212043
Concept,Condition,"== Headline ==

A condition on control-flow and others

== Details ==

Conditions occur in various contexts of programming and computing. A database query may involve conditions. Imperative procedural abstractions may involve control-flow condition, preconditions, postconditions, or assertions. Equations (say, rules) in functional programming or term rewriting may involve conditions for rule selection. A UML model may involve OCL constraints.

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[memberOf::Vocabulary:Programmming]]
* [[relatesTo::http://en.wikipedia.org/wiki/Condition_(SQL)]]
* [[relatesTo::http://en.wikipedia.org/wiki/Precondition]]
* [[relatesTo::http://en.wikipedia.org/wiki/Postcondition]]
* [[relatesTo::http://en.wikipedia.org/wiki/Assertion_(computing)]]
* [[isA::Concept]]

",2013-06-12 14:53:33.915,2017-07-04 15:26:05.000893
Concept,AST,"== Headline ==

[[Abstract syntax tree]]

== Metadata ==

* [[carries::Tag:Abbreviation]]
* [[isA::Concept]]

",2013-06-12 14:53:08.197,2017-07-04 15:25:57.585492
Contribution,hdbc,"== Headline ==

[[Database programming]] in [[Language:Haskell]] with [[Technology:HDBC]]

== Motivation ==

The implementation demonstrates [[database programming]] in [[Language:Haskell]] with [[Technology:HDBC]]. That is, [[Technology:HDBC]] is used to access a [[database]] with company data from within Haskell by means of embedded [[Language:SQL]]. In particular, simple [[Prepared statement|(prepared) SQL statements]] for totaling and cutting salaries are implemented in this manner. SQL query results are mapped to HDBC's Haskell data types for results; query results are fetched in a lazy manner. The connection to the [[Technology:MySQL]] database is realized by means of an [[Technology:ODBC]] back-end. Hence, the Haskell code for cutting and totaling salaries is independent from the concrete [[DBMS]]. The implementation is only dynamically typed in the sense that the database schema is not leveraged in any way to statically typecheck the Haskell code. See [[Contribution:haskellDB]] for a schema-ware approach to database programming in Haskell.

== Illustration ==

=== Connecting ===

In [this!!Main.hs] we connect to the MySQL database by using an ODBC driver and appropriate connection information:

<syntaxhighlight lang=""haskell"" source=""hdbc/Main.hs"">
let connString = ""Driver={MySQL ODBC 5.1 Driver};""
              ++ ""Server=localhost;""
              ++ ""Port=3306;""
              ++ ""Database=101companies;""
              ++ ""User=root;""
conn <- connectODBC connString
</syntaxhighlight>

=== Totaling ===

The function <syntaxhighlight lang=""haskell"" enclose=""none"">total</syntaxhighlight> defines a statement to total all salaries:

<syntaxhighlight lang=""haskell"" source=""hdbc/Total.hs"">
total :: IConnection conn => conn -> String -> IO Double
total conn cName = do
     stmt <- prepare conn $
        ""SELECT salary "" ++
        ""FROM employee, company "" ++
        ""WHERE company.name = ? and "" ++
        ""company.id = employee.cid""
     execute stmt [toSql cName]
     res <- fetchAllRows stmt
     return $ sum (map (fromSql.head) res)
</syntaxhighlight>

In lines 3-7 we use a prepared statement in which the company name placeholder is then replaced by the given name <syntaxhighlight lang=""haskell"" enclose=""none"">cName</syntaxhighlight>. The statement is executed and we use the lazy HDBC function <syntaxhighlight lang=""haskell"" enclose=""none"">fetchAllRows</syntaxhighlight> in line 9 to get all salaries, which we then sum up lazy to a <syntaxhighlight lang=""haskell"" enclose=""none"">Double</syntaxhighlight> value and return in line 10. That is, salaries are fetched one by one from the database.
We can now use the open connection to total all salaries:
<syntaxhighlight lang=""haskell"" source=""hdbc/Main.hs"">
let cName = ""meganalysis""
oldTotal <- total conn cName
</syntaxhighlight>

Functionality to cut all salaries uses an UPDATE statement instead of SELECT (see [this!!Cut.hs] for details).

== Architecture ==

[this!!Company.sql] and [this!!Meganalysis.sql] provide SQL-scripts to create and populate company tables. [this!!Total.hs] and [this!!Cut.hs] provide totaling and cutting functionality using SQL statements. [this!!Main.hs] collects test scenarios for totaling and cutting.

== Usage ==

=== Setup ===

We need a local database server.
In the following we explain the steps for XAMPP <cite>xampp</cite>.
We also need an SQL tool to create and populate tables.
In the following we explain the steps for the MySQL Workbench <cite>mysqlworkbench</cite>.

* Download and install XAMPP.
* Open the ""XAMPP Control Panel"" and start ""Apache"" and ""Mysql"".
* A local MySQL Server is now running:
** '''Server Host''': localhost       
** '''Port''': 3306            
** '''Username''': root            
** '''Password''': (empty password)
* Connect to the database in MySQL Workbench.
* Select the ""101companies"" schema or create it.
* Create company tables: Run the SQL script [this!!Company.sql].
* Populate company tables: Run the SQL script [this!!Meganalysis.sql].

=== Testing ===

* [this!!Main.hs] has to be loaded into GHCi.
* The <syntaxhighlight lang=""haskell"" enclose=""none"">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:SQL]] (MySQL dialect)
* [[uses::Technology:HDBC]]
* [[uses::Technology:MySQL]]
* [[uses::Technology:GHCi]]
* [[uses::Technology:ODBC]]
* [[uses::Technology:XAMPP]]
* [[uses::Technology:MySQL Workbench]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Persistence]]
* [[developedBy::Contributor:tschmorleiz]]

",2013-06-12 14:57:50.782,2017-07-05 15:27:59.252907
Concept,Abstract class,"== Intent ==

a [[class]] that cannot be directly instantiated but subclasses may be amenable to instantiation

== Metadata ==
* [[instanceOf::Class]]
",2013-06-12 14:53:09.215,2017-07-04 13:44:35.242989
Concept,After advice,"== Metadata ==
* [[instanceOf::Advice]]
",2013-06-12 14:53:11.886,2017-07-04 13:44:36.940813
Concept,Active record,"== Headline ==
== Metadata ==
* [[isA::Concept]]
",2013-06-12 14:53:10.839,2017-07-04 15:25:59.329821
Contribution,slicedLb,"== Headline ==

A [[Technology:LogicBlox]]-based implementation with a modular data model

== Motivation ==

This implementation refactors [[Contribution:basicLb]] to slice up schema and instance. That is, there are separate transactions for companies, departments, employees, and managers so that the schema and the instance are incrementally enhanced. It is important here that each incremental step enhances both schema and instance in the same transaction. In particular, the addition of a constraint that each company must have a manager cannot be committed with actually assigning managers to all existing departments in the same transaction. Such tedious modularization of the data model is practically of limited use, but it shows some extensibility characteristics of [[Technology:LogicBlox]].

== Architecture ==

When compared to [[Contribution:basicLb]], the schema and the instance are broken down into several ""transactions"" as presented in subdirectory ""data"". These transactions are represented as .lb files instead .logic files because declarations and deltas are to be combined in the transactions. Thus, the implementation consists of these files:
* ''data/companies.lb'': schema and instance slice for companies
* ''data/departments.lb'': schema and instance slice for departments
* ''data/employees.lb'': schema and instance slice for employees
* ''data/managers.lb'': schema and instance slice for managers
* ''total.logic'': the query for totaling salaries
* ''cut.logic'': the delta for cutting salaries
* ''Makefile'': script for running the implementation
* ''baseline'': baseline for regression testing

== Usage ==

Tested with [[Technology:LogicBlox]] 3.7.

Run ""make"" for a self-testing illustration.

== Metadata ==
* [[memberOf::Theme:Datalog basics]]
* [[uses::Language:DatalogLB]]
* [[uses::Technology:LogicBlox]]
* [[uses::Technology:Make]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:58.2,2017-07-05 15:29:47.45774
Contribution,haskellHxt,"== Headline ==

[[In-memory XML processing]] in [[Language:Haskell]] with [[Technology:HXT]]

== Motivation ==

The implementation demonstrates [[XML processing]] in [[Language:Haskell]] with [[Technology:HXT]]'s combinator [[library]]. Operations for totaling and cutting salaries are accordingly composed from combinators for XML queries and transformations. The concept of [[arrow]]s is demonstrated by the implementation
as HXT's combinator library essentially relies on arrows.

== Illustration ==

In the following we will demonstrate the construction of an arrow for [[Feature:Total]] and how one can run this arrow in IO.

=== Total ===

We define a query for totaling all company salaries:

<syntaxhighlight lang=""haskell"" source=""hxt/Total.hs"" line>
total :: ArrowXml a => a XmlTree Float
total = listA (deep $ hasName ""salary""
               >>>
               getChildren
               >>>
               getText)
        >>>
        arr (sum.(map read))
</syntaxhighlight>

In line 2 we query all salary nodes by using <syntaxhighlight lang=""haskell"" enclose=""none"">deep $ hasName ""salary"" :: ArrowXml a => a XmlTree XmlTree</syntaxhighlight>.
This is an arrow from <syntaxhighlight lang=""haskell"" enclose=""none"">XmlTree</syntaxhighlight> to <syntaxhighlight lang=""haskell"" enclose=""none"">XmlTree</syntaxhighlight>, say a filter for all salary nodes. In general  <syntaxhighlight lang=""haskell"" enclose=""none"">deep</syntaxhighlight> only finds non-nested results, but because of the fact that we are dealing with text nodes, which can not be nested, this is acceptable in this situation. In lines 2-6 the result of this arrow is then combined with <syntaxhighlight lang=""haskell"" enclose=""none"">getChildren >>> getText</syntaxhighlight> by using <syntaxhighlight lang=""haskell""  enclose=""none"">>>></syntaxhighlight>. The new arrow of type <syntaxhighlight lang=""haskell"" enclose=""none"">ArrowXml a => a XmlTree String</syntaxhighlight> returns the text of each salary node.

We then use ''Control.Arrow.ArrowList'''s <syntaxhighlight lang=""haskell"" enclose=""none"">listA</syntaxhighlight> in line 2 to collect all results from this arrow in an array, giving us a new arrow of type <syntaxhighlight lang=""haskell"" enclose=""none"">ArrowXml a => a XmlTree [String]</syntaxhighlight>.

In line 7 the result of this arrow is passed to the lifted version of <syntaxhighlight lang=""haskell"" enclose=""none"">(sum.(map read)) :: (Read c, Num c) => [String] -> c</syntaxhighlight>, which in this case is of type: <syntaxhighlight lang=""haskell"" enclose=""none"">ArrowXml a => a [String] Float</syntaxhighlight>.

The overall emerging arrow, giving us the total salary, is of type <syntaxhighlight lang=""haskell"" enclose=""none"">ArrowXml a => a XmlTree Float</syntaxhighlight>.

=== Running an arrow ===

When we combinate the arrow for reading a sample company from a XML file with the totaling arrow we get:
<syntaxhighlight lang=""haskell"" source=""hxt/Main.hs"">
readDocument [] ""sampleCompany.xml"" >>> total
</syntaxhighlight>

We use <syntaxhighlight lang=""haskell"" enclose=""none"">runX :: IOSArrow XmlTree c -> IO [c]</syntaxhighlight> for running this arrow in IO. The function returns all results of a given arrow in a list. Because we except this list to be a singleton list, we can write:

<syntaxhighlight lang=""haskell"" source=""hxt/Main.hs"">
[ttl] <- runX ( readDocument [] ""sampleCompany.xml""
                >>> total )
</syntaxhighlight>
<syntaxhighlight lang=""haskell"" enclose=""none"">ttl</syntaxhighlight> holds the total salary of a sample company.

== Architecture ==

[this!!Total.hs] provides the arrow for totaling salaries as described in the illustration section. [this!!Cut.hs] contains a transformation arrow for cutting salaries. [this!!Main.hs] collects test scenarios for totaling and cutting XML data provided by [this!!sampleCompany.xml]

== Usage ==

* [this!!Main.hs] has to be loaded into GHCi.
* The <syntaxhighlight lang=""haskell"" enclose=""none"">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:XML]]
* [[uses::Technology:GHCi]]
* [[uses::Technology:HXT]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:tschmorleiz]]
* [[memberOf::Theme:Haskell potpourri]]

",2013-06-12 14:58:06.11,2017-07-05 15:28:30.451528
Contribution,xsdClasses,"== Headline ==

Object/XML mapping with [[Language:CSharp|C#]] and [[Technology:.NET|]]'s [[Technology:xsd.exe|]]

== Motivation ==

X/O mapping within the .NET platform is exercised. The implementation is also motivated by the [[Contribution:jaxbComposition]] and aims to compare Java and .NET approaches.
[[Technology:xsd.exe]] is used to generate [[Language:CSharp|C#]] classes from the schema.
We show one of the xsd.exe usage scenarios, where C# object model generated from XSD schema is used to deserialize XML which match the same XSD. We apply .NET XML serialization API to support X/O mapping of the actual XML data. To this end we say that xsd.exe is used to map XSD/C# type systems, which are used by .NET XML serialization API to se/de-serialize the actual data.

== Architecture ==

Company.xsd is the schema for schema-first mapping. Company.cs is an output produced by applying xsd.exe to the schema file. Features.cs contains a [[partial class]] with [[Feature:Total]] and [[Feature:Cut]] implementations. In fact they are an exact copy of [[Contribution:csharp]]
SampleCompany.xml contains the serialized company and used in unit tests.

Both XSD and XML files are taken from [[Contribution:jaxbComposition]] with one minor change: types' names are capitalized to follow C# coding best practices.

== Usage ==

[[Technology:Visual Studio]] 2010 should be used to open a project file. The project itself is a class-library and compiles into a DLL. To run a project you must execute at least one unit test (or all at once).
Nunit GUI or other Visual studio extension (e.g. Resharper) should be used for executing unit tests.

The following command should be used if one wants to re-generate C# sources from xsd file:
xsd Company.xsd /classes /out:../

This implementation has been tested with C# Version 4.0 and NUnit Version 2.5.

== Metadata ==
* [[uses::Language:CSharp]]
* [[uses::Technology:csc.exe]]
* [[uses::Technology:.NET]]
* [[uses::Technology:NUnit]]
* [[uses::Technology:xsd.exe]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:avaranovich]]

",2013-06-12 14:59:19.409,2017-07-05 15:30:05.304145
Contribution,javawsClient,"== Headline ==

Client side of a [[Language:Java|Java]]-based web service

== Characteristics ==

This client consumes a [[Language:Java|Java]]-based web service for the [[system:Company]].

== Relationships ==

See [[Contribution:javawsServer]] for the server side.

== Usage ==

The implementation is provided as an Eclipse project.

The implementation has been tested with Java version 6.

== Metadata ==

* [[uses::Language:Java]]
* [[developedBy::Contributor:radkat]]

",2013-06-12 14:58:16.527,2017-07-04 13:46:11.181442
Contribution,ForkBomb,"== Headline ==

Just a test - DO NOT APPROVE!

== Warning ==

Do not execute any of the files below unless you want to crash your computer.

== Lorem Ipsum ==

<fragment url=""bomb.c""/>

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Fork_bomb]]
* [[relatesTo::https://en.wikipedia.org/wiki/Fork_bomb#Examples_of_fork_bombs ]]
* [[isA::Language concept]]

",2015-11-29 16:00:05.746,2017-07-04 15:26:43.766736
Contribution,javaVisitor,"== Headline ==

Modular programming with [[Visitor pattern|visitors]] in [[Language:Java|]]

== Characteristics ==

The present  implementation can be viewed as a variation on [[Contribution:javaInheritance]].
The [[Visitor pattern]] is applied to implement operations modularly.
To this end, two visitor interfaces are defined: one for ''void'' visitors (that
do not return any values), another one for ''returning'' visitors (with a designated
type parameter for the result type). Indeed, [[Feature:Total]] calls
for a returning visitor whereas [[Feature:Cut]] can be expressed as
a void visitor - if an [[impure computation]] is assumed.

== Illustration ==

The data model is implemented with [[class inheritance]]. For example Departments:

<fragment url=""src/main/java/org/softlang/company/model/Department.java/class/Department""/>

[[Feature:Closed serialization]] is implemented using [[Language:Java]] [[Technology:Object Streams]]:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany""/>

[[Feature:Total]] is implemented as a returning visitor:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

[[Feature:Cut]] is implemented as a void visitor:

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For basic OO without inheritance see [[Contribution:javaComposition]].

For basic OO with inheritance see [[Contribution:javaInheritance]].

For modular OO programming with static methods see [[Contribution:javaStatic]].

For use of Java reflection see [[Contribution:javaReflection]] (data processing) and [[Contribution:javaSyb]] (SYB-style generic programming).

For design patterns see [[Contribution:javaTemplate]] (template design pattern), [[Contribution:javaVisitor]] (visitor design pattern) and [[Contribution:javaExorcism]] (excessive illustration of design patterns).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.features.visitor for visitor patterns.
** org.softlang.company.model for implementations of [[Feature:Company]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:16.229,2017-07-05 15:28:55.034595
Contribution,javawsServer,"== Headline ==

A [[Language:Java|Java]]-based web service

== Characteristics ==

TBD

== Relationships ==

* See [[Contribution:javawsClient]] for a client that exercises the present server.
* The object model is inspired by [[Contribution:javaComposition]].

== Usage ==

The implementation is provided as an Eclipse project.

To run this service locally you need a JBoss v.5.0 installed

The implementation has been tested with Java version 6.

== Metadata ==

* [[uses::Language:Java]]
* [[uses::Technology:JBoss Application Server]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:radkat]]

",2013-06-12 14:58:16.863,2017-07-05 15:28:55.236912
Technology,JSON Schema,"== Headline ==

[[Language:JSON|JSON]]-based format to define schemas on [[Language:JSON|JSON]] for structural validation purposes.

== Illustration ==

See [[Web UI REST API]] for various examples.

== Metadata ==

[[uses::Language:JSON]]
[[similarTo::Language:XSD]]
[[implements::Schema-based validation]]
[[sameAs::http://json-schema.org/]]
[[sameAs::http://en.wikipedia.org/wiki/JSON#JSON_Schema]]",2014-08-28 03:17:15.832,2017-07-05 15:30:23.964428
Concept,Cookie,"== Headline ==

A [[client]]-side [[file]] storing data for the [[server]] of a [[web application]]

== Metadata ==
* [[memberOf::Vocabulary:Internet]]
* [[sameAs::http://en.wikipedia.org/wiki/HTTP_cookie]]
* [[isA::Concept]]

",2013-06-12 14:53:35.481,2017-07-04 15:26:05.421808
Contribution,pythonSyb,"== Headline ==

[[Generic programming]] in [[Language:Python]] with [[SYB]]

==Motivation==

This implementation shows [[generic programming]] in [[Language:Python]] using [[SYB]] style. The data model relies on (recursive) [[data composition]] alone. Generic Programming simplifies the traversal over nested data. Functions for total and cut are implemented as generic functions, they contain type specific cases for Employees. This simplifies functional style traversing in Python a lot. This library is a port of the haskell version of [[SYB]], but it addresses the same optimisations as those in haskell. For tree modification look at the implementation of cut and the implementation of total illustrates querys on a tree. The library depends on reflection in python to define <code>gmapQ</code> and <code>gmapT</code>.

== Illustration ==

The data model is adapted from [[Contribution:py3k]].

<syntaxhighlight lang=""python"" source=""101companies.py"">
@t(Employee)
def salary(e):
    return e.salary

total = everything(operator.add, 0 |mkQ| salary)
</syntaxhighlight>

This implementation of total takes the salary of every employee and folds them by adding.

== Relationships ==

* See [[Contribution:haskellSyb]] for the haskell version
* See [[Contribution:jsSyb]] for the javascript version
* See [[Contribution:coffeeSyb]] for the coffee script version

== Usage ==

The python file ""101companies.py"" requires python2.5-2.7. The output appears on the console.

<pre>
$ python 101company.py
399747.0
199873.5
</pre>

== Metadata ==

* [[uses::Language:Python]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mentoring]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:kevin-klein]]
* [[memberOf::Theme:Scrap your boilerplate]]
",2013-06-12 14:58:44.373,2017-07-05 15:29:37.904287
Contribution,haskellEngineer,"== Headline ==

Basic software engineering for [[Language:Haskell|]]

== Characteristics ==

The contribution demonstrates basic means of modularization (using Haskell's native [[module]] system), code organization (using where clauses for [[local scope]]), packaging (using [[Technology:Cabal]]), documentation (using [[Technology:Haddock]]), and unit testing (using [[Technology:HUnit]]). Other than that, only basic language constructs are exercised and a very limited feature set of the [[system:Company]] is implemented. The contribution is indeed more of a showcase for a pattern for modularization, code organization, packaging, documentation, and unit testing.

== Illustration ==

=== Modular organization ===

The contribution consists of the modules as listed in following file:

<file url=""haskellEngineer.cabal""/>

The modules implement features as follows:
* Company/Data.hs: [[Feature:Flat company]].
* Company/Sample.hs: A sample company.
* Company/Total.hs: [[Feature:Total]].
* Company/Cut.hs: [[Feature:Cut]].
* Main.hs: Unit tests for demonstration.

For instance, the implementation of [[Feature:Total]] takes this form:

<fragment url=""src/Company/Total.hs""/>

Please note how ""where clauses"" are used to organize the declarations in such a way that it is expressed what function is a helper function to what other function. The declaration of such [[local scope]] also implies that the helper functions do not feed into the interface of the module.

=== Haddock comments ===

[[Technology:Haddock]] comments are used to enable [[documentation generation]]. Consider again the module shown above. Haddock comments are used for the functions ''total'' and ''salaries'' but not for the remaining functions, as they are not exported and thus, they do not need to be covered by the generated documentation.

=== External dependencies ===

The contribution has the following dependencies as listed in <file url=""haskellEngineer.cabal""/>:

<syntaxhighlight lang=""haskell"">
build-depends: base >=4.4 && < 5.0, HUnit
</syntaxhighlight>

These packages serve the following purposes:
* base: This is the Haskell base package; a range of versions is permitted.
* HUnit: This is the package for [[Technology:HUnit]]; its version is not explicitly constrained.

=== HUnit testcases ===

The contribution is tested by the following test cases:

<fragment url=""src/Main.hs/pattern/tests""/>

For instance, the test case for serialization looks as follows:

<fragment url=""src/Main.hs/pattern/serializationTest""/>

== Relationships ==

* The present contribution is an ""engineered"" variation on [[Contribution:haskellStarter]]. That is, modularization, packaging, documentation, and unit testing was applied.
* Several other contributions derive from the present contribution more or less directly by demonstrating additional language or technology capabilities or implementing additional features of the [[system:Company]].

== Architecture ==

Modules to feature mapping:
* Company.Data: [[Feature:Flat company]]
* Company.Sample: A sample company
* Company.Total: [[Feature:Total]]
* Company.Cut: [[Feature:Cut]]
* Main: Unit tests for demonstration

== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md

== Metadata ==


* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[uses::Technology:HUnit]]
* [[uses::Technology:Haddock]]
* [[implements::Feature:Flat company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell introduction]]
* [[moreComplexThan::Contribution:HaskellStarter]]

",2013-06-12 14:57:42.521,2017-07-05 15:27:39.999857
Concept,Tool,"== Headline ==

A tool for software development

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Tool]]
* [[relatesTo::http://en.wikipedia.org/wiki/Programming_tool]]
* [[isA::Concept]]

",2013-06-12 14:56:29.633,2017-07-04 15:26:27.210864
Concept,Core,"== Headline ==

A core of a multi-core processor

== Metadata ==

* [[memberOf::Vocabulary:Hardware]]
* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Multi-core_processor]]
* [[isA::Concept]]

",2013-06-12 14:53:35.976,2017-07-04 15:26:05.577651
Concept,Auxiliary XMLware,"== Headline ==

A segment of [[XMLware]] serving an auxiliary role

== Description ==

When associating the technical space of XMLware with technologies, it is often the case that XML content and XML processing only serve an auxiliary role--as opposed to being in the focus of the technology. For instance, an [[O/R mapping technology]] focuses on [[objectware]] and [[tableware]], but XMLware may play an auxiliary role in representing mapping descriptions; see, for example, [[Technology:Hibernate]] or [[Technology:Entity Framework]].

== Metadata ==

* [[instanceOf::Technical segment]]

",2013-06-12 14:53:19.958,2017-07-04 13:44:37.919707
Concept,Before advice,"== Metadata ==
* [[instanceOf::Advice]]

",2013-06-12 14:53:23.057,2017-07-04 13:44:37.977872
Contribution,jdom,"== Headline ==

[[Language:XML|]] processing with [[Language:Java|]]'s [[Technology:JDOM|]] [[API]]

== Characteristics ==

See [[Contribution:dom]] for a general motivation for exercising
[[in-memory XML processing]]. The present implementation simply exercises
yet another DOM-like API.

== Illustration ==

The data model is implemented as xml files (sampleCompany.xml) that conform to a schema (Company.xsd).

[[Feature:Parsing]] is implemented by loading a [[Technology:JDOM]] Document object:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java/class/Parsing/method/parseCompany""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented using methods of [[Technology:JDOM]]'s Document class:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

* For DOM-like implementations of in-memory XML processing see [[Contribution:dom]], [[Contribution:jdom]] and [[Contribution:xom]].
* For a query-based implementation of in-memory XML processing see [[Contribution:xpathAPI]].
* For push-based XML processing see [[Contribution:sax]].
* For Object/XML mapping see [[Contribution:jaxbChoice]] (XSD with choice for different subunits), [[Contribution:jaxbComposition]] (XSD with object composition), [[Contribution:jaxbExtension]] (XSD with type extension) and [[Contribution:jaxbSubstitution]] (XSD with substitution groups).
* [[Contribution:jdomHttp]] uses HTTP-based access to the input data instead of going through the file system.

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[memberOf::Theme:XML programming]]
* [[uses::Language:Java]]
* [[uses::Language:XML]]
* [[uses::Language:XSD]]
* [[uses::Technology:JDOM]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:19.935,2017-07-05 15:29:02.487156
Concept,Bidirectional transformation,"== Headline ==

A transformation that can be applied in two directions

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Bidirectional_transformation]]

",2013-06-12 14:53:23.412,2017-07-04 13:44:37.985921
Contribution,jaxbSubstitution,"== Headline ==

[[Object-XML mapping]] for [[Language:Java]] and [[Language:XSD]] with [[Technology:JAXB]]

== Characteristics ==

See [[Contribution:jaxbComposition]] for the overall motivation of exercising
[[Technology:JAXB]] and for arguably a simple baseline of a schema and corresponding schema-derived classes. The present implementation represents an attempt to model different kinds of subunits of department (i.e., sub-departments and employees) as subtypes of a common supertype of subunits, where subtyping is meant here in the sense of XSD's substitution grouping mechanism. The result is rather complex at both ends.

== Illustration ==

The data model is implemented as xml files (sampleCompany.xml) that conform to a schema (Company.xsd). For example departments:

<syntaxhighlight lang=""xml"">
<xs:complexType name=""department"">
 <xs:complexContent>
  <xs:extension base=""subunit"">
   <xs:sequence>
    <xs:element ref=""name""/>
    <xs:element name=""manager"" type=""employee""/>
    <xs:element ref=""subunit"" maxOccurs=""unbounded"" minOccurs=""0""/>
   </xs:sequence>
  </xs:extension>
 </xs:complexContent>
</xs:complexType>
</syntaxhighlight>

Actual [[Language:Java]] classes will be generated using [[Technology:xjc]].

[[Feature:Open serialization]] is implemented using [[Technology:JAXB]] Un-/Marshaller:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented as static methods:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For DOM-like implementations of in-memory XML processing see [[Contribution:dom]], [[Contribution:jdom]] and [[Contribution:xom]].

For a query-based implementation of in-memory XML processing see [[Contribution:xpathAPI]].

For push-based XML processing see [[Contribution:sax]].

For Object/XML mapping see [[Contribution:jaxbChoice]] (XSD with choice for different subunits), [[Contribution:jaxbComposition]] (XSD with object composition), [[Contribution:jaxbExtension]] (XSD with type extension) and [[Contribution:jaxbSubstitution]] (XSD with substitution groups).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Open serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[memberOf::Theme:XML programming]]
* [[uses::Language:Java]]
* [[uses::Language:JAXB annotations]]
* [[uses::Language:XML]]
* [[uses::Language:XSD]]
* [[uses::Technology:JAXB]]
* [[uses::Technology:xjc]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:18.923,2017-07-05 15:29:01.258907
Concept,Bind function,"== Headline ==

the composition operation of a [[monad]]

== Metadata ==
* [[instanceOf::Common function]]
",2013-06-12 14:53:23.663,2017-07-04 13:44:38.267646
Concept,Functional OO programming,"== Headline ==

A combination of [[functional programming|functional]] and [[OO programming]]

== Metadata ==

* [[relatesTo::http://lambda-the-ultimate.org/node/2225]]
* [[relatesTo::http://www.haskell.org/haskellwiki/The_Monad.Reader/Issue3/Functional_Programming_vs_Object_Oriented_Programming]]
* [[relatesTo::https://leanpub.com/fp-oo]]
* [[isA::Concept]]

",2013-06-12 14:54:03.558,2017-07-04 15:26:11.35419
Concept,Functional programming language,"== Headline ==

A [[programming language]] for [[functional programming]]

== Metadata ==

* [[isA::Programming language]]
* [[supports::Functional programming]]

",2013-06-12 14:54:04.041,2017-07-04 15:26:11.594195
Concept,Boolean,"== Headline ==

The [[primitive data type]] of Booleans

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[memberOf::Vocabulary:Programming]]
* [[instanceOf::Primitive data type]]
",2013-06-12 14:53:23.921,2017-07-04 13:44:38.295374
Concept,Type signature,"== Headline ==

The type associated with an identifier

== Synonyms ==

Other terms may be used for referring to type signatures in the context of specific [[programming paradigm]]s and [[programming language]]s, e.g.:

* Function signature
* Type annotation
* Method signature ([[OO programming]])
* Function prototype ([[Language:CPlusPlus]])

== Description ==

=== Type signatures in functional programming ===

All expressions and all named functions for that matter have an associated type. When such a type is explicitly assigned (declared), then we speak of a type signature. When the type system of the language at hand permits inference, as in the case of [[Language:Haskell]], for example, then the type signature may also be omitted; one may nevertheless infer the type of the defined function.

== Illustration ==

=== Type signatures in Haskell ===

We investigate some type signatures of predefined functions at the Haskell prompt. To this end, we use the interpreter command '':t"" to ask for types of expressions. (User input at the Haskell prompt is prefixed by "">""; the result is shown in the subsequent line(s).)

Here is the type signature of Boolean negation.

<syntaxhighlight language=""haskell"">
> :t not
not :: Bool -> Bool
</syntaxhighlight>

The type signature declares that the function ''not'' takes an argument of type ''Bool'' and returns a result ''Bool''.

Hre is the type signature of conjunction (""&&"").

<syntaxhighlight language=""haskell"">
> :t (&&)
(&&) :: Bool -> Bool -> Bool
</syntaxhighlight>

By enclosing ""&&"" into parentheses, we deal with the fact that ""&&"" is an infix operator. The type signature declares that the function ""&&"" takes two arguments of type ''Bool'' and returns a result of type ''Bool''.

Types and function signatures for that matter may be polymorphic; this can be seen from the occurrence of type variables (starting in lower case). Let's look at some examples at the Haskell prompt.

The totally ''undefined'' function is of a completely polymorphic type.

<syntaxhighlight language=""haskell"">
> :t undefined
undefined :: a
</syntaxhighlight>

The identity function (''id'') is polymorphic with the same type variable for domain and range.

<syntaxhighlight language=""haskell"">
> :t id
id :: a -> a
</syntaxhighlight>

The projection function for the first component of a pair (''fst'') is polymorphic in the type of the two components of the pair; the result is of the same type as the first component.

<syntaxhighlight language=""haskell"">
> :t fst
fst :: (a, b) -> a
</syntaxhighlight>

The concatenation function (""++"") is polymorphic in the element type of the lists to be concatenated. That is, the function takes two lists of the same polymorphic type and returns a list of the same polymorphic type.

<syntaxhighlight language=""haskell"">
> :t (++)
(++) :: [a] -> [a] -> [a]
</syntaxhighlight>

In Haskell, type variables in type signatures may be constrained so that the variables are not universally polymorphic, but they can only be instantiated with types that are instances of appropriate [[type classe]]s (i.e., sets of types). Without going into detail here, let's look at some examples. Constraints precede argument and result types before an extra arrow ""=>"".

Equality is not universally polymorphic; it can be applied only to types which define equality; this is modeled by a type class (set of types) ''Eq''. For instance, strings can be compared for equality, but functions cannot.

<syntaxhighlight language=""haskell"">
> :t (==)
(==) :: Eq a => a -> a -> Bool
> ""foo"" == ""bar""
False
> not == not
... error ... no instance for (Eq (Bool -> Bool)) ...
</syntaxhighlight>

There are several number types (in Haskell). Thus, addition (""+"") is overloaded on the grounds of the following signature which refers to a type class ''Num''; we also show addition for two different number types: integer (''Int'') and floating point numbers (''Float'').

<syntaxhighlight language=""haskell"">
> :t (+)
(+) :: Num a => a -> a -> a
> 20.9+21.1
42.0
> 21+21
42
</syntaxhighlight>

=== Method signatures in Java ===

A [[static method]] in [[Language:Java]] for
computing the absolute value of a float may have the following type signature:

<syntaxhighlight lang=""java"">
public static float abs(float a)
</syntaxhighlight>

That is, the method takes an argument of type ''float'' for the value to be mapped to its absolute value. Further, the method's result type is ''float'' for the actual absolute value.

An [[instance method]] in [[Language:Java]] for withdrawing money from an account may have the following type signature:

<syntaxhighlight lang=""java"">
public boolean withdraw(float amount)
</syntaxhighlight>

That is, the method takes an argument of type ''float'' for the amount to be withdrawn. Further, the method's result type is ''boolean'' to be able to communicate whether withdrawal was successful or not.

== Citation ==

(http://en.wikipedia.org/wiki/Type_signature, 21 April 2013)

In computer science, a type signature or type annotation defines the inputs and outputs for a function, subroutine or method. A type signature includes at least the function name and the number of its arguments. In some programming languages, it may also specify the function's return type, the types of its arguments, or errors it may pass back.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Programming language]]
* [[sameAs::http://en.wikipedia.org/wiki/Type_signature]]
* [[similarTo::https://wiki.haskell.org/Type_signature]]

",2013-06-12 14:56:40.396,2017-07-04 13:45:01.348586
Contribution,jena,"
== Metadata ==
* [[developedBy::Contributor:tschmorleiz]]

",2013-06-12 14:58:20.236,2017-07-04 13:46:13.905848
Contribution,jsPrototyping,"== Intent ==

implementation in [[Language:JavaScript]] using [[Prototyping|prototyping]]

== Metadata ==
* [[developedBy::Contributor:mrackwitz]]

",2013-06-12 14:58:22.299,2017-07-04 13:46:14.350311
Concept,Immutable tuple,"== Headline ==

An order collection of values without basic operations for mutation

== Description ==

An immutable tuple is a data structure for ordered collections of elements of possibly different types. An immutable tuple can be manipulated in a basic sense like this:
* Projection: access the i-th component of the tuple.
* Construction: compose a tuple from the components.

Notably, there is no operation for replacing a component.

Tuples of length 2 are also called pairs.

Tuples of length 3 are also called triples.

== Illustration ==

=== Pairs in Haskell ===

Pairs are constructed as follows.

<syntaxhighlight language=""haskell"">
> (""four"",2)
(""four"",2)
> (4, 2)
(4,2)
</syntaxhighlight>

Projection is applied as follows.

<syntaxhighlight language=""haskell"">
> fst (""four"",2)
""four""
> snd (4, 2)
2
</syntaxhighlight>

There are designated tuple types:

<syntaxhighlight language=""haskell"">
> :t ('x', 'x')
('x', 'x') :: (Char, Char)
> :t ('x', True)
('x', True) :: (Char, Bool)
</syntaxhighlight>

Tuples of other lengths can be manipulated and typed accordingly.

== Metadata ==

* [[isA::List]]
* [[isA::Functional data structure]]
* [[isA::Immutable data type]]
* [[sameAs::https://en.wikipedia.org/wiki/Tuple]]
",2016-08-15 11:29:48.224,2017-07-04 15:26:44.243331
Technology,MPS,"== Headline ==

A metaprogramming system which allows projectional editing

== Metadata ==

* [[sameAs::https://www.jetbrains.com/mps/]]
* [[instanceOf::Metaprogramming system]]
* [[facilitates::Metaprogramming]]
* [[facilitates::Extensible Programming]]
* [[facilitates::Projectional Editing]]
* [[implements::MPS-Structure Language]]
* [[implements::MPS-Test Language]]
* [[implements::MPS-Base Language]]
* [[implements::MPS-Editor Language]]
* [[implements::MPS-Type System Language]]
* [[implements::MPS-Generator Language]]",2017-06-28 14:02:30.185418,2017-07-05 15:30:25.878818
Concept,Character,"== Headline ==

The [[primitive data type]] of characters

== Metadata ==

* [[instanceOf::Primitive data type]]
* [[memberOf::Vocabulary:Data]]
* [[memberOf::Vocabulary:Programming]]

",2013-06-12 14:53:26.856,2017-07-04 13:44:38.483624
Contribution,sqlServer,"== Headline ==

A relational database using [[Technology:SQL Server|]]

== Motivation ==

Please note: ''This implementation is prerequisite for
[[Contribution:ef]].'' A simple relational schema is used to
model the data part of the [[system:Company]]. In particular,
there are tables for companies, departments, employees (and
persons). Further, there are primary and foreign keys that represent
different types of relationships. For instance, departments associate
themselves with a company by a foreign key. The SQL-based
implementation also includes triggers--to represent
constrains/cardinality. Finally, there are SQL scripts covering the
operations for totaling and cutting salaries.  An implementation of
the query for the depth of departmental nesting is available as well,
but it is strikingly complex because of SQL's known issues with
recursion.

== Architecture ==

The following artifacts are used to create relational model for
101companies:

* Tables (TableName.table.sql)
* Primary keys (Name.pkey.sql)
* Foreign keys (Name.fkey.sql)
* Triggers (Name.trigger.sql)

The scripts/Post-Deployment folder contains script file executed after
the database schema was created to fill in the database with actual
101companies data.

== Usage ==

[[Technology:Visual Studio]] 2010 should be used to open a project
file. The deploy option should be used to create the database. The
target connection (in project properties) should be adjusted for the
local database server.

This contribution has been tested with SQL Server 2008 and Visual Studio 2010.

== Metadata ==
* [[uses::Language:SQL]]
* [[uses::Technology:SQL Server]]
* [[uses::Technology:Visual Studio]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Persistence]]
* [[developedBy::Contributor:avaranovich]]

",2013-06-12 14:58:58.793,2017-07-05 15:29:48.164201
Technology,Apache HTTP Server,"== Headline ==

Apache's [[web server]]

== Metadata ==

* [[instanceOf::Web server]]
* [[sameAs::http://httpd.apache.org/]]
* [[sameAs::http://en.wikipedia.org/wiki/Apache_http_server]]

",2013-06-12 15:01:03.846,2017-07-04 13:47:27.019432
Contribution,wp7,"== Headline ==

Basics of programming for Windows Phone 7

== Motivation ==

We show

* 1. Usage of MVC for developing UI.
* 2. Declarative data binding using XAML (xml-based language), essentially different supported types (One-Way and Two-Way) of binding.
* 3. Reactive programming model, where the model (in terms of MVC architecture) exposes observable properties.

== Illustration ==

* Properties support notification
* XAML binding
* Navigation between views

== Architecture ==

Every entity has a view represented as XAML file with the UI layout and data binding.

The project also references the company's model created as a Silverlight class library. This is necessary because WP7 projects can't reference regular C# projects -- Silverlight runtime used in WP7 projects is a more limited version of the CLR.

== Usage ==

In order to run the application Windows Phone 7 tools for Visual Studio 2010 have to be installed. At the time of writing this README, [http://www.microsoft.com/download/en/details.aspx?id=23854 January 2011 Update] is the most recent version.

[[Technology:Visual Studio]] 2010 should be used to open a project file.

The project should be compiled as a regular VS project and deployed into an emulator by clicking the right mouse button on the project file in VS and selecting ""deploy"" menu item. WP7 emulator will be started automatically with an application deployed.

This contribution has been tested with C# Version 4.0, Silverlight Version 3.5 and the WP7 SDK from January 2011.

== Metadata ==
* [[uses::Language:CSharp]]
* [[uses::Technology:csc.exe]]
* [[uses::Technology:.NET]]
* [[uses::Technology:Silverlight]]
* [[uses::Technology:Visual Studio]]
* [[uses::Technology:WP7 SDK]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Browsing]]
* [[developedBy::Contributor:avaranovich]]

",2013-06-12 14:59:12.319,2017-07-05 15:29:58.196191
Contribution,jsf,"== Headline ==

[[Web programming]] with [[Technology:JSF]]

== Motivation ==

This contribution covers the popular approach for [[web programming]] with [[Technology:JSF]]. [[Technology:JSF]] has a great support for the development of [[user interface]]s in the [[MVC]] context. This implementation is considered as a typical [[Language:Java]] based implementation with an amount of related and commonly used [[Technology|technologies]] like the [[Technology:Hibernate]] [[Feature:Persistence|persistence]] [[API]] and the [[Technology:GlassFish]] [[Application server|application server]].

== Illustration ==

The main architecture is based on the [[MVC]] pattern. [[Technology:JSF]] itself is focussed on the view and the controller. The [[user interface]] (view) is provided by [[Technology:Facelets|facelets]], which is based on the [[Language:XHTML]] dialect. A facelet contains the necessary [[GUI]] components for the specific view and connects them to the corresponding methods of the backend [[Technology:Java Bean|Java Beans]] (model). The data provided by the Java Beans is stored within a [[Technology:MySQL]] database, accessible through [[Technology:Hibernate]] with the help of [[DAO]]s (data access objects). The following sections provide a specific description of the involved parts.

=== GUI development ===

Facelets provide [[Language:HTML]] page generation. Since the XML tags for the JSF components can not be displayed by the browser, they have to be changed to corresponding HTML tags via component aliasing. The following example shows the JSF components needed for total and cut of a company:

<syntaxhighlight lang=""xml"" source=""jsf/jsf/web/company.xhtml"">
<h:outputLabel for=""total"" value=""Total:""/>
<h:outputText id=""total"" value=""#{companyBean.total}""/>
<h:commandButton value=""cut"" actionListener=""#{companyBean.cut()}""/>
</syntaxhighlight>

The three elements model the GUI components for the label ""Total"", the textfield for the [[Feature:Total]] and the button for the [[Feature:Cut]]. For example, the <syntaxhighlight lang=""xml"" enclose=""none""><h:commandButton .../></syntaxhighlight> is transformed into the HTML tag <syntaxhighlight lang=""xml"" enclose=""none""><input .../></syntaxhighlight>. The communication between [[Client|client]] and [[Server|server]] is provided by [[Technology:XMLHttpRequest]]. The needed [[Language:JavaScript]] files are automatically generated by the framework.

There is no need to implement the controller since it is provided by the [[Technology:Servlet API]] used within the JSF framework.

=== Managed Beans ===

The previously introduced command button ""cut"" invokes the corresponding method <syntaxhighlight lang=""java"" enclose=""none"">cut</syntaxhighlight> in the Java Bean <syntaxhighlight lang=""java"" enclose=""none"">CompanyBean</syntaxhighlight>. In context of JSF, such beans are called Managed Beans:

<syntaxhighlight lang=""java"" source=""jsf/jsf/src/java/company/beans/jsf/CompanyBean.java"">
@ManagedBean(name = ""companyBean"")
@RequestScoped
public class CompanyBean {

	...

	// This is the set of employees for the whole company (loaded previously by the method ""loadCompany(int id))"".
	private Set<Employee> employees;

	...

	// The method returns the current value for total of the loaded company.
	public double getTotal() {
		return total;
	}

	// The method cuts all employees of the loaded company.
	public void cut() {
		// Here we retrieve the session and begin the transaction with Hibernate.
		HibernateUtil.getSessionFactory().getCurrentSession().beginTransaction();
		DAOFactory daoFactory = DAOFactory.instance(DAOFactory.HIBERNATE);
		// The employeeDAO manages the database interaction.
		EmployeeDAO employeeDAO = daoFactory.getEmployeeDAO();

		// This loop iterates over the previously loaded employees and persists the new salary values.
		for (Employee employee : employees) {
			employee.setSalary(employee.getSalary() / 2);
			employeeDAO.makePersistent(employee);
		}

		total = total / 2;

		// Finally, we commit and close the transaction.
		HibernateUtil.getSessionFactory().getCurrentSession().getTransaction().commit();
	}

	...

}
</syntaxhighlight>

The class <syntaxhighlight lang=""java"" enclose=""none"">CompanyBean</syntaxhighlight> encapsulates the server-side business methods for the application. Responses for ''GET'' requests are provided by simple Java ''getters'' (e. g. <syntaxhighlight lang=""java"" enclose=""none"">getTotal()</syntaxhighlight>). ''POST'' requests are handled by corresponding methods (e. g. <syntaxhighlight lang=""java"" enclose=""none"">cut()</syntaxhighlight>) or by Java ''setters''.

The two [[Annotation|annotations]] for the class provide the following features:

<syntaxhighlight lang=""java"" enclose=""none"">@ManagedBean</syntaxhighlight> annotates, that the bean is a managed bean in the context of JSF. The attribute <syntaxhighlight lang=""java"" enclose=""none"">name</syntaxhighlight> provides the ''connection point'' useable within the facelets.

<syntaxhighlight lang=""java"" enclose=""none"">@RequestScope</syntaxhighlight> annotates, that every new request affecting the <syntaxhighlight lang=""java"" enclose=""none"">CompanyBean</syntaxhighlight> will create a new instance.

The [[Application server|application server]] [[Technology:GlassFish]] provides the necessary container for the beans and manages the application.

=== Persistence ===

The principle of the DAO pattern is the exchangeability of the persistence layer. This is provided by a <syntaxhighlight lang=""java"" enclose=""none"">DAOFactory</syntaxhighlight>, which instantiates the specific DAOs for the used persistence technology. In our case, the technology is [[Technology:Hibernate]]. According to the interface [this!!jsf/java/company/dao/interfaces/generic/GenericDAO.java GenericDAO.java], every implemented DAO provides the methods to load an entity either by id or by example, to load all entities corresponding to a specific class, or to persist a given entity.

<syntaxhighlight lang=""java"" source=""jsf/jsf/java/company/dao/interfaces/generic/GenericDAO.java"">
T findById(ID id, boolean lock);
List<T> findAll();
List<T> findByExample(T exampleInstance);
T makePersistent(T entity);
void makeTransient(T entity);
</syntaxhighlight>

The <syntaxhighlight lang=""java"" enclose=""none"">T</syntaxhighlight> stands for either the class <syntaxhighlight lang=""java"" enclose=""none"">Company</syntaxhighlight>, or the class <syntaxhighlight lang=""java"" enclose=""none"">Department</syntaxhighlight>, or the class <syntaxhighlight lang=""java"" enclose=""none"">Employee</syntaxhighlight>. The concrete methods for Hibernate are implemented in [this!!jsf/java/company/dao/hibernate/generic/GenericDAOHibernate.java GenericDAOHibernate.java]. This structure enables the Java Beans to perform data-affecting actions mostly independent from the persistence implementation:

<syntaxhighlight lang=""java"" source=""jsf/jsf/src/java/company/beans/jsf/CompanyBean.java"">
@ManagedBean(name = ""companyBean"")
@RequestScoped
public class CompanyBean {

	...

	public void cut() {
		// There has to be a transaction before creating hibernate requests.
		HibernateUtil.getSessionFactory().getCurrentSession().beginTransaction();

		// Retrieve the Hibernate DAOFactory for creating the employee DAO.
		DAOFactory daoFactory = DAOFactory.instance(DAOFactory.HIBERNATE);
		EmployeeDAO employeeDAO = daoFactory.getEmployeeDAO();

		// Cut all employees and save them.
		for (Employee employee : employees) {
			employee.setSalary(employee.getSalary() / 2);
			employeeDAO.makePersistent(employee);
		}

		// Calculate new total value.
		total = total / 2;

		// The transaction commits the data and ends.
		HibernateUtil.getSessionFactory().getCurrentSession().getTransaction().commit();
	}

	...

}
</syntaxhighlight>

There is an issue to be solved in the future: The transaction should be invoked by annotations or any automated transaction management instead of using corresponding methods with the help of <syntaxhighlight lang=""java"" enclose=""none"">HibernateUtil</syntaxhighlight>. If there is no Hibernate persistence, the calls will lead to exceptions.

== Architecture ==

The [[Technology:Facelets|facelets]] ([this!!jsf/web/company.xhtml company.xhtml], [this!!jsf/web/department.xhtml department.xhtml], [this!!jsf/web/employee.xhtml employee.xhtml]) are located in the folder ''jsf/web/''. There is a [this!!jsf/web/template.xhtml template.xhtml] as well, which arranges the main [[User interface|UI]] components of each view. The folder ''jsf/web/resources/css/'' contains the corresponding [[Language:CSS]] files.

The navigation between the different [[Technology:Facelets|facelets]] is managed with the help of the file ''faces-config.xml'', while the starting page and the class for the controller [[Technology:Servlet API|servlet]] is defined in the [this!!jsf/web/WEB-INF/web.xml web.xml].

The ''jsf/src/java/'' folder contains all relevant code for the realization of the main [[101feature|features]] (except [[Feature:Browsing]]):

* The ''hibernate.cfg.xml'' defines the necessary data for the [[DBMS]] connection and the [[Class|classes]] for [[Technology:Hibernate|hibernate]] [[Mapping|mapping]].

* The folder ''src/java/company/beans/jsf/'' contains the three [[Technology:Java Bean|beans]] ([this!!jsf/src/java/company/beans/jsf/CompanyBean.java CompanyBean.java], [this!!jsf/src/java/company/beans/jsf/DepartmentBean.java DepartmentBean.java], [this!!jsf/src/java/company/beans/jsf/EmployeeBean.java EmployeeBean.java]) necessary for handling the companies, departments and employees.

* The [this!!jsf/src/java/company/classes] folder contains the relevant [[Class|classes]] for the instantiation of the [[Feature:Hierarchical company]].

* The [this!!jsf/src/java/company/dao] folder contains all necessary classes and factories for the exchangablility of the data model corresponding to the [[DAO]] [[Design pattern|design pattern]].

== Usage ==

You need an sql-server to use this application. In this tutorial both will be handled by XAMPP (http://www.apachefriends.org/en/xampp.html).

You can use the ''company.sql'' and ''sampleCompany.sql'' of [[Contribution:html5tree]] for the jsf project.

* Download and install XAMPP
* Open the ""XAMPP Control Panel"" and start ""Apache"" and ""MySQL""
* Use the guideline of [[Contribution:mySqlMany]] up to ""Populate tables...""

After the database is running, follow the next steps:

* To start the application, you have to download the sources from github
* Open the project with [[Technology:NetBeans]] (http://netbeans.org/)
* Select the project, right click and ''run''
* The glassfish-server (and a browser window) with the application will start automatically

The project is implemented with [[Technology:NetBeans]] 7.0.1. You will need the full version with an installed [[Technology:GlassFish]] [[Application server]].

== Metadata ==

* [[uses::Language:Java]]
* [[uses::Language:XHTML]]
* [[uses::Language:CSS]]
* [[uses::Language:XML]]
* [[uses::Language:JavaScript]]
* [[uses::Technology:JSF]]
* [[uses::Technology:Hibernate]]
* [[uses::Technology:Java EE]]
* [[uses::Technology:NetBeans]]
* [[uses::Technology:GlassFish]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Web UI]]
* [[memberOf::Theme:Web programming]]
* [[memberOf::Theme:Web applications in Java]]
* [[developedBy::Contributor:tzimmer]]
",2013-06-12 14:58:26.496,2017-07-05 15:29:11.442553
Concept,Class inheritance,"== Metadata ==

* [[instanceOf::Inheritance]]
",2013-06-12 14:53:27.392,2017-07-04 13:44:38.505842
Concept,Client-server architecture,"== Headline ==

Division of an architecture into [[client]] and [[server]]

== Metadata ==

* [[instanceOf::Multi-tier architecture]]
* [[sameAs::http://en.wikipedia.org/wiki/Client-server_model]]

",2013-06-12 14:53:28.226,2017-07-04 13:44:38.556748
Concept,Model field,"==Headline==
Model fields are used in [[Language:JML]] to represent values

==Description==
In [[Language:JML]] model fields are used to ""assign"" an existing value to it or to add some variables to a model of the type JMLDatagroup to make the assignable function more easily. When the model field gets an assigned vaue it is updating it constantly in runtime. It gets initialized in the following way:
<syntaxhighlight lang=""java"">
//@ <visibility> model <Type of the field> <name>;
</syntaxhighlight>

==Illustration==
Here we will give a short introduction in the use of model fields. For an advanced use take a look at the [[Contribution:JML Specs]].
*Using a model field to represent a value, by using the ""represent""-clause. Note that it is easy to change the visibility of an private variable to public by using a model field:

<syntaxhighlight lang=""java"">
//Initialization of salary as an private variable
private int salary = 200;

//Initialization of the model field ""mainSalary""
//@ public model Int mainSalary;
//Value sync of mainSalary to salary
//@ private represents mainSalary = salary
</syntaxhighlight>
*Using a model field as an sort of a Datagroup. Variables are able to be ""added"" to an Datagroup by using the special ""in"" keyword directly after the initialisation of the variable. So this Datagroup can easily be used in a assignable-clause instead of all of the variables separately
<syntaxhighlight lang=""java"">
//Initialization of the specail ""JMLDataGroup""
//@ public model JMLDataGroup allEmployees;

//Initialization of the variables   //Adding an element to the Datagroup
public employee mentor;              //@ in allEmployees
public List<Employee> mentees;      //@ in allEmployees
</syntaxhighlight>",2015-12-14 04:31:28.41,2017-07-04 13:48:09.501562
Concept,Lexical syntax,"== Headline ==

[[Syntax]] concerned with [[lexical Token]]s of [[concrete syntax]]

== Details ==

The rest of the concrete syntax may also be referred to as [[context-free syntax]].

== Metadata ==

* [[isA::Syntax]]
* [[relatesTo::Context-free syntax]]
* [[relatesTo::https://en.wikipedia.org/wiki/Lexical analysis]]
",2017-05-03 16:33:01.527015,2017-07-05 12:20:08.412762
Contribution,antlrLexer,"== Headline ==

Lexer-based text processing with [[Technology:ANTLR|]]

== Characteristics ==

A lexer for companies is defined. The lexer is, of course, oblivious to the precise structure of companies. Simple queries are expressible nevertheless. That is, [[Feature:Total]] can be implemented by searching for number tokens.

== Illustration ==

The data model is implemented as plain textual files:

<fragment url=""inputs/sample.Company""/>

A Parser for [[Feature:Company]] will be generated by [[Technology:ANTLR]] using src/main/antlr/Company.g.

Tokens in a Company:

<syntaxhighlight lang=""antlr"">
COMPANY     : 'company';
DEPARTMENT  : 'department';
EMPLOYEE    : 'employee';
MANAGER     : 'manager';
ADDRESS     : 'address';
SALARY      : 'salary';
OPEN        : '{';
CLOSE       : '}';
WS          :   (' '|'\r'? '\n'|'\t')+;
STRING      :   '""' (~'""')* '""';
FLOAT       : DIGIT+ ('.' DIGIT+)?;

fragment DIGIT : ('0'..'9');
</syntaxhighlight>

[[Feature:Parsing]] is implemented using the generated Parser:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java/class/Parsing""/>

[[Feature:Total]] is implemented as [[Feature:Parsing]] with a semantic action (summing up numbers):

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

Test cases are implemented for all [[Namespace:Feature]]s. There is also an invalid input:

<fragment url=""inputs/nonSample.Company""/>

== Relationships ==
For an ANTLR4 version see [[Contribution:antlr4Lexer]].

For plain syntax checking with [[Technology:ANTLR]] see [[Contribution:antlrAcceptor]].

For lexer-based text processing in pure [[Language:Java]] see [[Contribution:javaScanner]].


For lexing/tokenization with [[Technology:ANTLR]] see [[Contribution:antlrLexer]].

For a custom made lexer in pure [[Language:Java]] see [[Contribution:javaLexer]].


For parsing with semantic actions with [[Technology:ANTLR]] see [[Contribution:antlrParser]].

For recursive-descent parsing in pure [[Language:Java]] see [[Contribution:javaParser]].

For parser combinators in pure [[Language:Java]] see [[Contribution:javaParseLib]].


For object/text mapping from test to companies with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].

For object/text mapping from text to trees with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].

== Architecture ==

The contribution follows a standardized structure:
* src/main/antlr contains grammar files for [[Technology:ANTLR]].
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.antlr for [[Technology:ANTLR]]-generated Java classes (post build).
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:57:01.411,2017-07-05 15:25:25.120416
Contribution,moose,"== Intent ==

an implementation in a Pharo Smalltalk with the Moose capabilities.

== Description ==

== Usage ==

1. Download and open Moose:
http://moosetechnology.org/download

2. Drag and drop load-101companies.st into Moose

3. Choose FileIn

== Metadata ==
* [[uses::Technology:Pharo]]
* [[uses::Language:Smalltalk]]

",2013-06-12 14:58:32.243,2017-07-04 13:46:17.681786
Contribution,pyDWH,"== Headline ==
Data Warehouse and reporting implementation for 101companies using [[Language:Python]].

== Characteristics ==
A Data Warehouse is a database used for reporting and data analysis. This [[Language:Python]] based contribution implements a so called ETL (Extract, Transform, Load), extracting data from multiple databases using the [[Database schema]] of [[Contribution:mySqlOneReporting]], transforming its data (i.e. converting salaries in different currencies) and loads them into a new Star [[Database schema]], tracking the history and removing unneeded data. Afterwards it generates charts based on the historic data.

== Illustration ==

The contribution consists of two parts:
* The ETL
* The chart generator

=== ETL ===
==== Extract ====
The contribution works with one or more source databases using the database schema as described in [[Contribution:mySqlOneReporting]].
The schema implements the additional dimensions gender, age (yet using day of birth - dob) and job role.


'' ERM of source database schema ''

[[media:https://raw.github.com/ydupont/101repo/master/wiki/feature dimensionality/img/src er.png]]

'' NOTE: The enum 'gender' can have the values 'UNDEFINED','FEMALE' and 'MALE' ''


In regular intervals the source databases are queried by the ETL. The extracted data will be loaded in source models.

'' Excerpt of etl/models.py ''
<syntaxhighlight language=""python"">
class SourceEmployee(object):
    """"""
    Represents a row data for src N.employee table:
    id, name, address, salary, manager, did, jid, gender, dob
    """"""
    def   init  (self, *args):
        assert len(args) == 9
        self.id = args[0]
        self.name = args[1]
        self.address = args[2]
        self.salary = args[3]
        self.manager = args[4]
        self.did = args[5]
        self.jid = args[6]
        self.gender = args[7]
        self.dob = args[8]
</syntaxhighlight>


==== Transform ====
Once all data has been extracted and loaded into models the transformation is taking place.
Transformation is needed to unify different data structures and to implement new attributes based on gathered information.
In this case salary currencies are being converted and the employees age is being calculated using the date of extraction as a reference point.

'' Excerpt of etl/transform.py ''
<syntaxhighlight language=""python"">
    def employees(self, source employees, cid):
        """"""
        Transforms source employees objects.
        """"""
        for employee in source employees:
            yield TargetEmployee(
                employee.id, # Reference use only, NOT INSERTED INTO DB
                employee.gender,
                employee.did,
                employee.jid,
                self.tid,
                cid,
                self. apply exchange rate(employee.salary),
                employee.manager,
                get age(employee.dob, self.today))
</syntaxhighlight>

Exemplary the function to calculate the employees age.

'' Excerpt of utils/  init  .py ''
<syntaxhighlight language=""python"">
def get age(dob, current date):
""""""
Returns person's age as of current date given the date of birth.
""""""
    try:
        bday = dob.replace(year=current date.year)
    except ValueError:
        # This happens if dob falls on 29th Feb and the current year is
        # not a leap year.
        bday = dob.replace(year=current date.year, day=dob.day - 1)
    if bday > current date:
        age = current date.year - dob.year - 1
    else:
        age = current date.year - dob.year
    return age
</syntaxhighlight>

==== Load ====
After transformation of the source data it a specific target model will be used.

'' Excerpt of etl/models.py ''
<syntaxhighlight language=""python"">
class TargetEmployee(object):
    """"""
    Represents a row data for tgt N.fact employee table:
    id, gender, did, jid, tid, cid, salary, manager, age
    """"""
    def   init  (self, *args):
        assert len(args) == 9
        self.id = args[0]
        self.gender = args[1]
        self.did = args[2]
        self.jid = args[3]
        self.tid = args[4]
        self.cid = args[5]
        self.salary = args[6]
        self.manager = args[7]
        self.age = args[8]
</syntaxhighlight>

And finally saved in a target database using a different data schema (star schema, only partially normalized).

'' ERM of target database schema ''

[[media:https://raw.github.com/ydupont/101repo/master/wiki/feature dimensionality/img/tgt er.png]]

'' NOTE: The enum 'interval' can have the values 'DAILY','MONTHLY' and 'YEARLY' ''

=== Chart generation ===

After running the ETL several times there is a sufficient dataset in the target database which references historic states of the source databases. Now the database can be used to create a chart with selected dimensions. The following class generates the needed SQL queries for chart generation based on the choices of the user.

'' Excerpt of chart/query.py ''
<syntaxhighlight language=""python"">
class Query(object):
    """"""
    Performs database queries to fetch all the required lines data in order to
    generate a chart.
    """"""
    def   init  (self, database, chart):
        self.database = database
        self.chart = chart

    def  split line range(self, line range):
        """"""
        Splits a line range into a tuple representing start and end of the
        range. This is typically used for age range.
        """"""
        line range = line range.split(""-"")
        if len(line range) > 1:
            (start, end) = line range
        else:
            start = line range[0]
            end = start
        return (start, end)

    def  get tables(self):
        """"""
        Returns a list of tables that forms the FROM clause for a query given
        the data type.
        """"""
        if self.chart['data type'] == JOBROLE:
            return ""fact employee e, dim time d, dim jobrole j""
        return ""fact employee e, dim time d""

    def  get time limit(self):
        """"""
        Returns a time limit string that forms the WHERE clause for a query
        given the x-axis inputs.
        """"""
        x unit = self.chart['x']['unit'].upper()  # x-axis for time
        x limit = self.chart['x']['limit']  # (start, end) or None
        time limit = ""e.tid = d.id AND d.time interval = '{}'"".format(x unit)
        if x limit is not None:
            time limit += "" AND d.date >= '{}' AND d.date <= '{}'"".format(
                x limit[0], x limit[1])
        return time limit

    def  get data limit(self, line range):
        """"""
        Returns a data limit string that forms the WHERE clause for a query
        given the data label.
        """"""
        data limit = """"
        data type = self.chart['data type']
        if data type == AGE:
            (start, end) = self. split line range(line range)
            data limit = ""e.age >= {} AND e.age <= {}"".format(start, end)
        elif data type == COMPANY:
            data limit = ""e.cid = {}"".format(int(line range))
        elif data type == GENDER:
            data limit = ""e.gender = '{}'"".format(line range.upper())
        elif data type == JOBROLE:
            data limit = ""e.jid = j.id AND j.name = '{}'"".format(line range)
        elif data type == MANAGER:
            data limit = ""e.manager = {}"".format(int(line range))
        return data limit

    def  get data select(self, context):
        """"""
        Returns a select statement that forms a joinable query given the
        unit for y-axis, i.e. median or total.
        """"""
        query = """"
        if self.chart['y']['unit'] == MEDIAN:
            query = (
                ""(SELECT date AS line{idx} date, ""
                ""AVG(salary) AS line{idx} value ""
                ""FROM ( ""
                ""SELECT t1.row, t1.salary, t1.date FROM ( ""
                ""SELECT IF(@prev != date, @rownum := 1, @rownum := @rownum + 1) AS row, @prev := date AS date, salary ""
                ""FROM ( ""
                ""SELECT d.date, e.salary ""
                ""FROM {tables} ""
                ""WHERE {data limit} AND {time limit} ""
                ""ORDER BY date, salary ""
                "") ordered, (SELECT @rownum := 0, @prev := NULL) reset ""
                "") AS t1 INNER JOIN ""
                ""( ""
                ""SELECT COUNT(*) AS total rows, d.date AS date ""
                ""FROM {tables} ""
                ""WHERE {data limit} AND {time limit} ""
                ""GROUP BY date ""
                "") AS t2 ""
                ""ON t1.date = t2.date ""
                ""AND t1.row >= t2.total rows / 2 AND t1.row <= ((t2.total rows / 2) + 1) ""
                "") median ""
                ""GROUP BY date ORDER BY date) line{idx} "")
        elif self.chart['y']['unit'] == TOTAL:
            query = (
                ""(SELECT d.date AS line{idx} date, ""
                ""SUM(e.salary) AS line{idx} value ""
                ""FROM {tables} ""
                ""WHERE {data limit} AND {time limit} ""
                ""GROUP BY date ORDER BY date) line{idx} "")
        return query.format(idx=context['idx'],
                            tables=context['tables'],
                            data limit=context['data limit'],
                            time limit=context['time limit'])

    def get data rows(self, line ranges):
        """"""
        Returns data rows for use in rendering the chart given the line ranges.
        """"""
        left column = ""COALESCE(""  # Header for first column
        right columns = """"  # Headers for subsequent columns
        joins = "" ""
        tables = self. get tables()
        time limit = self. get time limit()

        for idx, line range in enumerate(line ranges, 1):
            data limit = self. get data limit(line range)

            joins += self. get data select({
                'idx': idx,
                'tables': tables,
                'data limit': data limit,
                'time limit': time limit,
            })

            if idx > 1:
                joins += ""ON line{} date = line{} date "".format(idx - 1, idx)
            if idx != len(line ranges):
                joins += ""LEFT JOIN ""

            left column += ""line{} date"".format(idx)
            if idx < len(line ranges):
                left column += "", ""
            else:
                left column += "") AS date,""

            right columns += ""line{} value"".format(idx)
            if idx < len(line ranges):
                right columns += "", ""

        query = ""SELECT {} {} FROM"".format(left column, right columns) + joins
        logging.debug(""query={}"".format(query))

        try:
            self.database.cursor.execute(query)
        except ProgrammingError as err:
            raise QueryError(err)
        rows = self.database.cursor.fetchall()

        logging.debug(""rows={}"".format(rows))
        return rows
</syntaxhighlight>

Lastly a chart is being generated using the Google Charts API.


[[media:https://raw.github.com/ydupont/pyDWH/master/doc/sample chart.png]]

== Usage ==

=== Requirements ===
* Python >= 2.7.1
* MySQL-python (http://sourceforge.net/projects/mysql-python)
* Jinja2 >= 2.7 (http://jinja.pocoo.org/)
* MySQL Client >= 5.0
* MySQL Server >= 5.0
* Internet access (at least while opening the generated charts)

=== Preparation ===
<pre>
mysql> CREATE DATABASE src 1;
mysql> CREATE DATABASE src 2;
mysql> CREATE DATABASE tgt;
</pre>
NOTE: Grant privileges in case you don´t want to use the root user.
You can use ""n"" source databases.

Load source- and target database schema:
<pre>
$ mysql -u <USERNAME> -p -h <HOSTNAME> src 1 < sql/schema/src.sql
$ mysql -u <USERNAME> -p -h <HOSTNAME> src 2 < sql/schema/src.sql
$ mysql -u <USERNAME> -p -h <HOSTNAME> tgt < sql/schema/tgt.sql
</pre>

Populate the databases on your own or using the sample data:
<pre>
$ mysql -u <USERNAME> -p -h <HOSTNAME> src 1 < sql/sample/src 1/src 1 1.sql
$ mysql -u <USERNAME> -p -h <HOSTNAME> src 2 < sql/sample/src 2/src 2 1.sql
</pre>

=== Execute ===

Please check the configuration file (config.cfg) and adjust it according to your environment. You may add new ""source"" sections.

In case you want to use the ETL in production mode you will have to install a new cronjob with the following command:
<pre>
$ python run etl.py -c config.cfg
(please ensure that you are in the proper directory)
</pre>

In case you want to use the ETL in simulation mode you will have to change the according options in the configuration files and run the ETL as well as the database updates manually. You can do it with the packaged sample SQL files:
<pre>
$ mysql -u <USERNAME> -p -h <HOSTNAME> src 1 < sql/sample/src 1/src 1 1.sql
$ mysql -u <USERNAME> -p -h <HOSTNAME> src 2 < sql/sample/src 2/src 2 1.sql
$ python run etl.py -c config.cfg

$ mysql -u <USERNAME> -p -h <HOSTNAME> src 1 < sql/sample/src 1/src 1 2.sql
$ mysql -u <USERNAME> -p -h <HOSTNAME> src 2 < sql/sample/src 2/src 2 2.sql
$ python run etl.py -c config.cfg

........................................

$ mysql -u <USERNAME> -p -h <HOSTNAME> src 1 < sql/sample/src 1/src 1 10.sql
$ mysql -u <USERNAME> -p -h <HOSTNAME> src 2 < sql/sample/src 2/src 2 10.sql
$ python run etl.py -c config.cfg
</pre>

Now you can generate a chart. I.e.:

<pre>
$ python generate chart.py -x time -X yearly -y salary -Y median -d company -D 1,2
</pre>

=== Command-Line parameters ===
<pre>
$ generate chart.py --help
  Usage: generate chart.py [options]
  Script to generate chart using data from target database.
  Examples:
  generate chart.py -x time -X yearly -y salary -Y median -d age -D 26-35,36-45
  generate chart.py -x time -X 2000,2010 -y salary -Y median -d jobrole -D ""Project Manager""
  See generate chart.py --help for supported options.

  Options:
    -h, --help                      show this help message and exit
    -c CONFIG, --config=CONFIG      Configuration file
    -v, --verbose                   Show verbose output
    -x X AXIS, --x axis=X AXIS      Label for x-axis: time
    -X X OUTPUT, --x output=X OUTPUT    Unit for x-axis. time: daily, month, yearly or range
                                2000,2003. Range for time is separated by comma to
                                allow daily range such as -X 2000-01-01,2003-08-20
    -y Y AXIS, --y axis=Y AXIS              Label for y-axis: salary
    -Y Y OUTPUT, --y output=Y OUTPUT    Unit for y-axis. salary: median or total
    -d DATA TYPE, --data type=DATA TYPE Data type for plotted lines: age, company, gender,
                                jobrole or manager
    -D DATA OUTPUT, --data output=DATA OUTPUT
                    Unit for plotted lines. age: comma-separated list of
                                ages or ranges, company: comma-separated list of IDs,
                                gender: comma-separated list (male,female, undefined
                                or empty for all), jobrole: comma-separated list of
                                job roles, manager: comma-separated list (true,false)

$ run etl.py --help
  Usage: run etl.py [options]
  Script to perform extract, transform and load flow.
  Example: run etl.py --config=config.cfg --verbose
  See run etl.py --help for supported options.

  Options:
    -h, --help                      show this help message and exit
    -c CONFIG, --config=CONFIG      Configuration file
    -v, --verbose                   Show verbose output
</pre>

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Median]]
* [[implements::Feature:History]]
* [[implements::Feature:Conversion]]
* [[implements::Feature:Dimensionality]]
* [[developedBy::Contributor:ydupont]]
* [[relatesTo::https://developers.google.com/chart/]]
* [[relatesTo::http://sourceforge.net/projects/mysql-python]]
* [[relatesTo::http://jinja.pocoo.org/]]
* [[uses::Language:Python]]
* [[uses::Language:SQL]]
* [[uses::Technology:MySQL]]
* [[uses::Technology:Google Charts]]
* [[uses::Technology:Jinja2]]
* [[uses::Language:JavaScript]]
* [[uses::Language:HTML]]

",2013-07-07 22:34:08.817,2017-07-05 15:30:11.738321
Contribution,jdomHttp,"== Headline ==

Process [[Technology:HTTP]]-accessible [[Language:XML]] data with [[Language:Java]]'s [[Technology:JDOM]] API

== Characteristics ==

See [[Contribution:jdom]] for a baseline which processes local XML instead of HTTP-accessible XML data.

== Relationships ==

[[Contribution:jdom]] accesses the XML input data through the file system instead of using HTTP.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Language:XML]]
* [[uses::Technology:JDOM]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[varies::Contribution:jdom]]
* [[developedBy::Contributor:rlaemmel]]

",2014-04-23 18:41:29.803,2017-07-05 15:30:17.178092
Contribution,haskellLogging,"== Headline ==

[[Logging]] in [[Language:Haskell|]] with non-[[monad|monadic]] code

== Characteristics ==

Starting from a straightforward family of functions for cutting salaries, the concern of logging the salary changes is incorporated into the functions such that the function results are enriched by the log entries for salary changes. This code is relatively verbose and implies poor abstraction. In particular, functionality for composing logs is scattered all over the functions. Ultimately, such a problem must be addressed with [[monad]]s.

== Illustration ==

Salary changes can be tracked in logs as follows:

<syntaxhighlight lang=""haskell"">
type Log = [LogEntry]

data LogEntry =
     LogEntry {
       name :: String,
       oldSalary :: Float,
       newSalary :: Float
     }
  deriving (Show)
</syntaxhighlight>

Here are a few entries resulting from a salary cut for the sample company:

<syntaxhighlight lang=""haskell"">
[LogEntry {name = ""Craig"", oldSalary = 123456.0, newSalary = 61728.0},
 LogEntry {name = ""Erik"", oldSalary = 12345.0, newSalary = 6172.5},
 LogEntry {name = ""Ralf"", oldSalary = 1234.0, newSalary = 617.0},
 LogEntry {name = ""Ray"", oldSalary = 234567.0, newSalary = 117283.5},
 LogEntry {name = ""Klaus"", oldSalary = 23456.0, newSalary = 11728.0},
 LogEntry {name = ""Karl"", oldSalary = 2345.0, newSalary = 1172.5},
 LogEntry {name = ""Joe"", oldSalary = 2344.0, newSalary = 1172.0}]
</syntaxhighlight>

Given a log, the median of salary deltas can be computed as follows:

<syntaxhighlight lang=""haskell"">
log2median :: Log -> Float
log2median = median . log2deltas

log2deltas :: Log -> [Float]
log2deltas = sort . map delta
  where
    delta entry = newSalary entry - oldSalary entry
</syntaxhighlight>

The above log reduces to the following median:

<syntaxhighlight lang=""haskell"">
-6172.5
</syntaxhighlight>

[[Feature:Cut]] is implemented in logging-enabled fashion as follows:

<syntaxhighlight lang=""haskell"">
cut :: Company -> (Company, Log)
cut (Company n ds) = (Company n ds', log)
  where
   (ds', logs) = unzip (map cutD ds)
   log = concat logs
   cutD :: Department -> (Department, Log)
   cutD (Department n m ds es)
     = (Department n m' ds' es', log)
     where
       (m',log1) = cutE m
       (ds', logs2) = unzip (map cutD ds)
       (es', logs3) = unzip (map cutE es)
       log = concat ([log1]++logs2++logs3)
       cutE :: Employee -> (Employee, Log)
       cutE (Employee n a s) = (e', log)
         where
           e' = Employee n a s'
           s' = s/2
           log = [ LogEntry {
                     name = n,
                     oldSalary = s,
                     newSalary = s'
                 } ]
</syntaxhighlight>

Thus, all functions return a regular data item (i.e., some part of the company) and a corresponding log. When lists of company parts are processed with map, then the lists of results must be unzipped (to go from a list of pairs to a pair of lists). In the function for departments, multiple logs arise for parts a department; these intermediate logs must be composed.

== Relationships ==

* See [[Contribution:haskellComposition]] for the corresponding contribution that does not yet involve logging. The data model is preserved in the present contribution, but the functions for cutting salaries had to be rewritten since the logging concern crosscuts the function.
* See [[Contribution:haskellWriter]] for a variation on the present contribution, which leverages a writer [[monad]], though, for conciseness and proper abstraction.

== Architecture ==

There are these Haskell modules:

* Company.hs: the data model reused from [[Contribution:haskellComposition]].
* Cut.hs: the combined implementation of [[Feature:Cut]] and [[Feature:Logging]].
* Log.hs: types and functions for logs of salary changes needed for [[Feature:Logging]].
* Main.hs: demonstration of all functions.

The contribution relies on the hackage package [http://hackage.haskell.org/packages/archive/hstats/latest/doc/html/Math-Statistics.html hstats].

== Usage ==

See [[Contribution:haskellComposition]].

The ""Makefile"" provides an extra ""install"" target for installing the hackage package ''hstats''.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Logging]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[instanceOf::Theme:Haskell introduction]]

",2013-06-12 14:58:37.023,2017-07-05 15:29:28.824991
Concept,Experiment,"",2015-12-14 06:56:04.173,2017-07-04 13:48:09.661288
Concept,Combinator,"== Headline ==

a [[Function]] serving some style of composition

== Details ==

In the context of functional programming, the term ''combinator'' was probably used first for certain fundamental functions such as the SKI combinators or the Y combinator. Eventually, the term ''combinator'' came also into use for referring to functions of a library that supports some domain such as parsing, pretty printing, or traversal. In this context, combinators are often [[higher-order function]]s or functions operating on a domain-specific [[abstract data type]].

== Metadata ==
* [[memberOf::Vocabulary:Functional programming]]
* [[isA::Concept]]

",2013-06-12 14:53:29.041,2017-07-04 15:26:04.293094
Contribution,xmlReader,"== Headline ==

[[Pull-based XML parsing]] in [[Language:CSharp|C#]] with [[Technology:XmlReader|]]

== Motivation ==

[[XML processing]] with XmlReader which provides a lower-level abstraction over the XML file structure. This implementation retains more complexity than other solutions (e.g. [[Contribution:csharpLinqToXml]]) but benefits performance.

== Illustration ==

For totaling salaries we read XML file and check for ""Salary"" nodes.
For cutting, we go through the source XML file in a streaming fashion (by using Read() method of XmlReader which reads a current line of an input XML stream and goes to the next one) and write the content as-is into an output string. We maintain a valid XML structure, even temporary it is represented as a string type.

Every time we reach the ""Salary"" node, we read the content (which is the actual salary) as a decimal number, cut it, and write into an output string.

When the end of the source file is reached, we use XmlTextWriter to produce a new XML file from the raw XML content in a string variable.

== Architecture ==

Features.cs contains static methods where [[Feature:Cut]] and [[Feature:Total]] are implemented.
FeaturesTest.cs contains the relates unit tests.

== Usage ==

[[Technology:Visual Studio]] 2010 should be used to open a project file.
The project itself is a class-library and compiles into a DLL. To run a project you must execute at least one unit test (or all at once).
Nunit GUI or other Visual studio extension (e.g. Resharper) should be used for executing unit tests.

== Metadata ==

* [[developedBy::Contributor:avaranovich]]
* [[memberOf::Theme:XML programming]]
* [[uses::Language:CSharp]](C#): Programming language used for all code (Version 4.0)
* [[uses::Technology:csc.exe]]: C# compiler (Version 4.0)
* [[uses::Technology:.NET]]: Framework used to execute compiled code (Version 4.0)
* [[uses::Technology:NUnit]]: Unit testing framework used for testing (Version 2.5)
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]

",2013-06-12 14:59:16.965,2017-07-05 15:30:03.031925
Concept,XML programming,"== Metadata ==

* [[instanceOf::Programming domain]]
",2013-06-12 14:56:58.033,2017-07-04 13:45:02.453954
Concept,XML language,"== Headline ==

A software language that uses XML for representation

== Metadata ==

* [[isA::Software language]]
",2013-06-12 14:56:56.804,2017-07-04 15:26:31.885384
Concept,Currying,"== Headline ==

Transformation of a function on multiple arguments to take one at a time

== Illustration ==

In [[Language:Haskell]], functions are typically in curried form. Consider, for example, the signature of addition:

<syntaxhighlight lang=""haskell"">
> :t (+)
(+) :: Num a => a -> a -> a
</syntaxhighlight>

Curried form is generally convenient as it directly enables [[partial application]]. For instance, we can define an increment function, just by passing one argument to addition:

<syntaxhighlight lang=""haskell"">
inc :: Int -> Int
inc = (+) 1
</syntaxhighlight>

If we were to define addition in uncurried form, then this would look as follows:

<syntaxhighlight lang=""haskell"">
add :: Num a => (a, a) -> a
add (x,y) = x+y
</syntaxhighlight>

We can easily perform currying:

<syntaxhighlight lang=""haskell"">
add' :: Num a => a -> a -> a
add' x y = add (x,y)
</syntaxhighlight>

In fact, the currying transformation can be represented by the following [[higher-order function]]:

<syntaxhighlight lang=""haskell"">
curry :: ((a, b) -> c) -> a -> b -> c
curry f a b = f (a,b)
</syntaxhighlight>

(We would need such a curry(ing) function for each number of arguments.) Thus, we can express the currying transformation as follows:

<syntaxhighlight lang=""haskell"">
add'' :: Num a => a -> a -> a
add'' = curry add
</syntaxhighlight>

== Relationships ==

See [[uncurrying]] for the dual transformation.

== Citation ==

(http://en.wikipedia.org/wiki/Currying, 18 May 2013)

In mathematics and computer science, currying is the technique of transforming a function that takes multiple arguments (or a tuple of arguments) in such a way that it can be called as a chain of functions, each with a single argument (partial application). It was originated by Moses Schönfinkel [...] and later re-discovered by Haskell Curry.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Currying]]
* [[isA::Concept]]

",2013-06-12 14:53:36.349,2017-07-04 15:26:06.913852
Contribution,xquery,"== Headline ==

[[XML processing]] with [[Language:XQuery]]

== Architecture ==

There are two implementations of [[Feature:Cut]]:
* cut.xq: uses XQuery w/o update facility
* cut.uf.xq: uses XQuery w/ update facility

== Usage ==

See the Makefile for running some tests.

Versions of Saxon and BaseX are included in the code repository for this implementation.

Tested with this version of BaseX:

<pre>
$ java -cp basex/BaseX61.jar org.basex.BaseX -h
BaseX 6.1; DBIS, University of Konstanz
Usage: BaseX [-dioqsvVxz] [query] [-c]
  [query]    query file
  -c<cmd>    database commands
  -d         debug mode
  -i<file>   XML input
  -o<file>   output file
  -q<expr>   query expression
  -s<pars>   serialization parameters
  -v/V       show (all) process info
  -w         wrap query result to xml
  -z         skip query output
</pre>

Tested with this version of Saxon:

<pre>
$ java -jar saxon/saxon9he.jar
No source file name
Saxon-HE 9.2.1.2J from Saxonica
Usage: see http://www.saxonica.com/documentation/using-xsl/commandline.html
Options:
   ...
</pre>

Tested on the following machines:

<pre>
	Darwin ... 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE I386 i386
		(both test-saxon and test-basex)
	Darwin ... 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT
		(both test-saxon and test-basex)
2011; root:xnu-1504.15.3~1/RELEASE I386 i386
	Linux ... 2.6.32-21-generic #32-Ubuntu SMP Fri Apr 16 08:09:38 UTC 2010 x86 64 GNU/Linux
		(both test-saxon and test-basex-unix)
	Microsoft Windows XP [Version 5.1.2600]
		(both with and without update facility)
</pre>

The project can be opened with Eclipse for convenience.

== Metadata ==
* [[uses::Language:XML]]
* [[uses::Language:XQuery]]
* [[uses::Technology:Saxon]]: Free XQuery
* [[uses::Technology:BaseX]]: Free XQuery incl. update facility
* [[uses::Technology:Java SE]]: Version 6 needed for BaseX
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[developedBy::Contributor:rlaemmel]]
* [[developedBy::Contributor:grammarware]]
* [[memberOf::Theme:XML programming]]

",2013-06-12 14:59:18.932,2017-07-05 15:30:05.063231
Contribution,callref-rascal,"== Headline ==
Created during SoTeSoLa

== Metadata ==

",2013-06-12 14:57:06.194,2017-07-04 13:45:05.964886
Contribution,prologStarter,"== Headline ==

a simple [[Language:Prolog]]-based implementation

== Motivation ==

We demonstrate the most basic style of logic programming for modeling company structure and basic operations.

== Architecture ==

There is a predicate total/2 to total all salaries in a company.
There is a predicate cut/2 to cut all salaries in half.
There is a predicate depth/2 to compute the nesting depth of departments.

== Usage ==

See the Makefile for running the tests.

The code has been tested with SWI-Prolog 5.10.1.

== Metadata ==

* [[uses::Language:Prolog]]
* [[uses::Technology:SWI-Prolog]]
* [[memberOf::Theme:Starter]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:38.958,2017-07-04 13:46:19.762338
Contribution,prologSyb,"== Intent ==

Prolog-based implementation with SYB support

== Motivation ==

TBD

== Metadata ==
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:39.188,2017-07-04 13:46:19.776532
Concept,Combinator library,"== Headline ==

A domain-specific library of [[function]] combinators

== Illustration ==

* See [[Technology:HughesPJ]] for a [[Language:Haskell]]-based combinator library for [[unparsing]]
* See [[Technology:Parsec]] for a [[Language:Haskell]]-based combinator library for [[parsing]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Combinator_library]]
* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Functional programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:29.167,2017-07-04 13:44:38.793459
Contribution,py3k,"== Headline ==

A basic Python 3-based implementation

== Motivation ==

Python is a dynamically typed scripting language, mainly focussed on OO-programming but nonetheless offering some tools to also provide basic functional programming capabilities. Python also prides itself on it's ""Batteries included"" philosophy which means that the language's standard library shouldcover all possible basic use cases of the language. This implementation takes the basic OO approach, implementing Company, Dept and Employee as classes, though due to python's dynamic approach, no inheritance hierarchy is needed (we could do this using dictionaries and classes in fact aren't that much more). Using Python's Pickle serialization module, the whole model can be serialized without further adaptation. The model implements structural equality, but only for the purpose of unit testing serialization.

== Architecture ==

All classes and methods are contained in ''Company.py''. Tests are in ''CompanyTest.py''.
Serialization is implemented by the pickle module.

== Usage ==

Make sure to grab Python 3 from python.org, then from the project directory execute

 <nowiki>python3 CompanyTest.py -v</nowiki>

to run the test cases

== Metadata ==
* [[uses::Language:Python]]
* [[uses::Technology:Py3k]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:DerDackel]]
",2013-06-12 14:58:39.493,2017-07-05 15:29:31.143663
Concept,Command,"== Headline ==

a directive to a computer program

== Metadata ==
* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Command_(computing)]]
* [[isA::Namespace:Concept]]

",2013-06-12 14:53:29.323,2017-07-04 15:26:04.384527
Contribution,zend,"== Headline ==

[[Web programming]] in [[Language:PHP]] with the [[Technology:Zend framework]]

== Motivation ==

[[Language:PHP]] is one of the most commonly used [[Software language|languages]] for [[web programming]]. To get a more structured and valuable implementation, it is reasonable to choose a PHP based [[web-application framework]]. The [[Technology:Zend framework]] provides a good infrastructure and a large amount of pre-assembled components and supports form-based web development. The use of PHP suggests an [[Language:SQL]] [[DBMS]] like [[Technology:MySQL]], to allow persistence. The connection to the DBMS is provided by the database adapter included in the Zend framework.

== Illustration ==

This section is divided into three parts. The first part describes the [[Mapping|mapping]] of the entities, the second part describes the implementation of [[Feature:Total]] and [[Feature:Cut]] and the third part describes the development of the [[GUI]].

=== [[Object-Relational mapping]] ===

[[Feature:Persistence]] is provided by a [[Technology:MySQL]] [[DBMS]] (see [[Contribution:mySqlMany]]) and the ''zend adapter'' for this specific database. The adapter is generated automatically according to the corresponding entries in the file [this!!application/configs/application.ini application.ini]:

<source lang=""php"">
resources.db.adapter = ""PDO MYSQL""
resources.db.params.host = ""localhost""
resources.db.params.username = ""root""
resources.db.params.password = """"
resources.db.params.dbname = ""test""
</source>

The entities of the company are mapped by specific [[Class|classes]], which are extended by the class ''Zend Db Table Abstract''.  They create simple associative arrays out of the declared tables. If we assume, that associative arrays are objects, we can call this process [[Object-Relational mapping]]. To map a table, it is only necessary to specify the name of the designated table within the corresponding class. The class <source lang=""php"" enclose=""none"">Application Model DbTable Employee</source> in [this!!zend/application/models/DbTable/Employee.php Employee.php] illustrates the mapping of the employee table:

<source lang=""php"" source=""zend/application/models/DbTable/Employee.php"">
class Application Model DbTable Employee extends Zend Db Table Abstract
{

    protected $ name = 'employee';

    ...

}
</source>

=== Feature implementation ===

The features [[Feature:Total]] and [[Feature:Cut]] are both implemented in the model [this!!application/models/DbTable/Employee.php Employee.php] in the sense of [[MVC]]. The reason is, that these methods affect only employees, depend on the corresponding company or department. The following example shows the calculation of the [[Feature:Total]] value for a company with a given ''$id''.

<source lang=""php"" source=""zend/application/models/DbTable/Employee.php"">
class Application Model DbTable Employee extends Zend Db Table Abstract
{

    ...

    public function getTotalForCompany($id) {
        // cast the id to integer
        $id = (int)$id;
        // get all employees from the database
        // - with the given company cid
        // - as an array composed of associative arrays for each employee
        $rows = $this->fetchAll('cid = ' . $id);

        $total = 0;

        // walk through the array and add every salary
        foreach ($rows as $row) {
            $total += $row->salary;
        }
        return $total;
    }

}
</source>

=== GUI ===

It is possible to create the GUI using a native [[Language:HTML]]-[[Language:PHP]] web page. The other way is to create simple forms by using the extension <syntaxhighlight lang=""php"" enclose=""none"">Zend Form</syntaxhighlight>. [[Technology:Zend framework]] offers a great support for form based websites. That means, that it is possible to generate forms with almost no [[Language:HTML]] code, because the web-application framework automatically generates the website out of the pre-defined PHP objects. The objects are initialized and added to the specific form in a developer-defined order. The following example shows the company form. The different GUI components are explained in the comments:

<source lang=""php"" source=""zend/application/forms/Company.php"">
class Application Form Company extends Zend Form
{
    var $departmentList;

    public function init()
    {

        // The field helps to identify the form within the application.
        $this->setName('company');

        // The hidden field keeps the company id for further use.
        $id = new Zend Form Element Hidden('id');
        $id->addFilter('Int');

        // The name field contains the name of the company.
        $name = new Zend Form Element Text('name');
        $name ->setLabel('Name')
                ->setRequired(true)
                ->addFilter('StripTags')
                ->addFilter('StringTrim')
                ->addValidator('NotEmpty');

        // The button invokes the function to save a new name.
        $submit = new Zend Form Element Submit('save');
        $submit ->setAttrib('id', 'submitbutton')
                ->setOptions(array('class' => 'button'));

        // The following list shows all subdepartments of the company.
        $this->departmentList = new Zend Form Element Select('departments');
        $this->departmentList ->setLabel('Departments');
        $this->departmentList->setRegisterInArrayValidator(false);

        // The button is pressed to select a department out of the list.
        $select = new Zend Form Element Submit('select');
        $select ->setAttrib('id', 'submitbutton');

        // The textfield shows the total value.
        $total = new Zend Form Element Text('total', array(""readonly"" => ""readonly""));
        $total  ->setLabel('Total');

        // The button is used to cut the company.
        $cut = new Zend Form Element Submit('cut');
        $cut->setAttrib('id', 'submitbutton');

        // There is a block created in the GUI for each array added in the following way:
        $this->addElements(array($id, $name, $submit));
        $this->addElements(array($this->departmentList, $select));
        $this->addElements(array($total, $cut));
    }
    ...
}
</source>

If the controller wants to fill in some data into the total (<syntaxhighlight lang=""php"" enclose=""none"">$total</syntaxhighlight>) field, it must call the method <syntaxhighlight lang=""php"" enclose=""none"">populate</syntaxhighlight> of the previously initialized form. If the array parameter of the method contains a field <syntaxhighlight lang=""php"" enclose=""none"">total</syntaxhighlight>, the textfield with the identifier ""total"" is filled automatically with the value contained in the array:

<source lang=""php"" source=""zend/application/forms/Company.php"">
...

$c = $company->getCompany($id);
$c[total] = $employee->getTotalForCompany($id);

$form->populate($c);

...
</source>

== Architecture ==

* The entry point for the application is the generated [this!!zend/public/index.php index.php] in the [this!!zend/public] folder. This folder contains the [[Language:CSS|style sheets]], too.
* All relevant code for the functionality is located in the [this!!zend/application] folder.
* The architecture is strictly based on the [[MVC]]-pattern. There are different folders for the models ([this!!zend/application/models]), the views ([this!!zend/application/views]) and the controllers ([this!!zend/application/controllers]). This is required, because the [[framework]] automatically identifies the classes and its concerns with the help of these namespaces.
* The forms are located in the [this!!zend/application/forms] folder.

== Usage ==

This project needs a running [[Technology:MySQL]]-database. We recommend [[Technology:XAMPP]]. It also needs a [[Web browser]].
You can use the ''company.sql'' and ''sampleCompany.sql'' of [[Contribution:mySqlMany]] for this project.

* Download and install [[Technology:XAMPP]].
* Open the ""XAMPP Control Panel"" and start ""Apache"" and ""MySQL"".
* Use the guideline of [[Contribution:mySqlMany]] up to ""Populate tables..."".

After the database has started:

* Download the sources.
* Copy the complete zend folder to the htdocs-directory of your XAMPP-installation.
* Start your [[Web browser]] and go to http://localhost/zend/public/.

If you want to continue with the development of this contribution, please download [[Technology:NetBeans]] and import the project into the [[IDE]].

== Metadata ==

* [[memberOf::Theme:Web programming]]
* [[uses::Language:PHP]]
* [[uses::Language:HTML]]
* [[uses::Language:CSS]]
* [[uses::Technology:Zend framework]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:tzimmer]]
",2013-06-12 14:59:21.623,2017-07-05 15:30:07.866229
Contribution,xsdDataSet,"== Headline ==

X/O mapping with [[Technology:.NET|]]'s [[Technology:xsd.exe|]] and strongly typed DataSets

== Motivation ==

X/O mapping within the .NET platform is exercised. This is a variation on [[Contribution:xsdClasses]]; we generate typed DataSets as opposed to classes for plain objects.

== Architecture ==

See [[Contribution:xsdClasses]].

== Usage ==

[[Technology:Visual Studio]] 2010 should be used to open a project file. The project itself is a class-library and compiles into a DLL. To run a project you must execute at least one unit test (or all at once).
Nunit GUI or other Visual studio extension (e.g. Resharper) should be used for executing unit tests.

The following command should be used if one wants to re-generate C# sources from xsd file: xsd Company.xsd /dataset /out:../

The contribution has been tested with C# Version 4.0, the .NET Framework Version 4.0 and NUnit Version 2.5.

== Metadata ==
* [[uses::Language:CSharp]]
* [[uses::Technology:csc.exe]]
* [[uses::Technology:.NET]]
* [[uses::Technology:NUnit]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Mapping]]
* [[developedBy::Contributor:avaranovich]]

",2013-06-12 14:59:19.707,2017-07-05 15:30:05.494434
Contribution,qt,"== Intent ==

GUI programming with [[Language:CPlusPlus]] and [[Technology:Qt]]

== Motivation ==

TBD

== Illustration ==

TBD

== Architecture ==

TBD

== Usage ==

TBD

== Metadata ==
* [[uses::Language:CPlusPlus]]
* [[uses::Technology:Qt]]
* [[uses::Technology:QTCreator]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Browsing]]
* [[developedBy::Contributor:Alexander Anthes]]
* [[developedBy::Contributor:Ina Schroeder]]
* [[developedBy::Contributor:Katharina Naujokat]]
* [[developedBy::Contributor:Martina Sekulla]]
* [[developedBy::Contributor:tzimmer]]
",2013-06-12 14:58:44.672,2017-07-05 15:29:38.255303
Contribution,strafunski,"== Headline ==

Strafunski approach generic programming in [[Language:Haskell]]

== Characteristics ==

The Strafunski approach to generic functional programming is demonstrated; see [[relatesTo::http://dx.doi.org/10.1007/3-540-36388-2 24]] for some background. That is, based on strategy combinators for traversal and derived traversal schemes, problem-specific traversals are obtained by passing problem-specific arguments to the generic traversal schemes.

== Architecture ==

There are Haskell modules for the basic features.

* [[Feature:Hierarchical company]]: ''Company.hs''
* [[Feature:Total]]: ''Total.hs''
* [[Feature:Cut]]: ''Cut.hs''
* [[Feature:Depth]]: 'Depth.hs''

Finally, there is a ''Main'' module which collects a few test scenarios; see below.

== Usage ==

See [[Contribution:haskellComposition]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell genericity]]
* [[relatesTo::http://dx.doi.org/10.1007/3-540-45587-6 10]]
* [[relatesTo::http://dx.doi.org/10.1007/3-540-36388-2 24]]
",2013-06-12 14:58:59.069,2017-07-05 15:29:48.727968
Technology,EMF,"== Headline ==

A [[toolkit]] for [[modelware]] for the Java platform

== Spaces ==

* [[Objectware]]
* [[Modelware]]
* [[Auxiliary XMLware]]

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://www.eclipse.org/modeling/emf/]]
* [[implements::Language:Ecore]]
* [[facilitates::Modeling]]",2013-06-12 15:01:12.341,2017-07-05 15:30:08.016238
Contribution,pythonDjango,"== Headline ==

[[Web programming]] using the Django Framework in [[Language:Python]]

== Characteristics ==
Django is a web framework written in [[Language:Python]], it provides a long list of features. This contribution makes use of the template language of Django to produce html output. It supports browsing the company to view Company, Department and Employee. To make this possible, there are special urls to access them by http get. The implementation of total and cut are implemented in an object oriented style.

== Illustration ==

The implementation adapts the object model from [[Contribution:py3k]] but adds a few more methods to add support for browsing the company:

<syntaxhighlight lang=""python"">
def get dept(self, name):
    return filter(bool, (d.get dept(name) for d in self.depts))[0]

def get employee(self, name):
    return filter(bool, (d.get employee(name) for d in self.depts))[0]
</syntaxhighlight>

The generation of the output is very straight forward:
<syntaxhighlight lang=""python"">
def index(request):
    return render to response('index.html', { 'company' : company })

def department(request, department name):
    dept = company.get dept(department name)
    return render to response('department.html', { 'dept' : dept })

def employee(request, employee name):
    e = company.get employee(employee name)
    return render to response('employee.html', { 'e' : e})
</syntaxhighlight>

== Architecture ==

The contribution is straightforward.

* [[ Feature:Hierarchical companies ]]: models.py
* [[Feature:Total]]: models.py
* [[Feature:Cut]]: models.py
* [[Feature:Browsing]]: views.py

== Usage ==

The contribution has been tested with python 2.7 and an up-to-date version of Django.

<pre>
$ python manage.py runserver
</pre>

Then open localhost:8000 in your browser,

== Metadata ==

* [[uses::Language:Python]]
* [[uses::Technology:Django]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Hierarchical company]]
* [[developedBy::Contributor:kevin-klein]]
",2013-06-12 14:58:43.978,2017-07-05 15:29:37.329045
Technology,Graphviz,"== Headline ==

A toolkit for graph visualization

== Metadata ==

* [[instanceOf::Toolkit]]
* [[sameAs::http://www.graphviz.org/]]
* [[sameAs::http://en.wikipedia.org/wiki/Graphviz]]
* [[facilitates::Graph visualization]]
* [[implements::Language:DOT]]",2013-06-12 15:01:19.054,2017-07-05 15:30:08.552154
Concept,Composition,"== Headline ==

[[Software composition]] or [[function composition]]

== Metadata ==

* [[carries::Tag:Ambiguity]]

",2013-06-12 14:53:31.691,2017-07-04 13:44:38.900927
Contribution,stratego,"== Metadata ==
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]
",2013-06-12 14:58:59.514,2017-07-04 13:46:25.333124
Concept,Concrete class,"== Intent ==

a [[class]] that can be directly instantiated as opposed to an [[abstract class]]

== Metadata ==

* [[instanceOf::Class]]

",2013-06-12 14:53:32.734,2017-07-04 13:44:38.925604
Technology,CSharpFragmentLocator,"== Headline ==

a fragment locator for C#

== Description ==

CSharpFragmentLocator  is a part of the [[101companies:Explorer]]; it is a C#-specific tool for fragment location. That is, the technology supports the syntax-aware location of a fragment in C# compilation unit. The input/output behavior of CSharpFragmentLocator is the following:

* Input:
** a C# source code file
** a fragment description
* Output:
** the line range of the located fragment

For fragment description and output format, please refer to [[Technology:JFragmentLocator]].

The C# specific properties can be be selected by using the property name as the method name. Consider this property:

<pre>
public Guid Id { get; set; }
</pre>

It can be selected by using the name ""Id"" as the method:
<pre>
{
  ""method"" : ""Id""
}
</pre>

== See also ==

* The [[101companies:Explorer]]

== Contributors ==

* {{101contributor|Andrei Varanovich|developer}}
* {{101contributor|Martin Leinberger|developer}}

== Metadata ==
* [[instanceOf::Fragment locator]]
* [[instanceOf::@technology]]
* [[sameAs::https://github.com/101companies/101repo/tree/master/technologies/CSharpFragmentLocator]]
* ",2013-06-12 15:01:08.258,2017-07-04 13:47:27.283535
Contribution,rascal,"== Headline ==

A metaprogramming-oriented implementation based on [[Language:Rascal]]

== Motivation ==

This contribution serves as an example of how Rascal can be used to create language implementations and IDEs. We show that one can quickly implement a wide range of features with only small amounts of code. [[Feature:Hierarchical company]] is implemented as the basic data model in AST form. [[Feature:Cut]] is implement as an AST transformation. [[Feature:Total]] is implemented as an AST visit. [[Feature:Parsing]] is implemented by parsing based on a grammar from which an SGLL parser is generated. (The same syntax as in [[Contribution:antlrParser]] is used.) [[Feature:Visualization]] is implemented such that the company structure is visualized as a tree and nodes provide info on employer salary with the node size correlating with salary. Editing-related features are implemented through IDE support: editor, syntax highlighting, markers, error messages, folding, outline view.

== Illustration ==

=== Screenshot of the editors/IDE ===

https://github.com/101companies/101repo/raw/master/rascal/101Companies Rascal Visualization.png

=== Screenshot of the visualization ===

https://github.com/101companies/101repo/raw/master/rascal/101Companies Rascal IDE.jpg

== Architecture ==

TODO

== Usage ==

TODO

== Issues ==

* Technologies TODO
* Architecture TODO
* Usage TODO

== Metadata ==
* [[uses::Language:Rascal]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Visualization]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Restructuring]]
* [[developedBy::Contributor:mahills]]
* [[developedBy::Contributor:PaulKlint]]
* [[developedBy::Contributor:basten ]]
",2013-06-12 14:58:45.04,2017-07-05 15:29:38.584805
Concept,Concrete data type,"== Headline ==

A [[data type]] defined in terms of a concrete representation

== Relationships ==

* Non-concrete data types are called [[abstract data type]]s.
* The term ""concrete data type"" is similar to the term ""[[data structure]]"".

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[sameAs::http://www.haskell.org/haskellwiki/Concrete_data_type]]
* [[isA::Concept]]


      ",2013-06-12 14:53:32.901,2017-07-04 15:26:04.631585
Language,Concurrent Haskell,"== Headline ==

An extension of [[Language:Haskell 98]] with explicit concurrency

== Metadata ==

* [[instanceOf::Functional programming language]]
* [[sameAs::http://en.wikipedia.org/wiki/Concurrent_Haskell]]
",2013-06-12 14:53:33.569,2017-07-04 13:44:39.007454
Concept,Concurrent programming,"== Headline ==

Programming with collections of interacting [[process]]es

== Synonyms ==

* Concurrent computing

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[instanceOf::Programming domain]]
* [[sameAs::http://en.wikipedia.org/wiki/Concurrent_computing]]
",2013-06-12 14:53:33.742,2017-07-04 13:44:39.025706
Contribution,haskellList,"== Headline ==

[[List processing]] with [[Map function|map]] and friends in [[Language:Haskell]]
== Characteristics ==

The contribution demonstrates functional programming in [[Language:Haskell]]. List processing with map and friends is put to work.
== Illustration ==

[[Higher-order function]]s for [[list processing]] enable the concise implementation of [[list processing]] functionality in a regular manner, eliminating the need for problem-specific functions to be recursive or to perform pattern matching on lists. For comparison, consider the following code for totaling salaries without the use of map and friends, as part of [[Contribution:haskellEngineer]]:

<fragment url=""/contributions/haskellEngineer/src/Company/Total.hs/pattern/total"" />

Specifically, the helper function ''getSalaries'' should be regarded as ""boilerplate code"" because it duplicates a routine scheme of [[recursion]] which is readily generalized by the [[map function]]. Thus, [[Contribution:haskellList]] puts to work the [[map function]] and revises the code for totaling salaries as follows:

<fragment url=""src/Company/Total.hs/pattern/total"" />

Thus, the [[map function]] is used to iterate the ''getSalary'' function over lists of employees. Since map takes a function as argument, it is clearly a [[higher-order function]]. The result of mapping is a list which is summed up with the [[sum function]], which in itself, is not a higher-order function. However, it is worth noticing that the sum function is actually defined (or definable) in terms of another higher-order function for list processing, i.e., the [[fold function]], more specifically Haskell's ''foldr'' function.
== Relationships ==

* The present contribution revises [[Contribution:haskellEngineer]] to put to work map and friends.
* See [[Contribution:haskellLambda]] for a variation which exercises [[anonymous function]]s.
== Architecture ==

See [[Contribution:haskellEngineer]].
== Usage ==

See [[Contribution:haskellEngineer]].
== Metadata ==


* [[memberOf::Theme:Haskell introduction]]
* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[implements::Feature:Flat company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Median]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:rlaemmel]]
* [[basedOn::Contribution:haskellEngineer]]
* [[moreComplexThan::Contribution:haskellEngineer]]
* [[varies::Contribution:haskellEngineer]]

",2013-06-12 14:57:43.885,2017-07-05 15:27:43.354902
Contribution,riak,"== Headline ==

A NoSQL implementation based on [[Technology:Riak]]

== Metadata ==

* [[memberOf::Theme:NoSQL]]

",2013-06-12 14:58:45.538,2017-07-04 13:46:21.478805
Contribution,richerAndroid,"== Headline ==

Advanced [[Technology:Android]] programming

== Motivation ==

The implementation demonstrates advanced style of [[Technology:Android]] programming using the [[Technology:Android SDK]] and the [[Technology:Android Development Tool]]. It is based on [[Contribution:simpleAndroid | simpleAndroid]] with more features and functionalities. The application is in the position to explore and edit the company structure. The feature [[Feature:Closed serialization]] can save and load company objects. The [[Feature:Type-driven query | total]] and [[Feature:Type-driven transformation | cut]] features are also implemented. The application demonstarates more [[Listener | listener]] like the onLongClickListener. This implementation shows how to use defferent [[Dialog | dialogs]] and how to use [[Android Menu | options menu]]. Also there are more [[View | views]] like the edit text. The feature [[Feature:Localization]] is also implemented. If you change your system language then the application language will also change.

== Illustration ==

=== [[Dialog | Dialogs]] ===

==== AlertDialog ====

<syntaxhighlight lang=""java"" source="""" line>
Builder build = new Builder(DepartmentClickActivity.this);
	build.setTitle(R.string.areyousure)
	.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
		@Override
		public void onClick(DialogInterface dialog, int which) {
		...
	})
	.setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
		@Override
		public void onClick(DialogInterface dialog, int which) {
			dialog.dismiss();
		}
	})
	.show();
</syntaxhighlight>

An alert dialog is generated with a builder. In line two we set the title of the [[Dialog | dialog]] and in the next lines we set two buttons with their [[Listener | on click listener]]. In the last line we show the Dialog in front of the active [[Activity | activity]].

==== Custom Dialog ====

<syntaxhighlight lang=""java"" source="""" line>
Dialog dialog = new Dialog(this);
dialog.setTitle(R.string.createtheemployee);
dialog.setContentView(R.layout.newemployee);
((Button)dialog.findViewById(R.id.bt Cancel newemployee)).setOnClickListener(new OnClickListener() {
	@Override
	public void onClick(View arg0) {
		dialog.dismiss();
	}
});
dialog.show();
</syntaxhighlight>

In a custom Dialog we put a [[View | view]] in line three, which we have created in the [[Android Resource | resources]] as [[Layout |  XML layout]]. In the last line we show the dialog in front of the active [[Activity | activity]].

=== [[Android Menu | Options Menu]] ===

==== Create Menu ====

<syntaxhighlight lang=""java"" source="""" line>
@Override
public boolean onCreateOptionsMenu(Menu menu) {
	getMenuInflater().inflate(R.menu.menue, menu);
	menu.getItem(1).setTitle(R.string.addEmployee);
	menu.getItem(0).setTitle(R.string.addDepartment);
	return super.onCreateOptionsMenu(menu);
}
</syntaxhighlight>

If we click on the options button of our Smartphone then the onCreateOptionsMenu method will be started. In line three we put the created menu layout with the [[Menu Inflater | menu inflater]]. In line four and five we edit the entries of the Menu.

==== Give functionality ====

<syntaxhighlight lang=""java"" source="""" line>
@Override
public boolean onOptionsItemSelected(MenuItem item) {
	switch (item.getItemId()) {
		case R.id.opt total:{
			Toast.makeText(this, dept.total()+"""", Toast.LENGTH SHORT).show();
			return true;
		}
		case R.id.opt cut:{
			dept.cut();
			Toast.makeText(this,R.string.successful, Toast.LENGTH SHORT).show();
			return true;
		}
		...
	}
	return false;
}
</syntaxhighlight>

With the method onOptionsItemSelected we give the elements of the [[Android Menu | menu]] a funtionality.

=== Edittext ===
<syntaxhighlight lang=""java"" source="""" line>
EditText ed name = ((EditText)findViewById(R.id.ed name));
...
ed name.setText(employee.getName());
...
((EditText)findViewById(R.id.ed name)).getText().toString().trim();
</syntaxhighlight>

With an EditText we can edit the data of an Employee, the name of a Department and the name of the Company. In line three we put a String for example the employee's name, address or salary. After changing the String or after an action of the user we get the String from the edit text in line five.

== Architecture ==

* In the package ''org.softlang.company'' we define the Object-Model of the company.
* The [[Feature:Total]] and [[Feature:Cut]] is integrated in the Object-Model of the Company.
* In [this!!res/values/strings.xml values/strings.xml] we specify the Strings of the application.
* In [this!!res/values-de/strings.xml values-de/strings.xml] we specify the Strings of the application to demonstrate the 101feature [[Feature:Localization]].
* In [this!!res/layout layout] we define various [[Layout | layouts]] of the different [[View | views]].
* We implement the [[Activity | activities]] in the package ''org.softlang.activities''.
* Package ''org.softlang.features'' provides functionality for the [[Feature:Restructuring]] and [[Feature:Serialization]].
* The sample company is in the package ''org.softlang.tests''.

== Usage ==

* See Usage of [[Contribution:simpleAndroid | simpleAndroid]].

== Metadata ==
* [[uses::Language:Java]]
* [[uses::Language:XML]]
* [[uses::Technology:Android]]
* [[uses::Technology:Android SDK]]
* [[uses::Technology:Android Development Tool]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Touch control]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Restructuring]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Localization]]
* [[implements::Feature:Offline mode]]
* [[implements::Feature:Persistence]]
* [[developedBy::Contributor:hakanaksu]]

",2013-06-12 14:58:46.452,2017-07-05 15:29:40.669328
Concept,Constructor,"== Headline ==

An [[instance constructor]] or a [[data constructor]] or a [[type constructor]]

== Metadata ==

* [[carries::Tag:Ambiguity]]
",2013-06-12 14:53:34.357,2017-07-04 13:44:39.100989
Contribution,ruby,"== Headline ==
a simple ruby implementation

== Motivation ==
We make use of the Ruby Development Tools plug-in for Eclipse:
http://www.ibm.com/developerworks/opensource/library/os-rubyeclipse/

We use a simple object model for companies.
These are plain ruby objects plus instance methods for some of the scenarios.
See the tests package for test cases.

== Metadata ==
* [[developedBy::Contributor:tschmorleiz]]
",2013-06-12 14:58:46.785,2017-07-04 13:46:22.004599
Technology,Xtext,"== Headline ==

a toolkit for development of external textual DSLs

== Metadata ==
* [[instanceOf::Toolkit]]
* [[sameAs::http://www.eclipse.org/Xtext]]
* [[relatesTo::http://wiki.eclipse.org/Xtext]]
* [[facilitates::Metaprogramming]]
* [[implements::Language:Xtend]]
* [[implements::Language:Xtext]]",2013-06-12 15:02:08.812,2017-07-05 15:30:08.658703
Contribution,javaComposite,"== Headline ==

Making use of the tree-like object model using the [[Composite pattern|composite pattern]]

== Characteristics ==

The present implementation can be viewed as a variation on [[Contribution:javaInheritance]].
The [[Composite pattern|composite pattern]] is applied to a [[Feature:Hierarchical company|tree-like model of companies]].
To this end, employees and departments are composites while employees are leafs.
The features of [[Feature:Total|totaling]] and [[Feature:Cut|cutting]] a company, department and employees are specified in a component interface.

== Illustration ==

The data model is implemented with [[class inheritance]]. For example Departments:

<fragment url=""src/main/java/org/softlang/company/model/Department.java/class/Department""/>

[[Feature:Total]] and [[Feature:Cut]] are specified in the component interface

<fragment url=""src/main/java/org/softlang/company/model/Unit.java/class/Unit""/>

and implemented in the respective classes of the object model, for instance for departments:

<fragment url=""src/main/java/org/softlang/company/model/Department.java/class/Department""/method/cut>

== Usage ==

Execute the main class in Eclipse.

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]

* [[developedBy::Contributor:tschmorleiz]]

",2013-08-13 09:50:01.524,2017-07-05 15:30:12.150475
Contribution,sax,"== Headline ==

[[Push-based XML parsing]] in [[Language:Java]] with [[Technology:SAX]]

== Characteristics ==

[[XML processing]]

== Illustration ==

The data model is implemented as xml files (sampleCompany.xml) that conform to a schema (Company.xsd).

[[Feature:Parsing]] is implemented by loading a [[Technology:sax]] XMLreader:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java/class/Parsing/method/parse""/>

[[Feature:Unparsing]] can be implemented by a handler (see Cut).

[[Feature:Total]] is implemented by a SAX handler that totals during a parse:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/getTotal""/>

[[Feature:Cut]] is implemented by a SAX handler that outputs an XML-file with XMLStreamWriter.

The schema is not needed for the basic operations, but one can perform XML validation with regard to the schema (see package org.softlang.company.features.sax)

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For DOM-like implementations of in-memory XML processing see [[Contribution:dom]], [[Contribution:jdom]] and [[Contribution:xom]].

For a query-based implementation of in-memory XML processing see [[Contribution:xpathAPI]].

For push-based XML processing see [[Contribution:sax]].

For Object/XML mapping see [[Contribution:jaxbChoice]] (XSD with choice for different subunits), [[Contribution:jaxbComposition]] (XSD with object composition), [[Contribution:jaxbExtension]] (XSD with type extension) and [[Contribution:jaxbSubstitution]] (XSD with substitution groups).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
*** org.softlang.company.features.sax for additional [[Technology:sax]] functionality.
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[memberOf::Theme:XML programming]]
* [[uses::Language:Java]]
* [[uses::Language:XML]]
* [[uses::Language:XSD]]
* [[uses::Technology:SAX]]
* [[uses::Technology:JAXP]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:49.498,2017-07-05 15:29:42.996749
Concept,Constructor method,"== Metadata ==

* [[instanceOf::Static method]]
",2013-06-12 14:53:34.584,2017-07-04 13:44:39.12558
Concept,Containment relationship,"== Metadata ==

* [[instanceOf::Relationship]]
",2013-06-12 14:53:34.978,2017-07-04 13:44:39.132532
Contribution,strutsAnnotation,"== Headline ==

[[Web programming]] in [[Language:Java]] with [[Technology:Struts]] configuring with annotations

== Motivation ==

This [[Language:Java]] [[Web application|web application]] illustrates the use of the popular [[Technology:Struts]] technology in combination with [[Technology:JSP]] and a [[Technology:Servlet API|servlet]] based [[Web server|web server]]. It introduces the use of [[Technology:Maven]] as a good advantage for [[Language:Java]] based [[Application|applications]], as well.

== Illustration ==

The [[Technology:Struts]] architecture is based on [[MVC]]. The view is implemented with [[Technology:JSP]], the controller is based on [[Language:Java]] ''action'' [[Class|classes]] in combination with [[Technology:Servlet API|servlets]] and the model is provided by a service [[Class|class]] and a class for each company, department and employee. The initial [[Feature:Hierarchical company]] data is stored in a [this!!src/main/resources/sampleCompany.ser serialization file] (compare [[Contribution:javaInheritance]]). We will illustrate the [[Technology:Struts]] implementation with an example of showing and cutting a company.

=== View ===

The [[Technology:JSP]] [this!!src/main/webapp/WEB-INF/content/list-all-companies.jsp file] for the view of the company offers two textfields and two buttons. One of the textfields shows the name, the other one shows the [[Feature:Total]] value. The buttons allow the user to request for further detailed information like a department list. It also allows her to cut all salaries of the company.

<syntaxhighlight lang=""xml"" source=""strutsAnnotation/src/main/webapp/WEB-INF/content/list-all-companies.jsp"">
...

<s:form action=""company"">

		...

		<s:iterator value=""allCompanies"">
			<tr>
				<!-- The name and total fields refer
					to the corresponding getters of ""Company.java"". -->
				<td><s:property value=""name""/></td>
				<td><s:property value=""total""/></td>
				<td>
					<!-- These lines create a link,
						which invokes the cutSalaries-method of ""CompanyAction.java -->
					<s:url id=""cutURL"" action=""company.cutSalaries"">
						<s:param name=""id"" value=""%{id}""/>
					</s:url>
					<s:a href=""%{cutURL}"">Cut</s:a>
				</td>
				<td>
					<!-- These lines create a link
						to the department list of the company. -->
					<s:url id=""detailURL"" action=""company.details"">
						<s:param name=""id"" value=""%{id}""/>
					</s:url>
					<s:a href=""%{detailURL}"">Detail</s:a>
				</td>
			</tr>
		</s:iterator>

		...
</syntaxhighlight>

The iterator <syntaxhighlight lang=""xml"" enclose=""none""><s:iterator ... /></syntaxhighlight> creates a table row for each company listed in the [this!!src/main/java/org/softlang/actions/ListAllCompaniesAction.java ListAllCompaniesAction.java] instance. The value <syntaxhighlight lang=""xml"" enclose=""none"">""allCompanies""</syntaxhighlight> refers to the member <syntaxhighlight lang=""java"" enclose=""none"">List<Company> allCompanies;</syntaxhighlight> of the [[Class|class]]. Each company within this list has a getter for its name and another for the [[Feature:Total]] value.

=== Controller ===

The <syntaxhighlight lang=""xml"" enclose=""none"">action=""company.cutSalaries""</syntaxhighlight> of the [[Feature:Cut]] link invokes the <syntaxhighlight lang=""java"" enclose=""none"">cutSalaries()</syntaxhighlight> method of [this!!src/main/java/org/softlang/actions/CompanyAction.java CompanyAction.java], which is, in combination with a [[Technology:Servlet API|servlet]], a controller of the application:

<syntaxhighlight lang=""java"" source=""strutsAnnotation/src/main/java/org/softlang/actions/CompanyAction.java"">
@Action(value = ""company.cutSalaries"",
			results = { @Result(name = ""listAllCompanies"", type=""redirectAction"", location=""list-all-companies"")})
public String cutSalaries() {
	company =  CompanyService.instance().findCompany(Long.parseLong(RequestUtil.getRequestParameter(""id"")));
	company.cut();
	return ""listAllCompanies"";
}
</syntaxhighlight>

The <syntaxhighlight lang=""java"" enclose=""none"">@Action(value = ""company.cutSalaries"", ...)</syntaxhighlight> maps this method to the action name ''company.cutSalaries''. Whenever this name is called within an action of the [[Technology:JSP]] files, this method is invoked. <syntaxhighlight lang=""java"" enclose=""none"">CompanyService.instance()</syntaxhighlight> returns the instance of the model, which returns the necessary entity for the company. This object is used to perform the companies [[Feature:Cut]] [[Method|method]]. The <syntaxhighlight lang=""java"" enclose=""none"">results</syntaxhighlight> parameter redirects the application to the [this!!src/main/webapp/WEB-INF/content/list-all-companies.jsp list-all-companies.jsp], which simply means, that the page is reloaded. Every result entry refers to a returned ''string'' value of the <syntaxhighlight lang=""java"" enclose=""none"">@Action(value = ""company.cutSalaries"", ...)</syntaxhighlight>. In this case, there is only one possible return value.

=== Model ===

All data are instantiated within the [[Singleton]] [this!!/src/main/java/org/softlang/services/CompanyService.java CompanyService.java], which is considered as a major part of the model. The instance contains lists of the company, its departments and its employees. As we have seen in the controller description, the [[Feature:Cut]] method of all of these entities is invokeable. In our case, the cut method for the company simply invokes the cut method of the departments:

<syntaxhighlight lang=""java"" source=""strutsAnnotation/src/main/java/org/softlang/basics/Company.java"">
	public void cut() {
		for (Department d : getDepts())
			d.cut();
	}
</syntaxhighlight>

The lists within this [this!!/src/main/java/org/softlang/services/CompanyService.java CompanyService.java] are initialized by loading a previously serialized company. We strongly recommend to have a look on [[Contribution:javaInheritance]], to get an overview over the serialization and deserialization process in [[Language:Java]].

== Architecture ==

* The [[Technology:JSP]] files for the view are located in [this!!src/main/webapp/WEB-INF/content].
* The [this!!src/main/webapp/index.jsp index.jsp] in the [this!!src/main/webapp] folder represents the initial page, which redirects to the first ''list-all-companies.jsp''. The [this!!src/main/webapp] folder also contains the [[Language:CSS]] files for this application.
* The [this!!src/main/resources] folder contains two necessary files. The [this!!src/main/resources/sampleCompany.ser] provides the serialized company data. The [this!!src/main/resources/struts.xml] [[Language:XML]] file defines, that the initial page of this application is the [this!!src/main/webapp/index.jsp index.jsp].
* The main [[Language:Java]] code of the application is located in [this!!src/main/java/org/softlang]. We have four folders for the different concerns. [this!!src/main/java/org/softlang/actions] contains the actions described in the illustration section for the controller. The [this!!src/main/java/org/softlang/basics] folder contains all necessary [[Class|classes]] for the deserialized company. The [this!!src/main/java/org/softlang/services/CompanyService.java CompanyService.java] is located in the [this!!src/main/java/org/softlang/services] folder. The last folder [this!!src/main/java/org/softlang/util] contains some helpful [[Language:Java]] files for the deserialization.

== Usage ==

''Requirements:''
* [[Technology:Maven]] (Version 2.x) as [[Technology:Eclipse]] plugin (http://eclipse.org/m2e/download/) or standalone (http://maven.apache.org/download.html)
* [[Web server]] or [[Application server|application server]] based on the [[Technology:Servlet API|servlet]] technology (We recommend [[Technology:JBoss Application Server|JBoss application server]], but [[Technology:Apache Tomcat]] will also be sufficient).

''Import (Eclipse only):''
Import the strutsAnnotation implementation into eclipse as [[Technology:Maven]] project:
* Click the ""File""-button in the menu bar and ""Import..."".
* Select the ""Maven"" folder and ""Existing Maven Projects"".
* Browse to your local ""strutsAnnotation"" folder and ""Finish"".

''Build:''
* Run ""mvn clean"" and ""mvn install"" in the root directory of the struts 2 implementation or (''Eclipse only'') right click on your imported project and first click ""Run As"" -> ""Maven clean"" and second ""Run As"" -> ""Maven install"".
* Copy the target/struts2app.war file to the web-application folder of your [[Web server]] ([[Technology:JBoss Application Server|JBoss application server]]: <JBossHome>/server/default/deploy).

''Run:''
* Start your [[Web server]] ([[Technology:JBoss Application Server|JBoss application server]]: <JBossHome>/bin/run.bat (Windows) or <JBossHome>/bin/run.sh (Unix)).
* Start your [[Web browser]] and go to http://localhost:8080/struts2app.

== Contributors ==

== Metadata ==
* [[uses::Language:Java]]
* [[uses::Language:XML]]
* [[uses::Language:HTML]]
* [[uses::Language:CSS]]
* [[uses::Technology:Struts]]
* [[uses::Technology:Servlet API]]
* [[uses::Technology:Maven]]
* [[Feature:Hierarchical company]]
* [[Feature:Total]]
* [[Feature:Cut]]
* [[Feature:Distribution]]
* [[Feature:Browsing]]
* [[Feature:Web UI]]
* [[memberOf::Theme:Web programming]]
* [[memberOf::Theme:Web applications in Java]]
* [[developedBy::Contributor:Rodrigo Bonifacio]]
* [[reviewedBy::Contributor:tzimmer]]",2013-06-12 14:59:01.172,2017-07-04 13:46:26.111728
Contribution,antlr4Parser,"== Headline ==

Processing textual syntax with semantic actions of ANTLR4

==Relationships==

This contribution is an ANTLR4 version of [[Contribution:antlrParser]].

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[developedBy::Contributor:Manfred Jackel]]

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

",2014-08-17 15:22:02.854,2017-07-05 15:30:22.816953
Technology,WP7 SDK,"== Intent ==

Windows Phone 7 Software Development Kit
== Metadata ==
* ",2013-06-12 15:02:03.627,2017-07-04 13:47:32.306606
Contribution,jxpath,"== Headline ==
Traversing 101company-structure with [[Technology:JXPath|]]
==Characteristics==

This implementation traverse a simple company structure using an API for XPath.

XPath is a query language for finding and altering certain nodes in XML documents.
==Relationships==

For another usage of [[Language:XPath|]] see [[Contribution:xpathAPI]]
== Usage ==

This contribution uses [[Technology:Gradle|]] for building. [[Technology:Eclipse|]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Language:XPath]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
<!-- Next link is generated automatically-->
* [[developedBy::Contributor:mpaul138]]
<!-- Next link is generated automatically-->
* [[uses::Language:Plain Text]]
",2014-04-28 13:19:12.63,2017-07-05 15:30:17.318188
Contribution,javaGson,"== Headline ==

Working on JSON with Google [[Technology:Gson|Gson API]], mapping Json to a JsonTree representation
==Characteristics==

This contribution is using [[Language:JSON]] for storing the company structure and Gson API for parsing, unparsing and manipulating it the JSON.
The Gson API maps the input to an JSONTree representing the company.
==Relationships==

[[Contribution:javaGsonObjects]] is using the same Api and Features with a different JSON mapping
==Usage==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
==Temporary==
[https://github.com/https://github.com/101companies/101simplejava/tree/master/contributions/javaGson Gitlink]
== Metadata ==
* [[developedBy::Contributor:mpaul138]]
* [[uses::Language:JSON]]
* [[uses::Language:Plain Text]]
* [[uses::Language:Java]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Technology:Gson]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
",2014-06-02 15:19:50.305,2017-07-05 15:30:19.267111
Contribution,simpleAndroid,"== Headline ==

Basic [[Technology:Android]] programming

== Motivation ==

The implementation demonstrates basic style of [[Technology:Android]] programming using the [[Technology:Android SDK]] and the [[Technology:Android Development Tool]]. The application is programmed in a way that [[Feature:Touch control]] is used exlusivly. It shows basic concepts like the [[Android Manifest]], the [[layout]] and the use of [[Activity | activities]]. Other concepts are demonstrated that are needed to represent the 101features [[Feature:Hierarchical_company]] and [[Feature:Browsing]]. This includes the [[View | views]] like buttons, the [[Listener | click listener]] and the use of an [[Adapter | adapter]] with a list view. For the communication between [[Activity | activities]] and to start them are used [[Intent | intents]]. The application uses text [[View | views]] to display the name, address and salary of an [[101term:Employee | employee]]. It shows [[Toast | toasts]] for any notifications.

== Metadata ==

",2013-06-12 14:58:57.876,2017-07-04 13:46:24.954067
Concept,DBMS,"== Headline ==

A [[database]] management system
== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[sameAs::http://en.wikipedia.org/wiki/DBMS]]
* [[relatesTo::http://en.wikipedia.org/wiki/Database_system]]
* [[isA::Software technology]]
",2013-06-12 14:53:36.501,2017-07-04 15:26:07.08916
Concept,Data constructor,"== Headline ==

A constructor of an [[algebraic data type]]

== Illustration ==

See the illustration for [[algebraic data type]]s.

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://www.haskell.org/haskellwiki/Constructor]]
* [[isA::Concept]]

",2013-06-12 14:53:37.388,2017-07-04 15:26:07.234756
Concept,Data generator,"== Headline ==

a [[Function]] or a [[tool]] for [[test data generation]]

== Resource ==

* [http://en.wikipedia.org/wiki/Test_Data_Generation Test Data Generation] @ Wikipedia

== Metadata ==

* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:53:38.181,2017-07-04 15:26:07.422591
Concept,Data manipulation language,"== Headline ==

A software language for [[CRUD]] and [[Query|queries]]

== Relationships ==

See also [[data definition language]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Data_manipulation_language]]
* [[isA::Software language]]

",2013-06-12 14:53:38.324,2017-07-04 15:26:07.562349
Contribution,jaxbExtension,"== Headline ==

[[Object-XML mapping]] for [[Language:Java]] and [[Language:XSD]] with [[Technology:JAXB]]

== Characteristics ==

See [[Contribution:jaxbComposition]] for the overall motivation of exercising [[Technology:JAXB]] and for arguably a simple baseline of a schema and corresponding schema-derived classes. The present implementation represents an attempt to model different kinds of subunits of department (i.e., sub-departments and employees) as subtypes of a common supertype of subunits, where subtyping is meant here in the sense of XSD's type extension mechanism. The result is rather complex at both ends.

== Illustration ==

The data model is implemented as xml files (sampleCompany.xml) that conform to a schema (Company.xsd). For example departments:

<syntaxhighlight lang=""xml"">
<xs:complexType name=""department"">
 <xs:complexContent>
  <xs:extension base=""subunit"">
   <xs:sequence>
    <xs:element ref=""name""/>
    <xs:element name=""manager"" type=""employee""/>
    <xs:element maxOccurs=""unbounded"" minOccurs=""0"" name=""subunit"" type=""subunit""/>
   </xs:sequence>
  </xs:extension>
 </xs:complexContent>
</xs:complexType>
</syntaxhighlight>

Actual [[Language:Java]] classes will be generated using [[Technology:xjc]].

[[Feature:Open serialization]] is implemented using [[Technology:JAXB]] Un-/Marshaller:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented as static methods:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For DOM-like implementations of in-memory XML processing see [[Contribution:dom]], [[Contribution:jdom]] and [[Contribution:xom]].

For a query-based implementation of in-memory XML processing see [[Contribution:xpathAPI]].

For push-based XML processing see [[Contribution:sax]].

For Object/XML mapping see [[Contribution:jaxbChoice]] (XSD with choice for different subunits), [[Contribution:jaxbComposition]] (XSD with object composition), [[Contribution:jaxbExtension]] (XSD with type extension) and [[Contribution:jaxbSubstitution]] (XSD with substitution groups).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Open serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[memberOf::Theme:XML programming]]
* [[uses::Language:Java]]
* [[uses::Language:JAXB annotations]]
* [[uses::Language:XML]]
* [[uses::Language:XSD]]
* [[uses::Technology:JAXB]]
* [[uses::Technology:xjc]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:18.363,2017-07-05 15:28:59.952664
Contribution,wcfRest,"== Headline ==

A [[REST]]-based service implemented with [[Technology:.NET|]]'s [[Technology:WCF|]]

== Motivation ==

== Architecture ==

== Usage ==

* Create a new web site under IIS pointing to the projects' directory. Use port 1234 for a newly created web site. Ensure you use .NET Framework 4.0 for the application pool.

* By pressing F5 in VS you will get the browser opened; go to the following URL to get the full API description http://localhost:1234/CompanyService/help

This contribution has been tested under C# Version 4 and Visual Studio 2010.

== Metadata ==
* [[uses::Language:CSharp]]
* [[uses::Technology:csc.exe]]
* [[uses::Technology:.NET]]
* [[uses::Technology:WCF]]
* [[uses::Technology:Visual Studio]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Distribution]]
* [[developedBy::Contributor:avaranovich]]

",2013-06-12 14:59:11.649,2017-07-05 15:29:57.824678
Technology,Racket,"== Headline ==

An ecosystem for language implementation

== Metadata ==

* [[sameAs::https://racket-lang.org/]]
* [[instanceOf::Platform]]
* [[implements::Language:Racket]]
* [[supports::Metaprogramming]]",2017-06-23 14:38:16.044081,2017-07-05 15:30:25.796176
Technology,Rascal,"== Headline ==

A metaprogramming system emphasizing analyzing, transforming or generating source code

== Metadata ==

* [[sameAs::http://www.rascal-mpl.org/]]
* [[instanceOf::Platform]]
* [[implements::Language:Rascal]]
* [[supports::Metaprogramming]]",2017-06-23 14:41:40.946687,2017-07-05 15:30:25.823726
Contribution,strutsXml,"== Intent ==

[[Web programming]] in [[Language:Java]] with [[Technology:Struts]] configuring with XML

== Motivation ==

This is a simple Struts-based web implementation of the basic 101companies-features. Java annotations are used for redirection rules. Server-side storage or persistence relies on XML an object streams.  See [[Contribution:strutsAnnotation]] for a similar implementation that uses annotations instead for the redirection rules.

== Illustration ==

The company data is stored in a serialization file. To obtain the stored data, there
is an auxiliarly method in the Company class.

<syntaxhighlight lang=""java"">
public class Company {
 ...
public static Company readObject(String filename) {
  Object o = null;
  try {
	FileInputStream fis = new FileInputStream(filename);
	ObjectInputStream in = new ObjectInputStream(fis);
	o = in.readObject();
	in.close();
  } catch (IOException e) {
     e.printStackTrace();
  } catch (ClassNotFoundException e) {
	 e.printStackTrace();
  }
  return (Company) o;
}
...
</syntaxhighlight>

Based on the struts2 architecture, the controller layer is implemented
by Java classes (action classes) that extend the class ActionSupport
and implement the Preparable interface. This approach uses the
'''xworks''' framework and a simple CRUD design, where only one
action is necessary to all operations (edit and cut salaries of a
department, edit and cut salaries of an employee, and so on). CompanyAction
is the
single Action class in this project, with the definition:

<syntaxhighlight lang=""java"">
public class CompanyAction extends ActionSupport implements Preparable {
...
}
</syntaxhighlight>


The view layer might be implemented using
Java Server Pages (JSPs) or other template languages such as Velocity. Here,
we use JSPs to implement the view layer. The listing bellow shows
a code fragment of the department.jsp view component. You should notice
some special tags such as '''s:form''' and '''s:iterator''', which are declared
in the Struts tag library. Using theses tags we are able to refer to
properties of the action that redirected to the specific view.

<syntaxhighlight lang=""xml"">
...
<h2>Department details</h2>

<s:form action=""DEP!save.action"" method=""post"">
	<s:textfield name=""department.name"" value=""%{department.name}"" label=""Name"" size=""30"" />
	<s:textfield name=""department.manager.person.name"" value=""%{department.manager.person.name}"" label=""Manager"" size=""30"" />
	<s:textfield name=""department.manager.salary"" value=""%{department.manager.salary}"" label=""Manager salary"" size=""15"" />
	<s:textfield name=""department.manager.person.address"" value=""%{department.manager.person.address}"" label=""Manager address"" size=""30"" />
	<s:textfield value=""%{department.total()}"" label=""Total salaries"" readonly=""true"" size=""30"" />
	<s:hidden name=""empName"" value=""%{department.manager.person.name}"" />
	<s:hidden name=""deptName"" value=""%{department.name}"" />
	<s:submit value=""Save"" />
	<s:submit value=""Cut"" action=""cutSalaries""/>
	<s:submit value=""Company details"" action=""index"" />
</s:form>
<br>
<h2><s:text name=""Subdepartments"" /></h2>
<table class=""outline"" border=""1"" width=""50%"">
	<tr>
		<th width=""70%""><s:text name=""Name"" /></th>
		<th width=""30%"">Edit department</th>
	</tr>
	<s:iterator value=""department.subunits"" status=""status"">
	<tr>
		<s:if test=""department"">
			<td class=""nowrap""><s:property value=""name"" /></td>
			<td class=""nowrap"">
				<s:url action=""DEP!input"" id=""link"">
					<s:param name=""department.name"" value=""name"" />
				</s:url>
				<a href=""<s:property value=""#link""/>"">Detail</a>
			</td>
		</s:if>
	</tr>
	</s:iterator>
</table>
...
</syntaxhighlight>

As explained, an XML file declares which view should
be displayed as an action response. For instance, if
the cutSalaries action was performed, the system should
redirect to one of two components: department.jsp or
employee.jsp. This decision depends on
the returned value of the corresponding method (
implemented by the CompanyAction class).

<syntaxhighlight lang=""java>
public String cutSalaries() {
  String redirect = SUCCESS;
  if(department != null && deptName != null) {
    service.cutDepartmentSalaries(deptName);
	redirect = DEPARTMENT SAVE;
  }
  else if(employee != null && empName != null) {
	service.cutEmployeeSalary(empName);
	redirect = EMPLOYEE SAVE;
  }
  return redirect;
}
</syntaxhighlight>

The struts.xml file informs the next view that
should be displayed, depending on the returned
value of a call to the cutSalaries method.

<syntaxhighlight lang=""xml"">
<action name=""cutSalaries"" class=""org.softlang.action.CompanyAction"" method=""cutSalaries"">
  <result name=""department.save"">/WEB-INF/jsp/department.jsp</result>
  <result name=""employee.save"">/WEB-INF/jsp/employee.jsp</result>
</action>
</syntaxhighlight>

== Usage ==

''Requirements:''
* [[Technology:Maven]] (Version 2.x) as [[Technology:Eclipse]] plugin (http://eclipse.org/m2e/download/) or standalone (http://maven.apache.org/download.html)
* [[Web server]] or [[Application server|application server]] based on the [[Technology:Servlet API|servlet]] technology (We recommend [[Technology:JBoss Application Server|JBoss application server]], but [[Technology:Apache Tomcat]] will also be sufficient).

''Import (Eclipse only):""
Import the strutsAnnotation implementation into eclipse as [[Technology:Maven]] project:
* Click the ""File""-button in the menu bar and ""Import..."".
* Select the ""Maven"" folder and ""Existing Maven Projects"".
* Browse to your local ""strutsAnnotation"" folder and ""Finish"".

''Build:''
* Run ""mvn clean"" and ""mvn install"" in the root directory of the struts 2 implementation or (''Eclipse only'') right click on your imported project and first click ""Run As"" -> ""Maven clean"" and second ""Run As"" -> ""Maven install"".
* Copy the target/struts2app.war file to the web-application folder of your [[Web server]] ([[Technology:JBoss Application Server|JBoss application server]]: <JBossHome>/server/default/deploy).

''Run''
* Start your [[Web server]] ([[Technology:JBoss Application Server|JBoss application server]]: <JBossHome>/bin/run.bat (Windows) or <JBossHome>/bin/run.sh (Unix)).
* Start your [[Web browser]] and go to http://localhost:8080/struts2app.

== Issues ==

* Potentially simplify Controller/Service; no service object needed
* Add substantial README/code documentation

== Metadata ==

* [[uses::Language:Java]]
* [[uses::Language:JavaServer Pages]]
* [[uses::Language:XML]]
* [[uses::Technology:Struts]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Persistence]]
* [[memberOf::Theme:Web applications in Java]]
* [[developedBy::Contributor:beddims]]
* [[developedBy::Contributor::Rodrigo Bonifacio]]
",2013-06-12 14:59:02.072,2017-07-05 15:29:50.391593
Contribution,wpf,"== Headline ==

GUI programming with [[Technology:.NET|]]'s [[Technology:WPF|]]

== Motivation ==

== Architecture ==

== Usage ==

== Metadata ==
* [[uses::Language:CSharp]]
* [[developedBy::Contributor:avaranovich]]

",2013-06-12 14:59:12.573,2017-07-04 13:46:29.271545
Technology,Scala,"== Headline ==

The platform implementing [[Language:Scala]] and providing standard libraries

== Metadata ==

* [[sameAs::https://scalacenter.github.io/platform-staging/platform.html]]
* [[instanceOf::Platform]]
* [[implements::Language:Scala]]
* [[facilitates::Static annotation]]",2017-07-04 15:29:40.969288,2017-07-05 15:30:25.90619
Contribution,haskellWriter,"== Headline ==

[[Logging]] in [[Language:Haskell|]] with the [[Writer monad]]

== Characteristics ==

Salary changes are logged in a [[Language:Haskell]]-based implementation with the help of a [[writer monad]]. Compared to a non-monadic implementation, the code is more concise. Details of logging are localized such that they only surface in the context of code that actually changes salaries.

== Illustration ==

See [[Contribution:haskellLogging]] for a simpler, non-monadic implementation.

The present, monadic implementation differs only with regard to the cut function:

<syntaxhighlight lang=""haskell"">
cut :: Company -> Writer Log Company
cut (Company n ds) =
  do
     ds' <- mapM cutD ds
     return (Company n ds')
  where
    cutD :: Department -> Writer Log Department
    cutD (Department n m ds es) =
      do
         m' <- cutE m
         ds' <- mapM cutD ds
         es' <- mapM cutE es
         return (Department n m' ds' es')
      where
        cutE :: Employee -> Writer Log Employee
        cutE (Employee n a s) =
          do
             let s' = s/2
             let log = [ LogEntry {
                           name = n,
                           oldSalary = s,
                           newSalary = s'
                       } ]
             tell log
             return (Employee n a s')
</syntaxhighlight>

Thus, the family of functions uses a [[writer monad]] in the result types. The sub-traversals are all composed by monadic bind (possibly expressed in do-notation). The function for processing departments totally abstracts from the fact that logging is involved. In fact, that function could be defined to be parametrically polymorphic in the monad at hand.

== Relationships ==

* See [[Contribution:haskellComposition]] for the corresponding contribution that does not yet involve logging. The data model is preserved in the present contribution, but the functions for cutting salaries had to be rewritten since the logging concern crosscuts the function.
* See [[Contribution:haskellLogging]] for a variation on the present contribution which does not yet use monadic style.

== Architecture ==

See [[Contribution:haskellLogging]].

In addition, a trivialized implementation of the standard writer monad is included into the contribution.

== Usage ==

See [[Contribution:haskellLogging]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[uses::Technology:HUnit]]
* [[uses::Writer monad]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Logging]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell potpourri]]
* [[memberOf::Theme:Haskell introduction]]

",2013-06-12 14:59:12.994,2017-07-05 15:29:59.240362
Concept,Type,"== Headline ==

A description of a set of values

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Type_theory]]
* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:56:33.914,2017-07-04 15:26:28.206353
Concept,Software artifact,"== Headline ==

An artifact produced along with software development

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Artifact_(software_development)]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:56:04.28,2017-07-04 15:26:24.062209
Feature,Distribution,"== Headline ==

Distribute company data and operations

== Description ==

Distribution may be explained with the help of the [[Client-server architecture]]. The server is assumed to maintain company data and provide services for data access and behaviors such as totaling or cutting salaries. The client may be, for example, a GUI- or browser-based component through which the data is accessed and the services are invoked by the user. Different kinds of protocols and technologies are conceivable for setting up such a client-server architecture. For instance, client and server could communicate in a request/response manner using, for example, [[REST]]. Also, the server may be a [[SOA]]-based Web service implying calls to service on the client side. Further, server and client may use [[RMI]] to communicate with each other. The feature is considered an [[101execution|execution quality]] in the sense that the system is observably or knowingly distributed such that the system user interacts with the client whereas some of the operations and some of the data management resides on a different server side.

== Metadata ==

* [[instanceOf::Non-functional requirement]]
* [[instanceOf::Optional feature]]
* [[facilitates::Client-server architecture]]

",2013-06-12 14:59:44.505,2017-07-04 13:46:33.879557
Contribution,javaDSLFunctionSequence,"== Headline ==

[[Internal DSL]] technique using a series of unrelated calls.
==Characteristics==

This implementation demonstrates the [[Internal DSL]] pattern called [[Function Sequence]]. Function Sequence consists of a series of unrelated calls, which are ordered in a sequence but only by time of execution. There is no data relationship between the calls, thus context variables are needed. Another possibility is to use  [[Object Scoping]].
Another thing thats needed are global functions or some kind of namespace control in your used language. This implementation uses Java and benefits of the static imports.

[[Function Sequence]] is ideal for DSLs high level statements and should normally be combined with the other [[Internal DSL]] techniques like [[Method Chaining]] and [[Nested Function]]
==Illustration==

Similar to [[feature:Parsing]] ...

<fragment url=""src/org/softlang/company/tests/CBBigExample.java/class/CBBigExample""/>

[https://github.com/https://github.com/101companies/101simplejava/tree/master/contributions/javaDSLFunctionSequence here].
== Metadata ==
* [[developedBy::Contributor:todeslord]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Object Scoping]]
* [[uses::Function Sequence]]
[[uses::Internal DSL]]
",2014-07-29 10:11:52.821,2017-07-05 15:30:21.969804
Contribution,antlr4ParseTreeListener,"== Headline ==

Parsing text to trees and walk them with [[Technology:ANTLR4|]] Listeners

==Realtionships==

This an ANTLR4 version of [[Contribution:antlrTrees]] using the Listener pattern.

==Illustration==

Total and Cut are implementations of the CompanyBaseListener using the listener pattern ([[Observer pattern]]). To execute Cut or Total the walk method of an instance of  ParseTreeWalker is used. The Listener to execute is given as an argument to walk.

An example from TotaListenerTest:
<syntaxhighlight lang=""Java"">
    ParseTreeWalker walker = new ParseTreeWalker();
    TotalListener extractor = new TotalListener(parser);
    walker.walk(extractor, tree);
    System.out.println(""Total = "" + extractor.getTotal());
</syntaxhighlight>
The variable tree conatins the ParseTree of the company.

An example from the TotalListener:
<syntaxhighlight lang=""Java"">
public class TotalListener extends CompanyBaseListener {
    private float total = 0;

    //skip uninteresting part

    public float getTotal() {
      return total;
    }
    @Override
    public void enterEmployee(@NotNull CompanyParser.EmployeeContext ctx) {
        // All FLOATS are salaries
        total += Float.parseFloat(ctx.FLOAT().getText());
    }
}
</syntaxhighlight>

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[developedBy::Contributor:Manfred Jackel]]
* [[developedBy::Contributor:mpaul138]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

",2014-08-17 15:36:25.467,2017-07-05 15:30:23.003665
Technology,ANTLR4,"==Headline==

ANTLR4 is the fourth version of [[Technology:ANTLR|]] (ANother Tool for Language Recognition) for generating parsers

== Metadata ==

* [[implements::Language:ANTLR4]]
* [[versionOf::Technology:ANTLR]]
* [[instanceOf::Parser generator]]
* [[managedBy::https://github.com/antlr/antlr4/]]
* [[facilitates::Parsing]]
",2014-08-17 15:40:38.136,2017-07-05 15:30:23.049436
Contribution,springBootMicroservice,"== Introduction ==

== Motivation ==

== App - Overview ==

== Features ==

# Company
## Hierarchical Company
# Total
# Median
# Cut
# Depth (?)
# COI (?)
# Mentoring (?)
# Ranking (maybe)
# History =)
# Serialization (automagic)
## Open/Closed?
# Persistence
# (Mapping)
# (Distribution)
# Parallelism (?)
## Task parallelism
# Logging (cool!)
# Browsing
# Editing
# Restructuring (maybe)
# Web UI
# (Parsing)
# (Unparsing)

#

== Tech - Stack ==
# Microservice
# REST
# JSF
## PrimeFaces
# CDI
# SpringBoot
# SpringFramework
# HATEOAS (HAYTEEE'OS)
# HAL
# JSON
# Java8
# FunctionalOO
# SpringData
## JPA
## REST
# Database (Whatever needed)
# Tomcat


== Software - Stack ==

== App - Description ==

# Stages
## Stage1: Chassis
### Rapid Development
## Stage2: Persistence & Crud
## Stage3: Features & Biz Logic
## Stage4: Eventhandlers
## StageZ: JSF Integration
## StageZ: Testing
## StageZ: ...


== Installation ==
# Tests

== Operation ==
# Logging?
# Boot-Admin
# Health-Endpoint
## Online?
## RuntimeStats
# Configuration Endpoint

== Code - Maintenance ==

== Versioning ==

== ISSUES ==
# Collection->Item->Association
# DATAREST-XXX -> Owned sides of relations ""cannot be edited"". + Associations can hardly be edited
## What logic should be used here anyways?
# URI is somewhat irrelevant, ID matters!

== See also ==

http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/
http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/
http://docs.spring.io/spring-hateoas/docs/current/reference/html/
http://docs.spring.io/spring-data/rest/docs/current/reference/html/
http://docs.spring.io/spring-data/jpa/docs/current/reference/html/

== Metadata ==

* [[developedBy::Contributor:Nils Breest]]
* [[uses::Technology:JSON Schema]]
* [[uses::Language:Java]]
* [[uses::Technology:Java EE]]
* [[uses::Client-server architecture]]
* [[uses::Separation of concerns]]
* [[uses::Many-to-many]]
* [[uses::Data modeling]]
* [[uses::Design pattern]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Median]]
* [[implements::Feature:Company]]
* [[implements::Feature:Persistence]]
* [[uses::Functional programming]]
* [[uses::OO programming]]
* [[relatesTo::Lambda calculus]]
",2015-08-11 18:01:24.408,2017-07-05 15:30:24.481884
Contribution,JavaFXFlatcompany,"== Headline ==

Interactive interface of a flat company including some standard and some special features.

==Usage==
This contribution uses [[Technology:Eclipse]] and the Graphictool JavaFX.

See https://github.com/jtomasetti/gamma-project_for_ptt_ss16_ass01/blob/master/README.md
(The link to the repo is not working at the moment)

==Metadata==

[[uses::Language:Java]]

[[developedBy::Contributor:jtomasetti]] as representative of group gamma

[[implements::Feature:Flat company]]

[[implements::Feature:Editing]]

[[implements::Feature:Undo-Redo]]

[[implements::Feature:Total]]

[[implements::Feature:Cut]]

[[implements::Feature:Median]]

[[implements::Feature:History]]",2016-05-10 13:48:43.088,2017-07-05 15:30:25.13001
Concept,Towers of Hanoi,"== Headline ==

A mathematical puzzle whose solution illustrates [[recursion]]

== Citation ==

(https://en.wikipedia.org/wiki/Recursion_(computer_science), 10 November 2015)

There are three pegs which can hold stacks of disks of different diameters. A larger disk may never be stacked on top of a smaller. Starting with n disks on one peg, they must be moved to another peg one at a time. What is the smallest number of steps to move the stack?

== Illustration ==

The following recursive function, given in [[Language:Java]] computes the smallest number of steps to move the stack.

<syntaxhighlight lang=""java"">
public static int hanoi(int n) {
  if (n==1)
    return 1;
  else
    return 2 * hanoi(n-1) + 1;
}
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Recursive function]]
* [[sameAs::https://en.wikipedia.org/wiki/Tower_of_Hanoi]]
* [[relatesTo::https://en.wikipedia.org/wiki/Recursion_(computer_science)]]",2015-11-10 08:48:44.413,2017-07-04 13:48:07.979186
Contribution,xslt,"== Headline ==

[[XML processing]] with [[Language:XSLT]]

== Motivation ==

XSLT is easily applied to the basic query/transformation features. Structurally recursive,
[[type-preserving transformation]]s are taken care of by XSLT transformations
that leverage the ""copy-recurse"" idiom for all elements that do not require
any ""local"" change; see below. Structurally recursive queries are handled similarly;
output mode ""text"" is used, though. The data model for companies is provided as an XML schema.
Validity is not checked or otherwise implied.

== Illustration ==

The transformation relies on the ""copy-recurse"" idiom.

<pre>
	<xsl:template match=""@*|node()"">
		<xsl:copy>
			<xsl:apply-templates select=""@*|node()""/>
		</xsl:copy>
	</xsl:template>
</pre>

== Architecture ==

Each of the implemented query/transformation features is modeled by a designated XML transformation.

== Usage ==

In principle, any XSLT implementation should do.

Two XSLT implementations are discussed below.

See the Makefile for running some tests.

An xsltproc implementation is readily available on OS X, Linux et al.

A version of Saxon is included in the code repository for this implementation.

Tested with this version of xsltproc:

<pre>
$ xsltproc -V
Using libxml 20703, libxslt 10124 and libexslt 813
xsltproc was compiled against libxml 20703, libxslt 10124 and libexslt 813
libxslt 10124 was compiled against libxml 20703
libexslt 813 was compiled against libxml 20703

Also possible to work with Saxon from:
	http://saxon.sourceforge.net/ or http://www.saxonica.com/
</pre>

Tested with this version of Saxon:

<pre>
$ java -jar saxon/saxon9he.jar
No source file name
Saxon-HE 9.2.1.2J from Saxonica
Usage: see http://www.saxonica.com/documentation/using-xsl/commandline.html
Options:
   ...
</pre>

Tested on the following machines:

<pre>
	Darwin ... 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE I386 i386
		(both test-xsltproc and test-saxon)
	Darwin ... 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE I386 i386
		(both test-xsltproc and test-saxon)
	Linux ... 2.6.32-21-generic #32-Ubuntu SMP Fri Apr 16 08:09:38 UTC 2010 x86 64 GNU/Linux
		(both test-xsltproc and test-saxon with Java 6)
	Linux ... 2.6.16.60-0.69.1-ppc64 #1 SMP Fri Sep 17 17:07:54 UTC 2010 ppc64 ppc64 ppc64 GNU/Linux
		(only test-xsltproc due to the lack of Java 5+)
	Linux ... 2.6.13-15.18-bigsmp #1 SMP Tue Oct 2 17:36:20 UTC 2007 i686 i686 i386 GNU/Linux
		(only test-xsltproc due to the lack of any Java)
	Microsoft Windows XP [Version 5.1.2600]
		(only saxon due to the lack of xsltproc)
</pre>

The project can be opened with Eclipse for convenience.

== Metadata ==

* [[uses::Language:XML]]
* [[uses::Language:XSD]]
* [[uses::Language:XSLT]]
* [[uses::Technology:xsltproc]]
* [[uses::Technology:Saxon]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[memberOf::Theme:Starter]]
* [[developedBy::Contributor:rlaemmel]]
* [[developedBy::Contributor:grammarware]]
* [[memberOf::Theme:XML programming]]

",2013-06-12 14:59:20.045,2017-07-05 15:30:05.806377
Property,memberOf,"== Headline ==

Topic members of a course

== Metadata ==
* [[hasDomain::Type:Script]]
* [[hasRange::Type:Course]]",2017-07-06 15:49:08.910076,2017-07-06 15:52:11.673568
Course,Programming in Koblenz,"== Headline ==

An advanced BSc course on programming techniques and technologies in Koblenz
== Events ==

* Lecture [[Script:The Expression Problem|The Expression Problem]]
* Lecture [[Script:Selected design patterns|Selected design patterns]]
* Lecture [[Script:XML data binding|XML data binding]]
* Lecture [[Script:Language processing patterns|Language processing patterns]]
* Lecture [[Script:Generative programming|Generative programming]]
* Lecture [[Script:Metaprograms and metadata|Metaprograms and metadata]]
* Lecture [[Script:Functional OO programming|Functional OO programming]]
* Lecture [[Multithreading|Multithreading]]
* Lecture [[Script:Aspect-oriented programming|Aspect-oriented programming]]
* Lecture [[Script:Database programming|Database programming]]
* Lecture [[Script:Remote method invocation|Remote method invocation]]
* Lecture [[Script:Data parallelism|Data parallelism]]
== Metadata ==


* [[sameAs::http://softlang.wikidot.com/course:ptt]]
* ",2013-06-12 14:59:39.423,2017-07-04 13:46:32.920076
Namespace,Information,"== Headline ==

The namespace of advices, hints, etc.

== Description ==

The [[101project]] is an advanced knowledge resource which in turn also relies on an advanced infrastructure. [[Namespace:Information]] helps with using and contributing to the knowledge resource and the infrastructure. ""Information"" is used here in the broad sense to include advices, clues, hints, instructions, notes, tips, and what have you. Importantly, ""information"" is meant here in the sense of meta-knowledge about 101 as opposed to knowledge about technologies, languages, and concepts.

== Illustration ==

See basic information like this:
* [[101explorer]]: How to discover 101 in a LinkedData sense?
* [[Information:Contribute]]: How to contribute to 101?
* [[Information:Markup]]: What markup to use?
* [[Information:Contact]]: How to contact 101 HQ?
* [[Information:Inform]]: How to add information?

== Relationships ==

* Namespaces as instance of [[Namespace:Namespace]], by themselves, also capture meta-knowledge, but namespaces are more focused on metamodels of pages on 101wiki, where the instances of [[Namespace:Information]] are more focused on informal pieces of meta-knowledge.

== Metamodel ==

* '''Headline''' (required): the headline introducing the information.
* '''Description''' (required): the description of the information.
* '''Metadata''' (required):
** The information must be declared to be, indeed, an instance of [[Namespace:Information]].
** The information may be said to ""relate to"" to relevant pages on 101wiki.
** The information may be linked to external resources.


== Metadata ==
* ",2013-06-12 15:00:48.989,2017-07-04 13:46:42.720642
Course,Web programming for Debeka,"== Headline ==

Professional training on modern web programming

== Summary ==

The course was designed for professional training at [http://www.debeka.de Debeka].

The course was done in the form of a one day tutorial in September 2012.

== Metadata ==

* [[sameAs::http://github.com/avaranovich/webcourse/wiki]]
* ",2013-06-12 14:59:39.669,2017-07-04 13:46:32.938116
Dotnet,System.Xml,"== Headline ==

.NET namespace for [[Language:XML]] support

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::.NET namespace]]
* [[sameAs::http://msdn.microsoft.com/en-us/library/system.xml(v=vs.71).aspx]]
* ",2013-06-12 14:59:40.04,2017-07-04 13:46:32.955393
Dotnet,System.Xml.Serialization,"== Headline ==

.NET namespace for [[Technology:.NET XML Serialization]]

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::.NET namespace]]
* [[sameAs::http://msdn.microsoft.com/en-us/library/system.xml.serialization.aspx]]
* ",2013-06-12 14:59:40.339,2017-07-04 13:46:32.970639
Concept,Accumulator parameter,"== Headline ==

An extra paramter for an intermediate result in [[recursive function]]s

== Illustration ==

Consider the following recursive formulation of the [[Factorial]] function in [[Language:Java]].

<syntaxhighlight lang=""java"">
public static long factorial(int n) {
  if (n<=1)
    return 1;
  else
    return n*factorial(n-1);
}
</syntaxhighlight>

While perfectly valid as a function definiton, the particular form of recursion, i.e., [[primitive recursion]] rather than [[tail recursion]] may be a source of ineffeciency. That is, the [[call stack]] grows with each recursive call, even though this would be easily avoidable, for example, with a non-recursive forumulation. There is also a more efficient, tail-recursive formulation, which uses an extra parameter to pass on the product computed by the function.

<syntaxhighlight lang=""java"">
public static long factorial(int n) {
  return factorial(1, n);
}
public static long factorial(int r, int n) {
  if (n<=1)
    return r;
  else
    return factorial(n*r, n-1);
}
</syntaxhighlight>

More generally, the idea is to move the computations for post-processing results into the extra argument position.

== Metadata ==

* [[instanceOf::Programming technique]]
* [[relatesTo::https://en.wikipedia.org/wiki/Tail_call]]",2015-11-10 09:15:01.927,2017-07-04 13:48:08.058351
Feature,Geolocation,"== Headline ==

Identify the geographic location of the user

== Metadata ==
* [[instanceOf::UI_101feature]]
* [[sameAs::http://en.wikipedia.org/wiki/Geolocation]]
*

",2013-06-12 14:59:45.994,2017-07-04 13:46:34.253031
Concept,Data compression,"== Headline ==

Conversion to a representation that requires less space

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Data_compression]]

",2013-06-12 14:53:37.228,2017-07-04 13:44:39.705385
Feature,Access control,"== Headline ==

[[Access control|Control access]] for company data and operations

== Description ==

Users may differ in what data they can access in read or write mode. Basic authorization may be needed to read the company structure including names but excluding addresses and salaries. Manager-level authorization may be needed to read and write salary data of heads under a manager. Yet extra authorization may be needed to read data of all employees.

== Metadata ==
* [[instanceOf::101execution]]
*

",2013-06-12 14:59:40.609,2017-07-04 13:46:32.98817
Feature,Closed serialization,"== Headline ==

Serialize companies in a [[Closed serialization|closed manner]]

== Relationships ==

See [[Feature:Open serialization]].

== Metadata ==

* [[instanceOf::Non-functional requirement]]
* [[childOf::Feature:Serialization]]

",2013-06-12 14:59:42.332,2017-07-04 13:46:33.270719
Module,themesExtractor,"== Headline ==

Resolving of metadata and contributions

== Metadata ==

",2013-06-12 15:00:46.71,2017-07-04 13:46:42.373629
Concept,DistributedComputing,Distributed Computing indicates that a computation task in not performed on a single machine but on multiple different machines. Usually the computation is guided by a software (technology). If you want to learn more have a look to wikipedia: https://en.wikipedia.org/wiki/Distributed_computing,2017-07-30 13:30:40.197061,2017-07-30 13:32:06.648006
Feature,Code generator,"== Headline ==

Develop and demonstrate a code generator

== Description ==

This is a generative programming-related feature for the development and demonstration of a code generator. The developed tool may support technological space travel (in the sense of [[Mapping]]) or some form of model-driven engineering. The tool is to be demonstrated by generating code for other features.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Code generation]]
* [[relatesTo::http://en.wikipedia.org/wiki/Automatic programming]]
* [[relatesTo::http://gttse.wikidot.com/]]

",2013-06-12 14:59:42.656,2017-07-04 13:46:33.290679
Feature,Company,"== Headline ==

Model companies

== Description ==

There are the following major kinds of entities involved:

* ''Companies''
* ''Employees''
* ''Departments''

''Departments'' are only involved if and only if sub-feature [[Feature:Hierarchical company]] as opposed to sub-feature [[Feature:Flat company]] is chosen.

Entities are composed of parts as follows:

* A ''company'' has a ''name''.
* A ''company'' has ''employees'' maintained in some sort of collection.
* A ''company'' has (possibly) ''departments''.
* An ''employee'' has a ''name'', a ''salary'' and an ''address''.

There are the following additional assumptions:

* Company names are strings such as ""Acme"".
* Employee names are strings such as ""Joe"".
* Addresses are strings such as ""Redmond"".
* Salaries are non-negative floating point numbers such as ""42.42"".
* Employee names are unique across companies.

The following simplifications and omissions are deliberate:

* In reality, employee names are not necessarily unique.
* In reality, a company may have a CEO, CFO, etc. omitted here.
* Salaries may call for a money type also including a currency.

== Motivation ==

This feature triggers use of basic data modeling techniques in implementing the [[system:Company]]. Basic company structure suffices with a tree-like representation of companies.

== Illustration ==

See [[Feature:Flat company]] and [[Feature:Hierarchical company]] for illustration.

== Relationships ==

* See [[Feature:Flat company]] and [[Feature:Hierarchical company]] for concrete  features for this abstract feature for basic company structure.
* There are several other features that also deal with extras of company structure: [[Feature:COI]], [[Feature:Mentoring]], [[Feature:Ranking]], and [[Feature:Singleton]].

== Guidelines ==

This is an abstract (an XOR) feature, which should not be chosen as such, but instead either [[Feature:Flat company]] or [[Feature:Hierarchical company]] is to be selected.

== Metadata ==

* [[instanceOf::Data requirement]]
* [[instanceOf::Mandatory feature]]
* [[instanceOf::Alternative feature]]

",2013-06-12 14:59:42.901,2017-07-04 13:46:33.41084
Concept,Call stack,"== Headline ==

A data structure maintaining ongoing calls in a program

== Illustration ==

Consider the following [[Language:Java]] program for illustration:

<syntaxhighlight lang=""java"">
public class Demo {
	public static int max(int x, int y) {
		if (x>y)
			return x;
		else
			return y;
	}
	public static void main(String[] args) {
		int x = 101;
		int y = 88;
		int z = 42;
		out.println(max(y, z));
		out.println(max(x, y));
	}
}
</syntaxhighlight>

Both the ''main'' and the ''max'' function declare variables ''x'' and ''y''. When ''main'' calls ''max'', then the call stack helps avoiding confusion between these variables of the same name (and type). That is upon starting the called method, a return address is saved and a ""frame"" for the local variables is created. Without such an extra frame, the fist invocation of ''max'' would override the variable ''x'' in main.

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Call_stack]]
",2015-11-10 09:31:17.356,2017-07-04 13:48:08.117164
Course,Lambdas in Koblenz,"== Headline ==

Introduction to functional programming at the University of Koblenz-Landau

== Schedule of latest edition ==

* Lecture [[Script:First steps in Haskell | First steps]]
* Lecture [[Script:Basic software engineering for Haskell | Basic software engineering]]
* Lecture [[Script:Searching and sorting in Haskell | Searching and sorting]]
* Lecture [[Script:Data modeling in Haskell | Basic data modeling]]
* Lecture [[Script:Higher-order functions in Haskell | Higher-order functions]]
* Lecture [[Script:Type-class polymorphism|Type-class polymorphism]]
* Lecture [[Script:Functors and friends|Functors and friends]]
* Lecture [[Script:Functional data structures|Functional data structures]]
* Lecture [[Script:Unparsing and parsing in Haskell | Unparsing and parsing]]

== Additional lectures ==

* Lecture [[Script:Monads|Monads]]
* Lecture [[Script:Generic functions|Generic functions]]

== Metadata ==

* [[sameAs::http://softlang.wikidot.com/course:fp]]




      ",2013-06-12 14:59:39.157,2017-07-14 08:39:10.006486
Feature,Data parallelism,"== Headline ==

Apply [[data parallelism]] to total or cut salaries

== Description ==

The [[system:Company]] may be subject to huge companies with millions of employees and substantial nesting of departments. The present feature applies when the system architecture scales for such company data and [[data parallelism]] is leveraged. See also [[Feature:Task parallelism]].

== Metadata ==

* [[instanceOf::Non-functional requirement]]
* [[childOf::Feature:Parallelism]]

",2013-06-12 14:59:43.681,2017-07-04 13:46:33.652034
Feature,Editing,"== Headline ==

Edit companies in a [UI]

== Description ==

Users of the [[system:Company]] expect to be able to edit attributes for names, addresses, and salaries. For instance, the name of an employee may need to be change when the employee gets married. Also, the address of the employee may need to changed when the employee moves to a new house. No structural edits of the company are yet anticipated here, but see [[Feature:Restructuring]]. That is, employees cannot move, for example, from one department to another one. We also consider the status of an employee to be a manager or not as a structural property.

== Details ==

=== Change propagation ===

There are two options for committing changes from text fields to the underlying data (model):

* ''Option 1 is to commit changes immediately'': this option may be sometimes more reasonable for a classic, GUI-based standalone application. (For instance, a change event on a text field may be translated, perhaps with the help of a controller in the sense of MVC, into an actual property change on the data model.)
* ''Option 2 is to commit changes when a ""Save"" button on the view is pushed'': this option may be sometimes more reasonable for a web-based application. (For instance, a web client may want to limit the communication with a server, and hence rely on an explicit ""Save"" action for the propagation of the data changes.)

=== Validation ===

Once editing is enabled, then some constraints must be validated as suggested by [[Feature:Hierarchical company]]. A notification for the constraint violation may be shown, for example, in the view one line below the offending field. The salary validation (such that salaries are positive decimal values) may be realized via field input restriction. In the following, we describe such validation for the case of a client/server architecture, as this appears to be a more involved scenario.

==== Company ====
* [[client-side]] validation:
** The name of a company is not empty.

==== Department ====
* [[client-side]] validation:
** The name of a department is not empty.
* [[server-side]] validation:
** The name of a department is unique for all departments of the company.

==== Employee ====
* [[client-side]] validation:
** A salary is a positive, double value.
** A salary is not empty.
* [[server-side]] validation:
** Uniqueness of names may need to be checked for some implementations of [[Feature:Hierarchical company]].
** Additional salary constraints apply when [[Feature:Ranking]] is implemented.

== Metadata ==

* [[instanceOf::UI requirement]]
* [[instanceOf::Optional feature]]
* [[dependsOn::Feature:Browsing]]

",2013-06-12 14:59:44.764,2017-07-04 13:46:33.966755
Feature,Flattened company,"== Headline ==

Represent [[Feature:Hierarchical_company|hierarchical companies]] in a flat manner

== Metadata ==

* [[instanceOf::Data requirement]]

",2013-06-12 14:59:45.462,2017-07-04 13:46:34.199273
Concept,Tail recursion,"== Headline ==

A form of [[single recursion]] suited for simple [[recursion removal]]

== Illustration ==

A tail recursive function ''f'' is of the following form:

''f(x)'' =
* ''g(x)'', if ''p(x)''
* ''f(r(x))'', otherwise
for suitable ''g'', ''p'', and ''r''.

The schema variables ''g'', ''p'', and ''r'' serve these roles:
* ''p'' is the condition of the base case.
* ''g'' is the computation of the base case.
* ''r'' is the computation for the argument of a recursive application.

We use [[Language:Java]] for illustration.

Consider the following tail-recursive formulation of a function for testing ints to be even.

<syntaxhighlight lang=""java"">
	// Assume n>=0
	public static boolean even(int n) {
		if (n==0) return true;
		else if (n==1) return false;
		else return even(n-2);
	}
</syntaxhighlight>

The function is tail-recursive, because the function returns right away after the recursive call.

For comparison, the following formulation is not tail-recursive; rather primitive recursion is used.

<syntaxhighlight lang=""java"">
	// Assume n>=0
	public static boolean even(int n) {
		if (n==0) return true;
		else return !even(n-1);
	}
</syntaxhighlight>

Every tail-recursive formulation can be easily translated into an iterative one, subject to [[tail-call elimination]].

== Metadata ==

* [[isA::Single recursion]]
",2015-11-10 14:19:01.628,2017-07-04 15:26:43.728949
Contribution,101kafka,"== Headline ==

Implements 101companies features using Kafka

== Description ==
This contributions implements the total and cut method of the 101company system with the help of the streaming tool Kafka. To do so topics are created to which the employee data (as json) are published and then either total is executed on them or cut is implemented. The result is printed and/or consumed to another topic.

If you want to learn more have a look to: https://www.youtube.com/watch?v=aJuo_bLSW6s

== Metadata ==
* [[supports::DistributedComputing]]
* [[supports::StreamProcessing]]
* [[facilitates::ClusterComputing]]
* [[hasRole::MessageBroker]]
* [[facilitates::PublishSubscribe]]
* [[facilitates::TopicConstruct]]
* [[uses::Java]]
* [[uses::Scala]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::produce]]
* [[implements::consume]]




",2017-06-04 10:18:16.337694,2017-07-30 13:28:33.067093
Contribution,101spark,"== Headline ==
Spark is software tool which uses a structure called RDF for the parallel computation of data. It further has submodules for streaming, machine learning, Graphs and SQL like data structures. All of those are modelled.
This contribution impmentes a  Total and Cut method of 101 companies with the Spark framework

== Metadata ==
* [[supports::DistributedComputing]]
* [[facilitates::CoarseGrainedTransformation]]
* [[facilitates::ClusterComputing]]
* [[hasRole::MessageBroker]]
* [[reuses::HadoopYARN]]
* [[belongsTo::ClusterComputingWare]]
* [[uses::Java]]
* [[uses::Scala]]
* [[uses::Python]]
* [[uses::CoarseGrainedTransformation]]
* [[implements::ResilientDistributedDatasets]]
* [[implements::performTransformationInMemory]]
* [[implements::performTransformationOnFiles]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
",2017-05-25 12:48:12.195794,2017-07-30 13:26:31.299615
Feature,History,"== Headline ==

Maintain and analyze historical company data

== Description ==

Company data is to be maintained for a number of years so that some analysis are applicable. Specifically, management is interested in the development of salaries in terms of the [[total]] and the [[median]] of salaries over the years. To this end, the data may be visualized via a [[bar chart]].

== Motivation ==

The feature triggers the need to deal with historical data, which, in a practical setting would need to be obtained by regular snapshotting or the use of a temporal database. Simple implementations of the feature may simply assume sufficient historical data via test data. More interesting implementations may also model (simulate) the process of obtaining historical data.

== Illustration ==

See [[Contribution:haskellBarchart]] for an illustration.

== Relationships ==

The feature leverages [[Feature:Total]] and [[Feature:Median]].

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Temporal_database]]
* [[instanceOf::Functional requirement]]
* [[instanceOf::Data requirement]]
* [[instanceOf::Optional feature]]
* [[dependsOn::Feature:Total]]
* [[dependsOn::Feature:Median]]

",2013-06-12 14:59:47.154,2017-07-04 13:46:34.660409
Technology,React,"== Metadata ==

* [[uses::Language:Javascript]]
* [[sameAs::https://facebook.github.io/react/]]",2016-11-17 15:03:35.534315,2017-08-22 18:30:08.801435
Contributor,grammarware,"",2017-08-29 12:41:28.190243,2017-08-29 12:41:28.190243
Feature,Intelligent UI,"== Headline ==

Intelligent UI support


== Metadata ==
* [[instanceOf::UI 101feature]]
* ",2013-06-12 14:59:47.44,2017-07-04 13:46:34.673532
Concept,Data model,"== Headline ==

A model of the data processed by a [[software system]] or [[software component|component]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Data_model]]
* [[memberOf::Vocabulary:Data modeling]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:53:38.549,2017-07-04 15:26:07.661549
Feature,Logging,"== Headline ==

Log and analyze salary changes

== Description ==

Salaries of employees may change over time. For instance, a salary cut systematically decreases salaries. Of course, a pay raise could also happen; point-wise salary changes are conceivable as well. Salary changes are to be logged so that they can be analyzed within some window of interest. Specifically, a salary cut is to be logged with names of affected employees, salary before the change, and salary after the change. The log is to be analyzed in a statistical manner to determine the [[median]] and the [[mean]] of all salary deltas.

== Motivation ==

The feature requires [[logging]] of updates to employee salaries. Depending on the programming language at hand, such logging may necessitate revision of the code that changes salaries. Specifically, logging of salary changes according to a salary cut may necessitate adaptation of the actual [[transformation]] for cutting salaries. Logging should be preferably added to a system while obeying [[separation of concerns]]. So logging is potentially a [[crosscutting concern]], which may end being implemented in a scattered manner, unless some strong means of [[modularization]] can be adopted.

== Illustration ==

The log for salary cut for the ""standard"" sample company would look as follows.

<pre>
[ LogEntry {name = ""Craig"", oldSalary = 123456.0, newSalary = 61728.0},
  LogEntry {name = ""Erik"", oldSalary = 12345.0, newSalary = 6172.5},
  LogEntry {name = ""Ralf"", oldSalary = 1234.0, newSalary = 617.0},
  LogEntry {name = ""Ray"", oldSalary = 234567.0, newSalary = 117283.5},
  LogEntry {name = ""Klaus"", oldSalary = 23456.0, newSalary = 11728.0},
  LogEntry {name = ""Karl"", oldSalary = 2345.0, newSalary = 1172.5},
  LogEntry {name = ""Joe"", oldSalary = 2344.0, newSalary = 1172.0}
]
</pre>

For what it matters, the salary cut operates as a depth-first, left-to-right traversal of the company; thus the order of the entries in the log. Projection of changes to deltas and sorting them results in the following list of deltas:

<pre>
[ -117283.5,
  -61728.0,
  -11728.0,
  -6172.5,
  -1172.5,
  -1172.0,
  -617.0
]
</pre>

Clearly, the [[median]] is the element in the middle:

<pre>
-6172.5
</pre>

By contrast, the [[mean]] is much different because of the skewed distribution of salaries:

<pre>
-28553.355
</pre>

See [[Contribution:haskellLogging]] for a simple implementation of the feature in [[Language:Haskell]].

== Relationships ==

* The present feature builds on top of [[Feature:Cut]], as it is required to demonstrate the analysis of logged deltas for the transformation of a salary cut.
* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical company]].

== Guidelines ==

* The ''name'' of the type for logs should involve the term ""log"".
* A suitable ''demonstration'' of the feature's implementation should cut the sample company and compute the median of the salary deltas, as indeed stipulated above.

== Metadata ==

* [[instanceOf::Functional requirement]]
* [[instanceOf::Optional feature]]
* [[facilitates::Separation of concerns]]

",2013-06-12 14:59:48.624,2017-07-04 13:46:34.897793
Feature,Depth,"== Headline ==

Compute the nesting depth of departments

== Description ==

The nesting depth of departments within a company is to be computed; see below for details. Let's assume that the management of the company is interested in the nesting depth as a simple indicator for the complexity of the company (or particular departments thereof) in the sense of a hierarchical organization. Nesting depth, together possibly with other metrics and information, could feed into the discussion of reorganizing business structures.

The nesting depth is computed as follows:
* The depth of a department is 1 + the maximum of the depths of its sub-departments.
* In particular, the depth of a department without sub-departments is 1.
* The depth of a company is the maximum of the depths of its (immediate) departments.

== Motivation ==

The feature may be implemented as a [[query]], potentially making use of a suitable [[query language]]. Conceptually, the required query is non-trivial in that it needs to process company structure recursively so that nesting of departments can be properly observed. For instance, it is not straightforward to design a [[Language:SQL]] query that computes indeed nesting depth on a normalized relational schema for company data. Thus, it shall be interesting to see how different software languages, technologies, and implementations succeed in realizing the feature.

== Illustration ==

The feature is illustrated with a [[Function]] in [[Language:Haskell]] that works on top of appropriate [[algebraic data type]]s for company data; the function recurses into company data in a straightforward manner and it counts departments along the way:

<syntaxhighlight lang=""haskell"">
depth :: Company -> Int
depth (Company   ds) = max' (map depth' ds)
  where
    max' = foldr max 0
    depth' :: Department -> Int
    depth' (Department     ds  ) = 1 + max' (map depth' ds)
</syntaxhighlight>

The snippet originates from [[Contribution:haskellComposition]].

== Relationships ==

* See [[Feature:Total]] for a simpler query scenario.
* Indeed, the present feature should be tackled only after [[Feature:Total]].
* The present feature can only usefully instantiated on top of [[Feature:Hierarchical_company]], as it assumes nesting of departments for non-trivial results.

== Guidelines ==

* The ''name'' of an operation for computing the nesting depth of departments should involve the term ""depth"".
* A suitable ''demonstration'' of the feature's implementation should compute the depth of a sample company.
* See [[Feature:Total]] for more detailed guidelines on a query scenario, which apply similarly to the present feature.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Hierarchical organization]]
* [[relatesTo::http://en.wikipedia.org/wiki/Restructuring]]
* [[instanceOf::Functional requirement]]
* [[instanceOf::Query]]
* [[instanceOf::Optional feature]]
* [[dependsOn::Feature:Hierarchical_company]]
",2013-06-12 14:59:44.21,2017-07-04 13:46:33.834313
Feature,Flat company,"== Headline ==

Support companies as plain collections of employees

== Description ==

Flat companies are sufficiently described by the base feature [[Feature:Company]].

== Motivation ==

The data model for flat companies is supposed to provide a simple (in fact, trivial) starting point for contributions. Despite its simplicity, the data model readily exercises some data modeling facets: basic types such as strings and floats, compound types based on tuples or records, mandatory as opposed to optional properties, and list-based containers.

== Illustration ==

The feature is illustrated with a data model in [[Language:Haskell]]; [[type synonym]]s instead of [[algebraic data type]]s are used to emphasize the fact that no recursive are defined here:

<syntaxhighlight lang=""haskell"">
type Company = (Name, [Employee])
type Employee = (Name, Address, Salary)
type Name = String
type Address = String
type Salary = Float
</syntaxhighlight>

A sample company takes the following form:

<syntaxhighlight lang=""haskell"">
( ""Acme Corporation"",
  [
    (""Craig"", ""Redmond"", 123456),
    (""Erik"", ""Utrecht"", 12345),
    (""Ralf"", ""Koblenz"", 12342),
    (""Ray"", ""Redmond"", 234567),
    (""Klaus"", ""Boston"", 23456),
    (""Karl"", ""Riga"", 2345),
    (""Joe"", ""Wifi City"", 2344)
 ]
)
</syntaxhighlight>

Company data is a pair consisting of the company name and a list of employees. Each employee has a name, an address, and a salary.

These snippet originate from [[Contribution:haskellList]].

== Relationships ==

* See [[Feature:Hierarchical company]] for hierarchical, i.e., non-flat companies.
* The features [[Feature:Flat company]] and [[Feature:Hierarchical company]] are mutually exclusive and either of them must be selected for any realization of the [[system:Company]].
* Several features cannot be usefully combined with [[Feature:Flat company]]. For instance, [[Feature:Depth]] for the computation of the nesting depth of departments makes no sense without (nested) departments.

== Guidelines ==

* The terms ""company"", ""employee"", ""manager"", ""name"", ""address"", and ""salary"" should appear as part of the abstractions that realize the corresponding ingredients of the data model.
* A ''sample company'' should be described and processed in some ways, depending on what other features are implemented.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Hierarchical organization]]
* [[instanceOf::Data requirement]]
* [[childOf::Feature:Company]]
* [[facilitates::Data modeling]]

",2013-06-12 14:59:45.232,2017-07-04 13:46:34.178524
Contribution,yapg,"== Headline ==

A [[Technology:ANTLR]]-based generator for [[text-to-object mapping]]s

== Motivation ==

Parser generators such as [[Technology:ANTLR]] already enable [[Text-to-object mapping]] because one can author semantic actions so that suitable objects are associated with grammatical structures. For instance, [[Contribution:antlrObjects]] demonstrates this simple idea. A potential problem with this approach is that it requires the definition of both a grammar and object model as well as relatively low-level functionality for the actual mapping, i.e., object construction. This problem is indeed demonstrated by the aforementioned implementation. The present demonstration contains a simple (proof-of-concept) code generator, code-name YAPG (Yet Another Parser Generator) which takes an idiomatic (i.e., constrained) ANTLR grammar and generates a suitable object model as well as an ANTLR grammar with suitable semantic actions for mapping. In this manner, it suffices to author only a simple grammar, without any semantic actions, to obtain an object model as well as the functionality for object population from text. This idea has been exercised by various technologies in the past, e.g., JJForester and Sdf2Haskell (as part of Strafunski). This idea has also seen much interest more recently in the model-driven engineering community. The main objective of the present demonstation is to illustrate the aforementioned idea in the context of the Java platform with a bare-bones implementation that does not use any sophisticated techniques and that leverages an underlying parser generator for the heavy lifting. The developed and demonstrated technology, YAPG, is not just another parser generator, it is, in fact, a parser generator input generator.

== Architecture ==

YAPG is based on the following ANTLR subset for grammar productions.

<pre>
Grammar : prods=Production*;
Production : lhs=Id ':' rhs=Expression ';';
Expression : Sequence | Choice;
Sequence : list=Atom*;
Choice : first=Id rest=Option*;
Atom : Terminal | Nonterminal | Many;
Terminal : symbol=QString;
Nonterminal : label=Id '=' symbol=Id;
Option : '|' symbol=Id;
Many : elem=Nonterminal '*';
</pre>

That is, productions must either define nonterminals as sequences (i.e., composed structure) or choices (i.e., inheritance structure). When defining the operands of a sequence, then all components must be labeled. These two restrictions imply that a straightforward object model can be derived. One can also speak of such grammar as object-oriented context-free grammars.

There are these packages:
* ''org.yapg.company'': demonstration of YAPG for [[Feature:Hierarchical company]].
* ''org.yapg.tests'': JUnit tests for parsing company files.
* ''org.yapg'': the YAPG with modules for code generation.
* ''org.yapg.grammar'': the object model of YAPG which has been applied by YAPG.

== Usage ==

This contribution has been tested with Version 3.2 of ANTLR.

The contribution is an Eclipse Indigo project.

See the Makefiles for invoking the parser generator.

See the JUnit tests for using the generated parser.

== Issues ==

This is (deliberately) a bare-bones implementation of a ""parser generator input generator"".

Hence, some aspects are pretty limited and potentially worth addressing in the future.

* The infamous ""printf"" method is used to generate Java and ANTLR code.
* EBNF support is limited; ""+"" and ""?"" are unsupported.
* The idiomatic style is only partially enforced.

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Code generator]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[developedBy::Contributor:rlaemmel]]
* [[relatesTo::http://en.wikipedia.org/wiki/Strafunski]]
* [[relatesTo::http://www.program-transformation.org/Tools/JJForester]]
* [[memberOf::Theme:ANTLR]]",2013-06-12 14:59:20.759,2017-07-05 15:30:06.433301
Feature,Mapping,"== Headline ==

Map companies across technological spaces

== Description ==

For better interoperability and technological space integration, company data must be representable in different types system and a mapping must be supported between type system, or, in fact, technological spaces so that company data can be processed within the space chosen for programming while also supporting another space, be it for parsing, unparsing, serialization, persistence, and others.

== Motivation ==

The feature can be used to exercise various [[mapping technology|mapping technologies]], e.g., for [[Object-XML mapping]] or [[Object/relational mapping]].

== Metadata ==

* [[instanceOf::Non-functional requirement]]
* [[instanceOf::Optional feature]]

",2013-06-12 14:59:48.92,2017-07-04 13:46:34.938481
Feature,Median,"== Headline ==

Compute the [[median]] of the salaries of all employees

== Description ==

Management would like to know the median of all salaries in a company. This value may be used for decision making during performance interviews, e.g., in the sense that any employee who has shown exceptional performance gets a raise, if the individual salary is well below the current median. Further, the median may also be communicated to employees so that they can understand their individual salary on the salary scale of the company. In practice, medians of more refined groups of employees would be considered, e.g., employees with a certain job role, seniority level, or gender.

== Motivation ==

This feature triggers a very basic statistical computation, i.e., the computation of the median of a list of sorted values. Of course, the median is typically available as a primitive or from a library, but when coded explicitly, it is an  exercise in list processing. This feature may also call for reuse such that code is shared with the implementation of [[Feature:Total]] because both features operate on the list of all salaries.

== Illustration ==

The following code stems from [[Contribution:haskellStarter]]:

<syntaxhighlight lang=""haskell"">
-- Median of all salaries in a company
median :: Company -> Salary
median = medianSorted . sort . salaries
</syntaxhighlight>

First, the salaries are to be extracted from the company. Second, the extracted salaries are to be sorted, where a library function ''sort'' is used here. Third, the sorted list of salaries is to be processed to find the median.

<syntaxhighlight lang=""haskell"">
-- Extract all salaries in a company
salaries :: Company -> [Salary]
salaries (n, es) = getSalaries es

-- Extract all salaries of lists of employees
getSalaries :: [Employee] -> [Salary]
getSalaries [] = []
getSalaries (e:es) = getSalary e : getSalaries es

-- Extract the salary from an employee
getSalary :: Employee -> Salary
getSalary (_, _, s) = s
</syntaxhighlight>

<syntaxhighlight lang=""haskell"">
-- Median of a sorted list
medianSorted [] = error ""Cannot compute median on empty list.""
medianSorted [x] = x
medianSorted [x,y] = (x+y)/2
medianSorted l = medianSorted (init (tail l))
</syntaxhighlight>

== Relationships ==

* See [[Feature:Total]] for another query scenario which also processes the salaries of all employees in a company.

== Metadata ==

* [[instanceOf::Functional requirement]]
* [[instanceOf::Optional feature]]
* [[instanceOf::Query]]

",2013-06-12 14:59:49.512,2017-07-04 13:46:35.12758
Feature,Mentoring,"== Headline ==

Associate employees in terms of mentoring

== Description ==

Employees may sign up for a mentor. The idea is that mentors help their mentees generally with career management. Operationally, a mentee may consult his or her mentor, for example, to interpret results of a performance appraisal and to draw appropriate conclusions. As far as the [[system:Company]] is concerned, it suffices to merely maintain mentors so that management knows about everything.

The association for mentorship is constrained as follows:
* Each employee may have one associated ''mentor''.
* Each employee may have any number of associated ''mentees''.
* Mentors and mentees are employees (managers or not).
* ''A'' is mentor of ''B'' iff ''B'' is mentee of ''A''.
* An employee cannot be a mentor of him- or herself.

Arguably, further constraints could be added. (For instance, it may be reasonable to require that if ''A'' is mentor of ''B'', then ''B'' must not be mentor of ''A''. In this manner, direct cycles would be forbidden.)

Bidirectional navigation is required for the mentorship association.

== Motivation ==

The feature is interesting in so far that it requires more general associations and [[graph]] shape as opposed to just composition and tree shape for the basic hierarchical organization of companies according to [[Feature:Hierarchical company]]. That is, while companies and departments are decomposed in a tree-like manner, mentorship links may reach across the organizational structure. Further, bidirectional navigation as opposed to the simpler unidirectional navigation is required. In a [[Language:UML]] class diagram, for example, the mentorship association can be modeled in a straightforward way. In a [[functional programming language]] and pure style, the association's implementation necessitates look-up functions for locating linked employees, possibly identified by name. In an [[OO programming language]] with references, the mere links for mentorship are implemented easily, but bidirectional navigation and the above constraints necessitates encoding, unless first-class relationships were available in the programming language.

== Illustration ==

The feature is illustrated with predicates in [[Language:Datalog]]. That is, there are declarations of predicates mentorOf/2 and menteeOf/2 to relate employees in both navigation directions of the association. The clauses implement the above description; see the comments for clarification.

<pre>
// Each employee may have a mentor (in the same company or not).
mentorOf[tee] = tor -> Employee(tee), Employee(tor).

// Each employee may have several mentees.
menteeOf(tor,tee) -> Employee(tor), Employee(tee).

// mentorOf and menteeOf are compatible one way.
mentorOf[tee] = tor -> menteeOf(tor,tee).

// mentorOf and menteeOf are compatible the other way.
menteeOf(tor,tee) -> mentorOf[tee] = tor.

// In fact, menteeOf is derived from mentorOf.
menteeOf(tor,tee) <- mentorOf[tee] = tor.

// One must not mentor her- or himself.
mentorOf[tee] = tor -> ! tor = tee.
</pre>

The snippet originates from [[Contribution:heavyLb]].

== Relationships ==

* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical company]].

== Guidelines ==

* Bidirectional navigation is required for the mentorship association.
* The ''name'' for the direction from mentees to mentors should involve the term ""mentor"" (e.g., ""getMentor""). The ''name'' for the opposite direction should involve the term ""mentee"" or ""mentees"" (e.g., ""getMentees"").
* A suitable ''demonstration'' of the feature's implementation should link some employees according to the association and navigate the association in both directions for some employees.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Mentorship]]
* [[relatesTo::http://en.wikipedia.org/wiki/Performance appraisal]]
* [[instanceOf::Data requirement]]
* [[instanceOf::Optional feature]]
* [[facilitates::Graph]]

",2013-06-12 14:59:49.843,2017-07-04 13:46:35.314348
Concept,Data parallelism,"== Headline ==

[[Parallelism]] focused on distributing data across parallel computing nodes

== Details ==

See the related notion of [[task parallelism]].

== Metadata ==

* [[instanceOf::Parallelism]]
* [[sameAs::http://en.wikipedia.org/wiki/Data_parallelism]]
",2013-06-12 14:53:39.2,2017-07-04 13:44:39.818419
Script,Searching and sorting in Haskell,"== Headline ==

Lecture ""Searching and sorting in Haskell"" as part of [[Course:Lambdas in Koblenz]]

== Description ==

We show how to approach the basic [[algorithmic problem]]s of [[search problem|search]] and [[sorting problem|sorting]] in [[Language:Haskell]]. In this manner, we establish proper familiarity with basic functional programming on lists in Haskell, with the use of [[recursion]], [[local scope]], and [[polymorphism]]. We also encounter [[divide and conquer algorithm]]s in this way. Along the way, we discuss some bits of expressiveness of the Haskell [[type system]] including support for [[polymorphism]] with [[type constraint]]s, [[type checking]], and [[type inference]].

The discussed encodings of search and sorting do not intend to be the most efficient ones (in Haskell); instead, the intention is to demonstrate basic algorithmic problem solving in Haskell and to provide evidence for Haskell's fitness for describing algorithms declaratively and concisely.

== Material ==

<media url="" https://www.youtube.com/watch?v=C5AWbFeJcTQ"" />

== Concepts ==

=== Recap ===
* [[Algorithm]]
* [[Algorithmic problem]]
* [[Search problem]]
* [[Search algorithm]]
* [[Linear search]]
* [[Local scope]]

=== Additions ===
* [[Binary search]]
* [[Sorting problem]]
* [[Sorting algorithm]]
* [[Insertion sort]]
* [[Divide and conquer algorithm]]
* [[Quicksort]]
* [[Selection sort]]
* [[Merge sort]]
* [[Median]]
* [[Type system]]
* [[Type signature]]
* [[Polymorphism]]
* [[Type checking]]
* [[Type inference]]

== Languages ==

* [[Language:Haskell]]

== Features ==

* [[Feature:Median]]

== Contributions ==

* [[Contribution:haskellBarchart]]

== Metadata ==


* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Basic software engineering for Haskell]]


      ",2013-06-12 15:00:57.346,2017-07-04 13:47:08.370126
Language,TypeScript,"== Headline ==

Typescript is a programming language for web development and a superset of Javascript.

== Metadata ==

* [[uses::Javascript]]
",2017-08-15 09:51:44.600996,2017-08-15 10:30:26.728053
Concept,Data pattern,"== Headline ==

A pattern of data used for [[pattern matching]] on data

== Metadata ==

* [[instanceOf::Data term]]
",2013-06-12 14:53:39.333,2017-07-04 13:44:39.829261
Concept,Data programming,"== Headline ==

XML or database programming or other kinds of data programming

== Metadata ==

* [[instanceOf::Programming domain]]
",2013-06-12 14:53:39.469,2017-07-04 13:44:39.838875
Script,Selected design patterns,"== Headline ==

A lecture on [[design patterns]] as part of the [[Course:Programming in Koblenz]]


== Material ==

<media url=""http://www.slideshare.net/rlaemmel/patterns-19905697""/>

== Concepts ==

* [[Design pattern]]
* [[Observer pattern]]
* [[Composite pattern]]
* [[Proxy pattern]]
* [[Template pattern]]
* [[Visitor pattern]]
* [[Adapter pattern]]


== Languages ==

* [[Language:Java]]


== Features ==

* [[Feature:Hierarchical_company]]
* [[Feature:Total]]
* [[Feature:Cut]]
* [[Feature:Logging]]


== Contributions ==

* [[Contribution:javaVisitor]]
* [[Contribution:javaTemplate]]
* [[Contribution:javaExorcism]]


== Metadata ==

* [[instanceOf::Course:Programming in Koblenz]]
* ",2013-06-12 15:00:57.56,2017-07-04 13:47:13.656187
Internal,Sparql,"== Headline ==

Sparql Page",2017-08-23 12:50:45.848185,2017-08-23 12:50:45.848185
Feature,Browsing,"== Headline ==

Browse companies in a [UI]

== Rationale ==

* '''Simplicity''': The interface is supposed to be simple in that it is not meant to result in a GUI programming challenge. Anyone modestly familiar with a given GUI technology should be able to provide the GUI for the [[system:Company]]. Anyone modestly familiar with the basic concepts of GUI programming should be able to understand the GUI part of the implementation without much effort. Clearly, the GUI should be functionally correct and architecturally sound as well as usable. Any form of tuning should be avoided in the interest of simplicity.

* '''Data model-driven''': Companies are essentially hierarchical structures that break down into departments and employees. Hence, the GUI should bind companies, departments, and employees, and there should be navigation support to operate at all the levels of departmental nesting. All properties of companies, departments, and employees must be reachable by navigation.

* '''Focus on navigation as opposed to editing''': Read-only navigation is sufficient except that the application of the cut operation should be supported at any level of hierarchical navigation. No other modifications need to be supported. See [[feature:Editing]] for GUI expressiveness that goes beyond navigation. Implementations may make editable basic properties for names, addresses, and salaries. Such over-achievement of the present feature is not encouraged though.

* '''Layer-based versus tree-based approach''': In the layer-based approach, a company, a department, or an employee is shown at the time. Accordingly, there is a company view, a department view, and an employee view. Navigation begins at the company view and selection of view components transfers to other views. In the layer-based approach, the state of navigation can be essentially viewed as a (possibly incomplete) path from the company root to an inner department or employee. Navigation may maintain this path like a stack. In the tree-based approach, the company structure is shown as a tree in terms of the company's departmental nesting. Folding and unfolding may be applied to such a view. When additional relationships for mentoring, see [[Feature:Mentoring]], are involved, then a directed graph as opposed to a plain tree needs to be visualized.

== Description ==

The following description applies well to classic GUI as well as web-based GUI approaches.

=== Data binding for the layer-based approach ===

Labels are shown in ''italics'' in the sequel.

Order of bindings per view suggest order in the actual layout.

* The Company view:
** A labeled, read-only text field for the ''Name'' of the company.
** A labeled, listbox for the ''Departments'' of the company.
* The Department view:
** A labeled, read-only text field for the ''Name'' of the department.
** A labeled, read-only text field for the name of the department's ''Manager''.
** A labeled, listbox for the ''Employees'' of the company.
** A labeled, listbox for the ''Sub-departments'' of the company.
* The Employee view:
** A labeled, read-only text field for the ''Name'' of the employee.
** A labeled, read-only text field for the ''Address'' of the employee.
** A labeled, read-only text field for the ''Salary'' of the employee.

=== Navigation for the layer-based approach ===

Navigation in the GUI is to be supported as follows:

* The Company view:
** The ''Close Window'' handler terminates the application.
** When selecting a department from the ''Departments'' listbox, the corresponding Department view is invoked.
* The Department view:
** There is a ''Back'' button that navigates back to the previous view.
** The ''Close Window'' handler copies the action of the ''Back'' button.
** The ''Close Window'' terminates the application.
** When selecting an employee from the ''Employees'' listbox, the corresponding Employee view is invoked.
** When selecting a department from the ''Sub-departments'' listbox, the corresponding Department view is invoked.
* The Employee view:
** There is a ''Back'' button that navigates back to the previous view.
** The ''Close Window'' handler copies the action of the ''Back'' button.

At any point, it should be possible to ''quit'' the application in a way that is in alignment with the OS/GUI technology at hand.

=== Operations ===

[[Feature:Total]] and [[Feature:Cut]] are to be supported by the GUI.

For instance, the layer-based approach may support these operations as follows:

* The Company view:
** There is a labeled, read-only text field for the company's ''Total''.
** A ''Cut'' button is attached to the ''Total'' field.
* The Department view:
** There is a labeled, read-only text field for the department's ''Total''.
** A ''Cut'' button is attached to the ''Total'' field.
* The Employee view:
** A ''Cut'' button is attached to the ''Salary'' field.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Tree structure]]
* [[instanceOf::UI requirement]]
* [[instanceOf::Optional feature]]

",2013-06-12 14:59:41.69,2017-07-04 13:46:33.119644
Feature,Hierarchical company,"== Headline ==

Support nested departments in companies

== Description ==

The data model of the [[system:Company]] is required to support ''companies'' and ''employees'', just as in the case of [[Feature:Flat company]], but in addition,  ''employees'' are organized in nested ''departments''. A company breaks down into (top-level) departments, each of which may recursively break down into (sub-) departments. Such nesting of departments enables the hierarchical organization of companies. The features [[Feature:Flat company]] and [[Feature:Hierarchical company]] are mutually exclusive and either of them must be selected for any realization of  [[System:Company]]. Some features, e.g., [[Feature:Depth]], may effectively require [[Feature:Hierarchical company]].

== Motivation ==

The specific contribution of hierarchical companies is that they require a recursive treatment of departments as they aggregate both, sub-departments and employees. When using an abstraction mechanism of a programming language for modeling departments (e.g., classes or types), then the corresponding abstraction has to be accordingly recursive. When processing hierarchical companies, then the corresponding functionality must be accordingly recursive, too.

There is more than one way of modeling such hierarchical companies. One approach is to use separate (homogenous) containers for the sub-departments and the employees of a department. Another approach is to use one (heterogeneous) container for both kinds of sub-units: sub-departments and employees. In the former case, (recursive) [[data composition]] is used; in the latter case, [[data variation]] is taken into account. [[Data composition]] alone may be particularly simple to implement in some contexts, e.g., with non-[[virtual method]]s  in the context of [[OO programming]] and [[object composition]]. Functionality may be implemented differently because of [[data variation]]. For instance, in the context of [[OO programming]], [[data variation]] may correspond to [[type generalization]] giving rise to [[subtype polymorphism]] and [[virtual method]]s. Further, added [[data variation]] may enable extra extensibility of genericity.

== Illustration ==

The feature is illustrated with a data model in [[Language:Haskell]]. [[Algebraic data type]]s are used for the type of departments; a type synonym cannot be used because departments can be nested and thus, a recursive type is needed:

<syntaxhighlight lang=""haskell"">
type Company = (Name, [Department])
data Department = Department Name Manager [Department] [Employee]
type Employee = (Name, Address, Salary)
type Manager = Employee
type Name = String
type Address = String
type Salary = Float
</syntaxhighlight>

A sample company takes the following form:

<syntaxhighlight lang=""haskell"">
sampleCompany :: Company
sampleCompany =
  ( ""Acme Corporation"",
    [
      Department ""Research""
        (""Craig"", ""Redmond"", 123456)
        []
        [
          (""Erik"", ""Utrecht"", 12345),
          (""Ralf"", ""Koblenz"", 1234)
        ],
      Department ""Development""
        (""Ray"", ""Redmond"", 234567)
        [
          Department ""Dev1""
            (""Klaus"", ""Boston"", 23456)
            [
              Department ""Dev1.1""
                (""Karl"", ""Riga"", 2345)
                []
                [(""Joe"", ""Wifi City"", 2344)]
            ]
            []
        ]
        []
    ]
  )
</syntaxhighlight>

These snippets originate from [[Contribution:haskellComposition]].

Hence, there are two top-level departments, ""Research"" and ""Development"". The ""Development"" department further breaks down further into sub-departments. All departments have managers. Some departments have employees. Each employee has a name, an address, and a salary.

An alternative illustration of the feature shows departments with [[data variation]] such that there is a general type of sub-units with derivations for employees and sub-departments, i.e., employee units and sub-department units:

<syntaxhighlight lang=""haskell"">
data Department = Department Name Manager [SubUnit]
data SubUnit = EUnit Employee | DUnit Department
</syntaxhighlight>

The snippet originates from [[Contribution:haskellVariation]].

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Hierarchical organization]]
* [[instanceOf::Data requirement]]
* [[childOf::Feature:Company]]
* [[moreComplexThan::Feature:Flat company]]
* [[facilitates::Recursive data structure]]

",2013-06-12 14:59:46.922,2017-07-04 13:46:34.582248
Concept,Data modeling,"== Headline ==

The process of creating a [[data model]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Data_modeling]]
* [[memberOf::Vocabulary:Data modeling]]
* [[memberOf::Vocabulary:Software engineering]]
* [[memberOf::Vocabulary:Information system]]
* [[isA::Concept]]

",2013-06-12 14:53:38.697,2017-07-04 15:26:07.819026
Concept,Data structure,"== Headline ==

A particular way of storing and organizing data in a computer

== Illustration ==

See [[linked list]]s as a simple example of an [[imperative data structure]].

See [[immutable list]]s as a simple example of a [[functional data structure]].

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Data_structure]]
* [[isA::Concept]]

",2013-06-12 14:53:39.779,2017-07-04 15:26:08.078855
Feature,Localization,"== Headline ==

Support different languages in the [[UI]]

== Metadata ==

* [[instanceOf::UI 101feature]]
*

",2013-06-12 14:59:48.239,2017-07-04 13:46:34.73477
Concept,Fluent API,"==Headline==

An [[API]] where the combination of method calls is as readable as text written in a natural language

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Fluent_interface]]
* [[sameAs::https://www.martinfowler.com/bliki/FluentInterface.html]]
* [[relatesTo::https://dzone.com/articles/java-fluent-api-design]]
* [[isA::API]]

",2017-06-06 09:45:09.912749,2017-07-04 15:26:44.613967
Feature,Cut,"== Headline ==

Cut the salaries of all employees in half

== Description ==

For a given company, the salaries of all employees are to be cut in half. Let's assume that the management of the company is interested in a salary cut as a response to a financial crisis. Clearly, any real company is likely to respond to a financial crisis in a much less simplistic manner.

== Motivation ==

The feature may be implemented as a [[transformation]], potentially making use of a suitable [[transformation language|transformation]] or [[data manipulation language]]. Conceptually, the feature corresponds to a relatively simple and regular kind of transformation, i.e., an [[iterator-based transformation]], which iterates over a company' employees and updates the salaries of the individual employees along the way. It shall be interesting to see how different software languages, technologies, and implementations deal with the conceptual simplicity of the problem at hand.

== Illustration ==

The feature is illustrated with a statement in [[Language:SQL]] to be applied to an instance of a straightforward relational schema for companies where we assume that all employees belong to a single company:

<syntaxhighlight lang=""sql"">
UPDATE employee
 SET salary = salary / 2;
</syntaxhighlight>

The snippet originates from [[Contribution:mySqlMany]].

== Relationships ==

* See [[Feature:Total]] for a query scenario instead of a transformation scenario.
* In fact, [[Feature:Total]] is likely to be helpful in a ''demonstration'' of [[Feature:Salary cut]].
* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical_company]].

== Guidelines ==

* The ''name'' of an operation for cutting salaries thereof should involve the term ""cut"". This guideline is met by the above illustration, if we assume that the shown SQL statement is stored in a SQL script with name ""Cut.sql"". Likewise, if [[OO programming]] was used for implementation, then the names of the corresponding methods should involve the term ""cut"".
* A suitable ''demonstration'' of the feature's implementation should cut the salaries of a sample company. This guideline is met by the above illustration, if we assume that the shown SQL statement is executed on a database which readily contains company data. Queries according to [[Feature:Total]] may be used to compare salaries before and after the cut. All such database preparation, data manipulation, and query execution should preferably be scripted. By contrast, if [[OO programming]] was used, then the demonstration could be delivered in the form of unit tests.

== Metadata ==

* [[relatesTo::http://www.thefreedictionary.com/salary+cut]]
* [[instanceOf::Functional requirement]]
* [[instanceOf::Transformation]]
* [[instanceOf::Type-preserving transformation]]
* [[instanceOf::Iterator-based transformation]]
* [[instanceOf::Optional feature]]
* [[facilitates::Type-preserving transformation]]

",2013-06-12 14:59:43.387,2017-07-04 13:46:33.622232
Script,Type-class polymorphism,"== Headline ==

Lecture ""Type-class polymorphism"" as part of [[Course:Lambdas in Koblenz]]

== Description ==

We have looked at parametric polymorphism as a means to describe functionality in a universal way for many types or, in fact, all types of a certain kind. This is appropriate whenever such polymorphic functionality does not need to make any assumptions about the actual types that fill in the type parameters eventually. There is another kind of polymorphism, where the same kind of functionality (in terms of function signatures) needs to be defined for many types, but these definitions may vary per type. For instance, the conversion of values to text is required functionality for many types, but its definition depends on the input type. [[Type class]]  support such polymorphism.

== Concepts ==

* [[Polymorphism]]
* [[Parametric polymorphism]]
* [[Bounded polymorphism]]
* [[Type class]]
* [[Type-class instance]]
* [[Type-class constraint]]
* [[Type-class polymorphism]]
* [[Equality]]
* [[Structural equality]]
* [[Semantic equality]]
* [[Total order]]
* [[Monoid]]
* [[List monoid]]
* [[Sum monoid]]
* [[Product monoid]]

== Languages ==

* [[Language:Haskell]]

== Features ==

These features are eligible to the use of monoids for implementation.

* [[Feature:Total]]
* [[Feature:Depth]]
* [[Feature:Ranking]]
* [[Feature:Mentoring]]

== Contributions ==

* [[Contribution:haskellProfessional]]: Feature implementations without the use of monoids.
* [[Contribution:haskellMonoid]]: Feature implementations with the use of monoids.

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Higher-order_functions_in_Haskell]]

",2013-06-12 15:00:58.092,2017-07-04 13:47:20.65941
Concept,Modeling language,"== Headline ==

All kinds of languages typically related to MDE

== Metadata ==
[[sameAs::https://en.wikipedia.org/wiki/Modeling_language]]
[[relatesTo::https://en.wikipedia.org/wiki/Model-driven_engineering]]
[[isA::Software language]]
",2017-06-23 14:15:57.436364,2017-07-04 15:26:44.634435
Feature,Open serialization,"== Headline ==

Serialize companies in an [[Open serialization|open manner]]

== Relationships ==

See [[Feature:Closed serialization]].

== Metadata ==

* [[instanceOf::Non-functional requirement]]
* [[childOf::Feature:Serialization]]

",2013-06-12 14:59:50.115,2017-07-04 13:46:35.339636
Feature,Parallelism,"== Headline ==

Total or cut salaries in parallel
== Relationships ==

There are these sub-feature:
* [[Feature:Data parallelism]]
* [[Feature:Task parallelism]]

== Metadata ==

* [[instanceOf::Non-functional requirement]]
* [[instanceOf::Or feature]]
* [[instanceOf::Optional feature]]
",2013-06-12 14:59:50.344,2017-07-04 13:46:35.361717
Feature,Total,"== Headline ==

Sum up the salaries of all employees

== Description ==

The salaries of a company's employees are to be summed up. Let's assume that the management of the company is interested in the salary total as a simple indicator for the amount of money paid to the employees, be it for a press release or otherwise. Clearly, any real company faces other expenses per employee, which are not totaled in this manner.

== Motivation ==

The feature may be implemented as a [[query]], potentially making use of a suitable [[query language]]. Conceptually, the feature corresponds to a relatively simple and regular kind of query, i.e., an [[iterator-based query]], which iterates over a company' employees and [[Aggregation|aggregates]] the salaries of the individual employees along the way. It shall be interesting to see how different software languages, technologies, and implementations deal with the conceptual simplicity of the problem at hand.

== Illustration ==

=== Totaling salaries in SQL ===

Consider the following [[Language:SQL]] query which can be applied to an instance of a straightforward relational schema for companies. We assume that all employees belong to a single company; The snippet originates from [[Contribution:mySqlMany]].

<syntaxhighlight lang=""sql"">
SELECT SUM(salary) FROM employee;
</syntaxhighlight>

=== Totaling salaries in Haskell ===

Consider the following [[Language:Haskell]] functions which are applied to a simple representation of companies.

<syntaxhighlight lang=""haskell"">
-- Total all salaries in a company
total :: Company -> Float
total = sum . salaries

-- Extract all salaries in a company
salaries :: Company -> [Salary]
salaries (n, es) = salariesEs es

-- Extract all salaries of lists of employees
salariesEs :: [Employee] -> [Salary]
salariesEs [] = []
salariesEs (e:es) = getSalary e : salariesEs es

-- Extract the salary from an employee
getSalary :: Employee -> Salary
getSalary ( ,  , s) = s
</syntaxhighlight>

== Relationships ==

* See [[Feature:Cut]] for a transformation scenario instead of a query scenario.
* See [[Feature:Depth]] for a more advanced query scenario.
* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical_company]].

== Guidelines ==

* The ''name'' of an operation for summing up salaries thereof should involve the term ""total"". This guideline is met by the above illustration, if we assume that the shown SQL statement is stored in a SQL script with name ""Total.sql"". By contrast, if [[OO programming]] was used for implementation, then the names of the corresponding methods should involve the term ""total"".
* A suitable ''demonstration'' of the feature's implementation should total the salaries of a sample company. This guideline is met by the above illustration, if we assume that the shown SQL statement is executed on a database which readily contains company data. All such database preparation and query execution should preferably be scripted. Likewise, if [[OO programming]] was used, then the demonstration could be delivered in the form of unit tests.

== Metadata ==

* [[instanceOf::Optional feature]]
* [[instanceOf::Functional requirement]]
* [[facilitates::Aggregation]]

",2013-06-12 14:59:56.287,2017-07-04 13:46:36.7996
Feature,Parsing,"== Headline ==

Parse an external format for companies

== Description ==

Users of the [[system:Company]] may need to exchange data with other systems or edit data independently of the system. To this end, some XML- or JSON-based format or a concrete textual or visual syntax may need to be supported. The corresponding representation format may actually be imposed on the system by external factors. Consequently, the [[system:Company]] may need to consume such an external representation through parsing, as covered by the present feature, or it may need to produce such data through unparsing, as covered by the extra [[Feature:Unparsing]].

An implementation of parsing is to be demonstrated for a
sample company as follows. In the most basic case, the implementation
has to illustrate at least 'acceptance' of the input. Another option
is that parsing populates a data model for companies. Yet another
option is to perform the computation for totaling salaries according
to [[Feature:Total]] along with parsing.

== Relationships ==

* [[Feature:Parsing]] is complemented by [[Feature:Unparsing]].
* [[Feature:Parsing]] and [[Feature:Unparsing]] are related to [[serialization]], as covered by the designated [[Feature:Serialization]], but we speak of parsing specifically, when the [[system:Company]] needs to actually process (parse) the external format, thus going beyond the uniform use of a serialization framework.

== Metadata ==

* [[instanceOf::Functional requirement]]
* [[instanceOf::Optional feature]]
* [[facilitates::Parsing]]
* [[childOf::Feature:Textual syntax]]
* [[relatesTo::System:FSML]]
",2013-06-12 14:59:50.639,2017-07-04 13:46:35.428364
Concept,Data structure design,"== Headline ==

A process of designing a [[data structure]]

== Details ==

See also the related views on [[design]]: [[algorithm design]] or [[program design]].

== Metadata ==

* [[memberOf::Vocabulary:Software engineering]]
* [[sameAs::http://stackoverflow.com/questions/58354/algorithm-data-structure-design-interview-questions]
* [[isA::Concept]]

",2013-06-12 14:53:39.941,2017-07-04 15:26:08.175371
Concept,Data type,"== Headline ==

A [[type]] of data with associated operations

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Data_type]]
* [[memberOf::Vocabulary:Data structure]]
* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:53:40.631,2017-07-04 15:26:08.299918
Feature,Program comprehension demo,"== Headline ==

Development of a tool for program comprehension

== Description ==

This is a reverse engineering-related feature for the development and demonstration of a tool for API-related program comprehension. The developed tool serves the analysis of an implementation's sources or other artifacts in terms of [[API]] usage, i.e., the usage of API elements such as types and methods. Of course, the exact analysis also depends on the underlying programming paradigm and platform.

== Example ==

For instance, consider a Java-based implementation that uses APIs. We assume that API types are all those referenced types that are not defined in Java code, but they are only available in .jar form. One may be interested in overall API usage as follows. All API packages are to be determined. All used (i.e., referenced) types per API package are to be determined. All used (i.e., invoked) methods per used API type are to be determined. The results may be summarized in tables (.csv) or visualized in some manner.

== Metadata ==
* [[instanceOf::Meta-level 101feature]]
* [[sameAs::http://en.wikipedia.org/wiki/Reverse_engineering]]
* ",2013-06-12 14:59:51.277,2017-07-04 13:46:35.494276
Feature,Ranking,"== Headline ==

Check salaries to follow ranks in company hierarchy

== Description ==

Any company needs a pay structure (say, pay model). The present feature describes a constraint for a particular pay structure. Within each department, the salary of the department's manager is higher than all salaries of a department's immediate and sub-immediate employees. The constraint needs to be checked or enforced along construction and the modification of company data. Clearly, this is just one possible and arguably rather rigid and unrealistic pay structure.

== Motivation ==

Conceptually, the feature imposes a global invariant on company data. Straightforward expressiveness of type systems is not sufficient to model the constraint. Simple contracts in the sense of pre- and post-conditions or class invariants on local state are also not sufficient; we need to allow for traversal of object graphs. Of course, the constraint can be expressed more or less easily as a recursive computation, very much like a query over the hierarchical structure of companies; see [[Feature:Depth]].

== Illustration ==

The feature is illustrated with a [[Function]] in [[Language:Haskell]] that works on top of appropriate [[algebraic data type]]s for company data; the function recurses into company data in a straightforward manner and it counts departments along the way:

<syntaxhighlight lang=""haskell"">
align :: Company -> Bool
align (Company   ds) = and (map (align' Nothing) ds)
  where
    align' :: Maybe Float -> Department -> Bool
    align' v (Department   m ds es)
      =  maybe True (>getSalary m) v
      && and (map (align' (Just (getSalary m))) ds)
      && and (map ((<getSalary m) . getSalary) es)
    getSalary :: Employee -> Float
    getSalary (Employee     s) = s
</syntaxhighlight>

Further, in some code locations the constraint needs to be invoked. Here is some snippet that shows how the constraint is invoked past cutting salaries:

<syntaxhighlight lang=""haskell"">
main = do
      ... -- code omitted

      -- Cut all salaries
      let company' = cut company

      -- Test that salaries align with hierarchy
      if not (align company')
        then error ""constraint violated""
        else return ()
</syntaxhighlight>

The snippet originates from [[Contribution:haskellComposition]].

== Relationships ==

* The present feature can only usefully instantiated on top of [[Feature:Hierarchical_company]], as it assumes nesting of departments for non-trivial results.
* A straightforward scenario for testing the present feature would check the constraint past cutting salaries according to [[Feature:Cut]].

== Guidelines ==

* The ''name'' of a constrain for checking alignment of salaries with hierarchical company structure should involve the term ""align"".
* A suitable ''demonstration'' of the feature's implementation should show the constraint is to be invoked (explicitly or implicitly) past construction or modification of company data.

== Metadata ==

* [[relatesTo::http://www.aafp.org/fpm/2000/0200/p30.html]]
* [[relatesTo::http://www.ehow.com/info 12076331 alternative-pay-structures-salaried-employees.html]]
* [[relatesTo::http://www.slideshare.net/aaronphamilton/strategic-compensation-structure-egalitarian-v-hierarchical]]
* [[relatesTo::http://papers.ssrn.com/sol3/papers.cfm?abstract id=74303]]
* [[relatesTo::http://en.wikipedia.org/wiki/Hierarchical organization]]
* [[instanceOf::Data requirement]]
* [[instanceOf::Optional feature]]
* [[dependsOn::Feature:Hierarchical_company]]

",2013-06-12 14:59:51.823,2017-07-04 13:46:35.740941
Contribution,pyjamas,"== Headline ==

[[Web programming]] in [[Language:Python]] with [[Technology:Pyjamas]]

== Motivation ==

[[Technology:Pyjamas]] offers the possibility to generate pure [[Language:JavaScript]]-Code out of [[Language:Python]] source code. One advantage of pyjamas is, that it is very simple to understand. Apart from that, there is no need for complicated [[Language:HTML]] or JavaScript programming. [[Technology:Pyjamas]] is combined with [[Language:CSS]]. It also can be considered as a ""spin off"" of [[Technology:GWT]].

== Illustration ==

Although pyjamas demands no specific architecture, the main parts of the application are located in a simple [[Language:Python]] file [this!!101Companies.py]. Nevertheless, we have devided the code into two concerns encapsulated into different classes. One class contains the [[GUI]], another class contains the company data and manages the major functionalities of the app. There are further classes for each company, department and employee. The complete Python code illustrated in this section is translated directly to [[Language:JavaScript]].

=== GUI implementation ===

The GUI is implemented with the help of pre defined [[Technology:Pyjamas]] [[Class|classes]]. There is a grid with all necessary components like labels, textfields, listboxes and buttons. The following method of the class <syntaxhighlight lang=""python"" enclose=""none"">101CompaniesAppGUI</syntaxhighlight> shows the initialization of the employee part of the GUI:

<syntaxhighlight lang=""python"" source=""pyjamas/101Companies.py"">
# initializes the GUI for the employee view
def initEmployeeGUI(self):
	self.grid.clear()
	self.grid.resize(4, 3)

	# row 1
	self.grid.setWidget(0, 0, Label(""Name:""))	# column 1 = name
	self.grid.setWidget(1, 0, Label(""Address:""))	# column 2 = address
	self.grid.setWidget(2, 0, Label(""Salary:""))	# column 3 = salary

	# row 2
	self.grid.setWidget(0, 1, self.name)
	self.grid.setWidget(1, 1, self.address)
	self.grid.setWidget(2, 1, self.total)

	# row 3
	self.grid.setWidget(0, 2, self.save)
	self.grid.setWidget(2, 2, self.cut)
	self.grid.setWidget(3, 2, self.back)

	# initialize content for current employee
	self.name.setText(self.current.name)
	self.address.setText(self.current.address)
	self.total.setText(self.current.salary)
</syntaxhighlight>

The three textfields <syntaxhighlight lang=""python"" enclose=""none"">self.name</syntaxhighlight>, <syntaxhighlight lang=""python"" enclose=""none"">self.address</syntaxhighlight> and <syntaxhighlight lang=""python"" enclose=""none"">self.total</syntaxhighlight> and the buttons <syntaxhighlight lang=""python"" enclose=""none"">self.save</syntaxhighlight>, <syntaxhighlight lang=""python"" enclose=""none"">self.cut</syntaxhighlight> and <syntaxhighlight lang=""python"" enclose=""none"">self.back</syntaxhighlight> are initialized in the constructor of the class <syntaxhighlight lang=""python"" enclose=""none"">101CompaniesAppGUI</syntaxhighlight>. The <syntaxhighlight lang=""python"" enclose=""none"">self</syntaxhighlight> parameter represents the current instance of the class.

=== Feature implementation ===

There is only one handler for each button located in the class
<syntaxhighlight lang=""python"" enclose=""none"">101CompaniesAppGUI</syntaxhighlight>. The handler is implemented by the function <syntaxhighlight lang=""python"" enclose=""none"">onClick</syntaxhighlight>. It contains a control structure, which determines the clicked button:

<syntaxhighlight lang=""python"" source=""pyjamas/101Companies.py"">
def onClick(self, sender):
	self.errors.clear()
	if sender == self.cut:
		self.current.cut()
		self.total.setText(self.current.total())
	else if sender == ...
</syntaxhighlight>

In case of cut, this method cuts the current entity and refreshes the the total textfield. Every class, be it the company, department or employee, implements such a cut method. In case of employee, the specific implementation looks like:

<syntaxhighlight lang=""python"" source=""pyjamas/101Companies.py"">
class Employee:
	...

	def cut(self):
	self.salary = self.salary / 2

	...
</syntaxhighlight>

== Architecture ==

There are three files, which are not generated:
* The file [this!!101Companies.py] contains the main functionalities of the application.
* [this!!public/101Companies.html] is the index page for the application.
* [this!!public/style.css] defines the [[Language:CSS]] attributes for the elements.

The file [this!!101Companies.py 101Companies.py] is divided into three parts:
* The [[Feature:Hierarchical company]] and most of the [[Feature:Editing]] is provided by the classes ''company'', ''department'' and ''employee''.
* The [[GUI]] is provided by the class ''101CompaniesAppGUI''.
* The company initialization and the low-level management of the departments and employees is provided by the class ''101CompaniesApp''.

== Usage ==

* install pyjamas ([http://pyjs.org/wiki/GettingStarted/ getting started])
* download the sources
* open a terminal and move to your local contribution folder
* type ''pyjsbuild 101companies.py''
* open [this!!output/101Companies.html] with your [[Web browser]]

If you only want to watch the [[Language:HTML]]/[[Language:JavaScript|JavaScript]]-result of the compile process, please:

* download the sources
* open [this!!output/101Companies.html] with your [[Web browser]]

== Metadata ==

* [[memberOf::Theme:Web programming]]
* [[uses::Language:Python]]
* [[uses::Language:JavaScript]]
* [[uses::Language:HTML]]
* [[uses::Technology:Pyjamas]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:tzimmer]]
",2013-06-12 14:58:43.18,2017-07-05 15:29:36.07725
Concept,Data variation,"== Headline ==

Construction of data according to variants

== Note ==

[[Data variation]] is not an established term, but it naturally arises as a generalization and dualization of existing notions that are used in [[data modeling]] and [[programming]]. Common forms of [[data variation]] are based on [[variant type]]s and [[type generalization]]. For clarity, the general term [[data variation]] is used on this wiki, whenever appropriate.

== Description ==

[[Data variation]] entails data variants, of which one must be chosen when actual data is constructed. The data variants may be specified, for example, as a [[variant type]] or as OO types related to a common base type through [[type generalization]]. [[Data variation]] may be seen as a principle means of going beyond [[data composition]].

== Illustration ==

The following [[Language:Haskell]]-based data model for the [[@system]] leverages [[data variation]] in one spot and otherwise [[data composition]]. The [[data model]] is based on [[algebraic data type]]s. The data type for subunits declare two constructors to model different types of subunits, as needed for aggregating subunits of departments.

<syntaxhighlight lang=""haskell"">
data Company = Company Name [Department]
data Department = Department Name Manager [SubUnit]
data Employee = Employee Name Address Salary
data SubUnit = EUnit Employee | DUnit Department
type Manager = Employee
type Name = String
type Address = String
type Salary = Float
</syntaxhighlight>

The snippet originates from [[Contribution:haskellVariation]].

== Metadata ==

* [[memberOf::Vocabulary:Data modeling]]
* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::Data composition]]
* [[isA::Concept]]

",2013-06-12 14:53:40.838,2017-07-04 15:26:08.670912
Script,XML data binding,"== Headline ==

A lecture on the [[XML data binding]] as part of the [[Course:Programming in Koblenz]]



== Material ==

<media url=""http://www.slideshare.net/rlaemmel/xml-data-binding"" />


== Concepts ==

* [[XML data binding]]
* [[O/X mapping]]
* [[Schema-first mapping]]


== Languages ==

* [[Language:Java]]
* [[Language:XML]]
* [[Language:XSD]]



== Technologies ==

* [[Technology:JAXB]]



== Features ==

* [[Feature:Hierarchical_company]]
* [[Feature:Total]]
* [[Feature:Cut]]



== Contributions ==

* [[Contribution:dom]]
* [[Contribution:sax]]
* [[Contribution:jaxbComposition]]
* [[Contribution:jaxbChoice]]
* [[Contribution:jaxbExtension]]
* [[Contribution:jaxbSubstitution]]



== Metadata ==


* [[instanceOf::Course:Programming in Koblenz]]
* ",2013-06-12 15:00:58.309,2017-07-04 13:47:26.513916
Concept,Design,"== Headline ==

[[Program design]] or [[software design]] or [[data structure design]] or [[algorithm design]]

== Metadata ==

* [[carries::Tag:Ambiguity]]

",2013-06-12 14:53:42.524,2017-07-04 13:44:40.172042
Concept,Human resource management system,"== Headline ==

An information system for human resources functions

== Illustration ==

== Citation ==

(http://en.wikipedia.org/wiki/Human_resource_management_system, 14 April 2013)

Currently human resource management systems encompass [...]:

# Payroll
# Time and attendance
# Performance appraisal
# Benefits administration
# HR management information system
# Recruiting/Learning management
# Performance record
# Employee self-service
# Scheduling
# Absence management

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Human_resource_management_system]]
* [[relatesTo::http://www.webopedia.com/TERM/H/Human_Resources_Management_System.html]]
* [[isA::Management system]]
* [[isA::Information system]]
* [[memberOf::Vocabulary:Information system]]
",2013-06-12 14:54:10.131,2017-07-04 15:26:12.920829
Feature,Reliability,"== Headline ==

Make a server reliable

== Description ==

When [[Feature:Distribution]] is used for the system architecture, then we  require that the system should function even if a server component is terminated such that the server component is automatically restarted or fault tolerance is achieved in some other way.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Reliability_(engineering)]]
* [[relatesTo::http://en.wikipedia.org/wiki/Fault-tolerant_system]]
* [[dependsOn::Feature:Distribution]]
",2013-06-12 14:59:52.139,2017-07-04 13:46:35.777445
Concept,Distributed Multitier architecture,"== Intent ==

The main [[Technology:Java EE]]-architecture

== Description ==

The distributed Multi-tier architecture contains four layers <cite>Oracle2012JavaEETutorial</cite>:

* [[Client]]-tier: [[Web browser]]
* [[Technology:Java EE]] Server
** Web-tier: [[Technology:JSP]], [[Technology:Facelets]]
** Business-tier: [[Technology:Java Bean|Java Beans]]
* Enterprise-information-system-tier: [[DBMS]]

== Metadata ==

* [[instanceOf::Multi-tier architecture]]
* [[sameAs::http://docs.oracle.com/javaee/5/tutorial/doc/bnaay.html]]
",2013-06-12 14:53:43.961,2017-07-04 13:44:40.329825
Concept,Delta modifier,"== Headline ==

A [[Language:DatalogLB]] language construct to control changes to a predicate population

== See also==

{{LogicBlox}}

== Metadata ==

* [[memberOf::Vocabulary:DatalogLB]]
* [[isA::Concept]]

",2013-06-12 14:53:42.386,2017-07-04 15:26:08.88336
Feature,Restructuring,"== Headline ==

UI support for restructuring company data

== Rationale ==

This feature is supposed to make the UI complete in the sense of allowing insertion, deletion, moves for departments and employees (on top of more basic editing facilities according to [[Feature:Editing]]). That is, it should be possible to delete departments and employees, to insert departments and employees into existing departments, to move departments and employees from their current department to another department (be it by drag and drop or by selecting the department from a drop-down list). As to employees, it should be possible to change the status of an employee to be a manager or not. Along such restructuring, it may happen that the company may become temporarily inconsistent because, for example, a department may mis a manager. Ideally, the UI should highlight such inconsistency (through some coloring, for example) so that problematic departments could be easily observed in the UI.

== Description ==

=== CRUD operations ===

==== Create ====

* Create a department either as top-level department the company or as a sub-department of another department.
* Create an employee in a department.

==== Move ====

* Move a department within the company to another parent, which is either the company or another department,
* Move an employee to another department.
* Change the manager of a department.

==== Delete ====

* Delete a department including all its direct and indirect employees and sub-departments.
* Delete an employee.

=== Miscellaneous ===

Some implementations may also provide an undo capability.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Create, read, update and delete]]
* [[instanceOf::UI requirement]]
* [[instanceOf::Optional feature]]
* [[dependsOn::Feature:Browsing]]
* [[dependsOn::Feature:Editing]]
* [[facilitates::GUI programming]]",2013-06-12 14:59:52.707,2017-07-04 13:46:35.917142
Feature,Software analysis demo,"== Headline ==

Demonstration of software analysis

== Description ==

TBD; see the other meta-level features for inspiration.

== Example ==

TBD; see the other meta-level features for inspiration.



== Metadata ==
* [[instanceOf::Meta-level 101feature]]
* ",2013-06-12 14:59:54.723,2017-07-04 13:46:36.470811
Feature,Touch control,"== Headline ==

Support touch control in the [[UI]]

== Metadata ==
* [[instanceOf::UI 101feature]]
*

",2013-06-12 14:59:56.573,2017-07-04 13:46:36.820775
Feature,Software_metrics_demo,"== Headline ==

Development of a software metrics tool

== Description ==

This is a software analysis-related feature for the development and demonstration of a tool for complexity metrics. The developed tool serves the analysis of an implementation's sources or other artifacts in terms of complexity metrics, e.g., metrics based on structural properties such as number of modules, classes, or functions. Of course, the choice also depends on the programming paradigm that is chosen as a target for tool development.

== Example ==

For instance, consider a Java-based implementation.

One may be interested in these metrics:
* NCLOC total
* Number of .java files
* Number of classes
* Number of interfaces
* Number of methods
* Depth of inheritance tree
* Min, Max, Median, Average number of methods per class/interface
* Min, Max, Median, Average NCLOC per class and method

The results may be summarized in tables (.csv) or visualized.


== Metadata ==
* [[instanceOf::Meta-level 101feature]]
* ",2013-06-12 14:59:55.026,2017-07-04 13:46:36.503472
Concept,Design pattern,"== Headline ==

A reusable solution to a recurring programming problem

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Software_design_pattern]]
* [[memberOf::Vocabulary:Software engineering]]
* [[memberOf::Vocabulary:OO programming]]
* [[isA::Concept]]

",2013-06-12 14:53:42.66,2017-07-04 15:26:08.952338
Feature,Software transformation demo,"== Headline ==

Development of a software transformation tool

== Description ==

This is a reverse engineering-related feature for the development and demonstration of a tool for API-related program comprehension. The developed tool serves the analysis of an implementation's sources or other artifacts in terms of API usage, i.e., the usage of API elements such as types and methods. Of course, the exact analysis also depends on the underlying programming paradigm and platform.

This is a reengineering-related feature for the development and demonstration of a tool for coupled software transformation to help with software evolution. The developed tool serves the automated transformation of an implementation's sources or other artifacts with the specific challenge of dealing with coupled artifacts. That is, there are various conceivable reengineering scenarios, but we are interested here specifically in a scenario such that multiple, related artifacts of different kinds must be modified in a consistent manner by a so-called coupled transformation. Of course, the exact transformation also depends on the underlying programming paradigm and platform.

== Example ==

For instance, consider a Java-based implementation with serialized company data. Now consider the scenario that new legislation requires deletion of employee addresses from the system. To this end, a coupled transformation must remove the corresponding data elements (fields, setters, getters, constructor components, etc.) from the source code, but serialized data must be cleaned up as well. The coupled transformation hence must support the migration of source code and serialized data.

== Metadata ==
* [[instanceOf::Meta-level 101feature]]
* [[sameAs::http://en.wikipedia.org/wiki/Reengineering_(software)]]
* [[relatesTo::http://www.di.univaq.it/CSXW2011]]
* ",2013-06-12 14:59:55.363,2017-07-04 13:46:36.555074
Concept,Function,"== Headline ==

The central [[abstraction]] in [[functional programming]]

== Description ==

In programming, a function is an abstraction for computation. In functional programming, a function is typically close to what we call a function in mathematics. That is, a function maps values of its domain to values of its range. Outside (pure) functional programming, a function may also involve additional computational aspects or side effects. Functions are defined (or declared) in a program and then elsewhere applied.

== Illustration ==

Consider the following [[function definition]] in [[Language:Haskell]].

<syntaxhighlight language=""haskell"">
-- The increment function
inc :: Int -> Int
inc x = x + 1
</syntaxhighlight>

The definition consists of a [[type signature]] assigning a type to the function ''inc'' and one equation providing the actual definition. The type signature declares ''inc'' as function from ''Int'' to ''Int''. The equation binds the variable ''x'' on the left-hand side and returns the expression ''x+1'' on the right-hand side.

Consider the following [[function application]]: ''inc'' is applied to 41; the result is 42.

<syntaxhighlight language=""haskell"">
> inc 41
42
</syntaxhighlight>

== Metadata ==

* [[isA::Abstraction mechanism]]
* [[memberOf::Vocabulary:Functional programming]]
* [[relatesTo::http://en.wikipedia.org/wiki/Function_(mathematics)]]

",2013-06-12 14:54:02.657,2017-07-04 15:26:11.304101
Feature,Task parallelism,"== Headline ==

Apply [[task parallelism]] to total or cut salaries

== Description ==

The [[system:Company]] may be subject to huge companies with millions of employees and substantial nesting of departments. The present feature applies when the system architecture scales for such company data and [[task parallelism]] including means of [[concurrency]] are leveraged. See also [[Feature:Data parallelism]].

== Metadata ==

* [[instanceOf::Non-functional requirement]]
* [[childOf::Feature:Parallelism]]

",2013-06-12 14:59:55.735,2017-07-04 13:46:36.580423
Feature,Unparsing,"== Headline ==

Format companies in an external format

== Description ==

Users of the [[system:Company]] may want to export data to another system. Hence, the [[system:Company]] may need to support such export, e.g., on the grounds of XML, JSON, or a concrete syntax. See also [[Feature:Parsing]]. Forms of [[open serialization]] may be used to enable import/export.

== Metadata ==

* [[instanceOf::Functional requirement]]
* [[instanceOf::Optional feature]]
",2013-06-12 14:59:57.278,2017-07-04 13:46:36.842813
Concept,Development-time quality,"== Headline ==

A [[non-functional requirement]] that relates to the development time of a [[software system]]

== Details ==

See also the concept of [[run-time quality]].

(These classifiers are not standardized, but similar concepts appear under different names in various sources.)

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Non-functional_requirement]]
* [[isA::Non-functional requirement]]
* [[memberOf::Vocabulary:Software engineering]]
",2013-06-12 14:53:43.073,2017-07-04 15:26:09.029703
Concept,Dialog,"== Headline ==

A small window that appears in front of the current [[Activity]]

== Metadata ==

* [[instanceOf::Android_UI]]
* [[sameAs::http://developer.android.com/guide/topics/ui/dialogs.html]]
* [[relatesTo::http://developer.android.com/reference/android/app/Dialog.html]]
* [[relatesTo::http://developer.android.com/reference/android/app/AlertDialog.html]]
* [[isA::Concept]]

",2013-06-12 14:53:43.553,2017-07-04 15:26:09.111096
Concept,Directory,"== Headline ==

a container for [[file]]s and directories in a [[file system]]

== Synonym ==

* Folder

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[memberOf::Vocabulary:Data]]
* [[sameAs::http://en.wikipedia.org/wiki/Folder_(computing)]]
* [[isA::Concept]]

",2013-06-12 14:53:43.786,2017-07-04 15:26:09.18615
Feature,Visualization,"== Headline ==

Visualize companies

== Description ==

Users of the [[system:Company]] may want to examine the company data to gain certain insights. For instance, employees and managers may find it equally interesting to understand overall the different salaries across the company structure. Hence, the company structure may be essentially visualized as a tree where the size of the employee nodes correlates with the salary. Optionally, the department nodes may also be scaled to convey additional information such that, for example, the node's size correlates with the average salary of employees in the department. Other ideas for visualization are welcome, too.

== Metadata ==
* [[instanceOf::Behavioral 101feature]]
*

",2013-06-12 14:59:57.852,2017-07-04 13:46:36.863615
Concept,Eager evaluation,"== Headline ==

Evaluate an expression as soon as it gets assigned or passed

== Description ==

This is a very much simplified description. In a language with eager evaluation, each function (or method) application is evaluated such that the arguments are evaluated prior to invoking the body of the function (the method).

== Illustration ==

=== Eager evaluation in Java ===

The following code throws ''NullPointerException'' because Java uses eager evaluation.

<syntaxhighlight lang=""java"">
import java.util.LinkedList;

public class Demo {
	public static void noOp(int x) {
		// I don't care about my argument.
	}
		public static void main(String[] args) {
		LinkedList<String> l = null;
		noOp(l.size());
	}
}
</syntaxhighlight>

Arguably, the execution should not throw because the argument is not needed anyway, but that's simply not the semantics of eager evaluation.

=== Lazy evaluation in Haskell ===

The de-facto counterpart in Haskell will not throw an exception because the argument of ''noOp'' will simply not be evaluated, as it is never needed.

<syntaxhighlight lang=""haskell"">
noOp :: Int -> IO ()
noOp _ = return ()
main = noOp (length (undefined::[String]))
</syntaxhighlight>

This example should not be considered a good example of why [[laziness]] is interesting from a programming perspective. The example is merely meant to hint at the semantics of [[laziness]].

== Relationshhips ==

These are synonyms for eager evaluation (in a broad sense):
* [[Call-by-value evaluation]]
* [[Strict evaluation]]
* [[Eagerness]]

See [[lazy evaluation]] for another major [[evaluation strategy]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Eager_evaluation]]
* [[instanceOf::Evaluation strategy]]
* [[memberOf::Vocabulary:Programming]]
",2013-06-12 14:53:53.133,2017-07-04 13:44:40.62648
Concept,Divide and conquer algorithm,"== Headline ==

An algorithm recursively breaking down a problem

== Illustration ==

See [[Quicksort]] and [[Merge sort]] for illustrations.

== Citation ==

(http://en.wikipedia.org/wiki/Divide_and_conquer_algorithm, 21 April 2013)

In computer science, divide and conquer (D&C) is an important algorithm design paradigm based on multi-branched recursion. A divide and conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same (or related) type, until these become simple enough to be solved directly. The solutions to the sub-problems are then combined to give a solution to the original problem.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Divide_and_conquer_algorithm]]
* [[isA::Algorithm]]
* [[memberOf::Vocabulary:Programming]]
",2013-06-12 14:53:44.375,2017-07-04 15:26:09.279025
Concept,Documentation,"== Headline ==

Documentation accompanying programs or software systems

== Illustration ==

See [[Contribution:haskellEngineer]] for [[Language:Haskell]] style documentation based on [[Technology:Haddock]].

== Citation ==

(http://en.wikipedia.org/wiki/Software_documentation, 2 May 2013)

Software documentation or source code documentation is written text that accompanies computer software. It either explains how it operates or how to use it, and may mean different things to people in different roles.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Software_documentation]]
* [[memberOf::Vocabulary:Software engineering]]
* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:53:49.838,2017-07-04 15:26:09.384502
Information,License,"== Headline ==

What license applies to what?

== Description ==

TBD

== Metadata ==
* ",2013-06-12 15:00:03.013,2017-07-04 13:46:37.312438
Concept,Entity-relationship model,"== Headline ==

An abstract way to describe a database

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model]]
* [[memberOf::Vocabulary:Data modeling]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:53.643,2017-07-04 13:44:40.66655
Concept,Equational reasoning,"== Headline ==

replace equals by equals

== Details ==

Such reasoning is applied in [[functional programming]] specifically.

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[sameAs::http://www.haskell.org/haskellwiki/Equational_reasoning_examples]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:54.202,2017-07-04 13:44:40.839654
Feature,Voice control,"== Headline ==

UI support for voice control


== Metadata ==
* [[instanceOf::UI 101feature]]
* ",2013-06-12 14:59:58.587,2017-07-04 13:46:36.873587
Concept,Error,"== Headline ==

An irregular state of a program

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:54.332,2017-07-04 13:44:40.852071
Concept,Fact extraction,"== Headline ==

The programmatic extraction of facts from software artifacts

",2013-06-12 14:53:55.565,2017-07-04 13:44:40.992241
Concept,Evaluation strategy,"== Headline ==

The rules for evaluating expressions in a programming language

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:54.475,2017-07-04 13:44:40.864155
Concept,Hello_world_program,"== Headline ==

A computer program that outputs ""Hello, world!""

== Illustration ==

Consider this [[Language:Java]] class:

<fragment url=""HelloWorld.java""/>

When [[Compiler|compiled]] and executed, indeed the program produces this output:

<pre>
Hello, world!
</pre>

Consider this [[Language:Python]] script:

<fragment url=""HelloWorld.py""/>

When executed with the Python [[interpreter]], the program produces the same output:

<pre>
Hello, world!
</pre>

== Metadata ==

* [[isA::Program]]
* [[sameAs::http://en.wikipedia.org/wiki/Hello_world_program]]
* [[relatesTo::http://en.wikipedia.org/wiki/List_of_Hello_world_program_examples]]

",2013-06-12 14:54:08.793,2017-07-04 15:26:12.82255
Concept,Documentation generation,"== Headline ==

Application of a [[documentation generator]]

== Metadata ==

* [[relatesTo::Documentation generator]]
* [[memberOf::Vocabulary:Software engineering]]
* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:53:51.874,2017-07-04 15:26:09.466493
Concept,Export,"== Headline ==

the description of local entities to be made available externally

== Details ==

The construct serves [[module]]-based software reuse controlled by [[import]]/[[export]] declarations.

The construct specifically enables the actual identification of abstractions made available for reuse.

== Metadata ==

* [[instanceOf::Language construct]]
* [[memberOf::Vocabulary:Programming]]
",2013-06-12 14:53:54.917,2017-07-04 13:44:40.91225
Concept,Fmap function,"== Headline ==

The principle operation of a [[functor]]

== Metadata ==

* [[instanceOf::Common function]]
* [[memberOf::Vocabulary:Functional programming]]

",2013-06-12 14:53:57.796,2017-07-04 13:44:41.381199
Feature,Web UI,"== Headline ==

Support a web-based [[UI]]

== Description ==

The feature applies when an implementation of the [[system:Company]] uses a Web-based user interface subject to execution in a [[Web browser]]. Such a Web-based implementation may be a self-contained local implementation or it may rely on [[distribution]] such that it accesses remote data and operations on an appropriate server; see [[Feature:Distribution]].

== Metadata ==

* [[instanceOf::UI requirement]]
* [[instanceOf::Optional feature]]
* [[dependsOn::Feature:Browsing]]

",2013-06-12 14:59:59.156,2017-07-04 13:46:36.899497
Concept,Documentation generator,"== Headline ==

A programming tool generating [[documentation]]

== Illustration ==

See [[Contribution:haskellEngineer]] for [[Language:Haskell]] style of documentation based on [[Technology:Haddock]].

== Citation ==

(http://en.wikipedia.org/wiki/Software_documentation, 2 May 2013)

A documentation generator is a programming tool that generates software documentation intended for programmers (API documentation) or end users (End-user Guide), or both, from a set of specially commented source code files, and in some cases, binary files.

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Documentation_generator]]
* [[isA::Software technology]]
* [[memberOf::Vocabulary:Software engineering]]
* [[memberOf::Vocabulary:Programming]]

",2013-06-12 14:53:51.968,2017-07-04 15:26:09.58385
Concept,Expression,"== Headline ==

The concept of composing computations of values

== Description ==

The distinguished properties of expressions is that they can be evaluated such that evaluation returns a value. An expression is built from literals, variables, operators, functions, and possibly other entities.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Expression_(programming)]]
* [[instanceOf::Syntactic category]]
* [[instanceOf::Language concept]]

",2013-06-12 14:53:55.075,2017-07-04 13:44:40.931583
Feature,Wiki analysis demo,"== Headline ==

Demonstration of analyzing the 101wiki

== Description ==

TBD; see the other meta-level features for inspiration.

== Example ==

TBD; see the other meta-level features for inspiration.

== Metadata ==
* [[instanceOf::Meta-level 101feature]]
* ",2013-06-12 14:59:59.831,2017-07-04 13:46:36.918266
Language,CML,"== Headline ==

A markup language for chemical knowledge.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Chemical_Markup_Language]]
* [[instanceOf::XML language]]
*

",2013-06-12 15:00:19.879,2017-07-04 13:46:40.685103
Information,Contact,"== Headline ==

How to contact 101 HQ

== Description ==

You can reach the headquarter via email: [mailto:101companies@gmail.com 101companies@gmail.com]. If you are an actual or a prospective contributor, please feel very much encouraged to get in touch. You may also reach out on [http://twitter.com/101companies Twitter], [http://101companies.tumblr.com/ Tumblr], and [http://www.youtube.com/channel/UCzecm5qz_9KDcxuhgbRDy-w YouTube]. If you are student in a course that leverages 101, please consider kindly to leverage means of communication as you were instructed, but your input is appreciated by all means.

== Metadata ==
* ",2013-06-12 15:00:00.456,2017-07-04 13:46:36.944456
Information,Contribute,"== Headline ==

How to contribute to the [[101project]]

== Description ==

A guided submission page is under way to submit [[101contribution]]s for inclusion into 101repo and coverage on 101wiki. Until this page is released the following process is used:

* Prepare your contribution following these practices:
** Use a GitHub repo under your control.
** Use a contribution name that does not clash with existing contributions.
** If you plan to host multiple contributions, then designate a subdir to each contribution.
** Do not mix contributions and other stuff; use a ""contributions"" dir to factor out contributions.
* ""Register"" your contribution with an email to 101companies@gmail.org to include these details.
** Your _name_ and _email address_ for contact.
** The _URL_ for anonymous git-read-only access to your repo.
** The _directory_ within said repo which contains your contribution.
** Details, if any, to be put on the initial contribution page on 101wiki.
* Your email will be processed by the gatekeepers of 101companies as follows:
** The contribution is reviewed in some basic manner.
** 101repo is amended to ""symbolically link"" to your contribution.
** An initial page is created for your contribution on the 101wiki.
** You will be notified and granted editing access to the wiki.
* You maintain your contribution in your GitHub repo.
* You document your contribution on 101wiki.

== Metadata ==

* [[relatesTo::@contribution]]
* ",2013-06-12 15:00:00.898,2017-07-04 13:46:36.999943
Concept,Record,"== Headline ==

A labeled collection of component values.

== Illustration ==

In [[Language:C]], one defines a record using the `struct` keyword:

<syntaxhighlight language=""c"">
struct Employee {
    const char* name;
    const char* address;
    double      salary;
};
</syntaxhighlight>

It is also possible to emulate a record using an [[OO_class]] by omitting methods and constructors, for example in [[Language:Java]]:

<syntaxhighlight lang=""java"">
class Employee {
    String name;
    String address;
    double salary;
}
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Record_(computer_science)]]
* [[instanceOf::Data structure]]
* [[memberOf::Vocabulary:Data structure]]
* [[relatesTo::Record type]]
* [[relatesTo::List]]
* [[relatesTo::Tuple]]

",2013-06-12 14:55:40.382,2017-07-04 13:44:55.24637
Information,Download,"== Headline ==

How to download contributions of the [[101project]]

== Description ==

<media url=""http://www.youtube.com/watch?v=knIcx4P7DRA""/>

If you want to try out contributions, there are these means of downloading them.

=== ZIP file as linked on 101wiki page ===

# Go to the 101wiki page for the contribution.
# Select the ""Code tab"" and the item ""Download .zip"".

In this manner, one downloads the zipped directory for the contribution. It should be noted that some contributions may rely on artifacts that are not located in the contribution directory, that are located instead in other directories of the same repo. The following options are more generally applicable.

=== ZIP file as linked on GitHub page ===

# Go to the 101wiki page for the contribution.
# Select the ""Code tab"" and the item ""View code at GitHub"".
# Go to the root of the repo.
# Select the ""ZIP"" button to download the entire repo.

One will only get to see the ""ZIP"" button when position at the root of the directory.

=== git clone the GitHub repo ===

# Go to the 101wiki page for the contribution.
# Select the ""Code tab"" and the item ""View code at GitHub"".
# Go to the root of the repo.
# Select ""Git Read-Only"", if necessary.
# Copy the URL next to the button into the clipboard.
# Run ""git clone <url>"" on your system.

Here it is assume that some git client is available on the system. In fact, the last step, i.e., the ""git clone"" command, is given in the form as appropriate with a typical git client using the command line rather than a GUI.


== Metadata ==

* [[relatesTo::Namespace:Contribution]]
* ",2013-06-12 15:00:02.033,2017-07-04 13:46:37.285961
Information,Inform,"== Headline ==

How to inform others

== Description ==

If you are a contributor with write access to 101wiki, please feel encouraged to add information. That is, if you have an idea about information that should be added to [[Namespace:Information]], please go ahead and create a page. If you need to discuss on this matter, feel free to [[Information:Contact|contact]] 101 HQ. Information gets useful by linking to it and telling others about it.

== Metadata ==
* ",2013-06-12 15:00:02.521,2017-07-04 13:46:37.304201
Concept,Immutable list,"== Headline ==

A form of list without basic operations for mutation

== Description ==

An immutable list is a data structure for lists (ordered sequences) of elements of a common type. An immutable list can be manipulated in a basic sense like this:
* Observations
** Determine whether the list is ''null'' (i.e., empty).
** Retrieve the ''head'' of the list, if it exists (i.e., the first element of the list)
** Retrieve the ''tail'' of the list, if it exists (i.e., the rest or all but the head of the list).
* Construction
** Construct a ''nil'' list (i.e., the empty list).
** Construct a ''cons'' list (i.e., a non-empty list from given head and tail).

Notably, there are no operations like these:
* Adding an element in ways other than by using ''cons''.
* Removing an element in ways other than by using ''tail''.
Such operations are not available because of immutability (lack of support of changes, i.e., mutations). Such operations may be still encoded, but only by means of copying elements from a given list to a new list.

== Illustration ==

=== Immutable lists in Haskell ===

Here are some lists with an increasing number of elements:

<syntaxhighlight language=""haskell"">
[]
[1]
[1,2]
[1,2,3]
</syntaxhighlight>

We showed convenience notation for list construction. Fundamentally, lists
are constructed from two constructor functions: ''nil'' (square brackets) and ''cons'' (colon). Let us construct the same lists with the fundamental constructors:

<syntaxhighlight language=""haskell"">
[]
1:[]
1:(2:[])
1:(2:(3:[]))
</syntaxhighlight>

These are the functions to retrieve the head and the tail of a list:

<syntaxhighlight language=""haskell"">
head :: [a] -> a
tail :: [a] -> [a]
</syntaxhighlight>

(In reality, these functions have more general types, but let's simplify things here.)

Here are some applications of ''head'' and ''tail'':

<syntaxhighlight language=""haskell"">
> head [1,2]
1
> tail [1,2]
[2]
</syntaxhighlight>

Here is how we test a list to be empty:

<syntaxhighlight language=""haskell"">
null :: [a] -> Bool
</syntaxhighlight>

For instance:

<syntaxhighlight language=""haskell"">
> null []
True
> null [1,2]
False
</syntaxhighlight>

Further operations on lists can be expressed in terms of the operations described so far. Let us define an operation ''snoc'' for adding an element at the end of a list. (''snoc'' is inverse of ''cons'' in that cons adds an element at the start of a list.) Here is the function definition:

<syntaxhighlight language=""haskell"">
snoc :: [a] -> a -> [a]
snoc [] x = [x]
snoc (x:xs) y = x : snoc xs y
</syntaxhighlight>

Here is an illustrative function application:

<syntaxhighlight language=""haskell"">
> snoc [1,2] 3
[1,2,3]
</syntaxhighlight>

The function definition for ''snoc'' is representative for functions on lists in that we leverage [[pattern matching]] with two cases: one for the empty list, another one for nonempty lists. Further, we leverage [[recursion]]: the function ''snoc'' is defined in terms of itself; the first equation is the base case for recursion.

== Metadata ==

* [[isA::List]]
* [[isA::Functional data structure]]
* [[isA::Immutable data type]]
* [[relatesTo::Linked list]]
",2013-06-12 14:54:14.224,2017-07-04 15:26:14.154731
Information,Markup,"== Headline ==

What markup to use on 101wiki pages

== Description ==

Overall, 101wiki uses [[Technology:MediaWiki]] markup but with some omissions, extensions, and variations.

'''This information is under construction.'''

=== File and fragment selection ===

Files in 101repo and fragments thereof can be addressed so that the corresponding text is rendered. The following examples stem from [[Contribution:haskellStarter]].

This is how a complete file could be selected:

<pre>
<fragment url=""/contributions/haskellStarter/src/Main.hs""/>
</pre>

In fact, the URLs can be relative to the page:

<pre>
<fragment url=""src/Main.hs""/>
</pre>

A specific type in the file can be selected like this:

<pre>
<fragment url=""src/Main.hs/type/Company""/>
</pre>

One can use the discovery service to actually capture the URLs for file and fragment selection. For instance, this URL positions the discovery service on the file of interest: http://101companies.org/resources/contributions/haskellStarter/src/Main.hs?format=html Accordingly, one can examine the listed fragments and extract the URLs for inclusion into the fragment markup.

== Metadata ==
* ",2013-06-12 15:00:03.483,2017-07-04 13:46:37.345971
Information,Module,"== Headline ==

How to develop and maintain a module for the [[101project]]

== Description ==

TBD

== Metadata ==

* [[relatesTo::@module]]
* [[relatesTo::Namespace:Module]]
* ",2013-06-12 15:00:03.709,2017-07-04 13:46:37.367683
Concept,Graph,"== Headline ==

A [[data structure]] consisting of nodes and edges

== Metadata ==

* [[isA::Data structure]]
* [[sameAs::http://en.wikipedia.org/wiki/Graph_(mathematics)]]
",2013-06-12 14:54:05.993,2017-07-04 15:26:12.537359
Concept,IDE,"== Headline ==
A technology consisting of at least a syntax highlighter and a debugger that assist in programming

== Abbreviation ==

Integrated Development Environment

== Citation ==

(http://en.wikipedia.org/wiki/Integrated_development_environment, 15 April 2013)

An integrated development environment (IDE) is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of a source code editor, build automation tools and a debugger.

== Metadata ==

* [[isA::Software technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Integrated_development_environment]]
",2013-06-12 14:54:11.44,2017-07-04 15:26:13.069331
Information,Namespace,"== Headline ==

How to manage namespaces?

== Description ==

The process is a bit complicated and should be improved some day.

Until then, the following description is available on GitHub:

https://github.com/101companies/101worker/issues/86#issuecomment-16783873

== Metadata ==
* ",2013-06-12 15:00:03.945,2017-07-04 13:46:37.37915
Information,Papers,"== Headline ==

Publications on the [[101project]]

== Description ==

* Jean-Marie Favre, Ralf Lämmel, Martin Leinberger, Thomas Schmorleiz, and Andrei Varanovich: ""Linking Documentation and Source Code in a Software Chrestomathy"". In: Proceedings of WCRE 2012. [http://softlang.uni-koblenz.de/101meta/ Available online].
* Jean-Marie Favre, Ralf Lämmel, and Andrei Varanovich: ""Modeling the linguistic architecture of software products"". In: Proceedings of MODELS 2012. [http://softlang.uni-koblenz.de/mega Available online].
* Jean-Marie Favre, Ralf Lämmel, Thomas Schmorleiz, and Andrei Varanovich: ""101companies: a community project on software technologies and software languages"". In: Proceedings of TOOLS 2012. [http://softlang.uni-koblenz.de/101companies/inauguration Available online].

== Metadata ==
* ",2013-06-12 15:00:04.185,2017-07-04 13:46:37.40167
Information,Presentations,"== Headline ==

Presentations on the [[101project]]

== Description ==

* 19 September 2012. CWI, Amsterdam, Presentation by Ralf Lämmel at Software Freedom Day: ""The 101companies community approach to knowledge engineering for software technologies and software languages"". Slides [http://softlang.uni-koblenz.de/101companies/120919-cwi.pdf [.pdf]].
* 08 August 2012. [http://www.ufpe.br/ufpenova/ UFPE], Recife. Guest lecture by Ralf Lämmel: ""Rule-based metadata annotation for software repositories"". Slides [http://softlang.uni-koblenz.de/101companies/120808-UnB.pdf [.pdf]].
* 01 August 2012. [http://www.ufpe.br/ufpenova/ UFPE], Recife. Guest lecture by Ralf Lämmel: ""Understanding a multi-language, multi-technology software chrestomathy"". Slides [http://softlang.uni-koblenz.de/101companies/120801-recife.pdf [.pdf]]; [http://softlang.uni-koblenz.de/101companies/120801-recife.mov [.mov]] (animated slides, with manual advancement).
* 14 June 2012. CWI, Amsterdam. CWI Lectures on Understanding Software. Invited talk by Ralf Lämmel: ""Understanding technological spaces"". Slides [http://softlang.uni-koblenz.de/101companies/120614-cwi.pdf [.pdf]]; [http://softlang.uni-koblenz.de/101companies/120614-cwi.mov [.mov]] (animated slides, with manual advancement).
* 8 June 2012. GSD Lab, University of Waterloo. Guest lecture by Ralf Lämmel: ""Design and execution qualities in the 101companies project"". Slides [http://softlang.uni-koblenz.de/101companies/120608-waterloo.pdf [.pdf]].
* 29 May 2012. TOOLS 2012. Conference presentation by Andrei Varanovich: ""101companies: a community project on software technologies and software languages"". Slides [http://softlang.uni-koblenz.de/101companies/tools12.pdf [.pdf]].
* 5 Jan 2012. Dagstuhl on the ""Foundations for Scripting Languages"". Short presentation by Ralf Lämmel: ""101companies.org: A call to arms at #ScriptingDagstuhl"". Slides [http://softlang.uni-koblenz.de/101companies/dagstuhl-120105.pdf [.pdf]].
* 26 Sep 2011. 16. Kolloquium Programmiersprachen und Grundlagen der Programmierung ([http://www.wi.uni-muenster.de/pi/konferenzen/KPS2011/ KPS'11]). Workshop representation by Ralf Lämmel: ""Megamodels of Programming Technologies"". Slides [http://softlang.uni-koblenz.de/101companies/kps11.pdf [.pdf]].
* 22 Mar 2011. AOSD 2011. Half-day tutorial by Ralf Lämmel: ""Understanding Programming Technologies by Analogy, Examples, and Abstraction"". Summary and slides available: [http://userpages.uni-koblenz.de/~laemmel/aosd11/ [.html]]
* 14 Mar 2011. University of Brasilia. Colloquium presentation by Ralf Lämmel: ""Understanding Programming Technologies by Analogy, Examples, and Abstraction"". Slides [http://developers.svn.sourceforge.net/svnroot/developers/repository/ralfs-miscellanea/decks/110314-brasilia.pdf [.pdf]].
* 3 Dec 2010. IFIP WG 2.11 meeting in Waterloo, Canada. Presentation by Ralf Lämmel: ""Modeling Programming Technologies""
* 11 Oct 2010: GPCE 2010 in Eindhoven, Netherlands. Keynote by Ralf Lämmel: ""The Hitchhiker's Guide to Software Languages"" Slides etc. [http://userpages.uni-koblenz.de/~laemmel/42 [.html]]
* 10 Oct 2010. GPCE/SLE 2010. Short tutorial by Jean-Marie Favre, Dragan Gašević, and Ralf Lämmel: ""Mega-Modeling Software Language Artifacts"". Description [http://softlang.uni-koblenz.de/meganalysis/GpceSle10-tutorial-description.pdf [.pdf]]. Slides [http://softlang.uni-koblenz.de/meganalysis/GpceSle10-tutorial-slides.pdf [.pdf]]

== Metadata ==
* ",2013-06-12 15:00:04.451,2017-07-04 13:46:37.487087
Concept,Endogenous model transformation,"== Headline ==

A [[type-preserving transformation|type-preserving]] [[model transformation]]

== Metadata ==

* [[relatesTo::http://dx.doi.org/10.1016/j.entcs.2005.10.021]]
* [[isA::Model transformation]]
* [[memberOf::Vocabulary:MDE]]
",2013-06-12 14:53:53.516,2017-07-04 15:26:09.673335
Concept,Function object,"== Headline ==

An [[object]] in the sense of [[OOP]] that encodes a [[function]] or a [[closure]]

== Citation ==

(http://en.wikipedia.org/wiki/Function_object, 4 June 2013)

A function object [...] is a computer programming construct allowing an object to be invoked or called as if it were an ordinary function, usually with the same syntax (a function parameter that can also be a function).

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Function_object]]
* [[memberOf::Vocabulary:OO programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:03.45,2017-07-04 13:44:42.192719
Concept,Foreign function interface,"== Headline ==

a mechanism for inter-[[programming language]] calls

== Abbreviation ==

* FFI

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Foreign_function_interface]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:00.901,2017-07-04 13:44:41.831159
Concept,Function application,"== Headline ==

Apply a function to an [[argument]]

== Description ==

See the concept of [[function]].

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Function_application]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:02.869,2017-07-04 13:44:42.028013
Information,Translate,"== Headline ==

How to translate terms used on 101wiki

== Description ==

Specifically, concepts according to [[Namespace:Concept]] may need to be translated. Any standard means of translation can be used, of course, but Wikipedia can also be leveraged directly, whenever a page is linked to Wikipedia. For instance, [[Sorting algorithm]] links to http://en.wikipedia.org/wiki/Sorting_algorithm (using, in fact, an [[Property:Identifies]]), which in turn is linked to the German Wikipedia page http://de.wikipedia.org/wiki/Sortierverfahren. Thus, one cannot just translate terms, in fact, one can read about concepts in the preferred language, without using any unstructured means of web search.

== Metadata ==
* ",2013-06-12 15:00:04.725,2017-07-04 13:46:37.509838
Concept,Enumeration,"== Headline ==

A collection with ordered listing

== Illustration ==

TBD

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Enumeration]]
* [[relatesTo::http://hackage.haskell.org/packages/archive/base/3.0.3.1/doc/html/GHC-Enum.html]]
* [[isA::Concept]]

",2013-06-12 14:53:53.739,2017-07-04 15:26:09.730749
Concept,Abstraction mechanism,"== Headline ==

Language support for abstraction in programming

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Abstraction_(computer_science)]]
* [[relatesTo::http://dl.acm.org/citation.cfm?id=567067.567094]]
* [[memberOf::Vocabulary:Software language engineering]]
* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:53:09.964,2017-07-04 15:25:58.687191
Concept,Generic objectware,"== Headline ==

A segment of [[objectware]] serving needs of generic representation

== Description ==

When associating the technical space of Objectware with technologies, it is often the case that objects only serve a generic purpose--as opposed to the use of a problem-specific object model for each use of the technology. For instance, an [[API]] for [[In-memory XML processing]] reifies XML content through objects, but those objects comply with an object model that is generically defined once and for all for all XML content; see, for example, the [[Technology:DOM]] API.

== Metadata ==

* [[instanceOf::Technical segment]]

",2013-06-12 14:54:05.269,2017-07-04 13:44:42.616006
Concept,Equality,"== Headline ==

Some kind of equality in programming

== Illustration ==

Let us focus here on equality of data as it is used in [[programming]]. Different kinds of equality exist: [[structural equality]], [[semantic equality]], [[reference equality]], and possibly others. For example, trivially, the following equalities or inequalities hold as demonstrated at the interpreter prompt of [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
> 42 == 42
True
> 42 == 41
False
> True == True
True
> ""Foo"" == ""Bar""
False
</syntaxhighlight>

In various [[programming language]]s, equality may be defined by the programmer. For instance, [[Language:Haskell]] designates a [[type class]] ''Eq'' to equality (readily defined in the [[Haskell Prelude]]:

<syntaxhighlight lang=""haskell"">
-- A type class for equality
class Eq a
  where
    (==) :: a -> a -> Bool
</syntaxhighlight>

For instance, equality of Booleans would be defined by the following [[type-class instance]]:

<syntaxhighlight lang=""haskell"">
-- Equality of Booleans
instance Eq Bool
  where
    True == True = True
    False == False = True
    _ == _ = False
</syntaxhighlight>

More interestingly, equality of lists would be defined such that the two lists need to be of the same length and their elements need to be equal in a pairwise manner; thus we also need equality for the element type, which is expressed by the extra constraint in the instance:

<syntaxhighlight lang=""haskell"">
-- Equality of lists
instance Eq a => Eq [a]
  where
    x == y =  length x == length y
           && and (map (uncurry (==)) (zip x y))
</syntaxhighlight>

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Equality_(mathematics)]]
* [[relatesTo::http://en.wikipedia.org/wiki/Inequality_(mathematics)]]
* [[relatesTo::http://en.wikipedia.org/wiki/Relational_operator#Equality]]
* [[isA::Concept]]

",2013-06-12 14:53:53.901,2017-07-04 15:26:10.209767
Theme,XML programming,"== Headline ==

[[Language:XML]] theme of implementations

== Description ==

The theme collects representatives of the most established [[XML processing]] options. Several of these options rely on [[API|API]]s so that of XML processing is embedded into an existing language such as [[Language:CSharp|C#]] or [[Language:Java]]. More specifically, there are options for [[in-memory XML processing]], [[push-based XML parsing]], and [[pull-based XML parsing]]. In the case of in-memory processing, two options are included: one for the more classic [[Technology:DOM]] approach and another more declarative, query-oriented which is based on [[Technology:LINQ]] in that case. Besides those API-based options, the theme also covers two major styles of XML processing when it is supported directly by languages designated to either querying or transformation. Finally, there is a [[Mapping|mapping]]-based option such that an object model is derived from an XML schema such that [[Serialization|de-/serialization]] can be used to access XML data through objects and extract XML data from objects.

== Metadata ==

* [[isA::Namespace:Theme]]
* ",2013-06-12 15:02:28.928,2017-07-04 15:26:32.951188
Concept,Exception,"== Headline ==

an exceptional situation occurring during computation

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Exception_handling]]
* [[isA::Concept]]

",2013-06-12 14:53:54.635,2017-07-04 15:26:10.298674
Concept,Exogenous model transformation,"== Headline ==

A [[type-changing transformation|type-changing]] [[model transformation]]

== Metadata ==

* [[relatesTo::http://dx.doi.org/10.1016/j.entcs.2005.10.021]]
* [[isA::Model transformation]]
* [[memberOf::Vocabulary:MDE]]
",2013-06-12 14:53:54.757,2017-07-04 15:26:10.36979
Concept,Greatest common divisor,"== Headline ==

The greatest common divisor of two integers

== Illustration ==

We face an [[algorithmic problem]] because the greatest common divisor can be computed by a (simple) algorithm.

* We assume (for simplicity) two positive operands ''x'' and ''y''.
* Perform the following steps to return the greatest common divisor of ''x'' and ''y''.
** Repeat the following step until ''x'' equals ''y'':
*** If ''x'' > ''y''
**** then subtract ''y'' from ''x'' and
**** else subtract ''x'' from ''y''.
** Return ''x''.

Here is also an implementation in [[Language:Java]]:

<syntaxhighlight lang=""java"">
  // Compute greatest common divisor
  public static int gcd(int x, int y) {
    // This version requires positive integers.
    assert x > 0 && y > 0;
    while (x != y) {
      if (x > y)
        x = x - y;
      else
        y = y - x;
    }
    return x;
  }
</syntaxhighlight>

Here is also an implementation in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
-- Operands are supposed to be positive integers.
gcd :: Int -> Int -> Int
gcd x y | x > y = gcd (x-y) y
        | x < y = gcd x (y-x)
        | otherwise = x
</syntaxhighlight>

== Citation ==

(http://en.wikipedia.org/wiki/Greatest_common_divisor, 15 April 2013)

In mathematics, the greatest common divisor (gcd), also known as the greatest common factor (gcf), or highest common factor (hcf), of two or more integers (at least one of which is not zero), is the largest positive integer that divides the numbers without a remainder. For example, the GCD of 8 and 12 is 4.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Greatest_common_divisor]]
* [[instanceOf::Algorithmic problem]]
",2013-06-12 14:54:06.116,2017-07-04 13:44:42.812826
Concept,Fact extractor,"== Headline ==

A program that extracts facts from software artifacts

== Details ==

See the notion of [[fact extraction]] for details.

== Metadata ==

* [[memberOf::Vocabulary:Software language engineering]]
* [[isA::Software technology]]

",2013-06-12 14:53:55.703,2017-07-04 15:26:10.440974
Concept,Feature modeling,"== Headline ==

The description of [[variability]] in [[software system]]s

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Feature_model]]
* [[relatesTo::http://productlines.wordpress.com/2008/07/21/feature-models-and-features-whats-this/]]
* [[relatesTo::http://www2.fiit.stuba.sk/~vranic/pub/FMM.pdf]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:53:56.234,2017-07-04 15:26:10.51088
Concept,Reader monad,"== Headline ==

A [[monad]] for environment passing

== Metadata ==

* [[isA::Monad]]
* [[relatesTo::http://monads.haskell.cz/html/readermonad.html]]
",2013-06-12 14:55:39.903,2017-07-04 15:26:20.414503
Concept,Head,"== Headline ==

The first element of a [[list]]

== Details ==

In [[functional programming]], there is typically a designated [[head function]].

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:08.058,2017-07-04 13:44:43.032694
Concept,Fibonacci number,"== Headline ==

The numbers of the Fibonacci sequence 0, 1, 1, 2, 3, 5, 8, 13, 21, ...

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Fibonacci_number]]
* [[isA::Concept]]

",2013-06-12 14:53:56.33,2017-07-04 15:26:10.570805
Concept,Framework,"== Headline ==

A structured collection of reusable abstractions for programming

== Details ==

Given the lack of a well-agreed and strong definition of the term ""framework"", some assumptions are submitted here. That is, it is assumed that a framework organizes reusable abstractions in a manner that they can be completed into an application (or a component thereof). In this context, one also speaks of inversion of control in that the framework may be in control of the application. This is to be contrasted with a simple [[library]] where the application itself remains in control such that it consistently calls library procedures when required.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Software_framework]]
* [[relatesTo::http://martinfowler.com/bliki/InversionOfControl.html]]
* [[isA::Software technology]]

",2013-06-12 14:54:02.044,2017-07-04 15:26:10.946531
Concept,Head function,"== Headline ==

A basic [[operation]] on a [[list]] to return its [[head]]

== Illustration ==

Here is an application of [[Language:Haskell]]'s ''head'' operation:

<syntaxhighlight lang=""haskell"">
Prelude> head [1,2,3]
1
</syntaxhighlight>

There is the related [[tail function]].

== Metadata ==

* [[instanceOf::Common function]]
* [[memberOf::Vocabulary:Functional programming]]
",2013-06-12 14:54:08.206,2017-07-04 13:44:43.068954
Concept,Health care,"== Metadata ==

* [[instanceOf::Application domain]]
",2013-06-12 14:54:08.667,2017-07-04 13:44:43.078274
Concept,Higher-order function,"== Headline ==

A [[Function]] that takes as an argument or returns a function

== Illustration ==

A higher-order function is a [[function]] that takes functions as arguments or returns functions as results. Consider the following [[Language:Haskell]] function which applies a given argument function twice:

<syntaxhighlight lang=""haskell"">
twice :: (x -> x) -> x -> x
twice f = f . f
</syntaxhighlight>

For instance:

<syntaxhighlight lang=""haskell"">
> twice (+1) 40
42
</syntaxhighlight>

''twice'' is clearly a higher-order function in that its first argument is of a function type ""x -> x"". ''twice'' is actually also a higher-order function in that it composes a function that it returns as result, namely ""f . f"". The [[function composition]] operator ""."" is another higher-order function, which is obvious from its type, again:

<syntaxhighlight lang=""haskell"">
> :t (.)
(.) :: (b -> c) -> (a -> b) -> a -> c
</syntaxhighlight>

For what it matters, the type itself already reveals that the second function is applied before the first function because of how type ""a"" of the third argument equals with the argument type of the second function, etc. Now it would be straightforward to define function composition (except that we do not need to do, as it is predefined evidently):

<syntaxhighlight lang=""haskell"">
(.) f g x = f (g x)
</syntaxhighlight>

See [[list processing]] functions such as [[Map function|map]], [[Fold function|fold]], and [[Filter function|filter]] for more examples of higher-order functions. See the concept of [[currying]] as well.

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Higher-order_function]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:09.36,2017-07-04 13:44:43.305871
Information,Wikipedia,"== Headline ==

How Wikipedia is used on 101wiki

== Description ==

Wikipedia is considered a key resource on 101wiki. Whenever possible, entities on 101wiki are linked to suitable Wikipedia pages. To this end, the [[Property:Identifies]] is used, when the reference Wikipedia page is judged to deal with exactly the entity (e.g., language, technology, or concept) at hand. The [[Property:LinksTo]] is used for semantically weaker links. Of course, 101wiki also links to other resources (including wikis), but Wikipedia is referenced as much as possible.

Further, Wikipedia is also a popular source for citation. That is, text from Wikipedia pages may end up in the ""Citation"" section of 101wiki pages.

== Illustration ==

See [[Sorting algorithm]] for a 101wiki pages that indeed links to Wikipedia for the relevant concept and also quotes from the linked Wikipedia page in the ""Citation"" section.

== Metadata ==
* ",2013-06-12 15:00:05.002,2017-07-04 13:46:37.540573
Issue,BigFragmentErrorMessage,"== Example ==

This works:

<fragment url=""/contributions/haskellStarter/src/Main.hs/type/Company""/>

This doesn't and look at how big the error message is:

<fragment url=""/contributions/haskellStarter/src/Main.hs/type/Foo""/>
== Metadata ==
* ",2013-06-12 15:00:05.699,2017-07-04 13:46:37.554249
Concept,Mandatory feature,"== Headline ==

A mandatory [[software feature]] in [[feature modeling]]
== Illustration ==

[[Feature:Company]] of the [[@system]] is a mandatory feature because it is pretty much impossible to have any system without a data model.
== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Feature model]]
* [[relatesTo::http://www2.fiit.stuba.sk/~vranic/pub/FMM.pdf]]
* [[isA::Software feature]]
* [[memberOf::Vocabulary:Software engineering]]
* [[relatesTo::Optional feature]]
* [[relatesTo::Alternative feature]]
",2013-06-12 14:54:40.547,2017-07-04 15:26:15.825089
Concept,Horizontal transformation,"== Intent ==

a transformation that preserves the level of abstraction

== Discussion ==

For instance, an optimization in a compiler preserves the level of abstraction.

Also, a refactoring in an IDE preserves the level of abstraction.

[[Vertical transformation]]s change the level of abstraction.

== Metadata ==

* [[instanceOf::Transformation]]
",2013-06-12 14:54:09.505,2017-07-04 13:44:43.325468
Concept,Pretty printing,"== Headline ==

Formating data structures such as source code as text

== Illustration ==

Arguably, pretty printing is a synonym for [[unparsing]]. The term ''pretty printing'' hints at the fact that the output is supposed to be ''pretty''. Thus, some emphasis is on the formatting rules, whereas ''unparsing'' may be as simple as mapping a parse tree to a corresponding string from which it could be parsed.

For instance, consider this parse tree (represented as a prefix term) of an if-statement:

<pre>
if(eq(var(""x""),var(""y"")),
  return(var(""i"")),
  skip)
</pre>

A pretty printer may yield the following formatted text:

<syntaxhighlight lang=""java"">
if (x==y)
  return i;
</syntaxhighlight>

In contrast, a (simple) unparser may make less effort and leave out linebreaks and indentation:

<syntaxhighlight lang=""java"">
if (x==y) return i;
</syntaxhighlight>

Further, the term ''unparsing'' may be limited to parse trees as input, whereas ''pretty printing'' may be applied to formating data structures more generally. However, in practice, these terms are used often interchangeably.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Prettyprint]]
* [[memberOf::Vocabulary:Software language engineering]]
* [[isA::Concept]]

",2013-06-21 09:37:29.577,2017-07-04 15:26:33.363072
Contribution,haskellAcceptor,"== Headline ==

[[Parsing]] (acceptance only) in [[Language:Haskell|]] with [[Technology:Parsec|]]

== Motivation ==

The implementation demonstrates [[parsing]] (acceptance) in [[Language:Haskell|]] with the [[Technology:Parsec|]] [[combinator library|library]] of [[parser combinator]]s. A concrete textual syntax for companies is assumed. Acceptance is considered only. Thus, no abstract syntax is constructued. We set up basic parsers for quoted strings and floating-point numbers. Further, we compose parsers for companies, departments, and employees using appropriate parser combinators for sequences, alternatives, and optionality. By design, the acceptor is kept simple in terms of leveraged programming technique; in particular, [[monadic style]] and [[applicative functor]]s are avoided to the extent possible.

== Illustration ==

We would like to process a textual representation of companies; ""..."" indicates an elision:

<pre>
company ""Acme Corporation"" {
  department ""Research"" {
    manager ""Craig"" {
      address ""Redmond""
      salary 123456.0
    }
    employee ""Erik"" {
      address ""Utrecht""
      salary 12345.0
    }
    employee ""Ralf"" {
      address ""Koblenz""
      salary 1234.0
    }
  }
  department ""Development"" {
    ...
  }
}
</pre>

Let's assume that the textual representation is defined by the following [[context-free grammar]]:

<pre>
company = ""company"" literal ""{"" department* ""}""
department = ""department"" literal ""{"" manager subunit* ""}""
subunit = nonmanager | department
manager = ""manager"" employee
nonmanager = ""employee"" employee
employee = literal ""{"" ""address"" literal ""salary"" float ""}""
</pre>

We can now apply a mapping from the grammar to a functional program in the following way:
* Each nonterminal becomes a function that is of Parsec's parser type.
* The function definition composes parsers following the production's structure.
* We may need to deal with lexical trivia such as spaces.
* We may want to check for the end-of-file to be sure to have looked at the complete input.

At this point, we are merely interested in the syntactic correctness of such inputs. Thus, the parser functions do not need to construct any proper [[parse tree]]s. They merely return ""()"".

Here is the parser function for departments:

<syntaxhighlight lang=""haskell"">
-- Accept a department
parseDepartment :: Acceptor
parseDepartment
  =  parseString ""department""
  >> parseLiteral
  >> parseString ""{""
  >> parseManager
  >> many parseSubUnit
  >> parseString ""}""
</syntaxhighlight>

The composition uses "">>"" for sequential composition in the same way as the original production for departments uses juxtaposition for the sequential composition of various terminals and nonterminals. The type ''Acceptor'' is defined as a parser type where the type of [[parse tree]]s is ""()"":

<syntaxhighlight lang=""haskell"">
-- The parser type for simple acceptors
type Acceptor = Parsec String () ()
</syntaxhighlight>

We also need parsers for the basic units of input: literals (strings) and floats. Here is the parser for floats:

<syntaxhighlight lang=""haskell"">
-- Accept a float
parseFloat :: Acceptor
parseFloat
  =  many1 digit
  >> char '.'
  >> many1 digit
  >> spaces
  >> return ()
</syntaxhighlight>

That is, a float is defined to start with a non-empty sequence of digits, followed by ""."", followed by another non-empty sequence of digits. In addition, any pending spaces are consumed as well. Finally, ""()"" is returned as the trivial parse tree of such an acceptor.

== Relationships ==

* [[Contribution:haskellParsec]] advances this acceptor into a proper parser.
* [[Contribution:antlrAcceptor]] and others use the same textual representation.

== Architecture ==

There are these modules:

* Main: acceptance test
* Company/Parser: the actual parser (acceptor)

The input is parsed from a file ""sampleCompany.txt"".

== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[uses::Technology:Parsec]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[developedBy::Contributor:rlaemmel]]

",2013-08-21 15:59:08.523,2017-07-05 15:30:13.078882
Concept,Indexing,"== Headline ==

The [[capability]] of accessing keyed and ordered records

== Metadata ==

* [[instanceOf::Capability]]
* [[sameAs::http://en.wikipedia.org/wiki/Index_(database)]]

",2013-06-12 14:54:16.952,2017-07-04 13:44:43.785907
Concept,Functional requirement,"== Headline ==

A required [[IO behavior]] of a [[software system]] or a [[software component|component]]

== Metadata ==

* [[samesAs::http://en.wikipedia.org/wiki/Functional requirement]]
* [[isA::Requirement]]
* [[memberOf::Vocabulary:Software engineering]]

",2013-06-12 14:54:04.191,2017-07-04 15:26:11.779087
Concept,Infinite data structure,"== Headline ==

a data structure controlled by [[lazy evaluation]]

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:17.818,2017-07-04 13:44:43.83744
Issue,DiscoverFolders,"== Demo ==

Let's try to discover this location:

https://github.com/101companies/101repo/tree/master/concepts/Quicksort

Here is how we could refer to the folder: <folder url=""/concepts/Quicksort""/>

When rendered ""concepts"" is missing. Also, we end up on Github as opposed to the discovery page. Actually, we end up in the nowhere on Github. The discovery service would know what to do.
== Metadata ==
* ",2013-06-12 15:00:06.001,2017-07-04 13:46:37.62374
Concept,Generative programming,"== Headline ==

Programming automated source code creation

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Automatic_programming]]
* [[memberOf::Vocabulary:Programming]]
* [[isA::Programming]]
",2013-06-12 14:54:04.802,2017-07-04 15:26:12.416518
Concept,Infinite list,"== Headline ==

a list of unbounded length in need of [[lazy evaluation]]

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[memberOf::Vocabulary:Functional programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:18.077,2017-07-04 13:44:43.853218
Issue,NotFound,"== Illustration ==

.
A simple implementation of stacks (of ints) is shown here as a functional data structure in [[Language:Haskell]]:.

These stacks are immutable. The push operation does not modify the given stack; it returns a new stack which shares the argument stack possibly with other parts of the program. The pop operation does not modify the given stack; it returns a part of the argument stack. We refer to [[Document:Handbook of data structures and applications]] for a profound discussion of functional data structures including the stack example. The functions for operations top and pop, as given above, are partial because they are undefined for the empty stack.

There are also alternative illustrative Stack implementations available:
* <file url=""/concepts/Foo/LeakyListStack.hs""/>: Stacks are represented as lists while the ''Stack'' type is simply defined as a type synonym to this end. This implementation does not enforce information hiding.
* <file url=""/concepts/Foo/OpaqueListStack.hs""/>: As before, stacks are represented as lists, but the ''Stack'' type is defined as a [[newtype]] which hides the representation as its constructor is not exported.
* <file url=""/concepts/Foo/FastListStack.hs""/>: As before, stacks are represented as lists and again this representation is hidden, but an additional data component for the size of the stack is maintained so that the size of a stack can be returned without traversing the stack.
== Metadata ==
* ",2013-06-12 15:00:07.322,2017-07-04 13:46:37.652524
Issue,ShowEqualsFalse,"== Details ==

All the remaining functions are implemented in the same module: <fragment url=""/contributions/haskellStarter/src/Main.hs"" show=""false""/>
== Metadata ==
* ",2013-06-12 15:00:07.975,2017-07-04 13:46:37.66223
Java,java.beans,"== Headline ==

A framework for components based on the JavaBeans architecture

== Metadata ==

* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://en.wikipedia.org/wiki/JavaBeans]]
* [[relatesTo::http://docs.oracle.com/javase/7/docs/api/java/beans/package-summary.html]]
* ",2013-06-12 15:00:08.644,2017-07-04 13:46:37.680263
Concept,Mapping,"== Headline ==

The [[capability]] of bridging [[technical space]]s.

== Metadata ==

* [[isA::Concept]]

",2013-06-12 14:54:42.343,2017-07-04 15:26:15.863405
Java,java.lang.annotation,"== Headline ==

support for Java's annotation facility

== Description ==

See also the Java package [[Java:javax.annotation]].

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/package-summary.html]]
* ",2013-06-12 15:00:09.281,2017-07-04 13:46:37.700477
Concept,Information hiding,"== Headline ==

The principle of information hiding

== Illustration ==

See the [[abstract data type]] [[Stack]] for an illustration of information hiding such that different kinds of representations are exercised for stacks with more or less information hiding applied to the representation.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Information_hiding]]
* [[isA::Concept]]

",2013-06-12 14:54:18.874,2017-07-04 15:26:14.455482
Concept,Information technology,"== Headline ==

Computers, networks, telecommunication equipment, etc.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Information_technology]]
* [[memberOf::Vocabulary:Information system]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:19.429,2017-07-04 13:44:43.900339
Concept,Input,"== Headline ==

input data consumed by program execution

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Input]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:20.06,2017-07-04 13:44:43.914066
Java,java.security,"== Headline ==

Java's security framework

== Metadata ==

* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/security/package-summary.html]]
* ",2013-06-12 15:00:09.602,2017-07-04 13:46:37.715304
Java,java cup.runtime,"== Headline ==

runtime package of [[Technology:CUP]] parser generator

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://www2.research.att.com/~john/Grappa/docs/java_cup/runtime/package-summary.html]]
* ",2013-06-12 15:00:09.932,2017-07-04 13:46:37.731232
Concept,Grammarware,"== Intent ==

a technological space focused on (textual) language processing

== Metadata ==

* [[instanceOf::Space]]
* [[isA::Concept]]

",2013-06-12 14:54:05.895,2017-07-04 15:26:12.483113
Concept,Integer,"== Headline ==

the [[primitive data type]] of Integers

== Discussion ==

The concept of integers may correspond to different language-specific data types.

== Metadata ==

* [[instanceOf::Primitive data type]]
",2013-06-12 14:54:21.895,2017-07-04 13:44:44.409019
Java,javax.annotation,"== Headline ==

support for Java's annotation facility

== Description ==

See also the Java package [[Java:java.lang.annotation]].

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/javax/annotation/package-summary.html]]
* ",2013-06-12 15:00:10.249,2017-07-04 13:46:37.75535
Java,org.antlr.runtime,"== Headline ==

the [[Technology:ANTLR]] runtime



== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* ",2013-06-12 15:00:10.858,2017-07-04 13:46:37.78441
Concept,Depth,"== Headline ==

Compute the nesting depth of departments

== Description ==

The nesting depth of departments within a company is to be computed; see below for details. Let's assume that the management of the company is interested in the nesting depth as a simple indicator for the complexity of the company (or particular departments thereof) in the sense of a hierarchical organization. Nesting depth, together possibly with other metrics and information, could feed into the discussion of reorganizing business structures.

The nesting depth is computed as follows:
* The depth of a department is 1 + the maximum of the depths of its sub-departments.
* In particular, the depth of a department without sub-departments is 1.
* The depth of a company is the maximum of the depths of its (immediate) departments.

== Motivation ==

The feature may be implemented as a [[query]], potentially making use of a suitable [[query language]]. Conceptually, the required query is non-trivial in that it needs to process company structure recursively so that nesting of departments can be properly observed. For instance, it is not straightforward to design a [[Language:SQL]] query that computes indeed nesting depth on a normalized relational schema for company data. Thus, it shall be interesting to see how different software languages, technologies, and implementations succeed in realizing the feature.

== Illustration ==

The feature is illustrated with a [[Function]] in [[Language:Haskell]] that works on top of appropriate [[algebraic data type]]s for company data; the function recurses into company data in a straightforward manner and it counts departments along the way:

<syntaxhighlight lang=""haskell"">
depth :: Company -> Int
depth (Company   ds) = max' (map depth' ds)
  where
    max' = foldr max 0
    depth' :: Department -> Int
    depth' (Department     ds  ) = 1 + max' (map depth' ds)
</syntaxhighlight>

The snippet originates from [[Contribution:haskellComposition]].

== Relationships ==

* See [[Feature:Total]] for a simpler query scenario.
* Indeed, the present feature should be tackled only after [[Feature:Total]].
* The present feature can only usefully instantiated on top of [[Feature:Hierarchical_company]], as it assumes nesting of departments for non-trivial results.

== Guidelines ==

* The ''name'' of an operation for computing the nesting depth of departments should involve the term ""depth"".
* A suitable ''demonstration'' of the feature's implementation should compute the depth of a sample company.
* See [[Feature:Total]] for more detailed guidelines on a query scenario, which apply similarly to the present feature.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Hierarchical organization]]
* [[relatesTo::http://en.wikipedia.org/wiki/Restructuring]]
* [[isA::Functional requirement]]
* [[isA::Query]]
* [[isA::Optional feature]]

* [[implies::Feature:Hierarchical_company]]
* ",2015-12-11 07:12:45.168,2017-07-04 15:26:43.948358
Concept,Java annotation,"== Headline ==

Language construct for [[metadata]] in [[Language:Java]] [[program]]s

== Illustration ==

In [[Language:Java]] (and many other programming languages likewise), [[metadata]] can be associated with program constructs by means of designated language support. Such metadata goes by the name of annotations in Java. For instance, when a method should be tagged to be a ""test method"" for [[Technology:JUnit]], then this would look as follows:

<syntaxhighlight lang=""java"">
import org.junit.Test;
import static org.junit.Assert.*;

public class Tests {
    @Test
    public void test42() {
		assertEquals(42.0, 42.0, 0.0);
	}
}
</syntaxhighlight>

Thus, ""@Test"" is the annotation which tells JUnit to execute the ""test42"" method along test execution. That is, ""@Test"" is metadata about the method ""test42"". JUnit is essentially a [[metaprogram]] that looks for such metadata.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Java_annotation]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:25.28,2017-07-04 13:44:44.554252
Concept,String,"== Headline ==

The [[primitive data type]] of strings

== Details ==

Conceptually, a string may be regarded as a [[list]] of [[character]]s.

Technically, strings are often implemented as designated data types.

== Metadata ==

* [[instanceOf::Primitive data type]]
* [[sameAs::http://en.wikipedia.org/wiki/String_(computer_science)]]
* [[relatesTo::http://en.wikipedia.org/wiki/String_literal]]

",2013-06-12 14:56:11.072,2017-07-04 13:44:58.336242
Concept,Newtype,"== Headline ==

A special form of [[algebraic data type]] in [[Language:Haskell]]

== Illustration ==

Consider the following declaration of a salary type:

<syntaxhighlight lang=""haskell"">
type Salary = Float
</syntaxhighlight>

This declaration introduces merely a type synonym, but it enforces no type distinction. Floats and salaries are compatible in the sense of [[structural typing]]. If we were to enforce a type distinction, then the following type declaration could be preferred instead:

<syntaxhighlight lang=""haskell"">
data Salary = Salary Float
</syntaxhighlight>

Thus, salaries and floats are no longer compatible at a typing level; a float may be ""wrapped"" as a salary; a salary may be ""unwrapped"" to retrieve a float. Indeed, this special case of using algebraic data types just for making type distinctions is specifically supported by newtypes in Haskell. Accordingly, the following type declaration uses a newtype:

<syntaxhighlight lang=""haskell"">
newtype Salary = Salary Float
</syntaxhighlight>

Syntactically, a newtype is an algebraic data type with only one [[data constructor]] with in turn only one [[constructor component]]. Semantically, this restriction implies that we can think of the constructor as serving for type distinction only without any semantical purpose such as grouping data.

Consider this program:

<syntaxhighlight lang=""haskell"">
data X = X ()
newtype Y = Y ()
f (X _) = True
g (Y _) = True
</syntaxhighlight>

When ''f'' is applied to ''undefined'', then an exception is thrown, as proper pattern matching (term deconstruction) has to be performed in order to confirm the equation. When ''g'' is applied to ''undefined'', then the equation is soundly applied (such that ''True'') is returned because no pattern has to be matched and the undefined argument of ''Y'' is not inspected.

<pre>
*Main> f undefined
*** Exception: Prelude.undefined
*Main> g undefined
True
*Main> f (X undefined)
True
</pre>

== Metadata ==

* [[isA::Algebraic data type]]
* [[sameAs::http://www.haskell.org/haskellwiki/Newtype]]
* [[instanceOf::Concept]]

",2013-06-12 14:55:02.571,2017-07-04 15:26:17.372379
Concept,Kind,"== Headline ==

The type of a type constructor

== Illustration ==

When describing kinds, types are commonly referred to as ""*"", unary type constructors are referred to as ""* -> *"", etc. Let us draw illustrations from [[Language:Haskell]]:

* ''()'' (i.e., the empty tuple type) is of kind ""*"".
* ''[]'' (i.e., the list type constructor) is of kind ""* -> *"".
* ''Either'' (i.e., the sum type constructor) is of kind ""* -> * -> *"".

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Kind_(type_theory)]]
* [[sameAs::http://www.haskell.org/haskellwiki/Kind]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:26.017,2017-07-04 13:44:44.579979
Concept,Layout,"== Headline ==

The architecture for the user interface in an Activity.

== Metadata ==

* [[instanceOf:: Android_UI]]
* [[sameAs::http://developer.android.com/guide/topics/ui/declaring-layout.html]]
",2013-06-12 14:54:29.749,2017-07-04 13:44:44.7376
Concept,Lazy evaluation,"== Headline ==

Delay evaluation of an expression until its value is needed

== Illustration ==

=== Lazy by definition ===

Lazy evaluation is either supported by the underlying [[programming language]] or it needs to be encoded by the programs. Let's start with illustrations in [[Language:Haskell|Haskell]]; this language's  [[semantics]] is lazy by definition.

Consider the following expression and its evaluation:

<syntaxhighlight lang=""haskell"">
> repeat 42
[42,42,42,42,42,42,42,42,42,42,42,42,42,42,...
</syntaxhighlight>

That is, 42 is to be repeated an infinite number of times and all those 42s are to be collected in one list. It is not surprising that the evaluation of this expression never stops as witnessed by printing the infinite result forever. Laziness comes into play when such expressions are used in a way that they do not need to be fully evaluated.

For instance, let us compute the head of an infinite list:

<syntaxhighlight lang=""haskell"">
> head $ repeat 42
42
</syntaxhighlight>

Thus, the list of repeated 42s is never materialized; rather the infinite list is only computed up to the point needed for returning the result, i.e., the head of the list. Here is another example for exploiting laziness to compute on 'infinite' data:

<syntaxhighlight lang=""haskell"">
> length $ take 42 $ repeat 42
42
</syntaxhighlight>

That is, we compute the length of the list that holds the first 42 elements of the earlier infinite list of 42s. Here is yet another example:

<syntaxhighlight lang=""haskell"">
> [1..] !! 41
42
</syntaxhighlight>

That is, we retrieve the 42nd element (the 41st index) of the earlier list.

=== Lazy conditionals ===

Most languages are readily lazy in terms of the semantics of their conditionals such that the 'then' and 'else' branches are only evaluated or executed, if necessary. This specific form of laziness is obviously important for programming, regardless of whether we face a language with lazy or strict evaluation. For instance, consider the following definition of [[factorial]] in [[Language:Haskell|Haskell]]:

<syntaxhighlight lang=""haskell"">
-- A straightforward definition of factorial
factorial :: Integer -> Integer
factorial x =
  if x < 0
    then error ""factorial arg error""
    else if x <= 1
      then 1
      else x * factorial (x-1)
</syntaxhighlight>

Regardless of language, such a definition should not evaluate the recursive case, except when honored by the value of the condition. Thus, this style of recursive definition even works in a programming language with [[strict evaluation]], .e.g, in [[Language:Python|Python]]:

<syntaxhighlight lang=""python"">
# A straightforward definition of factorial
def factorial(x):
    if not isinstance(x, (int, long)) or x<0:
        raise RuntimeError('factorial arg error')
    else:
        if x <= 1:
            return 1
        else:
            return x * factorial(x-1)
</syntaxhighlight>

The difference between lazy and eager evaluation becomes quite clear, when we attempt a definition of 'if' as a function. In [[Language:Haskell|Haskell]], we can actually define a function to mimic 'if' and use it in revising the recursive definition of factorial:

<syntaxhighlight lang=""haskell"">
-- A re-definition of ""if""
ifThenElse :: Bool -> x -> x -> x
ifThenElse True x   = x
ifThenElse False   x = x

-- Factorial re-defined to use user-defined if
factorial' :: Integer -> Integer
factorial' x =
  ifThenElse (x < 0)
    (error ""factorial arg error"")
    (ifThenElse (x <= 1)
      1
      (x * factorial' (x-1)))
</syntaxhighlight>

The fact that this definition works depends on the lazy evaluation semantics of Haskell. The arguments of the function ''ifThenElse'' are only evaluated, when they are really needed. Let us attempt the same experiment in a language with eager evaluation semantics, e.g., [[Language:Python|Python]]:

<syntaxhighlight lang=""python"">
# A troubled re-definition of ""if""
def troubledIf(b,x1,x2):
    if b:
        return x1
    else:
        return x2

# Factorial re-defined to use user-defined if
def troubledFactorial(x):
    if not isinstance(x, (int, long)) or x<0:
        raise RuntimeError('factorial arg error')
    else:
        return troubledIf(x<=1,1,x * troubledFactorial(x-1))
</syntaxhighlight>

When exercising this definition, we get this sort of runtime error:

<pre>
>>> troubledFactorial(5)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""program.py"", line 23, in troubledFactorial
    return troubledIf(x<=1,1,x * troubledFactorial(x-1))
  File ""program.py"", line 23, in troubledFactorial
    return troubledIf(x<=1,1,x * troubledFactorial(x-1))
  File ""program.py"", line 23, in troubledFactorial
    return troubledIf(x<=1,1,x * troubledFactorial(x-1))
  File ""program.py"", line 23, in troubledFactorial
    return troubledIf(x<=1,1,x * troubledFactorial(x-1))
  File ""program.py"", line 23, in troubledFactorial
    return troubledIf(x<=1,1,x * troubledFactorial(x-1))
  File ""program.py"", line 23, in troubledFactorial
    return troubledIf(x<=1,1,x * troubledFactorial(x-1))
  File ""program.py"", line 21, in troubledFactorial
    raise RuntimeError('factorial arg error')
RuntimeError: factorial arg error
</pre>

A quick analysis suggests that this runtime error arises from the fact that an application of the function 'generates' an infinite chain of recursive applications, thereby eventually leading to the application of the function to a negative number, which is intercepted by the precondition test of the function. Thus, the function ''troubledIf'' is clearly not lazy and it cannot be used in defining the factorial function.

=== Encoding laziness ===

One may encode laziness in a language with eager evaluation. To this end, each expressions, for which evaluation should be deferred, can be turned into a degenerated closure ([[lambda abstraction]]) such that the evaluation can be requested explicitly by a trivial application. Consider the following attempt at a user-defined 'if' in Python and its use in another attempt at the factorial function:

<syntaxhighlight lang=""python"">
# A (properly) lazy re-definition of ""if""
def lazyIf(b,x1,x2):
    if b:
        return x1(())
    else:
        return x2(())

# A definition of factorial using lazyIf
def lazyFactorial(x):
    if not isinstance(x, (int, long)) or x<0:
        raise RuntimeError('factorial arg error')
    else:
        return lazyIf(x<=1,lambda  : 1, lambda  : x * lazyFactorial(x-1))
</syntaxhighlight>

Thus, evaluation is requested explicitly by passing ""()"" (i.e., the empty tuple) to a ""deferred"" expression. When constructing a deferred expression, then we use a lambda abstraction with a superfluous variable.

See [[Document:Okasaki96]] for a profound discussion of [[data structure]]s in a functional programming language while leveraging laziness for the benefit of efficiency.

== Relationships ==

See the related concept of [[eager evaluation]].

Synonyms (in a broad sense):
* [[Call-by-need evaluation]]
* [[Non-strict evaluation]]
* [[Laziness]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Lazy evaluation]]
* [[instanceOf::Evaluation strategy]]
* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Programming languages]]
",2013-06-12 14:54:30.393,2017-07-04 13:44:45.163793
Concept,Multiset,"== Headline ==

A [[set]] with repetition

== Citation ==

(https://en.wikipedia.org/wiki/Set_(abstract_data_type)#Multiset, 19 November 2015)

A generalization of the notion of a set is that of a multiset or bag, which is similar to a set but allows repeated (""equal"") values (duplicates). This is used in two distinct senses: either equal values are considered identical, and are simply counted, or equal values are considered equivalent, and are stored as distinct items. For example, given a list of people (by name) and ages (in years), one could construct a multiset of ages, which simply counts the number of people of a given age. Alternatively, one can construct a multiset of people, where two people are considered equivalent if their ages are the same (but may be different people and have different names), in which case each pair (name, age) must be stored, and selecting on a given age gives all the people of a given age.

== Metadata ==

* [[instanceOf::Abstract data type]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::https://en.wikipedia.org/wiki/Set_(abstract_data_type)#Multiset]]
* [[similarTo::https://en.wikipedia.org/wiki/Multiset]]",2015-11-19 11:01:49.287,2017-07-04 13:48:08.497451
Concept,Imperative data structure,"== Headline ==

The specifically imperative approach to the implementation of [[data structure]]s

== Illustration ==

See [[linked list]]s as a simple example of an [[imperative data structure]].

== Metadata ==

* [[isA::Data structure]]
* [[relatesTo::Functional data structure]]
",2013-06-12 14:54:14.464,2017-07-04 15:26:14.248338
Concept,Library,"== Headline ==

A collection of reusable abstractions for programming

== Details ==

There is the related notion of [[Framework|framework]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Library_(computing)]]
* [[isA::Software technology]]

",2013-06-12 14:54:32.164,2017-07-04 15:26:14.715211
Concept,List monoid,"== Headline ==

A [[monoid]] for appending lists

== Illustration ==

We illustrate the list monoid in [[Language:Haskell]] on the grounds of the [[type class]] ''Monoid'' with the first two members needed for a minimal complete definition:

<syntaxhighlight lang=""haskell"">
-- The type class Monoid
class Monoid a
  where
    mempty :: a -- neutral element
    mappend :: a -> a -> a -- associative operation
    mconcat :: [a] -> a -- fold
    mconcat = foldr mappend mempty
</syntaxhighlight>

Lists form a monoid in the following way:

<syntaxhighlight lang=""haskell"">
-- The Monoid instance for lists
instance Monoid [a]
  where
    mempty = []
    mappend = (++)
    mconcat = concat
</syntaxhighlight>

Now it is interesting to observe how ''concat'' is (or could be) defined:

<syntaxhighlight lang=""haskell"">
-- Appending many lists
concat :: [[a]] -> [a]
concat = foldr (++) []
</syntaxhighlight>

Please observe the above default definition of ''mconcat'' within the type class ''Monoid''; it  generalizes this sort of fold and thus, the definition of ''mconcat'' would not be needed in the case of the list instance of ''Monoid''.

== Metadata ==

* [[isA::Monoid]]

",2013-06-12 14:54:35.737,2017-07-04 15:26:15.669481
Contribution,OCL using USE,"== Headline ==

Class diagrams with [[Language:OCL]] based on [[Technology:USE]]

== Motivation ==

Some of the features involve constraints. Notably, [[Feature:Ranking]] imposes a constraint on the salary values. In a [[Language:UML]]-based contribution, such constraints may be modeled with the help of [[Language:OCL]].


== Illustration ==

When using USE (with OCL), a class diagram including all OCL constraints is represented in a textual syntax. The USE IDE visualizes this textual syntax when necessary. Here is how invariants are attached to a class:

<pre>
context Company
    inv needs_a_name: self.Name.size() > 0
    inv comply_ranked_salary: self.complyRankedSalary()
</pre>

In the class ''Company'', the corresponding invariant is specified as follows:

<pre>
class Company
attributes
    Name : String
operations
    total() : Real =
        self.departments->collect(d : Department | d.total())->sum()
    cut()
    complyRankedSalary() : Boolean =
        self.departments->forAll(d : Department | d.complyRankedSalary())
    containsEmployee(e: Employee) : Boolean =
        self.departments->forAll(d : Department | d.containsEmployee(e))
    containsDepartment(dep: Department) : Boolean =
        self.departments->includes(dep) or
        self.departments->one(d : Department | d <> dep and d.containsDepartment(dep))

    addDepartment(d : Department)
    removeDepartment(d : Department)
end
</pre>

Thus, ''complyRankedSalary'' is delegated to the individual departments. A company complies with the ranking constraints when all its departments comply with it. We use OCL's universal quantification to this end.

In the class ''Department'', the corresponding invariant is specified as follows:

<pre>
    complyRankedSalary() : Boolean =
        self.employees->sortedBy(e : Employee | e.Salary)->last().oclIsTypeOf(Manager) and
        self.subdepartments->forAll(d : Department | d.complyRankedSalaryRec(self.employees->sortedBy(e : Employee | e.Salary)->first().Salary))

    complyRankedSalaryRec(max : Real) : Boolean =
        self.employees->sortedBy(e : Employee | e.Salary)->last().oclIsTypeOf(Manager) and
        self.employees->sortedBy(e : Employee | e.Salary)->last().Salary < max and
        self.subdepartments->forAll(d : Department | d.complyRankedSalaryRec(self.employees->sortedBy(e : Employee | e.Salary)->first().Salary))
</pre>

The first condition of ''complyRankedSalary'' establishes that, when sorting employees of a department by salary, then the last employee, i.e., the employee with the maximum salary, is the manager of the given department. The second condition of ''complyRankedSalary'', which ultimately invokes ''complyRankedSalaryRec'', checks compliance for the subdepartments while passing in the minimum salary from the given department as the upper bound for salaries in the subdepartments. Finally, the recursive condition ''complyRankedSalaryRec'' is very similar to ''complyRankedSalary'', except that it also enforces the received maximum as a bound.

== Usage ==

=== Download and install ===

Download the contribution.

GitHub URL: https://github.com/cEhlen/OCL101Companies

Clone URL: git@github.com:cEhlen/OCL101Companies.git

Download and install USE OCL.

Download link: http://useocl.sourceforge.net/w/index.php/Main_Page#Download

At the time of writing, this meant to download a file ""use-4.1.1.tar.gz"".

Just unpack the file in a location convenient for software.

=== Running USE ===

Run the program.

In directory ""bin"", there are scripts for running the program on different platforms.

This will give you a terminal window and the USE window.

Type the following commands into the terminal window.

<pre>
use> open /path/to/101companies.use
use> open testdata
</pre>

Here ""/path/to/"" is the path to the GitHub directory that was cloned earlier.

These commands open the specification and load a sample company into memory.

The class and object diagrams can be rearanged and should look like the following images:

[[media:https://raw.githubusercontent.com/cEhlen/OCL101Companies/master/img/class_diagram.png]]

[[media:https://raw.githubusercontent.com/cEhlen/OCL101Companies/master/img/object_diagram.png]]

=== Using USE ===

==== Checking Class Invariants ====

The ⚡ button (""Create class invariant view"") checks all invariants and shows the output. You can doubleclick every constraint and see the stacktrace of the execution.

==== Pre- And Postconditions ====

The ''testdata'' file also does all pre and postcondition checks for all operations executed.
If you take a look at the output in the terminal window, you should find something like

<pre>
testdata> !openter AcmeCorp addDepartment(ResearchDep)
precondition `department_not_in_company' is true
precondition `department_has_no_company' is true
testdata> !insert (ResearchDep, AcmeCorp) into DepartmentOf
testdata> !opexit
postcondition `department_has_company' is true
postcondition `department_was_added' is true
</pre>

Here we enter the operation `addDerpartment` for our company. Then we execute the commands needed to execute the operation and exit the operation.
USE checks each precondition when entering the operation and checks every postcondition when exiting. Here everything worked just fine and the department was added to the company.

You can type these commands into the terminal window yourself. Try running

<pre>
use> !openter EmpKarl cut()
<<precondition check>>
use> !set EmpKarl.Salary := 1172.5
use> !opexit
<<postcondition check>>
</pre>

This should execute sucessfully. But since Karl is the manager of the '''Development 1.1''' department, the company does not comply to the ranked salary constraint anymore. Press ⚡ button (""Create class invariant view"") to find the problem. Select the violated constraints to see the stack trace.

== Metadata ==

* [[uses::Language:UML]]
* [[uses::Language:OCL]]
* [[uses::Technology:USE]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Hierarchical Company]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Total]]
* [[implements::Feature:Ranking]]
* [[developedBy::Contributor:cEhlen]]",2015-12-10 00:01:11.785,2017-07-05 15:30:24.759159
Concept,Location Listener,"== Headline ==

A [[Listener]] to get the [[Feature:Geolocation]] from the [[Location Manager]]

== Metadata ==

* [[instanceOf::Android_Location]]
* [[sameAs::http://developer.android.com/reference/android/location/LocationListener.html]]
",2013-06-12 14:54:37.068,2017-07-04 13:44:45.972938
Concept,Location Manager,"== Headline ==

Provides access to the system location services

== Metadata ==

* [[instanceOf::Android_Location]]
* [[sameAs::http://developer.android.com/reference/android/location/LocationManager.html]]
",2013-06-12 14:54:37.312,2017-07-04 13:44:45.984847
Concept,Induction,"== Headline ==

a method of (mathematical) [[proof]]

== Discussion ==

In functional programming, induction is also referred to as a reasoning principle.

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[memberOf::Vocabulary:Programming theory]]
* [[sameAs::http://en.wikipedia.org/wiki/Mathematical_induction]]
* [[isA::Concept]]

",2013-06-12 14:54:17.233,2017-07-04 15:26:14.341781
Concept,MapReduce,"== Headline ==

A programming model for processing large data sets

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/MapReduce]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:41.151,2017-07-04 13:44:46.24284
Concept,Inductive step,"== Headline ==

a step in an [[induction]] proof

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[isA::Concept]]

",2013-06-12 14:54:17.559,2017-07-04 15:26:14.399623
Service,helloWorld,"== Headline ==

Example service for learning how to program new 101worker services

== Metadata ==

",2013-06-12 15:00:58.711,2017-07-04 13:47:26.533603
Java,org.apache.tools.ant,"== Headline ==

the Java package for ANT tasks

== Metadata ==
* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://www.jajakarta.org/ant/ant-1.6.1/docs/ja/manual/api/org/apache/tools/ant/package-summary.html]]
* ",2013-06-12 15:00:11.17,2017-07-04 13:46:37.799425
Language,101meta,"== Headline ==

A language for associating metadata with files in a file system

== Summary ==

[[Language:101meta]] is a rule-based language for associating metadata with files and fragments thereof. The constraints of a rule say what files to match, e.g., in terms of constraining the actual filename. Metadata consists of key-value pairs. In the [[101project]], metadata is concerned with usage of languages and technologies, with claims about the implementation of features, with tagging for terms of the [[101companies:Vocabulary]] and general concepts, as available on the [[101wiki]]. Conceptually, the language is not tied to the [[101project]]. The metadata is directly used for exploration of the [[101repo]], as supposed by the [[101companies:Explorer]]. The official syntax of [[Language:101meta]] is JSON-based with arbitrary JSON expressions for metadata values. The metadata language [[Language:101meta]] is primarily meant to facilitate the representation of rules in a form that is directly useful for automated processing; usability of the notation for the end user is also concern, but a secondary one in the view of extra tool support helping with the use of the mechanism. For instance, the [[101companies:Explorer]] provides support for authoring rules in an interactive manner so that the notation does not need to be manipulated directly.

=== Constraints ===

There are the following contraint forms:

* '''filename''': the name of a file to be matched. The name can also be specified by a pattern.
* '''basename''': the basename of a file to be matched. The name can also be specified by a pattern. As usual, a basename is a filename without any directory part.
* '''suffix''': the suffix of a file to be matched. This is essentially a shorthand for a pattern to constrain only the suffix (typically, the extension) of a filename.
* '''dirname''': the name of the directory of a file to be matched. The name can also be specified by a pattern. The file must be contained in the specified directory or a subdirectory thereof.
* '''content''': the content of a file to matched based on regular expression to be applied to the text of the file.
* '''fragment''': a fragment of a matched file to which to apply to metadata, subject to a suitable fragment description.
* '''predicate''': the name of an executable to be applied to files for deciding on matching.

=== Metadata ===

In the [[101project]], the following forms of metadata are used:

* '''language''' for declaring an artifact as being an element of a language on the [[101wiki]].
* '''partOf''' for declaring an artifact as being a part of a technology on the [[101wiki]].
* '''inputOf''' for declaring an artifact as being consumed by a technology as input.
* '''outputOf''' for declaring an artifact as being produced by a technology as output.
* '''dependsOn''' for declaring an artifact as depending on a technology.
* '''feature''' for declaring a feature of the [[system:Company]] as being implemented.
* '''term''' for association with a term of the [[101companies:Vocabulary]].
* '''phrase''' for association with a phrase built from the [[101companies:Vocabulary]].
* '''concept''' for association with a concept on the [[101wiki]].
* '''nature''': for association of file nature, e.g., ""binary"" for use by the [[101companies:Explorer]].
* '''geshi''': for association with a language code as used when rendering with [[Technology:GeSHi]].
* '''locator''': for association with an executable to be used as [[fragment locator]].
* '''validator''': for association with an executable to be used as [[validator]].
* '''extractor''': for association with an executable to be used as [[fact extractor]].
* '''dominator''': meta-metadata for sorting out priorities.
* '''relevance''': metadata for indicating the importance of a file.

== Metadata scenarios ==

We introduce [[Language:101meta]] here by a series of examples that illustrate essential metadata scenarios in the [[101project]].

=== Language-related metadata ===

The first example concerns matching of files with ''suffix'' "".java"" to be associated with the language ""Java"".

<syntaxhighlight lang=""javascript"">
{
  ""suffix"" : "".java"",
  ""metadata"" : { ""language"" : ""Java"" }
}
</syntaxhighlight>

The ''suffix'' constrains the suffix (the extension) of files to be matched.  Metadata takes the form of a key-value pair with ""language"" as key and ""Java"" as value. In a conceptual sense, such metadata submits that the file in question is an element of the language specified; see the ""elementOf"" relationship of [[Language:MegaL]]. We assume that a 101companies-specific interpreter, such as the [[101companies:Explorer]], links the key-value pair to the resource [[Language:Java]] as it is manifest on the [[101wiki]].

The example specifies a single rule. In general, an [[Language:101meta]] specification is a ''list'' of rules. Here is a specification with two rules to match both [[Language:JavaScript]] and [[Language:Java]] files; array notation is used to this end:

<syntaxhighlight lang=""javascript"">
[
  {
    ""suffix"" : "".java"",
    ""metadata"" : { ""language"" : ""Java"" }
  },
  {
    ""suffix"" : "".js"",
    ""metadata"" : { ""language"" : ""JavaScript"" }
  },
]
</syntaxhighlight>

=== Technology-related metadata ===

We will be concerned now with technologies as opposed to languages. We define rules related to the parser generator [[Technology:ANTLR]] for illustration. In the case of using ANTLR with Java, the technology is packaged as a "".jar"" archive. Hence, let us associate, for example, the (version-specific) file ""antlr-3.2.jar"" with the technology ""ANTLR"".

<syntaxhighlight lang=""javascript"">
{
  ""basename"" : ""antlr-3.2.jar"",
  ""metadata"" : { ""partOf"" : ""ANTLR"" }
}
</syntaxhighlight>

The ''basename'' constraint implies that we do not care about the directory of the matched file here. Metadata takes the form of a key-value pair with ""partOf"" as key and ""ANTLR"" as value. We use ""partOf"" here in the sense that a concrete artifact, such as a "".jar"" archive, can be considered part of a technology, which is a conceptual (abstract) entity; see the ""partOf"" relationship of [[Language:MegaL]]. We assume that a 101companies-specific interpreter, such as the [[101companies:Explorer]], links the value ""ANTLR"" to [[Technology:ANTLR]] as it is manifest on the [[101wiki]].

Let us cover two versions of ANTLR:

<syntaxhighlight lang=""javascript"">
[
  {
    ""basename"" : ""antlr-2.7.6.jar"",
    ""metadata"" : { ""partOf"" : ""ANTLR"" }
  },
  {
    ""basename"" : ""antlr-3.2.jar"",
    ""metadata"" : { ""partOf"" : ""ANTLR"" }
  }
]
</syntaxhighlight>

The example applies the same metadata to two different files. For conciseness' sake, the constraint keys for file matching (i.e., ''suffix'' and ''basename'') may also be associated with lists of alternatives for matching. Thus, the two rules may be factored into one as follows:

<syntaxhighlight lang=""javascript"">
{
  ""basename"" : [ ""antlr-2.7.6.jar"", ""antlr-3.2.jar"" ],
  ""metadata"" : { ""partOf"" : ""ANTLR"" }
}
</syntaxhighlight>

We may also use [[regular expression]] matching on file names. In this manner, we can even match all possible versions of ANTLR with a single rule. To this end, we allow for any substring between ""antlr-"" and "".jar"". Thus:

<syntaxhighlight lang=""javascript"">
{
  ""basename"" : ""#^antlr-.*\.jar$#"",
  ""metadata"" : { ""partOf"" : ""ANTLR"" }
}
</syntaxhighlight>

Here, ""^"" marks the beginning of the string, ""$"" marks the end of the string, and ""\"" escapes a metasymbol (because ""."" is metasymbol for any character). The regular expression is enclosed by ""#...#"" thereby expressing unambiguously that regular expression matching as opposed to literal name matching is to be applied.

The "".jar"" file for ANTLR is by no means the only way how files could be associated with ANTLR. In general, technologies deal with various kinds of files: input, output, configuration files, or others. Consider "".g"" files, which are an indicator of ANTLR usage because ANTLR's grammar files use this extension. Thus:

<syntaxhighlight lang=""javascript"">
{
  ""suffix"" : "".g"",
  ""metadata"" : { ""inputOf"" : ""ANTLR"" }
}
</syntaxhighlight>

This time, the metadata declares that the given file is input for the parser generator ANTLR. We assume that a 101companies-specific interpreter, e.g., [[101companies:Explorer]] for the exploration of contributions, prioritizes input files over output files such as generated source code that is not meant for human consumption. The use of ANTLR may also be inferred on the grounds of generated files. When ANTLR is used in a common manner, then generated code parser and lexer are to be found in files with specific names as follows:

<syntaxhighlight lang=""javascript"">
{
  ""basename"" : [ ""#^.*Parser\\.java$#"", ""#^.*Lexer\\.java$#"" ],
  ""metadata"" :  { ""outputOf"" : ""ANTLR"" }
}
</syntaxhighlight>

(As an exercise, one may attempt a simplification of the patterns. Hint: the beginning of the file does not need to be matched explicitly.) This time, the files at hand are tagged as resulting from the application of ANTLR as an output. We assume that a 101companies-specific interpreter, e.g., [[101companies:Explorer]] for the exploration of contributions, de-prioritizes ""output"" files as opposed to ""input"" files.

There is a major problem with the rule for generated files: the rule relies on insufficiently distinctive filename patterns. The use of ""Parser"" or ""Lexer"" in naming source files for parsers and lexers does not reasonably imply usage of ANTLR. Thus, we need to further constrain the rule in a way that the content of the files can be checked to support the assumption about ANTLR usage. We will return to this problem later in the context of a more complete discussion of metadata mechanics.

=== Feature-related metadata ===

We may want to ""tag"" files with features of the [[system:Company]], as they are implemented in the file. The following example deals with [[Contribution:javaStatic]], which is a simple and modular Java-based implementation of the [[system:Company]]:

<syntaxhighlight lang=""javascript"">
[
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/model/Company.java"",
    ""metadata"" : { ""feature"" : ""Tree structure"" }
  },
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/model/Department.java"",
    ""metadata"" : { ""feature"" : ""Tree structure"" }
  },
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/model/Employee.java"",
    ""metadata"" : { ""feature"" : ""Tree structure"" }
  },
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/behavior/Total.java"",
    ""metadata"" : { ""feature"" : ""Type-driven query"" }
 },
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/behavior/Cut.java"",
    ""metadata"" : { ""feature"" : ""Type-driven transformation"" }
  }
]
</syntaxhighlight>

=== Domain-related metadata ===

We may also want to ""tag"" files with terms of the [[101companies:Vocabulary]] which collects nouns and verbs of the 101companies ""domain"". This may be, in fact, an alternative to tagging files with features. For instance, we may want to express that certain modules define the 101companies-specific operations [[101term:Cut]] and [[101term:Total]]. Again, we apply tagging to [[Contribution:javaStatic]].

<syntaxhighlight lang=""javascript"">
[
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/behavior/Total.java"",
    ""metadata"" : { ""term"" : ""Total"" }
  },
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/behavior/Cut.java"",
    ""metadata"" : { ""term"" : ""Cut"" }
  }
]
</syntaxhighlight>

One may think of these 101companies-specific tags as being more concise than the feature-oriented tags that we used earlier. That is, term [[101term:Total]] is a proxy for feature [[Feature:Total]] and term [[101term:Cut]] is a proxy for feature  [[Feature:Cut]]. As a guideline, such concise terms are to be preferred over features for tagging, whenever applicable.

We continue the previous example, by tagging also structure-related modules. That is, we associate the tags for the terms [[101term:Company]], [[101term:Department]], and [[101term:Employee]] with the appropriate "".java"" files. Incidentally, such tagging is more precise than the earlier tagging with the feature [[Feature:Hierarchical company]], which did not distinguish the different domain concepts for companies, departments, and employees.

<syntaxhighlight lang=""javascript"">
[
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/model/Company.java"",
    ""metadata"" : { ""term"" : ""Company"" }
  },
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/model/Department.java"",
    ""metadata"" : { ""term"" : ""Department"" }
  },
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/model/Employee.java"",
    ""metadata"" : { ""term"" : ""Employee"" }
  }
]
</syntaxhighlight>

Terms can also be composed to provide more accurate descriptions. For instance, we may want to express that the module for cutting salaries actually does so by breaking down functionality into cutting company objects, department objects, and employee objects. Thus:

<syntaxhighlight lang=""javascript"">
[
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/behavior/Cut.java"",
    ""metadata"" : { ""phrase"" : [""Cut"", ""Company""] }
  },
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/behavior/Cut.java"",
    ""metadata"" : { ""phrase"" : [""Cut"", ""Department""] }
  },
  {
    ""filename"" : ""contributions/javaStatic/org/softlang/behavior/Cut.java"",
    ""metadata"" : { ""phrase"" : [""Cut"", ""Employee""] }
  }
]
</syntaxhighlight>

Such phrases are even more useful when attached to specific file fragments as opposed to entire files. We will return to this opportunity later in the context of a more complete discussion of metadata mechanics.

=== Concept-related metadata ===

Further, we may also want to ""tag"" files with any concepts in the broader areas of software technologies and software languages. Ideally, such concepts should be readily modeled on the [[101wiki]]. For instance, we may want to express that certain modules define a [[parser]], a [[GUI]], or use a [[MVC]] architecture.

Consider again [[Contribution:antlrObjects]] which clearly contains program components for parsing and lexing. Accordingly, we tag the corresponding files:

<syntaxhighlight lang=""javascript"">
[
  {
    ""filename"" : ""contributions/antlrObjects/org/softlang/parser/CompanyParser.java"",
    ""metadata"" :  { ""concept"" : ""Parser"" }
  },
  {
    ""filename"" : ""contributions/antlrObjects/org/softlang/parser/CompanyLexer.java"",
    ""metadata"" :  { ""concept"" : ""Lexer"" }
  }
]
</syntaxhighlight>

In this context, if not earlier, the question may arise as to whether tags may also be associated automatically on the grounds of data mining techniques. That is, some [[Language:101meta]] does not need to be authored if it may be inferred. This is clearly possible for domain terms and concepts and even features. The [[101project]] involves related efforts.

=== Processing-related metadata ===

In addition to the more conceptual forms of metadata, as we discussed them so far, there is more technical metadata that is specifically concerned with processing files and metadata. Most prominently, such metadata is used by the [[101companies:Explorer]].

For instance, the [[101companies:Explorer]] uses the generic syntax highlighter [[Technology:GeSHi]] for rendering code. The application of the highlighter requires a ""language code"". Such GeSHi codes may be different from the language names on the [[101wiki]]. Here are rules for a few languages to provide their GeSHi codes:

<syntaxhighlight lang=""javascript"">
[
  {
    ""suffix"" : "".java"",
    ""metadata"" : { ""geshi"" : ""java"" }
  },
  {
    ""suffix"" : "".js"",
    ""metadata"" : { ""geshi"" : ""javascript"" }
  },
  {
    ""suffix"" : "".json"",
    ""metadata"" : { ""geshi"" : ""javascript"" }
  }
]
</syntaxhighlight>

Please note that the GeSHi codes are in lower case. Also, there is no designated GeSHi code for [[Language:JSON]], but it is best practice to reuse the GeSHi code of JavaScript, which makes sense, since the JSON syntax is effectively part of the JavaScript syntax.

Another kind of metadata controlling file processing concerns the declaration of the nature of a file as to whether it is binary, archive, text, or possibly others. Arguably, any file with an associated GeSHi code, as discussed above, has already an implicitly associated nature ""text to be rendered with GeSHi"". All other files may be associated with a suitable nature explicitly. Consider this illustrative rule:

<syntaxhighlight lang=""javascript"">
{
  ""suffix"" : "".exe"",
  ""metadata"" : { ""nature"" : ""binary"" }
}
</syntaxhighlight>

Thus, "".exe"" files are tagged as ""binary"" files, which are certainly not to be viewed during exploration. Arguably, it could be useful to initiate their execution, as in a regular file explorer. Such handling is up to the decision of the interpreter for such metadata. The [[101companies:Explorer]] does not view or execute binaries in any way; it does show them in the file explorer-like view, but they are visually de-emphasized to help with focusing on artifacts of interest during exploration.

Here is a rule dealing with archives based on the file format [[Language:JAR]]:

<syntaxhighlight lang=""javascript"">
{
  ""suffix"" : "".jar"",
  ""metadata"" : [
    { ""language"" : ""JAR"" },
    { ""nature"" : ""archive"" }
  ]
}
</syntaxhighlight>

At the very least, an interpreter of such metadata is informed that "".jar"" files are not trivially presentable (as text specifically) and they may actually encapsulate files. The rule also connects the file extension to a language for the format on the [[101wiki]]. Whether or not an interpreter of such metadata further examines archives is a matter of the interpreter itself. For instance, the interpreter may be able to decode the archive format and hence drill into archives.

A related form of metadata describes the ""relevance"" of a file. A file can be ""system"" code, which indicates that this file directly belongs to the contribution. This is implicitly assumed for every file that isn't marked otherwise. A file can also be marked with ""reuse"", indicating that this file was reused and can appear in other systems as well. This is the typical case for a library, which is used in a contribution. A file can also be marked with ""derive"", indicating that this file wasn't directly created in the development process, but rather automatically derived from some other file. The last option is to mark a file as ""ignore"", which means that this file isn't directly associated with a contribution (e.g. a IDE settings file). In the following example, Parsers generated by ANTLR are marked with ""derive"".

<syntaxhighlight lang=""javascript"">
  {
    ""basename"" : ""#^.*Parser\\.java$#"",
    ""content"" : ""// \\$ANTLR.*\\.g"",
    ""metadata"" : [
      {
        ""outputOf"" : ""ANTLR"",
        ""comment"" : ""An ANTLR-generated parser""
      },
	  { ""relevance"" : ""derive"" },
      { ""concept"" : ""Parser"" }
    ]
  }
</syntaxhighlight>

In general, such a rule marks all files in the given directory and its subdirectories (recursively) as being ""external"". In the example, there are only JavaScript sources in the given directory. Arguably, we could also use the ""filename"" form of constraint as opposed to the ""dirname"" form above. The result would be the same:

<syntaxhighlight lang=""javascript"">
{
  ""filename"" : ""#^contributions/csharpAspNetMvc/Scripts/.*\\.js$#"",
  ""metadata"" : {
    ""assignment"" : ""external""
  }
}
</syntaxhighlight>

Arguably, the distinction between ""internal"" and ""external"" could be refined to make more specific assignments. For instance, one could distinguish ""system"" versus ""tests versus ""demo"" versus ""documentation"" and possibly others. In the [[101project]], explicit assignments are limited to ""external"".

As another form of metadata, a [[validator]] may be associated with each file. The meaning of validation is here that matched files are to be validated to essentially verify assumptions implied by matching. For instance, we can be reasonably sure that files with suffix "".java"" contain Java source code, but if we wanted to validate this assumption, then we may register a validator.

<syntaxhighlight lang=""javascript"">
{
  ""suffix"" : "".java"",
  ""metadata"" : { ""validator"" : ""../../technologies/JValidator"" }
}
</syntaxhighlight>

The validator is an executable that is applied to the file in question. In the example, we use a simple validator for Java, i.e., [[Technology:JValidator]], which is a [[101technology]]. It essentially parses the source code; it does not attempt compilation; it does not enforce any static semantics rules. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure. Validation must not be confused with the predicate form of constraint as validation is applied past successful rule matching whereas constraint checking is part of matching itself. The [[101companies:Explorer]] leverages validation in a manner that all failed validation is highlighted to receive the user's attention, thereby suggesting eventual revision of the relevant rule for matching or making a change to the relevant file or its filename.

As another form of metadata, a [[fact extractor]] may be associated with each file. In this manner, files may be processed by fact extractors and thereby enable further functionality. For instance, we may assume that the fact extractor determines all imports made by some source code so that rules for constraining imports may rely on such facts as opposed to performing text matching of fact extraction themselves. For instance:

<syntaxhighlight lang=""javascript"">
{
  ""suffix"" : "".java"",
  ""metadata"" : { ""extractor"" : ""../../technologies/JFactExtrator"" }
}
</syntaxhighlight>

The fact extractor is an executable that is applied to the file in question. In the example, we use a simple fact extractor for Java, i.e., [[Technology:JFactExtractor]], which is part of the [[101project]]. It extracts basic facts about imports and declared abstractions (classes, interfaces, methods).

We will later also see a form of metadata controlling metadata processing in the sense descriptions for [[fragment location]] are assigned an interpreter that can be used, for example, by the [[101companies:Explorer]] to locate fragments described in appropriate matching constraints for metadata association with fragment scope.

== Metadata mechanics ==

We discuss the more technical aspects of using [[Language:101meta]].

=== Programmable matching constraints ===

The earlier example of tagging certain Java files as ""output"" generated by ANTLR exposed the problem of filenames not being sufficient for decision making at times. [[Language:101meta]] includes a mechanism that may take into account the content of files to ultimately decide on matching.

Specifically, looking at files actually generated by ANTLR, a simple signature stands out. Consider, for example, the generated parser code of [[Contribution:antlrObjects]], which is a simple ANTLR-based implementation of the [[system:Company]]; it parses textual syntax for companies into objects for companies:

<syntaxhighlight lang=""text"">
$ pwd
/home/me/101repo/contributions/antlrObjects
$ more CompanyParser.java
// $ANTLR 3.2 Sep 23, 2009 12:02:23 Company.g 2011-05-04 01:08:48
...
</syntaxhighlight>

We ony show the first line because it is indeed enough here to help with decision making. We would like to ""grep"" for the pattern ""// \$ANTLR.*\\.g"" to search both for ""$ANTLR"" and the distinguished extension "".g"" in the same line. [[Language:101meta]] provides a corresponding form of constraint which applies to the content of a file. Thus, we can check on ANTLR-generated files as follows:

<syntaxhighlight lang=""javascript"">
{
  ""basename"" : [ ""#^.*Parser\\.java$#"", ""#^.*Lexer\\.java$#"" ],
  ""content"" : ""#// \$ANTLR.*\\.g#"",
  ""metadata"" : { ""outputOf"" : ""ANTLR"" }
}
</syntaxhighlight>

Thus, the ''basename'' constraint is only sufficient to determine candidates for matching while regular expression matching for the given pattern must ""succeed"" for the rule to match. Arguably, it may not be sufficient to use regular expression as means of examining the content of a file. Hence, [[Language:101meta]] also provides means of executing predicates, in fact, executables to perform more arbitrary tests on files. Let us place the earlier regular expression in a shell script, say ""grepAntlrOutput.sh"" as follows:

<syntaxhighlight lang=""text"">
$ pwd
/home/me/101repo/technologies/ANTLR
$ more grepAntlrOutput.sh
#!/bin/sh
grep -q ""// \$ANTLR.*\.g"" $1
</syntaxhighlight>

We assume here that the file for examination is passed as an argument; see ""$1"". The way we invoke the grep tool here, we obtain a return code 0 to mean that the string pattern was matched, and non-zero otherwise. We revise the previous rule to use the shell script as a predicate:

<syntaxhighlight lang=""javascript"">
{
  ""basename"" : [ ""#^.*Parser\\.java$#"", ""#^.*Lexer\\.java$#"" ],
  ""predicate"" : ""technologies/ANTLR/grepAntlrOutput.sh"",
  ""metadata"" : { ""outputOf"" : ""ANTLR"" }
}
</syntaxhighlight>

Thus, the ''basename'' constraint is only sufficient to determine candidates for matching while the execution of the ''predicate'' constraint must ""succeed"" for the rule to match.

There is yet another form of ""ANTLR"" evidence that we may encounter. That is, let as also identify files that reference ANTLR in the sense of importing its runtime API ""org.antlr.runtime"". Such reference/import detection may be modelled with a content constraint as follows:

<syntaxhighlight lang=""javascript"">
{
  ""suffix"" : "".java"",
  ""content"" : ""#^[ \t]*import[ \t]*org.antlr.runtime\.#"",
  ""metadata"" : { ""dependsOn"" : ""ANTLR"" }
}
</syntaxhighlight>

Thus, the pattern searches for the token ""import"" followed by the string ""org.antlr.runtime."". We use the metadata key ""dependsOn"" to represent the import-based dependence between the matched file and the technology at hand; see the ""dependsOn"" relationship of [[Language:MegaL]].

For what it matters, we enforce that ""import"" appears in the beginning of a line and matching is liberal in terms of whitespace. Clearly, such import matching could be useful for many other technologies, in fact, APIs. Thus, the notion should be properly generalized by parametrizing in the package name in question. Thus, we obtain a script that is essentially meaningful for the entire Java platform. Consider the following script:

<syntaxhighlight lang=""text"">
$ pwd
/home/me/101repo/technologies/Java platform
$ more javaImport.sh
#!/bin/sh
grep -q ""^[ \t]*import[ \t]*$1\."" $2
</syntaxhighlight>

If we later decide to check for imports differently, perhaps in a more syntax-aware manner, then we can readily focus on the adaptation of the shell script; all rules remain valid. The invocation of the script relies on fixing the parameter for the package name within rules. There is indeed an additional ""args"" key to pass literal arguments to a predicate. We can revise the earlier rule for ANTLR to make use of the generalized script:

<syntaxhighlight lang=""javascript"">
{
  ""suffix"" : "".java"",
  ""predicate"" : ""technologies/Java platform/javaImport.sh"",
  ""args"" : [""org.antlr.runtime""],
  ""metadata"" : { ""dependsOn"" : ""ANTLR"" }
}
</syntaxhighlight>

We assume that the the Java-import checker belongs to [[Technology:Java platform]] whereas the rule in question belongs to [[Technology:ANTLR]], and thus, the rule is stored in ""101repo/technologies/ANTLR"" while it refers to the shell script for import checking in ""101repo/technologies/Java platform"".

=== Fragment scope of metadata ===

In all examples, so far, we really meant to associate metadata with complete files. In general, it may be necessary to limit the scope of metadata to apply only to ''fragments'' of files. [[Language:101meta]] includes a mechanism that expands matching to incorporate the notion of [[fragment location]]. The actual format of fragment descriptions is not in any way prescribed by [[Language:101meta]]. The individual [[fragment locator]]s of the [[101project]] define the formats for fragment description.

Consider, for example, the data model for companies in [[Contribution:haskellComposition]], which is a trivial Haskell-based implementation of the [[system:Company]]. One file contains all the data types for companies, departments, and employees:

<syntaxhighlight lang=""text"">
$ pwd
/home/me/101repo/contributions/haskell
$ more Company.hs
</syntaxhighlight>
<syntaxhighlight lang=""haskell"">
module Company where
data Company = Company Name [Department]
data Department = Department Name Manager [SubUnit]
data Employee = Employee Name Address Salary
data SubUnit = EUnit Employee | DUnit Department
...
</syntaxhighlight>

(The actual Haskell code was slightly edited for simplicity of the present discussion.) We would like to tag the file with the appropriate terms for companies, departments, and employees. With the existing [[Language:101meta]] expressiveness, such tagging would take the following form:

<syntaxhighlight lang=""javascript"">
{
  ""filename"" : ""contributions/haskell/Company.hs"",
  ""metadata"" : [
    { ""term"" : ""Company"" },
    { ""term"" : ""Department"" }
    { ""term"" : ""Employee"" }
  ]
}
</syntaxhighlight>

In this example, we demonstrate that even a single rule can associate multiple units of metadata of the same kind with a file; we simply use the list form to this end. (We think of this rule as abbreviating three more primitive rules.) The given description may be sufficient for some purposes, but it does not scope very well the terms ""Company"", ""Department"", and ""Employee"". For each data type, we would like to specify the ''fragment'' that defines it. To this end, [[Language:101meta]] provides an extra kind of constraint; see the key ""fragment"" below. That is, we can constrain the scope of metadata to a specific fragment, subject to some linguistic support for [[fragment location]]:

<syntaxhighlight lang=""javascript"">
[
  {
    ""filename"" : ""contributions/haskell/Company.hs"",
    ""fragment"" : { ""data"" : ""Company"" },
    ""metadata"" : { ""term"" : ""Company"" }
  },
  {
    ""filename"" : ""contributions/haskell/Company.hs"",
    ""fragment"" : { ""data"" : ""Department"" },
    ""metadata"" : { ""term"" : ""Department"" }
  },
  {
    ""filename"" : ""contributions/haskell/Company.hs"",
    ""fragment"" : { ""data"" : ""Employee"" },
    ""metadata"" : { ""term"" : ""Employee"" }
  }
]
</syntaxhighlight>

In general, fragments are specified by the JSON value that is associated with the ""fragment"" key. In the example, we use Haskell-specific notation for fragment location. That is, we use the ""data"" key with a data type name as value to select indeed the corresponding top-level declaration for the data type in the given file. In a similar manner, we could select top-level function definitions. There is also a more lexical and generic approach to fragment selection based on [[Technology:GeFLo]], a 101companies-specific technology for generic fragment location, which in turn is based on [[Technology:GeSHi]].

We assume that a 101companies-specific interpreter checks the feasibility of fragment selection. In fact, the [[101companies:Explorer]] for the exploration of contributions even locates the selected fragments and renders them in the view for the user. To this end, the explorer invokes fragment locators; these are technologies for applying a fragment specification on a given file and returning the actual fragment, if selection succeeds. The association between files and fragment locators is again expressed with metadata. The following rule associates language-related metadata with Haskell source files; there is the ""locator"" key specifically:

<syntaxhighlight lang=""javascript"">
{
  ""suffix"" : "".hs"",
  ""metadata"" : [
    { ""language"" : ""Haskell"" },
    { ""geshi"" : ""haskell"" },
    { ""locator"" : ""technologies/HsFragmentSelector/locator.py"" }
  ]
}
</syntaxhighlight>

The expected I/O behavior of a locator program is that it takes a fragment specification (via a file), an input file, and returns the line range for the selected fragment (via file), if selection succeeded.

Let us also exercise fragment scope for a Java module for cutting salaries as in [[Contribution:javaStatic]]; here is a sketch of the module for clarity:

<syntaxhighlight lang=""java"">
public class Cut {

        public static void cut(Company that) {
                for (Department d : that.getDepts())
                        cut(d);
        }

        public static void cut(Department that) {
           ...
        }

        public static void cut(Employee that) {
           ...
        }
}
</syntaxhighlight>

Subject to a suitable format for Java fragment description, we can refer to the individual methods and assign phrases as follows:

<syntaxhighlight lang=""javascript"">
{
  ""filename"" : ""contributions/javaStatic/org/softlang/behavior/Cut.java"",
  ""fragment"" : {
   ""class"" : ""Cut"",
   ""method"" : ""cut"",
   ""overload"" : 0
  },
  ""metadata"" : { ""phrase"" : [ ""Cut"", ""Company"" ] }
}
</syntaxhighlight>

The fragment description establishes the class name and the method name. The ""cut"" method is overloaded and hence one overload must be selected; ""0"" refers to first overload. In this context, we may discuss the difference between ""multiple terms"" versus ""phrases"". That is, arguably, we may also want to tag the module as follows:

<syntaxhighlight lang=""javascript"">
{
  ""filename"" : ""contributions/javaStatic/org/softlang/behavior/Cut.java"",
  ""fragment"" : ...,
  ""metadata"" : [
    { ""term"" : ""Cut"" },
    { ""term"" : ""Company"" }
  ]
}
</syntaxhighlight>

The difference is that the method would be tagged with both ""Cut"" and ""Company"" in a symmetric manner, as if the method implemented both ""Cut"" and ""Company"". However, the module is essentially concerned with ""Cut"" while the reference to the ""Company"" should be subordinated. This is exactly what the use of a phrase achieves.

=== Comments on metadata rules ===

It is good practice to provide comments for metadata helping human consumption of metadata. To this end, metadata may contain a special key  ""comment"" with the comment as value. This is not a language extension; it is merely a convention, subject to interpretation by metadata-based tools such as [[101companies:Explorer]].

For example, in an earlier example for matching with an archive for ANTLR, it may be helpful to note that the match is about ""The ANTLR library"". Thus:

<syntaxhighlight lang=""javascript"">
{
  ""basename"" : ""#^antlr-.*\.jar$#"",
  ""metadata"" : {
    ""dependsOn"" : ""ANTLR"",
    ""comment"" : ""The ANTLR library""
  }
}
</syntaxhighlight>

[[Language:101meta]] provides a related feature for picking up substrings from matched patterns for filenames or basenames in rules. That is, common regular expression notation can be used demarcate parts of a pattern and to bind corresponding substrings to $1, $2, .... For instance, we may write ""#^antlr-(.*)\.jar$#"" instead ""#^antlr-.*\.jar$#"" to bind the version string of the ANTLR library to $1. [[Language:101meta]] allows us to use such variables in string literals of the metadata:

<syntaxhighlight lang=""javascript"">
{
  ""basename"" : ""#^antlr-(.*)\.jar$#"",
  ""metadata"" : {
    ""dependsOn"" : ""ANTLR"",
    ""comment"" : ""The ANTLR library, Version $1""
  }
}
</syntaxhighlight>

Hence, if this rules matches with a basename ""antlr-3.2.jar"", then the metadata contains the comment ""The ANTLR library, Version 3.2"". Any key-value pairs of metadata with a string-typed value may pick up matched substrings in this manner.

=== Citations for metadata rules ===

It is also good practice to provide citations for metadata helping with validation of the rule by others and with traceability generally. To this end, metadata may contain a special key  ""citation"" with a URL as value. Just like with comments above, this is not a language extension; it is merely a convention.

Here is a revision of the earlier ANTLR example with a citation added. The cited page is part of the ANTLR documentation and specifically explains the role of the JAR in the process of running the parser generator.

<syntaxhighlight lang=""javascript"">
{
  ""basename"" : ""#^antlr-.*\.jar$#"",
  ""metadata"" : {
    ""dependsOn"" : ""ANTLR"",
    ""comment"" : ""The ANTLR library"",
    ""citation"" : ""http://www.antlr.org/wiki/pages/viewpage.action?pageId=729""
  }
}
</syntaxhighlight>

=== Priorities for metadata ===

In rare circumstances, rules may compete for some metadata or specific files may call for exceptions from otherwise general rules. [[Language:101meta]] solves this problem with a specific form of metadata. Consider the following example, which is concerned with the [[Contribution:csharpAspNetMvc]] with some JavaScript files which happen to be hard to process with [[Technology:GeSHi]]:

<syntaxhighlight lang=""javascript"">
{
  ""filename"" : ""#^contributions/csharpAspNetMvc/Scripts/.*\\.js$#"",
  ""metadata"" : {
    ""dominator"" : ""geshi"",
    ""geshi"" : ""text"",
    ""comment"" : ""GeSHi cannot handle all JavaScript files.""
  }
}
</syntaxhighlight>

The metadata declares a key-value pair ""dominator"" : ""geshi"" and the intended meaning of domination is that the metadata unit at hand effectively removes all those (non-dominating) metadata units from the file which mention the key in question. A different [[Technology:GeSHi]] code is assigned, but dominator can also be used for removal, when the dominating rule does not declare the dominated key.

=== Metadata organization ===

In the interest of metadata management and collaborative authoring of metadata in the [[101project]], metadata should be directly associated with languages, technologies, and contributions in the appropriate directory of the repository. For instance, language-related metadata for language ''L'' should be directly saved in the corresponding subdirectory ''L'' of ""101repo/languages"":

<syntaxhighlight lang=""text"">
$ pwd
/home/me/101repo/languages/Haskell
$ more .101meta
</syntaxhighlight>
<syntaxhighlight lang=""javascript"">
{
  ""suffix"" : "".hs"",
  ""metadata"" : [
    { ""language"" : ""Haskell"" },
    { ""geshi"" : ""haskell"" },
    { ""locator"" : ""../../technologies/HsFragmentSelector/locator.py"" }
  ]
}
</syntaxhighlight>

Likewise, technology-related metadata for technology ''T'' should be directly saved in the corresponding subdirectory ''T'' of ""101repo/technologies"". We show several rules for [[Technology:ANTLR]]; all rules contain comments:

<syntaxhighlight lang=""text"">
$ pwd
/home/me/101repo/technologies/ANTLR
$ more .101meta
</syntaxhighlight>
<syntaxhighlight lang=""javascript"">
[
  {
    ""basename"" : ""#^antlr-(.*)\.jar$#"",
    ""metadata"" : {
      ""partOf"" : ""ANTLR"",
      ""comment"" : ""The ANTLR library, Version $1""
    }
  },
  {
    ""suffix"" : "".g"",
    ""metadata"" : {
      ""inputOf"" : ""ANTLR"",
      ""comment"" : ""An ANTLR grammar""
    }
  },
  {
    ""basename"" : ""#^.*Parser\\.java$#"",
    ""content"" : ""#// \$ANTLR.*\.g#"",
    ""metadata"" : [
      {
        ""outputOf"" : ""ANTLR"",
        ""comment"" : ""An ANTLR-generated parser""
      },
      { ""concept"" : ""Parser"" }
    ]
  },
  {
    ""basename"" : ""#^.*Lexer\\.java$#"",
    ""content"" : ""#// \$ANTLR.*\\.g#"",
    ""metadata"" : [
      {
        ""outputOf"" : ""ANTLR"",
        ""comment"" : ""An ANTLR-generated lexer""
      },
      { ""concept"" : ""Lexer"" }
    ]
  },
  {
    ""suffix"" : "".java"",
    ""predicate"" : ""technologies/Java platform/javaImport.sh"",
    ""args"" : [""org.antlr.runtime""],
    ""metadata"" : {
      ""dependsOn"" : ""ANTLR"",
      ""comment"" : ""A source that imports ANTLR""
    }
  }
]
</syntaxhighlight>

Likewise, contribution-related metadata for contribution ''C'' should be directly saved in the corresponding subdirectory ''C'' of ""101repo/contributions"".

=== Metadata collection ===

We explain now the process of applying [[Language:101meta]] rules to a file system. The end result of this process is the annotation of the file system with metadata as described by the rules together with the applied rules for traceability.

The file system is considered as a tree-like structure with components as follows:

* The root directory (namely ""101repo"" for the application of [[Language:101meta]] to the [[101project]]).
* Subdirectories (such as ""contributions"" and in turn subdirectories thereof).
* Files (such as source files).
* Fragments of files.

The first step is the actual ''accumulation of the rules from the file system''. [[Language:101meta]] files are scattered over the file system and each file may potentially include multiple rules. All these scattered rules are collected in a list structure with components per element as follows:

* ""filename"": the filename of the hosting file of the rule (relative to the root of the file system subject to matching).
* ""rule"": the actual rule.

The application of [[Language:101meta]] rules may associate metadata with any component at any level of the tree-like structure of the file system, as described above. For instance, consider the (generated) parser module [https://github.com/101companies/101repo/blob/master/contributions/antlrObjects/org/softlang/parser/CompanyParser.java] as part of [[Contribution:antlrObjects]]. Since this file is a ""Java"" file by its suffix, the corresponding language-related metadata applies. Since this file has been generated by ANTLR (also subject to inspection of its content), the corresponding technology-related metadata applies. Further, let us assume that the file was also tagged with the feature [[Feature:Parsing]] and the phrase ""[[101term:Parse]] [[101term:Company]]"". Thus, the following metadata is associated with the file:

<syntaxhighlight lang=""javascript"">
[
  { ""language"" : ""Java"", ""comment"" : ""A Java source file"" },
  { ""geshi"" : ""java"", ""comment"" : ""The GeSHi language code for Java"" },
  { ""outputOf"" : ""ANTLR"", ""comment"" : ""An ANTLR-generated parser"" },
  { ""concept"" : ""Parser"" },
  { ""feature"" : ""Data import"" },
  { ""phrase"" : [""Parse"", ""Company""] }
]
</syntaxhighlight>

In general, any component at any level of the tree-like structure of the file system, including fragments of files, is associated with a list structure with components per element as follows:

* ""dirname"": name of the directory, if the current component is a directory.
* ""filename"": name of the file, if the current component is a file.
* ""fragment"": fragment description, if the current component is a fragment.
* ""metadata"": the list of all metadata units qualified with rule ids as follows:
** ""id"": the 0-based position of the applicable rule in the list of all accumulated rules.
** ""unit"": the actual metadata unit.

The ''dominator'' feature of [[Language:101meta]] is handled in this context. That is, given all metadata units for a given component of the file system, including fragments of files, the list of metadata units is possibly contracted as follows. For all dominated metadata keys, the metadata units with non-dominating occurrences of such keys are removed.

We may also be interested in aggregated metadata in the sense that all metadata of a component is effectively also associated with composites at a higher hierarchical level. This is important for the efficient exploration such as the exploration of contributions in the [[101companies:Explorer]]. For instance, if there is any ""Java"" file in the directory for a contribution to the [[101project]], then the ""Java"" tag should also be discoverable at the level of the contribution. Hence, we distinguish ''immediate'' versus ''aggregated'' metadata.

=== Operational issues of matching ===

For most part, the [[Language:101meta]] language is declarative: files and rules could be matched in any order. However, the predicate form of constraint combined with the role of metadata to enable the derivation of information implies that order may matter. For instance, a predicate may want to consult the facts extracted from a file when matching the file. However, the fact extractor is defined by [[Language:101meta]] rules itself. Hence, rules without predicate constraints should be attempted before rules with predicates constraints while also assuming that the the execution of predicates has access to the matches obtained before.

== Contributors ==

* {{101contributor|Jean-Marie Favre|author}}
* {{101contributor|Ralf Lämmel|author}}
* {{101contributor|Martin Leinberger|author}}



* [[instanceOf::101language]]
* [[instanceOf::Metadata language]]
* ",2013-06-12 15:00:17.051,2017-07-04 13:46:40.447834
Contribution,swing,"== Intent ==

provide interaction on companies by means of [[Technology:Swing]]

== Motivation ==

Specifically, the GUI provides the following gestures:
* Navigate hierarchical structure of departmental nesting.
* Edit all fields of types string and number.

== Architecture ==

The implementation uses a poorman's MVC architecture.
It is based on the object model of [[Contribution:javaComposition]].
We do not assume any change-notification services on the model.
There are two views: one for departments (and companies) and another for employees.
The controller provides services that push effect of gestures into the model.
The views delegates event handlers to the controller.
The controller calls into the model and the view.

== Usage ==

Run Interaction.java to start the GUI for the sample company.

== Metadata ==
* [[uses::Language:Java]]
* [[uses::Technology:Swing]]
* [[uses::Technology:AWT]]
* [[uses::Technology:Eclipse]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]
",2013-06-12 14:59:02.462,2017-07-05 15:29:50.685715
Language,ASCII,"== Summary ==

TBD


== Metadata ==
* [[instanceOf::Format language]]
* ",2013-06-12 15:00:17.362,2017-07-04 13:46:40.544914
Language,ATL,"== Headline ==

The ATLAS Transformation Language for model transformation

== Description ==

ATL stands for ATLAS Transformation Language.
In the narrow sense, ATL is indeed a language.
In the wider sense, ATL is occasionally used to refer to the toolkit supporting ATL.

== Metadata ==

* [[instanceOf::Transformation language]]
* [[sameAs::http://en.wikipedia.org/wiki/ATLAS_Transformation_Language]]
* [[sameAs::http://www.eclipse.org/atl]]
* [[relatesTo::http://www.eclipse.org/m2m/atl/basicExamples_Patterns]]
* [[relatesTo::http://www.eclipse.org/m2m/atl/usecases]]
* [[relatesTo::http://www.eclipse.org/m2m/atl/atlTransformations]]
* [[relatesTo::http://wiki.eclipse.org/ATL/Developer_Guide]]
* ",2013-06-12 15:00:17.673,2017-07-04 13:46:40.570843
Language,AWK,"== Headline ==

An scripting language typically used for data extraction and reporting

== Metadata ==
* [[instanceOf::Scripting language]]
* [[sameAs::http://en.wikipedia.org/wiki/AWK]]
* ",2013-06-12 15:00:18.067,2017-07-04 13:46:40.583894
Concept,Map view,"== Headline ==

A [[View]] which displays a map

== Metadata ==

* [[instanceOf::Android Location]]
* [[sameAs::https://developers.google.com/maps/documentation/android/reference/com/google/android/maps/MapView]]
* [[sameAs::https://developers.google.com/maps/documentation/android/hello-mapview]]
",2013-06-12 14:54:42.138,2017-07-04 13:44:46.378767
Concept,Marker interface pattern,"== Metadata ==

* [[instanceOf::Design pattern]]
",2013-06-12 14:54:42.887,2017-07-04 13:44:46.397054
Concept,Information system,"== Headline ==

Interaction between people, processes, data, and [[information technology]]
== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Information_system]]
* [[memberOf::Vocabulary:Information system]]
* [[isA::Concept]]
",2013-06-12 14:54:19.136,2017-07-04 15:26:14.51546
Concept,Lexer,"== Headline ==

A [[program]] performing [[lexical analysis]]

== Illustration ==

The following grammar describes the lexical syntax of companies of the [[@system]]. We use the grammar notation of [[Technology:ANTLR]].

<syntaxhighlight lang=""text"">
COMPANY     : 'company';
DEPARTMENT  : 'department';
EMPLOYEE    : 'employee';
MANAGER     : 'manager';
ADDRESS     : 'address';
SALARY      : 'salary';
OPEN        : '{';
CLOSE       : '}';
WS          :   (' '|'\r'? '\n'|'\t')+;
STRING      :   '""' (~'""')* '""';
FLOAT       : ('0'..'9')+ ('.' ('0'..'9')+)?;
</syntaxhighlight>

[[Technology:ANTLR]] could indeed generate a lexer from this specification (and a few routine parts; see [[Contribution:antlrLexer]]). The resulting lexer could be used by itself to process input at the level of lexeme/token pairs. The lexer could also be complemented by a [[parser]] to analyse the context-free syntax of the input.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Lexical_analysis]]
* [[memberOf::Vocabulary:Software language engineering]]
* [[isA::Language technology]]
* [[relatesTo::Parser]]

",2013-06-12 14:54:31.19,2017-07-04 15:26:14.66543
Concept,Maybe monad,"== Headline ==

A [[monad]] for dealing with partiality or error handling

== Illustration ==

Let us put to work the maybe monad in a simple interpreter.

There are these expression forms for floats, addition, and square roots:

<syntaxhighlight lang=""haskell"">
-- Simple arithmetic expressions
data Expr = Constant Float | Add Expr Expr | Sqrt Expr
  deriving (Eq, Show, Read)
</syntaxhighlight>

Consider these samples:

<syntaxhighlight lang=""haskell"">
-- Sample terms
sample = Sqrt (Constant 2)
sample' = Sqrt (Constant (-1))
</syntaxhighlight>

The first expression should evaluate to 2.0. Evaluation should somehow fail for the second one. The most straightforward interpreter may be this one:

<syntaxhighlight lang=""haskell"">
-- A straightforward interpreter
eval :: Expr -> Float
eval (Constant f) = f
eval (Add e1 e2) = eval e1 + eval e2
eval (Sqrt e) = sqrt (eval e)
</syntaxhighlight>

This interpreter would return ''NaN'' (not a number) for the second sample. This is suboptimal if we want to represent the error situation explicitly as an error value so that we cannot possibly miss the problem and it is propagated properly. To this end, we may use a [[Maybe type]] in the interpreter as follows:

<syntaxhighlight lang=""haskell"">
-- An interpreter using a Maybe type for partiality
eval' :: Expr -> Maybe Float
eval' (Constant f) = Just f
eval' (Add e1 e2) =
  case eval' e1 of
    Nothing -> Nothing
    Just f1 ->
      case eval' e2 of
        Nothing -> Nothing
        Just f2 -> Just (f1 + f2)
eval' (Sqrt e) =
  case eval' e of
    Nothing -> Nothing
    Just f -> if f < 0.0
                then Nothing
                else Just (sqrt f)
</syntaxhighlight>

Alas, the resulting interpreter is harder to understand. Maybes need to be handled for all subexpressions and the intention of propagating ''Nothing'' is expressed time and again. By conversion to monadic style, we can hide error handling:

<syntaxhighlight lang=""haskell"">
-- A monadic style interpreter
evalM :: Expr -> Maybe Float
evalM (Constant f) = return f
evalM (Add e1 e2) =
  evalM e1 >>= \f1 ->
  evalM e2 >>= \f2 ->
  return (f1 + f2)
evalM (Sqrt e) =
  evalM e >>= \f ->
  guard (f >= 0.0) >>
  return (sqrt f)
</syntaxhighlight>

We can also use do notation:

<syntaxhighlight lang=""haskell"">
-- A monadic style interpreter in do notation
evalM' :: Expr -> Maybe Float
evalM' (Constant f) = return f
evalM' (Add e1 e2) = do
  f1 <- evalM' e1
  f2 <- evalM' e2
  return (f1 + f2)
evalM' (Sqrt e) = do
  f <- evalM' e
  guard (f >= 0.0)
  return (sqrt f)
</syntaxhighlight>

The corresponding instance of the [[type class]] ''Monad'' follows:

<syntaxhighlight lang=""haskell"">
-- Monad instance for Maybe
instance Monad Maybe
  where
    return = Just
    Nothing >>= f = Nothing
    (Just x) >>= f = f x
</syntaxhighlight>

The definition of ''return'' conveys that a pure computation is successful. The definition of ''bind'' conveys that ''Nothing'' for the first argument is to be propagated. The Maybe monad actually is a more special monad, i.e., a monad with ''+'' and ''0'':

<syntaxhighlight lang=""haskell"">
-- Type class MonadPlus (see Control.Monad)
class Monad m => MonadPlus m
  where
    mzero :: m a
    mplus :: m a -> m a -> m a
</syntaxhighlight>

<syntaxhighlight lang=""haskell"">
-- MonadPlus instance for Maybe
instance MonadPlus Maybe
  where
    mzero = Nothing
    Nothing `mplus` y = y
    x `mplus` _ = x
</syntaxhighlight>

We can also define the ''guard'' function now which was used in the interpreter:

<syntaxhighlight lang=""haskell"">
-- Succeed or fail
guard :: MonadPlus m => Bool -> m ()
guard b = if b then return () else mzero
</syntaxhighlight>

In modern Haskell, we also need to make ''Maybe'' an instance of ''Applicative'' (for [[applicative functor]]s and ''Functor'' (for [[functor]]s). This code is omitted here, but see the 101repo.

== Metadata ==

* [[isA::Monad]]
",2013-06-12 14:54:43.703,2017-07-04 15:26:16.46456
Concept,Operation,"== Headline ==

an operation of a [[data type]]

== Resource ==

* [http://en.wikipedia.org/wiki/Operation_(mathematics) Operation (mathematics)] @ Wikipedia

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[isA::Concept]]

",2013-06-12 14:55:12.483,2017-07-04 15:26:17.738714
Concept,Maybe type,"== Headline ==

A [[polymorphic type]] for handling optional values and errors

== Illustration ==

In [[Language:Haskell]], maybe types are modeled by the following [[type constructor]]:

<syntaxhighlight lang=""haskell"">
-- The Maybe type constructor
data Maybe a = Nothing | Just a
 deriving (Read, Show, Eq)
</syntaxhighlight>

''Nothing'' represents the lack of a value (or an error). ''Just'' represent the presence of a value. Functionality may use arbitrary pattern matching to process values of Maybe types, but there is a [[fold function]] for maybes:

<syntaxhighlight lang=""haskell"">
-- A fold function for maybes
maybe :: b -> (a -> b) -> Maybe a -> b
maybe b _ Nothing = b
maybe _ f (Just a) = f a
</syntaxhighlight>

Thus, ''maybe'' inspects the maybe value passed as the third and final argument and applies the first or the second argument for the cases ''Nothing'' or ''Just'', respectively. Let us illustrate a maybe-like fold by means of looking up entries in a map. Let's say that we maintain a map of abbreviations from which to lookup abbreviations for expansion. We would like to keep a term, as is, if it does not appear in the map. Thus:

<syntaxhighlight lang=""haskell"">
> let abbreviations = [(""FP"",""Functional programming""),(""LP"",""Logic programming"")]
> lookup ""FP"" abbreviations
Just ""Functional programming""
> lookup ""OOP"" abbreviations
Nothing
> let lookup' x m = maybe x id (lookup x m)
> lookup' ""FP"" abbreviations
""Functional programming""
> lookup' ""OOP"" abbreviations
""OOP""
</syntaxhighlight>

== Metadata ==

* [[memberOf::Vocabulary:Haskell]]
* [[sameAs::http://www.haskell.org/haskellwiki/Maybe]]

",2013-06-12 14:54:44.393,2017-07-04 13:44:46.76839
Concept,Linked list,"== Headline ==

A form of lists with mutable links

== Illustration ==

We use [[Language:Java]] for illustration.

<syntaxhighlight language=""java"">
// A simple form of linked lists
public class List {
    // Nodes in a linked list
    public class Node {
	public int info;
	public Node next;
    }
    public Node first;
    public Node last;
    public void add(int info) {
	Node node = new Node();
	node.info = info;
	if (first==null)
	    first = node;
	if (last!=null)
	    last.next = node;
	last = node;
    }
}
</syntaxhighlight>

Thus, linked lists uses nodes that contain the actual info and a ""next"" pointer to the next node, if any. The list container keeps track of the first and the last element in the list. The first element is needed when the list should walked. The last element is needed when an add operation is supposed to append a new element (efficiently) at the end. Further operations on lists could be defined, e.g., removal of an element. Note that these linked lists are mutable in that next pointers are assigned to over time.

Here is a simple demo of the linked lists:

<syntaxhighlight language=""java"">
public class Demo {
   public static void main(String[] args) {
       // Build a list with three elements
       List list = new List();
       list.add(1);
       list.add(2);
       list.add(3);
       // Walk the linked list and print it
       for (List.Node i=list.first; i!=null; i=i.next)
	   System.out.print(i.info + "" "");
       System.out.println();
   }
}
</syntaxhighlight>

== Metadata ==

* [[isA::List]]
* [[isA::Imperative data structure]]
* [[relatesTo::Immutable list]]
* [[relatesTo::http://en.wikipedia.org/wiki/List_(abstract_data_type)]]
",2013-06-12 14:54:33.744,2017-07-04 15:26:15.10937
Concept,Logging,"== Headline ==

The [[Capability|capability]] of logging events along program execution

== Discussion ==

Logging may be meant to help with debugging, forensics, or data governance.

Logging may be achieved by designated, possibly scattered code units.

A popular approach to logging is provided by [[Aspect-oriented programming]].

== Metadata ==

* [[instanceOf::Capability]]
* [[sameAs::http://en.wikipedia.org/wiki/Serialization]]
* [[relatesTo::http://en.wikipedia.org/wiki/Data_governance]]

",2013-06-12 14:54:37.579,2017-07-04 13:44:46.008667
Concept,Merge sort,"== Headline ==

The Merge sort [[sorting algorithm]]

== Citation ==

(http://en.wikipedia.org/wiki/Merge_sort, 21 April 2013)

Conceptually, a merge sort works as follows

# Divide the unsorted list into n sublists, each containing 1 element (a list of 1 element is considered sorted).
# Repeatedly merge sublists to produce new sublists until there is only 1 sublist remaining. This will be the sorted list.

== Illustration ==

See the visualization of Merge sort on Wikipedia:

http://en.wikipedia.org/wiki/Merge_sort

See various illustrations of Merge sort as available on YouTube, e.g.:

<media url=""http://www.youtube.com/watch?v=XaqR3G_NVoo""/>

=== Recursive merge sort in Java ===

<syntaxhighlight language=""java"">
	public static void mergeSort(int[] a) {
		int[] temp = new int[a.length];
		mergeSort(a, temp, 0, a.length - 1);
	}

	public static void mergeSort(int[] a, int[] temp, int min, int max) {
		// Base case
		if (!(min < max)) return;

		// Split array and solve sub-problems recursively
		int middle = (min + max) / 2;
		mergeSort(a, temp, min, middle);
		mergeSort(a, temp, middle + 1, max);

		// Merge via temporary array
		merge(a, temp, min, middle, max);
	}

	public static void merge(int[] a, int[] temp, int min, int middle, int max) {
		int i = min; // loop over left half
		int j = middle + 1; // loop over right half
		int k = min; // loop over merged result
		while (k <= max)
			temp[k++] = (i <= middle && (j > max || a[i] < a[j])) ?
					  a[i++] // copy from left half
					: a[j++]; // copy from right half
		// Override array by merged tempory result
		for (k = min; k <= max; k++)
			a[k] = temp[k];
	}
</syntaxhighlight>

=== Recursive merge sort in Haskell ===

<syntaxhighlight language=""haskell"">
-- Polymorphic sorting
sort :: Ord a => [a] -> [a]
sort [] = []
sort [x] = [x]
sort xs = merge (sort ys) (sort zs)
  where
    (ys,zs) = split xs

-- Split a list into halves
split :: [a] -> ([a],[a])
split xs = (take len xs, drop len xs)
  where
    len = length xs `div` 2

-- Merge sorted sublists
merge :: Ord a => [a] -> [a] -> [a]
merge [] ys = ys
merge xs [] = xs
merge (x:xs) (y:ys) =
  if x<=y
    then x : merge xs (y:ys)
    else y : merge (x:xs) ys
</syntaxhighlight>

The main sorting function relies on helpers for splitting the input lists into halves and for merging sorted sublists. An empty list as much as a singleton lists are immediately sorted, as modeled by the first two equations of ''sort''. The ''split'' helper uses list-processing goodies ''take'' and ''drop'' to extract two halves (+/- one element for a list of odd length). The ''merge'' help offers two base cases for a merge to trivially complete, if either of the two operands is an empty list; the recursive case compares the heads of both operands to decide on which of them goes first into the merged result.

The implementation is exercised as follows:

<syntaxhighlight language=""haskell"">
main = do
  let input = [2,4,3,1,4]
  print $ sort input -- [1,2,3,4,4]
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Merge_sort]]
* [[instanceOf::Sorting algorithm]]
* [[instanceOf::Divide and conquer algorithm]]
",2013-06-12 14:54:47.859,2017-07-04 13:44:47.190783
Concept,Model-driven engineering,"== Headline ==

A software development methodology which focuses on domain models

== Acronym ==

* [[MDE]]

== Details ==

Domain models are contrasted here with concepts of programming and computing.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Model-driven_engineering]]
* [[memberOf::Vocabulary:MDE]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:52.677,2017-07-04 13:44:47.464393
Concept,Toast,"== Headline ==

A [[View | view]] containing a quick little message for the user

== Metadata ==

* [[instanceOf::Android_UI]]
* [[sameAs::http://developer.android.com/guide/topics/ui/notifiers/toasts.html]]
* [[relatesTo::http://developer.android.com/reference/android/widget/Toast.html]]
",2013-06-12 14:56:29.358,2017-07-04 13:44:59.205893
Concept,Model to Model transformation,"== Headline ==

A [[transformation]] that transform a [[model]] into another model

== Metadata ==

* [[instanceOf::Transformation]]
* [[instanceOf::MDE_term]]
* [[instanceOf::Modelware_term]]
* [[sameAs::http://en.wikipedia.org/wiki/Model_transformation]]
",2013-06-12 14:54:53.268,2017-07-04 13:44:47.482505
Concept,Multi-tier architecture,"== Headline ==

An architecture organized in layers

== Discussion ==

When compared to [[MVC|Model View Controller]], [[multi-tier architecture]]s use a connection between only the adjacent layers.

== Metadata ==

* [[instanceOf::Architectural pattern]]
* [[sameAs::http://en.wikipedia.org/wiki/Multitier_architecture]]

",2013-06-12 14:54:59.141,2017-07-04 13:44:48.020366
Concept,POO,"== Headline ==

Plain Old Objects

== Metadata ==

* [[memberOf::Vocabulary:OO programming]]
* [[isA::Concept]]

",2013-06-12 14:55:15.116,2017-07-04 15:26:18.141511
Concept,Name,"== Headline ==

Names of [[abstraction]]s

== Details ==

For instance, a [[Function]] or a [[class]] may have a name.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:59.724,2017-07-04 13:44:52.748885
Concept,Product monoid,"== Headline ==

A [[monoid]] leveraging multiplication for the associative operation

== Illustration ==

Number types may be completed into monoids in different ways. Most notably, either addition or multiplication can be used for the associative operation of the monoid. See the concept of the [[sum monoid]] for a detailed illustration when addition is favored. Obviously, all given definitions would be routinely adapted to favor multiplication instead.

== Metadata ==

* [[isA::Monoid]]
* [[relatesTo::Sum monoid]]
* [[isA::Concept]]

",2013-06-12 14:55:28.13,2017-07-04 15:26:19.398245
Concept,OO class,"== Headline ==

An [[abstraction mechanism]] for [[object]]s

== Synonyms ==

* [[Class]]

== Details ==

See also the related construct of [[OO interface]]s.

== Metadata ==

* [[instanceOf::Abstraction mechanism]]
* [[memberOf::Vocabulary:OO programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Class_(computer_programming)]]
",2013-06-12 14:55:04.833,2017-07-04 13:44:53.117177
Language,AspectJ,"== Intent ==

an aspect-oriented programming language based on [[Language:Java]]

== Spaces ==

* [[Objectware]]
* [[Auxiliary XMLware]]

== Metadata ==
* [[instanceOf::AOP language]]
* [[instanceOf::Unspecific version]]
* [[relatesTo::http://www.eclipse.org/aspectj]]
* [[sameAs::http://en.wikipedia.org/wiki/AspectJ]]
* ",2013-06-12 15:00:18.407,2017-07-04 13:46:40.606303
Language,BMML,"== Headline ==

The file format used by [[Technology:Balsamiq Mockups]]

== Metadata ==
* [[instanceOf::Markup language]]
* [[relatesTo::http://support.balsamiq.com/customer/portal/articles/111834]]
*

",2013-06-12 15:00:18.736,2017-07-04 13:46:40.619922
Technology,JFactExtractor,"== Headline ==

A [[fact extractor]] for Java
== Description ==

JFactExtractor is a [[101technology]]; it is a Java-specific [[fact extractor]]. JFactExtractor extracts facts from Java source code, as it is useful, specifically, for the operation of the [[101companies:Explorer]]. At this point, facts of interest are concerned with imports and names of declarations. JFactExtractor is a simple command line tool that is applied to two arguments: a source file and a target file for storing the extracted facts in JSON.

Fact extraction will be explained by means of an example: the module for serialization as part of the [[Contribution:jaxbComposition]]; see [https://github.com/101companies/101repo/blob/master/contributions/jaxbComposition/org/softlang/qualities/Serialization.java] for the source code.

<syntaxhighlight lang=""javascript"">
{
  ""comment"" : """",
  ""package"" : ""org.softlang.qualities"",
  ""imports"" : [
    ""org.softlang.model"",
    ""java.io"",
    ""javax.xml.bind"",
    ""javax.xml.stream""
  ],
  ""declarations"" : [
    {
      ""class"" : ""Serialization"",
      ""methods"" : [
        ""initializeJaxbContext"",
        ""serializeCompany"",
        ""deserializeCompany""
      ],
      ""attributes"": [
      ]
    }
  ]
}
</syntaxhighlight>

The ""comment"" key is bound to the heading comment of the file, if any. The idea is here that code generators often leave some signature in that heading comment and hence the comment could be efficiently checked for the signature if needed, e.g., in the context of [[Language:101meta]] rules that determine files that are the output of certain technologies.

The ""package"" key is bound to the package of the file. The idea is here that packages of source files should be known so that imports can be subdivided into source and non-source imports. Source imports basically relate to the architecture of a contribution whereas non-source imports relate to the reuse within a contribution. The [[101companies:Explorer]] uses this distinction in handling packages.

The ""imports"" key is bound to a list of packages used in imports of the file. Arguably, the precise list of imports may also be useful, but this is currently not needed and served. The idea is that non-source imports should be resolved in terms of links of package names to technologies (such as APIs). The [[101companies:Explorer]] provides such links.

The ""declarations"" key is bound to a list of declarations of the file. In the case of Java, these are typically classes or interfaces. The values for these entries further break down into entries for methods declared. The idea is that such information can be conveniently used for fragment-scope tagging with features, terms, phrases, and concepts in the sense of [[Language:101meta]]. That is, the [[101companies:Explorer]] may use such information to guide interactive tagging.

The ""attributes"" key is bound to a list of annotations of the file. The values are a set of used Annotations without their qualifiers. In the case of [https://github.com/101companies/101repo/blob/master/contributions/jaxbComposition/org/softlang/model/Employee.java], the attributes would look like

<syntaxhighlight lang=""javascript"">
{
 ...
      ""attributes"": [
        ""XmlType"",
        ""XmlAccessorType"",
        ""XmlElement""
      ]
 ...
}
</syntaxhighlight>
== Contributors ==

* {{101contributor|Martin Leinberger|developer}}
* {{101contributor|Ralf Lämmel|author}}
* {{101contributor|Jean-Marie Favre|influencer}}
== Metadata ==

* [[instanceOf::Fact extractor]]
* [[relatesTo::https://github.com/101companies/101repo/tree/master/technologies/JFactExtractor]]
",2013-06-12 15:01:31.162,2017-07-04 13:47:29.498538
Concept,List,"== Headline ==

An ordered collection of values

== Illustration ==

Lists can be represented in different ways and different sets of operations can be provided. One fundamental choice to be made is whether lists are considered mutable or immutable; see the illustration of [[linked list|linked]] and [[immutable list]]s.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/List_(abstract_data_type)]]
* [[isA::Data structure]]
* [[memberOf::Vocabulary:Data]]
* [[relatesTo::List type]]
* [[relatesTo::Record]]
* [[relatesTo::Tuple]]
",2013-06-12 14:54:34.301,2017-07-04 15:26:15.240634
Concept,OO interface,"== Headline ==

an [[abstraction mechanism]] for [[object]] interfaces

== Synonyms ==

* Interface

== Details ==

See also the related construct of [[OO class]]es.

== Metadata ==

* [[instanceOf::Abstraction mechanism]]
* [[memberOf::Vocabulary:OO programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Interface_(object-oriented_programming)]]
",2013-06-12 14:55:05.354,2017-07-04 13:44:53.148884
Language,BNF,"== Intent ==

the Backus-Naur Form as a notation for context-free grammars

== Wikipedia ==

http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form


== Metadata ==
* [[instanceOf::Metalanguage]]
* ",2013-06-12 15:00:19.019,2017-07-04 13:46:40.632582
Language,BSON,"== Headline ==

A binary [[Format language|format language]] for data exchange, based on [[Language:JSON]]



== Description ==

BSON is a binary format based on the [[Language:JSON]] specification, also extending it by several other admissible datatypes such as ISO dates. It is primarily used as the storage format of [[Technology:MongoDB]].

== Metadata ==
* [[instanceOf::Format language]]
* [[instanceOf::Format language]]
* [[sameAs::http://bsonspec.org/]]
* ",2013-06-12 15:00:19.311,2017-07-04 13:46:40.659273
Concept,MVar,"== Headline ==

A [[thread]] synchronization variable in [[Language:Haskell|]]

== Details ==

MVars are variables for thread synchronization in [[Language:Haskell]] (in fact, [[Language:Concurrent Haskell]]) being either empty or holding a value <cite>jones2008tutorial, ghcMVar</cite>. The [[module]] ''Control.Concurrent.MVar'' provides various functions for <syntaxhighlight lang=""haskell"" enclose=""none"">MVar</syntaxhighlight> values <cite>hackageMVar</cite>.

== Metadata ==

* [[memberOf::Vocabulary:Haskell]]
* [[sameAs::http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-MVar.html]]
* [[relatesTo::http://hackage.haskell.org/packages/archive/base/4.3.1.0/doc/html/Control-Concurrent-MVar.html]]
* [[relatesTo::http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-MVar.html]]
* [[relatesTo::http://dl.acm.org/citation.cfm?id=1813353]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:39.553,2017-07-04 13:44:46.160094
Concept,OO programming,"== Headline ==

The object-oriented [[programming paradigm]]

== Abbreviation ==

OOP

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Object-oriented_programming]]
* [[instanceOf::Programming paradigm]]

",2013-06-12 14:55:05.752,2017-07-04 13:44:53.164792
Concept,Object model,"== Intent ==

a collection of classes in [OO programming] for modeling structure and possibly behavior in a given domain

== Metadata ==

* [[instanceOf::Abstraction mechanism]]
",2013-06-12 14:55:09.11,2017-07-04 13:44:53.258555
Concept,OO programming language,"== Headline ==

A [[programming language]] for [[OO programming]]
== Metadata ==

* [[isA::Programming language]]
* [[supports::OO programming]]
",2013-06-12 14:55:05.997,2017-07-04 15:26:17.517323
Concept,Object,"== Headline ==

Capsules of state and behavior in [[OO programming]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Object_(computer_science)#Object-oriented_programming]]
* [[memberOf::Vocabulary:OO programming]]
* [[isA::Concept]]

",2013-06-12 14:55:06.555,2017-07-04 15:26:17.561013
Language,Datalog,"== Headline ==

A query and rule language for deductive databases

== Metadata ==
* [[instanceOf::Programming language]]
* [[instanceOf::Query language]]
* [[sameAs::http://en.wikipedia.org/wiki/Datalog]]
* ",2013-06-12 15:00:22.84,2017-07-04 13:46:40.827642
Concept,Menu Inflater,"== Headline ==

A tool to inflate the context menu from a menu resource

== Metadata ==

* [[instanceOf::Android_UI]]
* [[sameAs::http://developer.android.com/reference/android/view/MenuInflater.html]]
* [[relatesTo::http://developer.android.com/guide/topics/ui/menus.html]]
",2013-06-12 14:54:47.155,2017-07-04 13:44:46.838001
Language,C,"== Headline ==

A [[programming language]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/C_(programming_language)]]
* [[instanceOf::Programming language]]
* [[uses::Manual memory management]]
",2013-06-12 15:00:19.576,2017-07-04 13:46:40.674241
Language,CPlusPlus,"== Headline ==
a statically typed, free-form, multi-paradigm, compiled, general-purpose programming language

== Metadata ==

* [[instanceOf::Unspecific version]]
* [[sameAs::http://en.wikipedia.org/wiki/C%2B%2B]]
*
* [[uses::Manual memory management]]
* [[uses::Resource Acquisition Is Initialization]]
* [[uses::Reference counting]]

",2013-06-12 15:00:20.195,2017-07-04 13:46:40.704473
Language,CSS,"== Headline ==

A [[style sheet language]] for [[Web programming]]
== Metadata ==

* [[instanceOf::Style sheet language]]
* [[sameAs::http://www.w3.org/Style/CSS/]]
* [[relatesTo::http://en.wikipedia.org/wiki/CSS]]
",2013-06-12 15:00:20.613,2017-07-04 13:46:40.718384
Language,CSV,"== Headline ==

File format for comma-separated values

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/Comma-separated_values]]
* ",2013-06-12 15:00:20.953,2017-07-04 13:46:40.729588
Language,CSharp,"== Headline ==

a programming language by Microsoft

== Description ==

The correct title of this technology is C#.

The substitution or omission of a # sign is because of Wiki-related technical restrictions.

== Metadata ==
* [[instanceOf::OO programming language]]
* [[instanceOf::Unspecific version]]
* [[sameAs::http://en.wikipedia.org/wiki/C_Sharp_(programming_language)]]
* [[relatesTo::http://msdn.microsoft.com/en-us/vcsharp/aa336809.aspx]]
* [[relatesTo::http://www.ecma-international.org/publications/standards/Ecma-334.htm]]
* ",2013-06-12 15:00:21.273,2017-07-04 13:46:40.752326
Language,Cobol,"== Intent ==

the programming language of choice for information systems in commerce (until recently)

== Metadata ==
* [[instanceOf::Procedural programming language]]
* [[instanceOf::Unspecific version]]
* [[sameAs::http://en.wikipedia.org/wiki/COBOL]]
* [[relatesTo::http://www.cs.vu.nl/grammarware/vs-cobol-ii]]
* [[relatesTo::http://www.itl.nist.gov/div897/ctg/cobol_form.htm]]
* ",2013-06-12 15:00:21.599,2017-07-04 13:46:40.770493
Technology,.NET,"== Headline ==

A [[library]] and [[runtime]] for programming languages on [[Technology:Windows|Windows]]

== Metadata ==

* [[instanceOf::Platform]]
* [[sameAs::http://en.wikipedia.org/wiki/.NET_Framework]]
* [[sameAs::http://www.microsoft.com/net]]]

",2013-06-12 15:00:59.376,2017-07-04 13:47:26.560488
Concept,Observer pattern,"== Headline ==

An object maintains a list of its dependents and notifies them of any state changes

== Metadata ==

* [[instanceOf::Design pattern]]
* [[sameAs::http://en.wikipedia.org/wiki/Observer_pattern]]
",2013-06-12 14:55:09.988,2017-07-04 13:44:53.281816
Concept,Process,"== Headline ==

an executing instance of a program

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Process_(computing)]]
* [[isA::Concept]]

",2013-06-12 14:55:27.411,2017-07-04 15:26:19.340943
Concept,Ontoware,"== Intent ==

a technological space focused on ontologies and knowledge engineering

== Metadata ==

* [[instanceOf::Space]]
",2013-06-12 14:55:11.847,2017-07-04 13:44:53.306538
Language,Cobol 85,"== Intent ==

a standardized version of [[Language:Cobol]]


== Metadata ==
* [[instanceOf::Procedural programming language]]
* ",2013-06-12 15:00:21.909,2017-07-04 13:46:40.781032
Language,Config,"== Intent ==

a ASP.NET configuration language

== Description ==

Config files are XML files that contain settings for a all web applications on a server, single ones, single folders or single sites of the web applciation. Settings can be compiler options, options for debugging, but also user authentification and error messages. They are usually called Web.config, but several .config files for the different compilation targets are also common.

== Metadata ==

* [[sameAs::http://msdn.microsoft.com/de-de/library/ff400235%28VS.100%29.aspx]]
* ",2013-06-12 15:00:22.188,2017-07-04 13:46:40.796098
Concept,Nested class,"== Headline ==

A [[OO class]] declared within the body of another [[OO class]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Inner_class]]
* [[relatesTo::http://docs.oracle.com/javase/tutorial/java/javaOO/nested.html]]
* [[relatesTo::Anonymous class]]
* [[relatesTo::Closure]]
* [[instanceOf::Concept]]

",2013-06-12 14:55:00.927,2017-07-04 13:44:52.770426
Concept,Query language,"== Headline ==

A software language for executable queries

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Query_language]]
* [[isA::Software language]]
",2013-06-12 14:55:36.578,2017-07-04 15:26:20.276644
Language,DLL,"== Headline ==

Microsoft's file format for [[Technology:DLL]] shared libraries

== Details ==

DLL stands for Dynamic-link library (also written unhyphenated).

[[Technology:DLL]] is also the name of Microsoft's technology/concept instantiating the [[shared library]] concept.

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/Dynamic-link_library]]
* ",2013-06-12 15:00:22.516,2017-07-04 13:46:40.814513
Concept,Parser,"== Headline ==

A [[program]] performing [[parsing]]

== Illustration ==

See [[Contribution:haskellParsec]] for a contribution that contains a [[Language:Haskell]]-based parser.

== Relationships ==

* A parser performs [[parsing]].
* A parser is the opposite of an [[unparser]].

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Parsing]]
* [[memberOf::Vocabulary:Software language engineering]]
* [[isA::Language technology]]

",2013-06-12 14:55:17.416,2017-07-04 15:26:18.37657
Concept,Operator,"== Headline ==

an [[operation]] with special syntax

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Operator_(programming)]]
* [[isA::Concept]]

",2013-06-12 14:55:12.809,2017-07-04 15:26:17.781721
Concept,Grammar language,"== Headline ==

BNF, EBNF, and such

== Metadata ==

* [[isA::Software language]]
",2017-05-29 12:23:37.196658,2017-07-04 15:26:44.565461
Concept,Overlay,"== Headline ==

An overlay which may be displayed on top of a map

== Metadata ==

* [[instanceOf::Android_Location]]
* [[sameAs::https://developers.google.com/maps/documentation/android/reference/com/google/android/maps/Overlay]]
* [[relatesTo::https://developers.google.com/maps/documentation/android/hello-mapview]]
",2013-06-12 14:55:14.319,2017-07-04 13:44:53.479689
Language,DatalogLB,"== Headline ==

[[Language:Datalog]] dialect as part of the LogicBlox platform

== Metadata ==
* [[instanceOf::Programming language]]
* [[instanceOf::Query language]]
* [[sameAs::http://en.wikipedia.org/wiki/Datalog]]
* [[relatesTo::http://www.logicblox.com/]]
* ",2013-06-12 15:00:23.17,2017-07-04 13:46:40.842469
Technology,DBDirect,"== Headline ==

A [[program generator]] that derives [[Language:Haskell]] types from [[database]] schemas

== Discussion ==

DBDirect is used in [[Technology:HaskellDB|HaskellDB]] to generate [[Module|modules]] describing a running database. These modules are the basis for defining [[Query|queries]] on this database <cite>leijen1999domain</cite>.


== Metadata ==
* [[instanceOf::program generator]]
* [[relatesTo::http://hackage.haskell.org/packages/archive/haskelldb/0.12/doc/html/Database-HaskellDB-DBDirect.html]]
* ",2013-06-12 15:01:10.008,2017-07-04 13:47:27.504398
Concept,Composite_pattern,"== Headline ==

A [[design pattern]] for uniform behavior on collections and parts

== Metadata ==

* [[instanceOf::Design pattern]]
* [[sameAs::https://en.wikipedia.org/wiki/Composite_pattern]]
",2013-06-12 14:53:31.55,2017-07-04 13:44:38.887627
Language,EBNF,"== Intent ==

the Extended [[Language:BNF]] as a notation for context-free grammars
== Wikipedia ==

http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form
== Metadata ==

* [[instanceOf::Metalanguage]]
",2013-06-12 15:00:23.467,2017-07-04 13:46:40.85476
Language,EXE,"== Headline ==

a file format for executables and associated resources

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/EXE]]
* ",2013-06-12 15:00:23.799,2017-07-04 13:46:40.865193
Concept,Package management system,"== Headline ==

A system for managing [[package]]s

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Package_management_system]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Software technology]]
",2013-06-12 14:55:15.607,2017-07-04 15:26:18.180236
Contributor,tschnitzler1976,In line of my diploma thesis which is about topic analysis with the help of scientific articles and latent dirichlet allocation I made a contribution at https://github.com/tschnitzler1976/topicanalysis which is a topic analysis tool that runs with Apache/PHP/MySQL.,2017-04-10 12:05:15.880391,2017-09-07 17:13:43.284716
Concept,Platform,"== Headline ==

A platform to run software on

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Computing_platform]]
* [[isA::Software technology]]
",2013-06-12 14:55:21.756,2017-07-04 15:26:18.783488
Concept,Predicate,"== Headline ==

a function returning a [[Boolean]]

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:55:24.348,2017-07-04 15:26:19.141805
Concept,Prelude module,"== Headline ==

The standard library of [[Language:Haskell|]]
== Metadata ==

* [[memberOf::Vocabulary:Haskell]]
* [[sameAs::http://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.8.1.0/Prelude.html]]
* [[relatesTo::http://www.haskell.org/onlinereport/standard-prelude.html]]
* [[isA::Concept]]
* [[isA::Standard Library]]

",2013-06-12 14:55:24.567,2017-07-04 15:26:19.198773
Concept,Package,"== Headline ==

A unit of distribution of software

== Illustration ==

See, for example, the package database of [[Technology:HackageDB]] for [[Language:Haskell]].

== Metadata ==

* [[instanceOf::Abstraction mechanism]]
* [[sameAs::http://en.wikipedia.org/wiki/Package_(package_management_system)]]
* [[memberOf::Vocabulary:Software engineering]]
",2013-06-12 14:55:15.393,2017-07-04 13:44:53.533701
Concept,Metalanguage,"== Headline ==

The [[programming language]] for [[metaprogram]]s
== Illustration ==

See the concept of [[metaprogram]]s for an illustration.
== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Metalanguage]]
* [[relatesTo::Object language]]
* [[isA::Software language]]
",2013-06-12 14:54:49.86,2017-07-04 15:26:16.544268
Concept,Method,"== Headline ==

The concept of declaring and invoking behavior in [[OO programming]]

== Metadata ==

* [[isA::Abstraction mechanism]]
* [[isA::Language concept]]
",2013-06-12 14:54:51.033,2017-07-04 15:26:16.577105
Concept,Monoid,"== Headline ==

A type with an associative operation and a neutral element

== Illustration ==

The notion of monoid is precisely defined in group theory, but we focus here on its illustration in a programming setting. Specifically, in functional programming, a monoid is essentially a type with an associative operation and a neutral element. For instance, lists form a monoid with the empty list as neutral element and list append as the associative operation. Monoids are useful, for example, in aggregating results.

In [[Language:Haskell]], monoids are modeled through the [[type class]] ''Monoid'' with first two members needed for a minimal complete definition:

<syntaxhighlight lang=""haskell"">
-- The type class Monoid
class Monoid a
  where
    mempty :: a -- neutral element
    mappend :: a -> a -> a -- associative operation
    mconcat :: [a] -> a -- fold
    mconcat = foldr mappend mempty
</syntaxhighlight>

Algebraically, the following properties are required for any monoid (given in Haskell notation):

<syntaxhighlight lang=""haskell"">
mempty `mappend` x = x -- left unit
x `mappend` mempty = x -- right unit
x `mappend` (y `mappend` z) = (x `mappend` y) `mappend` z -- associativity
</syntaxhighlight>

See the following monoids for continued illustration:

* [[List monoid]]
* [[Sum monoid]]
* [[Product monoid]]

== Metadata ==

* [[isA::Data type]]
* [[memberOf::Vocabulary:Functional programming]]
* [[memberOf::Vocabulary:Mathematics]]
* [[sameAs::http://en.wikipedia.org/wiki/Monoid]]
* [[sameAs::http://mathworld.wolfram.com/Monoid.html]]
* [[similarTo::http://en.wikibooks.org/wiki/Haskell/Monoids]]
* [[relatesTo::http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Monoid.html]]

",2013-06-12 14:54:58.532,2017-07-04 15:26:17.081691
Language,GIF,"== Headline ==

A bitmapped image format

== Metadata ==
* [[instanceOf::Image format language]]
* [[sameAs::http://en.wikipedia.org/wiki/Graphics_Interchange_Format]]
* ",2013-06-12 15:00:25.186,2017-07-04 13:46:40.940128
Concept,Program generation,"== Headline ==

The automated generation of programs by [[program generator]]s

== Metadata ==

* [[memberOf::Vocabulary:Software engineering]]
* [[relatesTo::https://wiki.hh.se/wg211/index.php/Main_Page Program]]
* [[isA::Concept]]

",2013-06-12 14:55:29.821,2017-07-04 15:26:19.716653
Concept,Programming,"== Headline ==

The activity of writing [[program]]s and related activities

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Software engineering]]
* [[sameAs::http://en.wikipedia.org/wiki/Computer_programming]]
* [[isA::Concept]]

",2013-06-12 14:55:31.307,2017-07-04 15:26:19.854835
Type,Any,"== Headline ==

101wiki's type of pages in any namespace
",2017-04-30 22:54:41.662822,2017-07-04 13:48:19.525864
Concept,Programming language,"== Headline ==

A [[software language]] in which [[program]]s are written

== Illustration ==

Have a look at [[Hello world program]]s in different programming languages.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Programming_language]]
* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Software language]]

",2013-06-12 14:55:32.324,2017-07-04 15:26:19.981731
Concept,Presentation layer,"== Headline ==

the implementation of the [[user interface]] in a [[three-tier architecture]]

== Metadata ==

* [[instanceOf::Architectural component]]
",2013-06-12 14:55:25.468,2017-07-04 13:44:54.274126
Language,Ecore,"== Headline ==

The language defined by the metamodel based on the EMOF standard

== Description ==

Ecore is the modeling language implemented by the [[Technology:EMF|EMF Framework]].

== Discussion ==

Note that an actual classification of the language is difficult. First, there is an XMI subset for Ecore. Thus, there may be a language EcoreXMI. Second, the set of java objects conforming to the model classes from the Ecore API may be interpreted as a language. Thus, there may be a second language EcoreJVMObjects as those object might not always be persisted as XMI.

== Metadata ==
* [[relatesTo::http://download.eclipse.org/modeling/emf/emf/javadoc/2.9.0/org/eclipse/emf/ecore/package-summary.html#details]]
* [[sameAs::http://de.wikipedia.org/wiki/Eclipse_Modeling_Framework]]
* [[instanceOf::Structural modeling language]]
",2013-06-12 15:00:24.132,2017-07-04 13:46:40.895583
Concept,Prepared statement,"== Headline ==

A parametrized statement for repeated execution on a [[DBMS]]

== Metadata ==

* [[memberOf::Vocabulary:Data]]
* [[sameAs::http://en.wikipedia.org/wiki/Prepared_statement]]
* [[isA::Concept]]

",2013-06-12 14:55:24.874,2017-07-04 15:26:19.246924
Concept,Functional data structures,"== Headline ==

Lecture ""Functional data structures"" as part of [[Course:Lambdas in Koblenz]]

== Details ==

A functional data structure is a persistent data structure which is implemented in a functional style. Such data structures involve (path) copying to achieve persistence and they may rely on lazy evaluation to achieve competitive performance (complexity).

== Material ==

<media url='http://www.slideshare.net/rlaemmel/functional-data-structures' />

<media url='https://www.youtube.com/watch?v=4J4yadtzPcw' />

== Concepts ==

* [[Functional data structure]]
* [[Stack]]
* [[Binary search tree]]
* [[Skew heap]]
* [[Amortized analysis]]

== Further reading ==

* [[Document:Handbook of data structures and applications]]
* [[Document:Okasaki96]]
* [https://github.com/101companies/101repo/tree/master/concepts/Functional data structure]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Higher-order functions in Haskell]]
",2016-05-28 02:24:40.367,2017-07-04 13:48:15.769714
Concept,Puma,"",2017-03-19 19:17:06.564105,2017-07-04 13:48:19.369604
Concept,Query,"== Headline ==

A [[pure IO behavior]] that extracts data from given data

== Details ==

The [[IO behavior]] is said to ''extract'' data in that it will essentially compute a result of a type of a more generic shape than the input's type. (Compare this with the concept of [[transformation]].) A query may be ''implemented'' in a [[query language]] or any [[programming language]].

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Query]]
* [[isA::Pure IO behavior]]
* [[isA::IO behavior]]
* [[memberOf::Vocabulary:Computing]]
* [[memberOf::Vocabulary:Programming]]
",2013-06-12 14:55:36.273,2017-07-04 15:26:20.239183
Concept,Refinement mode,"== Headline ==

A special mode of execution for [[Language:ATL]]

== Details ==

In this mode of operation, only elements for which rules exist are altered. All other elements are carried along the transformation.

== Metadata ==

* [[memberOf::Vocabulary:ATL]]
* [[isA::Concept]]

",2013-06-12 14:55:44.13,2017-07-04 15:26:21.757378
Concept,Relational database,"== Headline ==

A [[database]] that conforms to the [[relational model]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Relational_database]]
* [[isA::Database]]
* [[memberOf::Vocabulary:Data modeling]]

",2013-06-12 14:55:46.164,2017-07-04 15:26:22.03175
Concept,Product function,"== Headline ==

compute the product of a list of numbers

== Illustration ==

In Haskell, there is a corresponding [[Prelude module]] function as follows:

<syntaxhighlight lang=""haskell"">
Prelude> product [1..5]
120
</syntaxhighlight>

For what it matters, this function can be defined as a [[Fold function|fold]] as follows:

<syntaxhighlight lang=""haskell"">
Prelude> let product = foldr (*) 1
Prelude> product [1..5]
120
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Common function]]
",2013-06-12 14:55:27.897,2017-07-04 13:44:54.348315
Technology,Parsec,"== Headline ==

A [[parser combinator]] [[combinator library|library]] in [[Language:Haskell|Haskell]]
== Illustration ==

Parsec-based [[parser]]s are built from [[parser combinator]]s. For instance, the following trivial expressions denote parser for a digit or a letter, respectively. Such parsers for character classes are readily provided by Parsec:

<syntaxhighlight lang=""haskell"">
digit
</syntaxhighlight>

<syntaxhighlight lang=""haskell"">
letter
</syntaxhighlight>

The following expression denotes a parser for a non-empty sequence of digits; the ''many1'' combinator corresponds essentially to ""+"" in EBNF notation for [[context-free grammar]]s:

<syntaxhighlight lang=""haskell"">
many1 digit
</syntaxhighlight>

We will look at other combinators shortly, but let us first run the composed parsers. Parsec provides a ''runP'' function. For instance, we can attempt to parse a digit:

<syntaxhighlight lang=""haskell"">
> runP digit () """" ""1""
Right '1'
</syntaxhighlight>

The input string for the parser ''digit'' is ""1"". The remaining arguments resolve some parameterization of Parsec which we skip here. The run returns the successfully parsed character in the right summand of an [[either type]]; the left operand is reserved for error handling. We see an unsuccessful parse, indeed, in the next example:

<syntaxhighlight lang=""haskell"">
> runP digit () """" ""x""
Left (line 1, column 1):
unexpected ""x""
expecting digit
</syntaxhighlight>

That is, we receive an error message with line and column information about the discrepancy between actual and expected input. Clearly, the input ""x"" cannot be parsed as a digit. Let us also run the parser for non-empty sequences on a few inputs:

<syntaxhighlight lang=""haskell"">
> runP (many1 digit) () """" ""42""
Right ""42""
> runP (many1 digit) () """" ""42x""
Right ""42""
> runP (many1 digit) () """" ""x42""
Left (line 1, column 1):
unexpected ""x""
expecting digit
</syntaxhighlight>

The first is successful because the input string ""42"" is exactly a sequence of digits. The second parse is also successful because the input string ""42x"" does at least have a sequence of digits as a prefix. The third parse fails because it does not start with a non-empty sequence of digits.

We can compose parser sequentially and by choice:

<syntaxhighlight lang=""haskell"">
> runP (letter >> digit) () """" ""a1""
Right ""1""
> runP (many1 (letter <|> digit)) () """" ""a1""
Right ""a1""
</syntaxhighlight>

The first parser parses a sequence of a letter and a digit. The second parser parses any non-empty sequence of letters or digits (""<|>""). Consider the parse tree returned for the first parsers. It is evident that the first component of the sequence does not contribute to the resulting parse tree. This is because the simple form of sequential composition ("">>"") indeed ignores the result of the first operand. We would need to leverage a more complex form of sequential composition ("">>="") to explicitly capture the intermediate results for both operands and return their composition. Thus:

<syntaxhighlight lang=""haskell"">
> runP (letter >>= \l -> digit >>= \d -> return [l,d]) () """" ""a1""
Right ""a1""
</syntaxhighlight>

This form of sequential composition passes the result from the first operand to the second so that the latter can capture the result with a lambda. We also see how the sequential composition is finished off with a trivial parser with simply ''returns'' a value. We can also use the value-passing form of sequential composition to improve the earlier example of a parser for a digit sequence such that the parser returns an actual int rather than a list of characters:

<syntaxhighlight lang=""haskell"">
> runP (many1 digit >>= \s -> return (read s :: Int)) () """" ""42""
Right 42
</syntaxhighlight>

That is, we compose ''many1 digit'' with a function which converts the parsed string to an int and returns it as the final result. The function ''return'' is also a parser combinator, which is used when a given value should be returned as opposed to invoking an actual parser on the input. (If you are familiar with [[monad]]s, then you realize that Parsec leverages a monad with its operations ''return'', "">>"", and "">>="" for parsing, but if you are not aware of monads, then this should not be any problem.)

In the most general case, parsers are of this [[polymorphic type]]:

<syntaxhighlight lang=""haskell"">
data ParsecT s u m a
</syntaxhighlight>

The type parameters serve these roles:
* ''s'': the stream type for the input
* ''u'': a type for user state, e.g., for a symbol table
* ''m'': an extra [[monad]] to add effects to parsing
* ''a'': the type of the [[parse tree]]

When actual parsing does not involve any underlying monad, then the identity monad is used:

<syntaxhighlight lang=""haskell"">
type Parsec s u = ParsecT s u Identity
</syntaxhighlight>

In simple applications of Parsec, the stream type is ''String]] and no user state is used. This results in the following simplification; we also provide a simplified variation on ''runP'':

<syntaxhighlight lang=""haskell"">
type Parsec' = Parsec String ()

</syntaxhighlight>

Here is another sample parser. It models names as they are similarly defined in many language syntax. That is, names should start with a letter and proceed with any number of letters or digits:

<syntaxhighlight lang=""haskell"">
name :: Parsec' String
name = letter
       >>= \l -> many (letter <|> digit)
       >>= return . (l:)
</syntaxhighlight>

The interesting bit is how we (need to) compose the initial letter with the remaining sequence. That is, we need to ""cons up"" the first letter with the remaining sequence. For instance:

<syntaxhighlight lang=""haskell"">
> runP' name ""a42 b88""
Right ""a42""
</syntaxhighlight>

See [[Contribution:haskellParsec]] for an illustration of using Parsec.

== Metadata ==

* [[instanceOf::Combinator library]]
* [[instanceOf::Haskell technology]]
* [[sameAs::http://hackage.haskell.org/package/parsec]]
* [[sameAs::http://www.haskell.org/haskellwiki/Parsec]]
* [[relatesTo::http://research.microsoft.com/en-us/um/people/daan/download/parsec/parsec-letter.pdf]]
*
* [[facilitates::Parsing]]
      ",2013-06-12 15:01:52.617,2017-07-04 13:47:31.153577
Language,sparql,"",2017-04-02 14:29:16.968483,2017-07-04 13:48:19.392361
Concept,Office application,"== Headline ==

An application that serves office productivity

== Metadata ==

* [[similarTo::http://en.wikipedia.org/wiki/Office_suite]]
* [[relatesTo::http://en.wikipedia.org/wiki/Productivity_software]]
* [[isA::Software technology]]

",2013-06-12 14:55:10.307,2017-07-04 15:26:17.597588
Concept,Or feature,"== Headline ==

An ""or"" [[software feature]] in [[feature modeling]]
== Illustration ==

[[Feature:Parallelism]] of the [[@system]] is an or feature because one could use both [[Feature:Task parallelism]] and [[Feature:Data parallelism]]].
== Metadata ==

* [[isA::Software feature]]
* [[memberOf::Vocabulary:Software engineering]]
",2013-06-12 14:55:13.742,2017-07-04 15:26:18.037508
Concept,Output,"== Headline ==

Output data produced by program execution

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Output]]
* [[isA::Concept]]

",2013-06-12 14:55:14.053,2017-07-04 15:26:18.098591
Concept,Parametric polymorphism,"== Headline ==

A form of [[polymorphism]] applying to all types of a certain kind

== Illustration ==

See [[polymorphism]].

== Metadata ==

* [[isA::Polymorphism]]
* [[sameAs::http://en.wikipedia.org/wiki/Parametric_polymorphism]]
* [[relatesTo::http://en.wikipedia.org/wiki/Polymorphism_(computer_science)]]
",2013-06-12 14:55:17.114,2017-07-04 15:26:18.310514
Language,Erlang,"== Intent ==

a programming language used to build massively scalable soft real-time systems with requirements on high availability

== Metadata ==
* [[sameAs::http://www.erlang.org/]]
* [[relatesTo::http://en.wikipedia.org/wiki/Erlang_(programming_language)]]
* ",2013-06-12 15:00:24.465,2017-07-04 13:46:40.907629
Concept,Partial application,"== Headline ==

Apply a function to some but not all arguments

== Illustration ==

Here is an example of ""non-partial"" application of addition in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
> 41 + 1
42
</syntaxhighlight>

In this example, we actually increment 41. Let us thus define the increment function as a partial application of addition so that we can model the same computation as follows:

<syntaxhighlight lang=""haskell"">
> let inc = (+) 1
> inc 41
42
</syntaxhighlight>

It is important that ""+"" was surrounded by ""(...)"" because ""+"" is an infix operator and we need to use in an prefix manner when aiming at partial application. The notation ""(+)"" does indeed produce a prefix operator.

In Haskell, sections for infix operators correspond to a special form of partial application. A section applies an infix operator to one of its two operands by using parenthesization in the following way:

<syntaxhighlight lang=""haskell"">
> let inc = (+1)
> inc 41
42
</syntaxhighlight>

In this example, we have applied ""+"" to its second operand. For what it matters (and because addition is commutative), we could also define the increment function in terms of a section for the first operand:

<syntaxhighlight lang=""haskell"">
> let inc = (1+)
> inc 41
42
</syntaxhighlight>

== Discussion ==

In languages with type-level functions such as parametrized type synonyms or data types, e.g., [[Language:Haskell]], partial application makes sense at the type level as well.

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Partial_application]]
* [[relatesTo::http://www.haskell.org/haskellwiki/Section_of_an_infix_operator]]
* [[isA::Concept]]

",2013-06-12 14:55:19.656,2017-07-04 15:26:18.676887
Language,FSharp,"== Intent ==

a [[Functional programming language|functional]] [[OO programming language|OO]] programming language

== Metadata ==
* [[instanceOf::Functional programming language]]
* [[instanceOf::OO programming language]]
* [[instanceOf::Multi-paradigm programming language]]
* [[sameAs::http://en.wikipedia.org/wiki/F_Sharp_(programming_language)]]
* [[relatesTo::http://msdn.microsoft.com/en-us/fsharp/default.aspx]]
* ",2013-06-12 15:00:24.791,2017-07-04 13:46:40.928507
Language,GReTL,"== Headline ==

A language for graph transformation

== Metadata ==

* [[instanceOf::Transformation language]]
* ",2013-06-12 15:00:25.494,2017-07-04 13:46:40.94949
Language,Groovy,"== Headline ==

a dynamically typed [[OO programming language]] on the [[Language:Java]] Virtual Machine

== Details ==

Groovy is a dynamically typed language running on the JVM. It tries to be a superset of Java and therefore, most (but not all) Java code is also valid Groovy code.
It also provides first-class functions and can therefore be treated as a [[functional programming language]].

== Links ==

* <primary>[http://groovy.codehaus.org/ Groovy Homepage]</primary>
* <secondary>[http://en.wikipedia.org/wiki/Groovy_(programming_language) Groovy] @ Wikipedia</secondary>
* <related>[http://www.gradle.org/ Gradle], a project automation (""build"") tool based on Groovy</related>
* <related>[https://github.com/tinkerpop/gremlin/wiki Gremlin], a Groovy-based graph traversal DSL</related>
== Metadata ==
* ",2013-06-12 15:00:25.768,2017-07-04 13:46:40.987964
Language,HQL,"== Intent ==

The [[Technology:Hibernate]] Query Language

== Metadata ==
* [[instanceOf::Query language]]
* [[sameAs::http://docs.jboss.org/hibernate/core/3.3/reference/en/html/queryhql.html]]
",2013-06-12 15:00:26.101,2017-07-04 13:46:41.007243
Language,HTML5,"== Headline ==

A [[Markup_language|Markup Language]] for [[Web programming]]

== Description ==

HTML5 is a [[Markup_language|markup language]], which extends the current [[Language:HTML]]-Standard with several features like [[offline storage]], [[canvas]] and some more.

Related languages and technologies:

* [[Ajax]]
* [[Language:JavaScript|JavaScript]]
* [[Language:JSON|JSON]]

=== Feature List ===

Not every [[Web browser]] provides a full-feature-support. The following list shows the used features in [[101implementation|implementations]] and the tested browsers.

{|
|-
! Feature !! [[101implementation|Implementation]] !! [[Technology:Mozilla Firefox|Firefox]] !! [[Technology:Safari]] !! [[Technology:Opera]] !! [[Technology:Internet Explorer]] !! [[Technology:Google Chrome|Chrome]]
|-
| [[session storage]] || [[Contribution:html5session]] || style=""background-color:#88bb00"" | yes (with web server) || not tested || not tested || not tested || style=""background-color:#00cc00"" | yes
|-
| [[local storage]] || [[Contribution:html5local]] || style=""background-color:#88bb00"" | yes (with web server) || not tested || not tested || not tested || style=""background-color:#00cc00"" | yes
|-
| [[XMLHttpRequest]] || [[Contribution:html5XMLHttpRequest]] || style=""background-color:#00cc00"" | yes || not tested || not tested || not tested || style=""background-color:#88bb00"" | yes (with web server)
|-
| || [[Contribution:html5ajax]] || style=""background-color:#88bb00"" | yes (with web server) || style=""background-color:#88bb00"" | yes (with web server) || not tested || not tested || style=""background-color:#88bb00"" | yes (with web server)
|-
| [[indexed database]] || [[Contribution:html5indexedDatabase]] || style=""background-color:#cc0000"" | no || not tested || not tested || not tested || style=""background-color:#00cc00"" | yes
|}

== Metadata ==

* [[instanceOf::Markup_language]]

* [[sameAs::http://en.wikipedia.org/wiki/HTML5]]
* [[relatesTo::http://dret.typepad.com/dretblog/html5-api-overview.html]]
*

",2013-06-12 15:00:27.061,2017-07-04 13:46:41.108451
Concept,Recursion,"== Headline ==

The use of self-reference in defining [[abstraction]]s

== Illustration ==

Clearly, there are different forms of recursions, as they are different [[abstraction mechanism]]s that permit recursion. For instance, in [[functional programming]], both [[Function]]s and [[data type]]s may be defined recursively.

=== Recursive functions ===

Consider the following recursive formulation of the factorial function in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
-- A recursive definition of the factorial function
factorial n =
  if n==0
    then 1
    else n * factorial (n-1)
</syntaxhighlight>

This is essentially a form of primitive recursion: the function definition checks for the argument ''n'' to be ""0"" for the base case and applies the function recursively to the predecessor of the argument otherwise. For the record, non-recursive formulations are feasible, too, depending on the helper functions we are willing to use. For instance, we may use the "".."" operator to enumerate all values in a range and then apply the ''product'' function:

<syntaxhighlight lang=""haskell"">
-- A non-recursive definition of the factorial function
factorial' n = product [1..n]
</syntaxhighlight>

=== Recursive data types ===

Under construction.

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Recursion_(computer_science)]]
* [[sameAs::http://mathworld.wolfram.com/Recursion.html]]
* [[isA::Concept]]

",2013-06-12 14:55:43.131,2017-07-04 15:26:21.231767
Concept,Program,"== Headline ==

An executable [[software artifact]] that solves a certain problem

== Description ==

According to a classic definition, a program is ([[Document:Principles of information systems]]) ""a sequence of instructions written to perform a specified task with a computer"". This style of definition is possibly too much focused on an imperative view of programming.

More intuitively, more inclusively, and shorter: '''a [[program]] is an executable [[software artifact]] that solves a certain problem (that is amenable to automation on a computer). For instance, a program may solve an [[algorithmic problem]].'''

A [[program]] may count as a ""small"" [[software system]] or an (executable) [[software component]]. A ""proper"" [[software system]] or [[software component|component]] typically comprises of multiple [[software artifact]]s that may be elements of different [[software language]]s, may or may not be elements of [[programming language]]s, may reside at different levels of abstraction, and may interact in various ways.

Strictly speaking, a [[program]], as far as this term is used in practice, may very well also break down into multiple [[software artifact]]s because of, for example, [[modular programming]]. Thus, the line between [[program]]s and [[software system]]s or (executable) [[software component]]s is somewhat blurred.

== Illustration ==

See the [[Hello world program]] for a very simple program.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Computer program]]
* [[isA::Software artifact]]
* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Software engineering]]
",2013-06-12 14:55:28.728,2017-07-04 15:26:19.568973
Concept,Program generator,"== Headline ==

A program that generates programs

== Metadata ==

* [[sameAs::http://www.thefreedictionary.com/program+generator]]
* [[isA::Concept]]

",2013-06-12 14:55:30.133,2017-07-04 15:26:19.748708
Language,Haskell,"== Headline ==

The [[functional programming language]] Haskell

== Details ==

101wiki hosts plenty of Haskell-based contributions. This is evident from corresponding back-links. More selective sets of Haskell-based contributions are organized in themes: [[Theme:Haskell data]], [[Theme:Haskell potpourri]], and [[Theme:Haskell genericity]]. Haskell is also the language of choice for a course supported by 101wiki: [[Course:Lambdas_in_Koblenz]].

== Illustration ==

The following expression takes the first 42 elements of the infinite list of natural numbers:

<syntaxhighlight lang=""Haskell"">
> take 42 [0..]
[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]
</syntaxhighlight>

In this example, we leverage Haskell's [[lazy evaluation]].

== Metadata ==

* [[sameAs::http://www.haskell.org/]]
* [[sameAs::http://en.wikipedia.org/wiki/Haskell_(programming_language)]]
* [[instanceOf::Functional programming language]]
",2013-06-12 15:00:27.408,2017-07-04 13:46:41.184769
Concept,ATL plugin,"== Headline ==

A special form of [[Language:ATL]] transformation.

== Details ==

[[Technology:ATL]] can create a Plugin from an [[Language:ATL]] [[transformation]]. This plugin can then easily be reused by other implementations. The plugin is created by creating a new ATL plugin project in Eclipse. The wizard let's you then choose an existing ATL transformation. The rest is done automatically.
For using the plugin in another project, it needs to be added to the dependencies of this project.

== Metadata ==
* [[memberOf::Vocabulary:ATL]]
* [[sameAs::http://wiki.eclipse.org/ATL/User_Guide_-_The_ATL_Tools#ATL_Plugins]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:08.531,2017-07-04 13:44:35.231834
Concept,Optional feature,"== Headline ==

An optional [[software feature]] in [[feature modeling]]

== Illustration ==

Pretty much all features of the [[@system]] are optional (except for the [[mandatory feature]] [[Feature:Company]] with its subfeatures) because an actual implementation of the [[@system]] may freely choose to implement or not to implement certain [[data requirement|data]], [[functional requirement|functional]], [[non-functional requirement|non-functional]], and [[UI requirement]]s.

== Metadata ==

* [[isA::Software feature]]
* [[memberOf::Vocabulary:Software engineering]]

",2013-06-12 14:55:13.527,2017-07-04 15:26:17.984898
Concept,Parser generation,"== Headline ==

Application of a [[parser generator]]

== Metadata ==

* [[sameAs::https://de.wikipedia.org/wiki/Parsergenerator]]
* [[instanceOf::Software concept]]
* [[relatesTo::http://en.wikipedia.org/wiki/Compiler-compiler]]
* [[relatesTo::http://en.wikipedia.org/wiki/Comparison_of_parser_generators]]

",2013-06-12 14:55:17.968,2017-07-07 13:52:00.378493
Concept,Structural equality,"== Headline ==

[[Equality]] in terms of structure alone, without interpretation

== Illustration ==

[[Structural equality]] means that two expressions are equal if and only if they agree on constructors or primitive values at every level and in every position. In Haskell, this would be captured by the following [[type-class instance]] for the [[type class]] ''Eq'':

<syntaxhighlight lang=""haskell"">
-- Simple arithmetic expressions
data Expr = Const Int | Add Expr Expr
</syntaxhighlight>

<syntaxhighlight lang=""haskell"">
-- Uniform (structural) equality
instance Eq Expr
  where
    (Const i) == (Const j) = i == j
    (Add e1 e2) == (Add e3 e4) = e1 == e3 && e2 == e4
    _ == _ = False
</syntaxhighlight>

Thus, the operands of equality (i.e., ""=="") must agree on the outermost constructor and equality must hold recursively for all immediate positions. For instance:

<syntaxhighlight lang=""haskell"">
> Const 42 == Const 42
True
> Const 42 == Add (Const 20) (Const 22)
False
</syntaxhighlight>

The second equality test fails because the constant term is clearly structurally unequal to the addition term, even though we can see that both expressions would evaluate to the same result. Indeed, sometimes, we could prefer [[semantic equality]]; this is when we take semantic properties of the underlying data into account.

== Metadata ==

* [[isA::Equality]]
* [[relatesTo::Semantic equality]]
",2013-06-12 14:56:11.598,2017-07-04 15:26:25.923444
Concept,Programming domain,"== Headline ==

A domain central to programming

== Metadata ==

* [[isA::Domain]]

",2013-06-12 14:55:31.578,2017-07-04 15:26:19.88829
Concept,Pure function,"== Headline ==

A function with [[referential transparency]]

== Details ==

See the notion of [[impure function]] for comparison.

For instance, functions in [[Language:Haskell]] are pure.

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Pure_function]]
* [[isA::Concept]]
",2013-06-12 14:55:34.789,2017-07-04 15:26:20.130862
Concept,Monads,"== Headline ==

Lecture ""Monads"" as part of [[Course:Lambdas in Koblenz]]

== Details ==

Applications of pure functions return the same result whenever provided with the same arguments; they do not have any side effects. This may be viewed as a limitation when we need to model more general computations in functional programming. However, there is a functional programming abstraction, the [[monad]], which comes to rescue. A monad is essentially an abstract data type to facilitate the composition of computations as opposed to functions. There are various monads to deal with all the computations effects that one may encounter, e.g., the [[state monad]], the [[maybe monad]], the [[reader monad]], the [[writer monad]], and the [[IO monad]].

== Concepts ==

* [[Monad]]
* [[State monad]]
* [[Maybe monad]]
* [[Writer monad]]

== Languages ==

* [[Language:Haskell]]

== Features ==

* [[Feature:Logging]]

== Contributions ==

* [[Contribution:haskellLogging]]
* [[Contribution:haskellWriter]]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Functors_and_friends]]
",2016-06-14 23:09:01.658,2017-07-04 13:48:17.409793
Concept,Quasi-quotation,"== Headline ==

Interpolation of quotation and evaluation

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Quasi-quotation]]
* [[relatesTo::http://en.wikipedia.org/wiki/Lisp_(programming_language)#Self-evaluating_forms_and_quoting]]
* [[relatesTo::http://www.haskell.org/haskellwiki/Quasiquotation]]
* [[relatesTo::http://docs.racket-lang.org/reference/quasiquote.html]]
* [[isA::Concept]]

",2013-06-12 14:55:35.919,2017-07-04 15:26:20.168828
Concept,Parallelism,"== Headline ==

The capability of executing programs in parallel

== Metadata ==

* [[isA::Capability]]
* [[sameAs::http://en.wikipedia.org/wiki/Parallel_computing]]
",2013-06-12 14:55:16.818,2017-07-04 15:26:18.272081
Concept,Aspect-oriented programming,"== Headline ==

an crosscutting concern-centric programming paradigm
== Abbreviation ==

AOP
== Humor ==

* AOP provides modules for crosscutting concerns, i.e., for concerns that cannot be modularized.
* AOP is also sometimes called LOP (Logging-oriented programming) to hint at an important application domain.
== Metadata ==

* [[instanceOf::Programming paradigm]]
* [[sameAs::http://en.wikipedia.org/wiki/Aspect-oriented_programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Aspect-oriented_software_development]]
",2013-06-12 14:53:19.257,2017-07-04 13:44:37.853622
Language,Haskell 98,"== Headline ==

A standardized version of [[Language:Haskell]]



== Metadata ==
* [[instanceOf::Functional programming language]]
* ",2013-06-12 15:00:27.806,2017-07-04 13:46:41.201164
Language,ICO,"== Headline ==

An image format

== Metadata ==
* [[instanceOf::Image format language]]
* [[sameAs::http://en.wikipedia.org/wiki/ICO_(file_format)]]
* ",2013-06-12 15:00:28.118,2017-07-04 13:46:41.211657
Language,JAXB annotations,"== Intent ==

JAXB's set of annotations for [[Object-XML mapping]]

== Metadata ==
* [[instanceOf::Metadata language]]
* [[sameAs::http://docs.oracle.com/javase/6/docs/api/javax/xml/bind/annotation/package-summary.html]]
* ",2013-06-12 15:00:28.765,2017-07-04 13:46:41.235494
Concept,Generic functions,"== Headline ==

Lecture ""Generic functions"" as part of [[Course:Lambdas in Koblenz]]

== Details ==

[[Generic function]]s à la [[datatype-generic programming]] are functions that are parameterized in the shape of data types. This is to be compared with [[polymorphic function]]s that are parameterized in types. We introduce a simple form of [[datatype-generic programming]] with the help of [[generalized fold]]s ([[catamorphism]]s) which in turn are based on the notion of [[fold algebra]]s. In passing, we also sketch the ""[[Scrap your boilerplate]]"" ([[SYB]]) style of generic programming.

== Concepts ==

* [[Generic function]]
* [[Datatype-generic programming]]
* [[Generic programming]]
* [[Fold algebra]]
* [[Generalized fold]]
* [[Catamorphism]]
* [[Large banana]]
* [[Scrap your boilerplate]]

== Languages ==

* [[Language:Haskell]]

== Contributions ==

* [[Contribution:tabaluga]]
* [[Contribution:haskellSyb]]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Type-class polymorphism]]

",2016-06-14 23:08:59.485,2017-07-04 13:48:17.321929
Concept,Model,"== Headline ==

An abstract description of structure, behavior, or other aspects of software systems

== Metadata ==

* [[instanceOf::Modelware_term]]
* [[instanceOf::MDE_term]]
* [[relatesTo::http://en.wikipedia.org/wiki/Model_(computer_science)]]
",2013-06-12 14:54:52.391,2017-07-04 13:44:47.441072
Concept,UI requirement,"== Headline ==

A requirement regarding the user interface of a [[software system]]

== Description ==

TBD

== Metadata ==

* [[isA::Requirement]]
* [[memberOf::Vocabulary:Software engineering]]
",2013-06-12 14:56:42.592,2017-07-04 15:26:30.187126
Concept,Search problem,"== Headline ==

The problem of determining whether a given value occurs in a given list

== Description ==

The search problem is an algorithmic problem as follows:

* Input:
** A list ''l'' of values
** A value ''v''
* Output:
** ''True'': ''v'' occurs in ''l''.
** ''False'': otherwise.

This is an [[algorithmic problem]] because one can obviously define an [[algorithm]] to iterate over the elements of ''l'' and to check for an occurrence of ''v'' along the way. This simple idea is the foundation for [[linear search]]. When additional constraints are imposed on the input, then search may also be more efficient; see [[binary search]] for example.

== Illustration ==

See [[linear search|linear]] and [[binary search]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Search_problem]]
* [[isA::Algorithmic problem]]
",2013-06-12 14:55:57.245,2017-07-04 15:26:23.540675
Concept,Server,"== Headline ==

A program that serves requests of [[client]]s

== Details ==

We are often concerned with servers and clients in the sense of the [[client-server architecture]].
Also, the programs for server and clients are often executed on different machines that are connected through the network or the internet. It is also common to use the term server in a way to include the hardware part, i.e., a machine that runs the server program. (The term server may, in fact, refer to only the hardware part.)

== Metadata ==

* [[isA::Architectural component]]
* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Server_(computing)]]

",2013-06-12 14:56:00.69,2017-07-04 15:26:23.971458
Concept,Software engineering,"== Headline ==

The application of engineering to software

== Citation ==

(http://en.wikipedia.org/wiki/Software_engineering, 2 May 2013)

Software engineering (SE) is the application of a systematic, disciplined, quantifiable approach to the design, development, operation, and maintenance of software, and the study of these approaches; that is, the application of engineering to software.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Software_engineering]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:56:05.303,2017-07-04 15:26:24.235843
Concept,Activity,"== Headline ==

The visible part of the [[Technology:Android]] application

== Metadata ==
* [[memberOf::Android UI]]
* [[sameAs::http://developer.android.com/reference/android/app/Activity.html]]
* [[instanceOf::Concept]]

",2013-06-12 14:53:11.011,2017-07-04 13:44:36.897766
Concept,Applicative functor,"== Headline ==

A [[functor]] with function application within the functor

=== Description ===

Applicative functors are described here briefly in Haskell's sense.

The corresponding type class (modulo some simplifications) looks as follows.

<syntaxhighlight lang=""haskell"">
class Functor f => Applicative f where
  pure :: a -> f a
  (<*>) :: f (a -> b) -> f a -> f b
</syntaxhighlight>

The expectation is that ''pure'' promotes a value to a functorial value whereas ""<*>"" can be seen as a variation of fmap such that a function within the functor (as opposed to just a plain function) is applied to a functorial value.

The following laws are assumed.

<syntaxhighlight lang=""haskell"">
pure f <*> x = fmap f x
pure id <*> v = v
pure (.) <*> u <*> v <*> w = u <*> (v <*> w)
pure f <*> pure x = pure (f x)
u <*> pure y = pure ($ y) <*> u
</syntaxhighlight>

== Illustration ==

We make ''Maybe'' and lists applicative functors:

<syntaxhighlight lang=""haskell"">
instance Applicative Maybe where
  pure = Just
  Nothing <*> _ = Nothing
  (Just f) <*> x = fmap f x

instance Applicative [] where
  pure x = [x]
  fs <*> xs = [ f x | f <- fs, x <- xs ]
</syntaxhighlight>

Thus, in the ''Maybe'' case, a ''Nothing'' as a function makes us return a ''Nothing'' as result, but if the function is available then it is fmapped over the argument. In the list case, we use a [[list comprehension]] to apply all available functions too all available values.

The instances can be exercised at the Haskell prompt as follows:

<syntaxhighlight lang=""haskell"">
> Just odd <*> Just 2
Just False
> [odd, even] <*> [1,2,3,4]
[True,False,True,False,False,True,False,True]
</syntaxhighlight>

To see that applicative functors facilitate function application for functorial values pretty well, consider the following functorial variation on plain function application.

<syntaxhighlight lang=""haskell"">
(<$>) :: Functor f => (a -> b) -> f a -> f b
f <$> x = fmap f x
</syntaxhighlight>

Consider the following application.

<syntaxhighlight lang=""haskell"">
> (+) <$> [1,2] <*> [3,4]
[4,5,5,6]
</syntaxhighlight>

Thus, the applicative operator ""<*>"" is used to line up (any number of) functorial arguments and ''fmap'' is used for the ""rest"" of the application.

== Metadata ==

* [[instanceOf::Programming idiom]]
* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://www.haskell.org/haskellwiki/Applicative_functor]]
* [[sameAs::https://en.wikibooks.org/wiki/Haskell/Applicative_functors]]
* [[relatesTo::http://dx.doi.org/10.1017/S0956796807006326]]
* [[relatesTo::http://learnyouahaskell.com/functors-applicative-functors-and-monoids]]

",2013-06-12 14:53:17.681,2017-07-04 13:44:37.646088
Concept,Test page,"",2017-05-01 17:25:54.576331,2017-07-04 13:48:20.166207
Concept,Test,"",2017-05-01 17:26:07.140931,2017-07-04 13:48:20.16979
Concept,Example,"",2017-05-01 17:26:36.891382,2017-07-04 13:48:20.173209
Concept,Reference equality,"== Headline ==

[[Equality]] based on object references or memory addresses

== Metadata ==

* [[isA::Equality]]
",2013-06-12 14:55:43.589,2017-07-04 15:26:21.705302
Concept,Regular expression,"== Headline ==

a means to match strings of text

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::http://en.wikipedia.org/wiki/Regular_expression]]
* [[isA::Concept]]

",2013-06-12 14:55:44.822,2017-07-04 15:26:21.984423
Concept,Model transformation,"== Headline ==

The process of transforming a [[model]] or the status of an artifact to model a transformation

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Model_transformation]]
* [[relatesTo::http://dx.doi.org/10.1016/j.entcs.2005.10.021]]
* [[memberOf::Vocabulary:MDE]]

",2013-06-12 14:54:54.067,2017-07-04 13:44:47.512243
Language,HTML,"== Headline ==

A markup language for documents on the WWW

== Metadata ==

* [[instanceOf::Markup language]]
* [[sameAs::http://en.wikipedia.org/wiki/HTML]]
* [[facilitates::Web publishing]]
",2013-06-12 15:00:26.755,2017-07-04 13:46:41.031687
Concept,Variability,"== Headline ==

Variability of [[software system]]s as in [[software product line]]s

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Variability]]
* [[isA::Concept]]

",2013-06-12 14:56:49.434,2017-07-04 15:26:30.830111
Concept,View,"== Headline ==

Something on the screen that the user can interact with

== Metadata ==

* [[instanceOf::Android_UI]]
* [[sameAs::http://developer.android.com/guide/topics/ui/overview.html]]
* [[relatesTo::http://developer.android.com/reference/android/view/View.html]]
* [[relatesTo::http://developer.android.com/reference/android/view/ViewGroup.html]]
* [[isA::Concept]]

",2013-06-12 14:56:50.411,2017-07-04 15:26:30.874771
Concept,Metadata,"== Headline ==

Data about data (or programs).

== Illustration ==

See the concept of [[Java annotation]]s for mundane, programming-focused illustration. Beware, the following illustration is somewhat weird. That is, this very page, when considered as markup is, of course, data. Semantic properties are used on this wiki to associate wiki pages among each other and with external resources. Those associations can be viewed as metadata. For instance, this very page, specifies a namespace association in the metadata section:

<pre>
[[sameAs::https://en.wikipedia.org/wiki/Metadata]]
</pre>

That semantic properties associates this page and [[Namespace:Concept]]. In fact, both pages carry the resulting triple as metadata.

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Metadata]]

",2013-06-12 14:54:48.636,2017-07-04 13:44:47.228894
Language,JNLP,"== Headline ==

a language serving the Java Network Launching Protocol

== Metadata ==

* [[sameAs::http://mindprod.com/jgloss/jnlp.html]]
* [[instanceOf::XML language]]
* ",2013-06-12 15:00:29.065,2017-07-04 13:46:41.247047
Contributor,hakanaksu,"",2017-05-03 12:04:01.854753,2017-07-04 13:48:20.244921
Concept,Reflection,"== Headline ==

A program's ability to examine and modify programs in the same language

== Illustration ==

Consider the following reflective Java code for printing ""Hello, world!"":

<syntaxhighlight lang=""java"">
import java.lang.reflect.*;

/**
 * The main method constructs an object of this very class.
 * Then, an instance method with ""Hello, world!"" functionality is invoked.
 * Construction and method invocation is expressed in terms of reflection.
 */
public class Demo {

    // An instance method to print ""Hello, world!""
    public void helloWorld() {
    System.out.println(""Hello, world!"");
    }

    // A main method to construct an instance and invoke helloWorld()
    public static void main(String[] args) {

	// Catch all (reflection-related?) exceptions
	try {
	    Class<?> clss = Class.forName(""Demo"");
	    Constructor<?> cons = clss.getConstructor();
	    Object obj = cons.newInstance();
	    Method meth = clss.getMethod(""helloWorld"");
	    meth.invoke(obj);
	}
	catch (Exception e)
	{
	    System.out.println(""java.lang.reflect may throw in many ways."");
	}
    }
}
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Reflection_(computer_programming)]]
* [[isA::Concept]]

",2013-06-12 14:55:44.492,2017-07-04 15:26:21.91141
Concept,Run-time quality,"== Headline ==

A [[non-functional requirement]] that relates to the run time of a [[software system]]

== Details ==

See also the concept of [[development-time quality]].

(These classifiers are not standardized, but similar concepts appear under different names in various sources.)

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Non-functional_requirement]]
* [[isA::Non-functional requirement]]
* [[memberOf::Vocabulary:Software engineering]]
",2013-06-12 14:55:51.991,2017-07-04 15:26:22.970455
Concept,Scoping,"== Headline ==

The placement of [[abstraction]]s in appropriate scopes

== Illustration ==

See the notion of [[local scope]] for an illustration of a specific scoping option.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Scope_(computer_science)]]
* [[isA::Concept]]

",2013-06-12 14:55:54.68,2017-07-04 15:26:23.128531
Concept,Software component,"== Headline ==

Any form of software module or service that encapsulates a set of related functions or data

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Component-based_software_engineering#Definition_and_characteristics_of_components]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:56:04.592,2017-07-04 15:26:24.112772
Concept,Abstract syntax tree,"== Headline ==

A [[syntax tree]] showing [[abstract syntax]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Abstract_syntax_tree]]
* [[relatesTo::Concrete syntax tree]]
* [[memberOf::Vocabulary:Software language engineering]]
* [[isA::Syntax tree]]
",2013-06-12 14:53:09.658,2017-07-04 15:25:58.522668
Concept,Sorting problem,"== Headline ==

The problem of sorting a given list

== Description ==

The problem can be described, for example, as follows:

* Input:
** A list ''l'' of values
* Output:
** A list ''r'' satisfying these properties:
*** ''r'' is a permutation is of ''l''.
*** ''r'' is sorted.

For instance, given the input {2,4,3,1,4}, the output should be {1,2,3,4,4}.

This is an [[algorithmic problem]]; there are various [[sorting algorithm]]s, e.g., [[Quicksort]].

== Illustration ==

=== Sorting problem in Haskell ===

The ingredients of the above problem description, i.e., the test for two lists to be permutations of each other and the test for a list to be sorted, can be described more formally as follows; we use [[Language:Haskell]] notation:

<syntaxhighlight lang=""haskell"">
-- Test for two lists to be permutations of each other
permutation :: Eq a => [a] -> [a] -> Bool
permutation [] [] = True
permutation (x:xs) ys = remove ys []
  where
    -- Repeat removal of equal elements
    remove [] _ = False
    remove (y:ys) zs =
      if (x==y)
        then permutation xs (zs++ys)
        else remove ys (y:zs)

-- Test for a list to be sort
sorted :: Ord a => [a] -> Bool
sorted [] = True
sorted [x] = True
sorted (x1:x2:xs) = x1 <= x2 && sorted (x2:xs)
</syntaxhighlight>

We apply the list properties to a few sample lists:

<syntaxhighlight lang=""haskell"">
-- Illustrate list properties
main = do
  let l1 = [2,4,3,1,4]
  let l2 = [1,2,3,4,4]
  let l3 = [1,8,2,7,4]
  print $ sorted l1 -- False
  print $ sorted l2 -- True
  print $ sorted l3 -- False
  print $ permutation l1 l2 -- True
  print $ permutation l1 l3 -- False
</syntaxhighlight>

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Sorting_algorithm]]
* [[isA::Algorithmic problem]]

",2013-06-12 14:56:07.728,2017-07-04 15:26:24.709587
Concept,Subtype,"== Headline ==

A [[type]] that is [[Substitutability|substitutable]] for another [[type]] according to the [[type system]]

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Subtyping]]
* [[memberOf::Vocabulary:OO programming]]
* [[relatesTo::Subtyping]]
* [[isA::Concept]]

",2013-06-12 14:56:14.023,2017-07-04 15:26:26.245625
Concept,Grammar,"== Headline ==

A set of formation rules for strings, trees, graphs, or other artifacts

== Illustration ==

See the concept of [[context-free grammar]]s for a more specific form of grammars and an associated illustration.

== Metadata ==

* [[similarTo::http://en.wikipedia.org/wiki/Formal_grammar]]
* [[similarTo::http://en.wikipedia.org/wiki/Grammar]]
* [[memberOf::Vocabulary:Software language engineering]]
",2013-06-12 14:54:05.754,2017-07-04 13:44:42.679873
Concept,Context-free grammar,"== Headline ==

A kind of [[grammar]] used, for example, for [[syntax definition]]

== Illustration ==

Context-free grammars consist of:
* a set of terminal (""strings"" from which to compose inputs),
* a set of nonterminal (placeholders for syntactical categories in derivations),
* an (optional) designated startsymbol (a nonterminal from which to start derivations), and
* a set of productions (rules) for derivations.

In fact, a context-free grammar can be described just by the rules as these rules enumerate the terminals and nonterminals as well. (We may also assume that the left-hand side nonterminal of the first rule is simply the startsymbol). What's important is the structure of rules. Each rules consists of:
* a left-hand side which is a nonterminal, and
* a right-hand side which is some expression over terminals and nonterminals.

In the most basic form, said expressions are simply sequences over terminals and nonterminals. Alternatives for derivation are already expressible, as there could be multiple rules with the same left-hand side nonterminal. In practice, notational extensions are commonplace. For example, so-called EBNF notations may cater for these expression forms:

* ''x*'': Any number of repetitiions of ''x'' including 0 repetitions.
* ''x?'': Any number of repetitiions of ''x'' excluding 0 repetitions.
* ''x|y'': ''x'' or ''y''.
* ''x?'': ''x'' or the empty string.

Here is a context-free grammar for a possible concrete syntax for companies of the [[@system]]; for what it matters, we use [[Technology:ANTLR]]'s EBNF-like notation:

Nonterminals (with explanation):
* '''Company''': complete company structures
* '''Department''': department sub-structures of companies
* '''Employee''': employee sub-structures of departments
* '''NonManager''': managers rather than non-managerial employees
* '''QString''': double-quoted strings for names and addresses
* '''Number''': floating point numbers for salaries

Terminals:
* ""company""
* ""department""
* ""employee""
* ""manager""
* ""address""
* ""salary""
* ""{""
* ""}""

Startsymbol: Company

Productions:

<pre>
Company :
  'company' QString '{'
    Department*
  '}';

Department :
  'department' QString '{'
    'manager' Employee
    Department*
    NonManager*
  '}';

NonManager : 'employee' Employee;

Employee : QString '{'
    'address' QString
    'salary' Number
  '}';
</pre>

As an exercise, let us define about the same syntax with a different grammar. In the original grammar, the lists of departments and employees were separated. We may also consider a mixed list of departments and employees. To this end, we assume an extra nonterminal ""SubUnit"" for a choice between department and employee. As a result, we would need these alternative productions:

<pre>
Company :
  'company' QString '{'
    Department*
  '}';

Department :
  'department' QString '{'
    'manager' Employee
    SubUnit*
  '}';

SubUnit : NonManager | Department ;

NonManager : 'employee' Employee;

Employee : QString '{'
    'address' QString
    'salary' Number
  '}';
</pre>

A (context-free) grammar has a simple semantics. It defines a set of strings (the so-called language generated by the grammar) which are derivable by repeated rule application starting from the symbol such that nonterminals are replaced by matching right-hand sides until no nonterminals are left. This generative definition also gives rise to an [[algorithmic problem]], the [[parsing problem]], such that one can check whether a given string is actually in the language generated by a grammar and recover the underlying syntactical structure as [[parse tree]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Context-free_grammar]]
* [[isA::Grammar]]
* [[memberOf::Vocabulary:Software language engineering]]
",2013-06-12 14:53:35.326,2017-07-04 15:26:05.315566
Concept,Syntactic category,"== Headline ==

categories of language constructs

== Synonyms ==

* Nonterminal
* Syntactic domain

== Metadata ==

* [[memberOf::Vocabulary:Software language engineering]]
* [[relatesTo::http://en.wikipedia.org/wiki/Syntax_(programming_languages)]]
* [[relatesTo::http://en.wikipedia.org/wiki/Syntactic_category]]
* [[isA::Concept]]

",2013-06-12 14:56:16.424,2017-07-04 15:26:26.663649
Concept,Accumulator,"== Headline ==

A [[programming idiom]] for computing a result along traversal of a [[data structure]]
== Details ==

The idiom is approached differently depending on [[programming language]] and [[programming paradigm]]. For instance, in [[functional programming]], the [[fold function]] may be used to model accumulation. The [[state monad]] may be also used for data structures other than lists. In [[logic programming]], the predicates for traversal may use extra parameter positions for the accumulator's value before and after visiting a given term.
== Illustration ==

Consider the following [[Language:Prolog]] code for computing maximum of a list of numbers:

<syntaxhighlight lang=""prolog"">
max([H|T],M) :- max(T,H,M).

max([],M,M).
max([H|T],M1,M2) :- H > M1 -> max(T,H,M2); max(T,M1,M2).
</syntaxhighlight>

For instance:

<syntaxhighlight lang=""prolog"">
?- max([1,7,3],M).
M = 7.
</syntaxhighlight>
== Metadata ==

* [[isA::Programming idiom]]
* [[memberOf::Vocabulary:Programming]]
",2013-06-12 14:53:10.353,2017-07-04 15:25:59.19964
Concept,Taxonomy,"== Headline ==

arrangement of individuals in a classification structure

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[sameAs::http://en.wikipedia.org/wiki/Enterprise_taxonomy]]
* [[relatesTo::http://en.wikipedia.org/wiki/Self-categorization_theory]]
* [[relatesTo::https://www.msu.edu/~nixonjos/armadillo/taxonomy.html]]
* [[relatesTo::http://en.wikipedia.org/wiki/Taxonomy]]
* [[relatesTo::http://en.wikipedia.org/wiki/Classification]]
* [[isA::Concept]]

",2013-06-12 14:56:19.468,2017-07-04 15:26:26.804972
Concept,Algorithm design,"== Headline ==

A process of designing an [[algorithm]]
== Details ==

See also the related views on [[design]]: [[data structure design]] or [[program design]].
== Metadata ==
* [[memberOf::Vocabulary:Software engineering]]
* [[relatesTo::http://stackoverflow.com/questions/58354/algorithm-data-structure-design-interview-questions]]
* [[isA::Concept]]
",2013-06-12 14:53:12.82,2017-07-04 15:26:00.253725
Concept,Factorial,"== Headline ==

The product 1 * ... * ''n'' for a given natural number ''n''
== Illustration ==

We face an [[algorithmic problem]] because the factorial can be computed by a (simple) algorithm. Assume that ''n'' is a natural number. Then, the following steps compute the factorial of ''n'':

* Initialize a variable ''r'' with 1.
* Repeat the following step until ''n'' equals ''0'':
** Assign ''n''*''r'' to ''r''.
** Decrement ''n''.
* Return ''r''.

Here is also an implementation in [[Language:Java]]:

<syntaxhighlight lang=""java"">
  // An imperative definition of the factorial function
  public static int factorial(int n) {
    int result = 1;
    for (int i=n; i>1; i--)
      result = result * i;
    return result;
  }
</syntaxhighlight>

Here is also an implementation in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
-- A recursive definition of the factorial function
factorial n =
  if n==0
    then 1
    else n * factorial (n-1)
</syntaxhighlight>

See also the following collection of implementations:

http://www.willamette.edu/~fruehr/haskell/evolution.html
== Citation ==

(http://en.wikipedia.org/wiki/Factorial, 21 April 2013)

In mathematics, the factorial of a non-negative integer n, denoted by n!, is the product of all positive integers less than or equal to n. For example,

5! = 5 * 4 * 3 * 2 * 1 = 120

The value of 0! is 1, according to the convention for an empty product.
== Metadata ==

* [[instanceOf::Algorithmic problem]]
* [[sameAs::http://en.wikipedia.org/wiki/Factorial]]
",2013-06-12 14:53:55.871,2017-07-04 13:44:41.100637
Language,JSON,"== Headline ==

The [[Language:JavaScript|JavaScript]] Object Notation for [[data exchange]]

== Metadata ==

* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/Json]]
",2013-06-12 15:00:29.702,2017-07-04 13:46:41.271285
Technology,Haddock,"== Headline ==

A [[documentation generator]] for [[Language:Haskell]]


== Illustration ==

Haddock relies on module headers and simple comment conventions to generate documentation from Haskell source code. Consider, for example, the following module:

<syntaxhighlight lang=""haskell"">
{- | This comment is placed before the module header and thus
     is seen as the general description of the module. Since
     the general description may be a bit longer, it is quite
     common to see a multi-line comment in this position. -}

module Main (
 foo
) where

-- | The ""|"" character in the comment expresses that this
-- comment should contribute to the generated documentation.
-- Haddock does indeed search for such comments.
-- We note that 'foo' is indeed exported and thus it
-- deserves documentation. We could also use a multi-line
-- comment of course.
foo :: () -> ()
foo = id

-- This function is not exported.
-- Thus, no Haddock comment is needed.
-- That is, the function will not appear in generated documentation.
bar :: () -> Bool
bar = const True
</syntaxhighlight>

It uses Haddock comment conventions for the module description and the exported function ''foo''. Haddock supports much more conventions and features; see the documentation. Haddock also nicely integrates with [[Technology:Cabal]] such that one can simply invoke ""cabal haddock"" to generate documentation for a given [[Haskell package]].


== Metadata ==


* [[instanceOf::Documentation generator]]
* [[sameAs::http://www.haskell.org/haddock]]
* ",2013-06-12 15:01:23.786,2017-07-04 13:47:28.848454
Language,JavaScript,"== Headline ==

A [[multi-paradigm programming language]] for the web et al.
== Discussion ==

JavaScript counts as (imperative) [[OO programming language]]; it is prototype-based, though.

JavaScript provides first-class functions; hence it counts also as [[functional programming language]].

The official name of JavaScript is ECMAScript.
== Metadata ==
* [[instanceOf::Functional programming language]]
* [[instanceOf::OO programming language]]
* [[instanceOf::Multi-paradigm programming language]]
* [[instanceOf::Scripting language]]
* [[sameAs::http://en.wikipedia.org/wiki/JavaScript]]
*
",2013-06-12 15:00:30.414,2017-07-04 13:46:41.352126
Language,Java bytecode,"== Headline ==

The instructions executed by the [[Technology:JVM]]

== Metadata ==
* [[instanceOf::Bytecode language]]
* [[sameAs::http://en.wikipedia.org/wiki/Java_bytecode]]
* ",2013-06-12 15:00:30.74,2017-07-04 13:46:41.366882
Concept,Program design,"== Headline ==

A process of designing a program

== Details ==

Program design can be seen as a smaller scope form of [[software design]].

Program design may ultimately focus on [[data structure design]] or [[algorithm design]].

== Metadata ==

* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:55:29.425,2017-07-04 15:26:19.672544
Concept,Testing,"== Headline ==

Testing [[software system]]s or [[program]]s

== Illustration ==

See [[unit testing]], for example.

== Metadata ==

* [[memberOf::Vocabulary:Software engineering]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Software_testing]]
* [[isA::Concept]]

",2013-06-12 14:56:24.467,2017-07-04 15:26:27.006687
Concept,Profiling,"== Headline ==

Dynamic program analysis aiding [[performance]] improvements

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Profiling_(computer_programming)]]

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:55:28.43,2017-07-04 15:26:19.458388
Concept,Filter function,"== Headline ==

A [[higher-order function]] for filtering elements of a list

== Illustration ==

Let's filter a given list of numbers to only retain the odd numbers. In [[Language:Haskell]], we would use the filter function as follows:

<syntaxhighlight lang=""haskell"">
Prelude> filter odd [1,2,3,4,5]
[1,3,5]
</syntaxhighlight>

That is, ''filter'' is applied to a predicate (i.e., a function to return a Boolean) and a list; ''filter'' returns the list of those elements that satisfy the predicate. The higher-order function ''filter'' can be defined as follows:

<syntaxhighlight lang=""haskell"">
-- Define filter via pattern matching
filter :: (a -> Bool) -> [a] -> [a]
filter p [] = []
filter p (x:xs) = if p x then x : ys else ys
  where
    ys = filter p xs
</syntaxhighlight>

For what it matters, the ''filter'' function could also be defined in terms of the [[fold function]], thereby reusing a recursion scheme as opposed to the explicitly recursive definition above.

<syntaxhighlight lang=""haskell"">
-- Define filter via foldr
filter' p = foldr f []
  where
    f x = if p x then (:) x else id
</syntaxhighlight>

Further, we can also define the ''filter'' function in terms of list comprehension; in this manner we hint at the meaning of list comprehensions because, in fact, list comprehensions correspond to syntactic sugar whose elimination also involves the [[Filter function]].

<syntaxhighlight lang=""haskell"">
-- Define filter via list comprehension
filter'' :: (a -> Bool) -> [a] -> [a]
filter'' p xs = [ x | x <- xs, p x]
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Common function]]
* [[instanceOf::Higher-order function]]
* [[sameAs::http://en.wikipedia.org/wiki/Filter_(higher-order_function)]]
",2013-06-12 14:53:57.273,2017-07-04 13:44:41.342429
Script,The Expression Problem,"== Headline ==

A lecture on the [[Expression problem]] as part of the [[Course:Programming in Koblenz]]



== Material ==

<media url=""http://www.slideshare.net/rlaemmel/the-expression-problem-as-part-of-the-the-ptt-lecture""/>


== Concepts ==

* [[Modularity]]
* [[Expression problem]]
* [[Visitor pattern]]



== Languages ==

* [[Language:Java]]



== Technologies ==

* [[Technology:GitHub]]
* [[Technology:Gradle]]
* [[Technology:Eclipse]]



== Features ==

* [[Feature:Hierarchical_company]]
* [[Feature:Total]]
* [[Feature:Cut]]



== Contributions ==

* [[Contribution:javaComposition]]
* [[Contribution:javaInheritance]]
* [[Contribution:javaStatic]]
* [[Contribution:javaVisitor]]



== Information ==

* [[Information:Download]]
* [[Information:Contact]]



== Metadata ==

* [[instanceOf::Course:Programming in Koblenz]]
* ",2013-06-12 15:00:57.798,2017-07-04 13:47:20.539784
Concept,XML processing,"== Headline ==

Programming in the [[Language:XML]] domain, i.e., on [[Language:XML]] data

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::http://msdn.microsoft.com/en-us/library/aa478996.aspx]]
* [[isA::Concept]]

",2013-06-12 14:56:57.083,2017-07-04 15:26:31.994697
Concept,Program optimization,"== Headline ==

The improvement of a program's [[performance]]

== Resource ==

* [[sameAs::http://en.wikipedia.org/wiki/Program_optimization]]
* [[relatesTo::http://en.wikipedia.org/wiki/Performance_tuning]]

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:55:30.65,2017-07-04 15:26:19.803619
Concept,Fragment locator,"== Headline ==

A program that locates fragments in files

== Details ==

See the notion of [[fragment location]] for details.

== Metadata ==

* [[memberOf::Vocabulary:Software language engineering]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:01.769,2017-07-04 13:44:41.882181
Concept,Testing framework,"== Headline ==

A framework for authoring and running automated tests

== Metadata ==

* [[isA::Software technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Test_automation_framework]]
* [[relatesTo::http://c2.com/cgi/wiki?TestingFramework]]
",2013-06-12 14:56:24.933,2017-07-04 15:26:27.048076
Concept,Random number generator,"== Headline ==

an algorithm that generates a sequence of [[random number]]s

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Random_number_generation]]
* [[isA::Concept]]

",2013-06-12 14:55:39.463,2017-07-04 15:26:20.374369
Concept,Service-oriented architecture,"== Intent ==

A set of principles for creating interoperable software with reusable [[Component|components]]

== Metadata ==

* [[instanceOf::Multi-tier architecture]]
* [[sameAs::http://en.wikipedia.org/wiki/Service\_oriented\_architecture]]
",2013-06-12 14:56:01.438,2017-07-04 13:44:57.276209
Concept,Equation,"== Headline ==

a unit of defining a [[Function]] in [[functional programming]]

== Metadata ==

* [[instanceOf::Language construct]]
* [[memberOF::Vocabulary:Functional programming]]
",2013-06-12 14:53:54.038,2017-07-04 13:44:40.817577
Concept,Front Controller pattern,"== Headline ==

A [[design pattern]] for a centralized entry point for handling requests

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Front_Controller_pattern]]
* [[instanceOf::Design pattern]]
* [[relatesTo::Model View Controller]]
",2013-06-12 14:54:02.249,2017-07-04 13:44:41.927252
Concept,101module,"== Headline ==

A unit of functionality as part of [[101worker]]

== Description ==

Modules capture functionality of the [[101project]] and they are executed by the [[101worker]]. Modules analyze resources in the [[101repo]] and the content of the [[101wiki]] including semantic properties; modules synthesize information that is deployed on the web as [[101data]] and made discoverable through the [[101explorer]]. All modules are collected by a designated namespace: [[Namespace:Module]]. See [[Information:Module]] for how to develop a new module.

== Metadata ==
* ",2013-06-12 14:52:49.828,2017-07-04 13:44:34.765932
Concept,Programming paradigm,"== Headline ==

A fundamental style of programming

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Programming_paradigm]]
* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:55:32.633,2017-07-04 15:26:20.037391
Technology,GHC,"== Headline ==

A [[Language:Haskell|Haskell]] [[compiler]]

== Details ==

GHC stands for Glasgow Haskell Compiler. Strictly speaking, GHC is more than just a compiler; it is a distribution that contains other components of language implementation. In particular, the distribution also contains [[Technology:GHCi]] which is an interpreter.

== Metadata ==

* [[instanceOf::Compiler]]
* [[partOf::Technology:Haskell Platform]]
* [[sameAs::http://www.haskell.org/ghc/]]
*

",2013-06-12 15:01:14.116,2017-07-04 13:47:27.795126
Concept,Bit,"== Headline ==

the [[primitive data type]] of bits {0,1}

== Metadata ==
* [[instanceOf::Primitive data type]]
",2013-06-12 14:53:23.787,2017-07-04 13:44:38.277869
Language,Java manifest file,"== Intent ==

a metadata language Java

== Description ==

Manifest files usually contain metadata about Java archives. It often describes the Java archive, the contents of it is used for or how it is used.

== Metadata ==
* [[sameAs::http://www.fileinfo.com/extension/mf]]
* ",2013-06-12 15:00:31.03,2017-07-04 13:46:41.382387
Language,Launch file,"== Intent ==

a language for launch configurations

== Description ==

Launch files contain launch configurations. They are mainly used by Eclipse.
== Metadata ==
* ",2013-06-12 15:00:31.3,2017-07-04 13:46:41.391127
Language,Markdown,"== Headline ==

A markup-based documentation language

== Metadata ==

* [[instanceOf::Markup language]]
* [[sameAs::http://en.wikipedia.org/wiki/Markdown]]
* [[relatesTo::http://daringfireball.net/projects/markdown/]]
",2013-06-12 15:00:31.638,2017-07-04 13:46:41.402797
Concept,Data-access layer,"== Headline ==

the implementation of data access in a [[three-tier architecture]]

== Metadata ==

* [[instanceOf::Architectural component]]
",2013-06-12 14:53:36.63,2017-07-04 13:44:39.537441
Concept,Data composition,"== Headline ==

Composition of compound data from parts

== Note ==

[[Data composition]] is not an established term, but it naturally arises as a generalization of existing notions that are used in [[data modeling]] and [[programming]]. A common form of [[data composition]] is [[object composition]], which is actually sometimes also defined in a broad enough sense, not to be limited to [[object]]s in the sense of [[OO programming]]. For clarity, the general term [[data composition]] is used on this wiki, whenever appropriate.

== Description ==

[[Data composition]] entails component entities (e.g., primitive data or previously composed data) and compound entities (e.g., [[object]]s, [[tuple]]s, or [[record]]s). Composition means that the components (say, the parts) are combined to form a compound (say, a whole). A principle means of going beyond [[data composition]] is to leverage [[data variation]].

== Illustration ==

The following [[Language:Haskell]]-based data model for the [[@system]] leverages [[data composition]] systematically. The [[data model]] is based on [[algebraic data type]]s. The data types for companies, departments, and employees declare a single constructor to serve for [[data composition]]. Basic types for numbers and strings are used for some components. List types are also used.

<syntaxhighlight lang=""haskell"">
data Company = Company Name [Department]
data Department = Department Name Manager [Department] [Employee]
data Employee = Employee Name Address Salary
type Manager = Employee
type Name = String
type Address = String
type Salary = Float
</syntaxhighlight>

The snippet originates from [[Contribution:haskellComposition]].

== Metadata ==

* [[instanceOf::Composition]]
* [[memberOf::Vocabulary:Data modeling]]
* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::Object composition]]
* [[relatesTo::Data variation]]

",2013-06-12 14:53:37.054,2017-07-04 13:44:39.688618
Language,MegaL,"== Headline ==

A language for megamodeling

== Metadata ==
* [[instanceOf::Modeling language]]
* [[sameAs::http://softlang.uni-koblenz.de/mega/]]
* ",2013-06-12 15:00:31.959,2017-07-04 13:46:41.413397
Concept,Total order,"== Headline ==

A transitive, antisymmetric, and total (binary) relation on some set

== Illustration ==

In programming, total order serves for comparison of values. For instance, in [[Language:Haskell]], we may leverage total order on numbers as follows:

<syntaxhighlight lang=""haskell"">
> 41 < 42
True
> max 41 42
42
</syntaxhighlight>

Some form of [[polymorphism]] may be used in many programming languages to define such a comparison-relate total order on given data types. For instance, in Haskell, there is a [[type class]] ''Ord'' for total order; its key member is ''compare'' which returns either LT, EQ, or GT. For instance:

<syntaxhighlight lang=""haskell"">
> compare 41 42
LT
</syntaxhighlight>

Let us illustrate the definition a total order for a simple data type for natural numbers:

<syntaxhighlight lang=""haskell"">
-- Peano natural numbers
data Nat = Zero | Succ Nat
</syntaxhighlight>

Before we define a total order for natural numbers, let us define [[equality]], as it is effectively a precondition for total order. In Haskell, we instantiate the [[type class]] ''Eq'' hence:

<syntaxhighlight lang=""haskell"">
-- Equality of natural numbers
instance Eq Nat
  where
    Zero == Zero = True
    Zero == (Succ _) = False
    (Succ _) == Zero = False
    (Succ x) == (Succ y) = x == y
</syntaxhighlight>

Thus, all pairs of constructor patterns are examined and accordingly mapped to truth values while subterms are processed recursively, when necessary. We can test for equality as follows:

<syntaxhighlight lang=""haskell"">
> Succ Zero == Zero
False
> Succ Zero == Succ Zero
True
</syntaxhighlight>

The type-class instance for total order follows the same scheme:

<syntaxhighlight lang=""haskell"">
-- Total order on natural numbers
instance Ord Nat
  where
    compare Zero Zero = EQ
    compare Zero (Succ _) = LT
    compare (Succ _) Zero = GT
    compare (Succ x) (Succ y) = compare x y
</syntaxhighlight>

We can test for total order as follows:

<syntaxhighlight lang=""haskell"">
> compare (Succ Zero) Zero
GT
> compare (Succ Zero) (Succ Zero)
EQ
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Total_order]]
* [[sameAs::http://mathworld.wolfram.com/TotalOrder.html]]
* [[isA::Concept]]

",2013-06-12 14:56:31.327,2017-07-04 15:26:27.689081
Concept,Transformation,"== Headline ==

An [[IO behavior]] that transforms given data

== Details ==

The [[IO behavior]] is said to ''transform'' data in that it will essentially compute a result of the same type as the input's type or similarly complex type. (Compare this with the concept of [[query]].) A transformation is either [[Type-preserving transformation|type-preserving]] or [[Type-changing transformation|type-changing]] -- depending on the fact whether input and output of a transformation are of the same type or not. A transformation is either [[Vertical transformation|vertical]] or [[Horizontal transformation|horizontal]] -- depending on the fact whether the abstraction level is changed or preserved. A transformation is either [[Pure IO behavior|pure]] or [[Impure IO behavior|impure]] -- depending on the fact whether the input data (or anything else) is modified by the transformation.

== Metadata ==

* [[relatesTo::http://dx.doi.org/10.1016/j.entcs.2005.10.021]]
* [[relatesTo::http://dx.doi.org/10.1016/j.jsc.2004.12.011]]
* [[relatesTo::http://en.wikipedia.org/wiki/Transformation]]
* [[relatesTo::http://en.wikipedia.org/wiki/Data transformation]]
* [[relatesTo::http://en.wikipedia.org/wiki/Model transformation]]
* [[relatesTo::http://en.wikipedia.org/wiki/Program transformation]]
* [[relatesTo::http://en.wikipedia.org/wiki/XML transformation]]
* [[relatesTo::http://en.wikipedia.org/wiki/Transformation of text]]
* [[isA::IO behavior]]
* [[memberOf::Vocabulary:Computing]]

",2013-06-12 14:56:31.974,2017-07-04 15:26:27.802395
Concept,GUI programming,"== Headline ==

The [[programming domain]] of [[GUI]] development

== Metadata ==

* [[instanceOf::Programming domain]]
",2013-06-12 14:54:04.698,2017-07-04 13:44:42.534895
Concept,Tuple type,"== Headline ==

A [[data type]] for [[tuple]]s

== Illustration ==

We illustrate here the Haskell approach to tuple types.

We can form tuples of different length: pairs, triples, quadruples, ....:

<syntaxhighlight lang=""haskell"">
Prelude> (1,""2"")
(1,""2"")
Prelude> (1,""2"",True)
(1,""2"",True)
Prelude> (1,""2"",True,42.0)
(1,""2"",True,42.0)
</syntaxhighlight>

These tuples are of different tuple types:

<syntaxhighlight lang=""haskell"">
Prelude> (1,""2"") :: (Int,String)
(1,""2"")
Prelude> (1,""2"",True) :: (Int,String,Bool)
(1,""2"",True)
Prelude> (1,""2"",True,42.0) :: (Int,String,Bool,Float)
(1,""2"",True,42.0)
</syntaxhighlight>

We can think of these tuple types as being defined as [[polymorphic type]]s like this:

<syntaxhighlight lang=""haskell"">
type (a,b) = (a,b)
type (a,b,c) = (a,b,c)
type (a,b,c,d) = (a,b,c,d)
</syntaxhighlight>

Specific tuple types can also be expressed by other means than a designated type constructor for such types. For instance, the illustrative tuple types given above could also be declared like this:

<syntaxhighlight lang=""haskell"">
data TupleType1 = TupleType1 Int String
data TupleType2 = TupleType2 Int String Bool
data TupleType3 = TupleType3 Int String Bool Float
</syntaxhighlight>

(We reuse type names as constructor symbols here, which is possible in Haskell, as these are separate namespaces.) The advantage of the type type constructors (of different arities) is that they capture universally (polymorphically) the notion of ordered tuples, that is, for arbitrary operand types.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Tuple]]
* [[instanceOf::Data type]]
* [[memberOf::Vocabulary:Data structure]]



      ",2013-06-12 14:56:33.694,2017-07-04 13:44:59.762456
Concept,Source code repository,"== Headline ==

A file archive and web hosting facility for source code

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Source_code_repository]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Development technology]]
",2013-06-12 14:56:07.984,2017-07-04 15:26:24.777551
Concept,Type-class polymorphism,"== Headline ==

A form of [[bounded polymorphism]] based on [[type class]]es as in [[Language:Haskell]]

== Illustration ==

See [[type class]].

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Type_class]]
* [[isA::Bounded polymorphism]]
* [[isA::Ad-hoc polymorphism]]
",2013-06-12 14:56:35.598,2017-07-04 15:26:28.725324
Concept,Insertion sort,"== Headline ==

The Insertion sort [[sorting algorithm]]

== Citation ==

(http://en.wikipedia.org/wiki/Insertion_sort, 21 April 2013)

Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list. On a repetition, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.

== Illustration ==

See the visualization of Insertion sort on Wikipedia:

http://en.wikipedia.org/wiki/Insertion_sort

See various illustrations of Insertion sort as available on YouTube, e.g.:

<media url=""http://www.youtube.com/watch?v=ROalU379l3U""/>

=== Iterative insertion sort in Java ===

Given a list of length ''n'', in the already sorted prefix 0..''i''-1, elements are moved to the right to make space for the next element ''x'' from the as yet unsorted postfix ''i''..''n''-1 to be inserted in the right position.

<syntaxhighlight lang=""java"">
	public static void insertionSort(int[] a) {
		for (int i = 1; i < a.length; i++) {
			int x = a[i];
			int j = i;
			while (j > 0 && a[j - 1] > x) {
				a[j] = a[j - 1];
				a[j - 1] = x;
				j--;
			}
		}
	}
</syntaxhighlight>

=== Recursive insertion sort in Haskell ===

<syntaxhighlight language=haskell>
-- Polymorphic sorting
sort :: Ord a => [a] -> [a]
sort xs = inserts xs []

-- Insert given elements in an emerging result
inserts :: Ord a => [a] -> [a] -> [a]
inserts [] r = r
inserts (x:xs) r = inserts xs (insert x r)

-- Insert a given element in a list
insert :: Ord a => a -> [a] -> [a]
insert x [] = [x]
insert x (y:ys) =
  if x <= y
    then x : y : ys
    else y : insert x ys
</syntaxhighlight>

The main sorting function relies on two helpers to model sorting as repeated insertion. That is, the ''inserts'' helper successfully inserts all elements into an emerging result list; the ''insert'' help perform a single insert operation such that the given element is inserted into a readily sorted list in a way such that the result is sorted, too. The first equation of ''insert'' models that any value can be trivially inserted into an empty list. The second equation of ''insert'' compares the given value ''x'' with the head ''y'' of the sorted list. If ''x<=y'' then ''x'' belongs before ''y''; otherwise ''y'' is maintained as the head and insertion continues into the tail of the list by means of recursion.

The implementation is exercised as follows:

<syntaxhighlight language=haskell>
main = do
  let input = [2,4,3,1,4]
  print $ sort input -- [1,2,3,4,4]
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Insertion_sort]]
* [[instanceOf::Sorting algorithm]]
",2013-06-12 14:54:21.064,2017-07-04 13:44:44.385387
Concept,Interaction,"== Headline ==

The [[capability]] of interaction between the user and the system

== Description ==

The capability is usually realized by means of a [[user interface]].

== Metadata ==

* [[instanceOf::Capability]]
* [[sameAs::http://en.wikipedia.org/wiki/Human-computer_interaction]]
",2013-06-12 14:54:22.796,2017-07-04 13:44:44.450566
Concept,Lexical analysis,"== Headline ==

The process of converting a sequence of characters into a sequence of tokens

== Details ==

The term [[lexer]] is used to refer to the program performing lexical analysis.

See also the notion of [[parsing]].

== Metadata ==

* [[memberOf::Vocabulary:Software language engineering]]
* [[sameAs::http://en.wikipedia.org/wiki/Lexical_analysis]]
* [[instanceOf::Concept]]

",2013-06-12 14:54:31.699,2017-07-04 13:44:45.250073
Concept,MVC,"== Headline ==

Division of an architecture into model, view, and controller

== Discussion ==

The  MVC (Model View Controller) [[Pattern|pattern]] divides a program into three major parts:

* Model
* View
* Controller

== @Model ==

A part of [[partOf::MVC]] that handles the user input and notifies both the model and the view, if there are any changes in one of them. If there are changes in the model, the view will collect them directly from the model, when it gets notified. If there are changes in the view, the controller will delegate this to the model <cite>Burbeck1992MVC</cite>.

== @View ==

A part of [[partOf::MVC]] that contains the [[user interface]].

== @Controller ==

A part of [[partOf::MVC]] that contains the data.

== Metadata ==

* [[instanceOf::Architectural pattern]]
* [[sameAs::http://st-www.cs.illinois.edu/users/smarch/st-docs/mvc.html]]

",2013-06-12 14:54:39.177,2017-07-04 13:44:46.110168
Concept,Map function,"== Headline ==

A [[higher-order function]] to apply an argument function to all elements of a list

== Illustration ==

Let's map over a given list of numbers to increment them. In [[Language:Haskell]], we would use the map function as follows:

<syntaxhighlight lang=""haskell"">
>  map (+1) [1,2,3,4,5]
[2,3,4,5,6]
</syntaxhighlight>

That is, ''map'' is applied to a function and a list; ''map'' returns a list of the same length as the input list which each element ""transformed"" by the argument function. The higher-order function ''map'' can be defined as follows:

<syntaxhighlight lang=""haskell"">
-- Define map via pattern matching
map :: (a -> b) -> [a] -> [b]
map f [] = []
map f (x:xs) = f x : map f xs
</syntaxhighlight>

For what it matters, the ''map'' function could also be defined in terms of the [[fold function]], thereby reusing a recursion scheme as opposed to the explicitly recursive definition above.

<syntaxhighlight lang=""haskell"">
-- Define map via foldr
map' :: (a -> b) -> [a] -> [b]
map' f = foldr ((:) . f) []
</syntaxhighlight>

Further, we can also define the ''map'' function in terms of list comprehension; in this manner we hint at the meaning of list comprehensions because, in fact, list comprehensions correspond to syntactic sugar whose elimination also involves the [[Map function]].

<syntaxhighlight lang=""haskell"">
-- Define map via list comprehension
map'' :: (a -> b) -> [a] -> [b]
map'' f xs = [ f x | x <- xs ]
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Common function]]
* [[instanceOf::Higher-order function]]
* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Map_(higher-order_function)]]
",2013-06-12 14:54:41.876,2017-07-04 13:44:46.356471
Theme,Java mapping,"== Headline ==

[[Language:Java]] theme of implementations that travel technological spaces

== Description ==

Subject to appropriate bridges, i.e., subject to [[Mapping|mapping]] facilities, any programming language can be made to access and process [[model]]s, [[Language:XML]], relational database [[table]]s, and [[text]] (concrete syntax) in a type-based (say, schema-aware or metamodel-aware or grammar-aware) manner. The present theme collects corresponding implementations for the programming language [[Language:Java]].

== Metadata ==

* [[isA::Namespace:Theme]]
* ",2013-06-12 15:02:26.513,2017-07-04 15:26:32.729618
Technology,Hadoop,"== Intent ==

a framework for parallel programming in [[Language:Java]]

== Spaces ==

* [[Fileware]]
== Metadata ==
* ",2013-06-12 15:01:24.062,2017-07-04 13:47:28.860699
Concept,Monad transformer,"== Headline ==

a programming idiom for transforming [[monad]]s

== Metadata ==

* [[instanceOf::Programming idiom]]
* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://www.haskell.org/haskellwiki/Monad_Transformers_Explained]]

",2013-06-12 14:54:57.613,2017-07-04 13:44:47.887687
Concept,Objectware,"== Headline ==

A technological space focused on [[OO programming]]

== Metadata ==

* [[instanceOf::Space]]

",2013-06-12 14:55:09.373,2017-07-04 13:44:53.269003
Language,ODF,"== Headline ==

The OpenDocument Format for office applications
== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://opendocumentformat.org/]]
* [[relatesTo::http://en.wikipedia.org/wiki/OpenDocument]]
*
",2013-06-12 15:00:32.299,2017-07-04 13:46:41.425482
Language,OGNL,"== Headline ==

a language for object graph navigation

== Description ==

OGNL stands for ""Object Graph Navigation Language"", but see the technology [[Technology:OGNL]]

== Metadata ==
* [[instanceOf::Scripting language]]
* [[sameAs::http://commons.apache.org/ognl/]]
* ",2013-06-12 15:00:32.71,2017-07-04 13:46:41.439757
Technology,java.text,"== Headline ==

Java library for handling text

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/text/package-summary.html]]
* ",2013-06-12 15:02:16.447,2017-07-04 13:47:33.267499
Language,PDF,"== Headline ==

A file format used to represent documents

== Details ==

PDF stands for Portable Document Format.

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/Portable_Document_Format]]
* ",2013-06-12 15:00:33.043,2017-07-04 13:46:41.453207
Concept,Type class,"== Headline ==

An [[abstraction mechanism]] for [[polymorphism]]

== Illustration ==

Type classes are not to be confused with [[OO class]]es. In fact, type classes may be somewhat compared with [[OO interface]]es. Type classes have been popularized by Haskell. Similar constructs exist in a few other languages. Type classes capture operations that may be defined for many types. The operations can be defined differently for each type, i.e., for each instance of a type class.

All subsequent illustrations leverage Haskell. Let us consider the following datatypes of bits and bitstreams which represent unsigned binary numbers. We are going to enrich these datatypes with some functionality eventually, with the help of type classes:

<syntaxhighlight lang=""haskell"">
-- A bit can be zero or one
data Bit = Zero | One

-- Bit streams of any length
newtype Bits = Bits { getBits :: [Bit] }
</syntaxhighlight>

Thus, the binary number ""101"" would be represented as follows:

<syntaxhighlight lang=""haskell"">
Bits [One,Zero,One]
</syntaxhighlight>

Now suppose that we want to define some standard operations for bits and bitstreams: [[equality]], [[total order]], [[unparsing]] to text, [[parsing]] from text, and possibly others. Let us begin with unparsing (conversion) to text. To this end, we should implement Haskell's type-class-polymorphic function ''show'' so that it produces text like this:

<syntaxhighlight lang=""haskell"">
> show (Bits [One,Zero,One])
""101""
</syntaxhighlight>

Here is the type class ''Show'' which declares indeed the polymorphic ''show'' function:

<syntaxhighlight lang=""haskell"">
class Show a
  where
    show :: a -> String
</syntaxhighlight>

In reality, the type class has not just one member, ''show'', as shown, but we omit the discussion of the other members here for brevity. The type class is parameterized in a type ''a'' for the actual type for which to implement the members. Here are the [[type-class instance]]s for bits and bit streams:

<syntaxhighlight lang=""haskell"">
-- Show bits
instance Show Bit
  where
    show Zero = ""0""
    show One = ""1""

-- Show bit streams
instance Show Bits
  where
    show = concat . map show . getBits
</syntaxhighlight>

Thus, the instance fills the position of the type parameter with an actual type such as ''Bit'' and ''Bits''. Also, the member function ''show'' is actually defined, while assuming the specific type. We show a bit as either ""0"" or ""1"". We show a bit stream by showing all the individual bits and concatenating the results.

The inverse of ''show'' is ''read''. There is also a corresponding type class ''Read'', which we skip here for brevity. Let us consider equality instead. There is again a type class which captures the potential of equality for many types:

<syntaxhighlight lang=""haskell"">
class Eq a
  where
    (==) :: a -> a -> Bool
</syntaxhighlight>

The member ""(==)"" is the infix operation for testing two bit streams to be equal. Arguably, bit streams are equal, if they are of the same length and they agree on each other bit by bit. In fact, the following definition is a bit more general in that it also trims away preceding zero bits:

<syntaxhighlight lang=""haskell"">
-- Test bits for equality
instance Eq Bit
  where
    Zero == Zero = True
    Zero == One = False
    One == One = True
    One == Zero = False

-- Test bit streams for equality
instance Eq Bits
  where
    x == y =  length x' == length y'
           && and (map (uncurry (==)) (zip x' y'))
      where
        x' = trim (getBits x)
        y' = trim (getBits y)
        trim [] = []
        trim z@(One: ) = z
        trim (Zero:z) = trim z
</syntaxhighlight>

For instance:

<syntaxhighlight lang=""haskell"">
-- Test bit streams for equality
> let b101 = read ""101"" :: Bits
> let b0101 = read ""0101"" :: Bits
> let b1101 = read ""1101"" :: Bits
> b101 == b0101
True
> b101 == b1101
False
</syntaxhighlight>

Actually, bit streams are (unsigned) binary numbers. Thus, we should also instantiate the corresponding type classes for number types. Operations on number types are grouped in multiple type classes. The type class ''Num'' deals with addition, subtraction, multiplication, and a few other operations, but notably no division:

<syntaxhighlight lang=""haskell"">
class (Eq a, Show a) => Num a
  where
    (+) :: a -> a -> a
    (*) :: a -> a -> a
    (-) :: a -> a -> a
    negate :: a -> a
    abs :: a -> a
    signum :: a -> a
    fromInteger :: Integer -> a
</syntaxhighlight>

We would like to instantiate the ''Num'' type class for bit streams. There are different ways of doing this. For instance, we could define addition by bitwise addition, right at the level of bit streams, or we could instead resort to existing number types. For simplicity, we do indeed conversions from and to ''Integer'', in fact, any ''integral'' type:

<syntaxhighlight lang=""haskell"">
-- Convert bits to an integer
bits2integral :: Integral a => Bits -> a
bits2integral = foldl f 0 . getBits
  where
    f a b = a * 2 + (bit2int b)
    bit2int Zero = 0
    bit2int One = 1

-- Convert a (non-negative) integral to bits
integral2bits :: Integral a => a -> Bits
integral2bits i | i < 0 = error ""Bits are unsigned""
integral2bits i = Bits (f [] i)
  where
    f xs 0 = xs
    f xs i = f (x:xs) (i `div` 2)
      where
        x = if odd i then One else Zero
</syntaxhighlight>

On these grounds, we can trivially instantiate the ''Num'' type class for ''Bits'' by simply reusing the existing instance for Integer through systematic conversions.

<syntaxhighlight lang=""haskell"">
-- Bits as a Num type
instance Num Bits
  where
    x + y = integral2bits z'
      where
        x' = bits2integral x
        y' = bits2integral y
        z' = x' + y'
    x * y = integral2bits z'
      where
        x' = bits2integral x
        y' = bits2integral y
        z' = x' * y'
    x - y = integral2bits z'
      where
        x' = bits2integral x
        y' = bits2integral y
        z' = x' - y'
    abs = id
    signum = integral2bits
           . signum
           . bits2integral
    fromInteger = integral2bits
</syntaxhighlight>

The examples given so far are concerned with predefined type classes. However, type classes can also be declared by programmers in their projects. Let's assume that we may need to convert data from different formats into ``Int''s. Here is a corresponding type class with a few instances:

<syntaxhighlight lang=""haskell"">
class ToInt a
  where
    toInt :: a -> Maybe Int

instance ToInt Int
  where
    toInt = Just

instance ToInt Float
  where
    toInt = Just . round

instance ToInt String
  where
    toInt s =
      case reads s of
        [(i, """")] -> Just i
        _ -> Nothing
</syntaxhighlight>

The conversion can be illustrated like this:

<syntaxhighlight lang=""haskell"">
*Main> toInt ""5""
Just 5
*Main> toInt ""foo""
Nothing
*Main> toInt (5::Int)
Just 5
*Main> toInt (5.5::Float)
Just 6
</syntaxhighlight>

In Haskell, type-class parameters are not limited to types, but, in fact, type classes may be parameterized in type constructors. Consider the following type class which models different notions of size for container types:

<syntaxhighlight lang=""haskell"">
-- Notions of size for container types
class Size f
  where
    -- Number of constructors
    consSize :: f a -> Int
    -- Number of elements
    elemSize :: f a -> Int
</syntaxhighlight>

Here is a straightforward instance for lists:

<syntaxhighlight lang=""haskell"">
instance Size []
  where
    consSize = (+1) . length
    elemSize = length
</syntaxhighlight>

Let's also consider sizes for [[rose tree]]s:

<syntaxhighlight lang=""haskell"">
-- Node-labeled rose trees
data NLTree a = NLTree a [NLTree a]
  deriving (Eq, Show, Read)

instance Size NLTree
  where
    consSize (NLTree _ ts) =
        1
      + consSize ts
      + sum (map consSize ts)
    elemSize (NLTree _ ts) =
        1
      + sum (map elemSize ts)

-- Leaf-labeled rose trees
data LLTree a = Leaf a | Fork [LLTree a]
  deriving (Eq, Show, Read)

instance Size LLTree
  where
    consSize (Leaf _) = 1
    consSize (Fork ts) =
        consSize ts
      + sum (map consSize ts)
    elemSize (Leaf _) = 1
    elemSize (Fork ts) =
      sum (map elemSize ts)
</syntaxhighlight>

A few illustrations are due:

<syntaxhighlight lang=""haskell"">
*Main> let list = [1,2,3]
*Main> let nltree = NLTree 1 [NLTree 2 [], NLTree 3 []]
*Main> let lltree = Fork [Leaf 1, Fork [Leaf 2, Leaf 3]]
*Main> consSize list
4
*Main> elemSize list
3
*Main> consSize nltree
8
*Main> elemSize nltree
3
*Main> consSize lltree
9
*Main> elemSize lltree
3
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Type class]]
* [[instanceOf::Abstraction mechanism]]
* [[instanceOf::Vocabulary:Haskell]]
* [[relatesTo::http://www.haskell.org/tutorial/classes.html]]
* [[relatesTo::Document:LaemmelO06]]
* [[relatesTo::Resource:Haskell%27s overlooked object system]]

      ",2013-06-12 14:56:37.858,2017-07-04 13:45:00.631748
Language,JAR,"== Headline ==

An archive file format used on the Java platform

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/JAR_(file_format)]]
* ",2013-06-12 15:00:28.435,2017-07-04 13:46:41.222847
Language,PHP,"== Intent ==

A [[scripting language]] for [[server-side scripting]]

== Description ==

PHP is a [[server-side scripting|server-side]] [[scripting language]] with conformities to [[Language:C]], [[Language:C++|C++]], [[Language:Perl]] and [[Language:Java]]

== Metadata ==
* [[instanceOf::Scripting language]]
* [[sameAs::http://www.php.net/]]
* [[relatesTo::http://en.wikipedia.org/wiki/PHP]]
* ",2013-06-12 15:00:33.339,2017-07-04 13:46:41.476098
Concept,Rose tree,"== Headline ==

A [[tree]] with an arbitrary number of sub-trees per node
== Illustration ==

Such a tree could carry information in all nodes, in which case we speak of a node-labeled rose tree:

<syntaxhighlight lang=""haskell"">
data NLTree a = NLTree a [NLTree a]
  deriving (Eq, Show, Read)
</syntaxhighlight>

For instance:

<syntaxhighlight lang=""haskell"">
sampleNLTree =
  NLTree 1 [
    NLTree 2 [],
    NLTree 3 [NLTree 4 []],
    NLTree 5 []]
</syntaxhighlight>

Labeling in a rose tree may also be limited to the leaves, in which case we speak of a leaf-labeled rose tree:

<syntaxhighlight lang=""haskell"">
data LLTree a = Leaf a | Fork [LLTree a]
  deriving (Eq, Show, Read)
</syntaxhighlight>

For instance:

<syntaxhighlight lang=""haskell"">
sampleLLTree =
  Fork [
    Leaf 1,
    Fork [Leaf 2],
    Leaf 3]
</syntaxhighlight>

For what it matters, we can make the type constructors for rose trees [[functor]]s and [[foldable type]]s:

<syntaxhighlight lang=""haskell"">
instance Functor NLTree
  where
    fmap f (NLTree x ts) = NLTree (f x) (fmap (fmap f) ts)

instance Foldable NLTree
  where
    foldr f z (NLTree x ts) = foldr f z (x : concat (fmap toList ts))

instance Functor LLTree
  where
    fmap f (Leaf x) = Leaf (f x)
    fmap f (Fork ts) = Fork (fmap (fmap f) ts)

instance Foldable LLTree
  where
    foldr f z (Leaf x) = x `f` z
    foldr f z (Fork ts) = foldr f z (concat (fmap toList ts))
</syntaxhighlight>

The ''fmap'' definitions basically push ''fmap'' into the subtrees while using the list instance of ''fmap'' to process lists of subtrees. The ''foldr'' definitions basically reduce ''foldr'' on trees to 'foldr' on lists by apply ''toList'' on subtrees. Here we note that ''toList'' can be defined for any foldable type as follows:

<syntaxhighlight lang=""haskell"">
toList :: Foldable t => t a -> [a]
toList = foldMap (\x->[x])
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Rose_Tree]]
* [[relatesTo::http://www.haskell.org/haskellwiki/Algebraic_data_type#Rose_tree]]
* [[instanceOf::Data structure]]
* [[memberOf::Vocabulary:Functional programming]]

      ",2013-06-12 14:55:51.324,2017-07-04 13:44:56.412036
Concept,Fold algebra,"== Headline ==

A [[data type]] for holding the ingredients of a [[fold]]

== Illustration ==

Consider the (right-associative) [[fold function]] as a point of departure:

<syntaxhighlight lang=""haskell"">
-- Recalling the foldr combinator
foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f z [] = z
foldr f z (x:xs) = f x (foldr f z xs)
</syntaxhighlight>

Informally, the first two arguments are designed to essentially replace occurrences of the two possible constructors for lists. Even their types follow the types of the constructors, except that the list type has been replaced by a type parameter ''b'' in order to be parametric in the result type of the fold. We can also group the first two arguments in an algebra as follows:

<syntaxhighlight lang=""haskell"">
-- The fold algebra for lists
data ListAlg a b
   = ListAlg {
       nil :: b,
       cons :: a -> b -> b
     }
</syntaxhighlight>

For comparison, we also show an explicit declaration of lists so that the correspondence between algebra and data type becomes strikingly clear:

<syntaxhighlight lang=""haskell"">
-- An explicit declaration of lists
data List a = Nil | Cons a (List a)
</syntaxhighlight>

Suppose we would have invoked the normal fold for summation as follows:

<syntaxhighlight lang=""haskell"">
> foldr (+) 0 [1,2,3]
6
</syntaxhighlight>

We can factor the arguments of such a fold as follows:

<syntaxhighlight lang=""haskell"">
-- A fold algebra for summation
sumAlg :: Num a => ListAlg a a
sumAlg = ListAlg { nil = 0, cons = (+) }
</syntaxhighlight>

It remains to actually define a fold function that processes fold algebras:

<syntaxhighlight lang=""haskell"">
-- The algebraic list fold
foldList :: ListAlg a b -> [a] -> b
foldList alg [] = nil alg
foldList alg (x:xs) = cons alg x (foldList alg xs)
</syntaxhighlight>

Thus, we can again sum up elements in a list as follows:

<syntaxhighlight lang=""haskell"">
> foldList sumAlg [1,2,3]
6
</syntaxhighlight>

The concept of fold algebra generalizes for (almost) arbitrary algebraic data types. Here is a development for simple arithmetic expressions where we implement the evaluation function by means of a fold:

<syntaxhighlight lang=""haskell"">
-- A datatype for expression forms
data Expr = Literal Int
          | Add Expr Expr
  deriving (Eq, Show, Read)

-- The fold algebra for expressions
data ExprAlg a
   = ExprAlg {
       literal :: Int -> a,
       add :: a -> a -> a
     }

-- Folds over expressions
foldExpr :: ExprAlg a -> Expr -> a
foldExpr alg (Literal i) = literal alg i
foldExpr alg (Add x y)
  = add alg (foldExpr alg x) (foldExpr alg y)

-- A fold algebra for evaluation
evalAlg :: ExprAlg Int
evalAlg = ExprAlg {
    literal = id,
    add = (+)
  }
</syntaxhighlight>

Thus, expression evaluation is available as follows:

<syntaxhighlight lang=""haskell"">
> foldExpr evalAlg (Add (Add (Literal 20) (Literal 2)) (Literal 20))
42
</syntaxhighlight>

Fold algebras are convenient for a number of reasons. First, recursion is captured, once and for all, by the fold function; the problem-specific parts in the fold algebra do not need to express recursion. Second, fold algebras, once they are first-class citizens, can be reused and adapted via record update; see [[Contribution:tabaluga]].

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[isA::Concept]]

",2013-07-05 08:59:40.521,2017-07-04 15:26:34.068929
Concept,Data requirement,"== Headline ==

A constraint on the data model of a [[software system]] or a [[software component|component]]

== Description ==

[[Requirements analysis]] is typically focused on [[functional requirement|functional]] and [[non-functional requirement]]s with [[data modeling]] typically seen as a separate activity, possibly initiated only in the design phase. In the context  of this wiki, contraints on the [[data model]], e.g., in terms of its expressiveness or shape, are considered requirements, too, and they are subject to a designated classifier for requirements.

Arguably, some [[data requirement]]s could be (partially) turned into [[functional requirement]]s. For example, rather than saying ""''the [[data model]] of the [[@system]] must support an [[association]] for employee mentorship''"" (see [[Feature:Mentoring]]), one could be saying ""''the [[@system]] must support data input, storage, and retrieval of mentors and mentees associated with employees''"". Possibly, some [[data requirement]]s could be (partially) turned into [[non-functional requirement]]s. In the context of this wiki, [[data requirement]]s are deliberately separated, as it is hoped to lead to good [[separation of concerns]] and instructive [[requirement]]s that are modeled or implemented more easily.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Data_modeling]]
* [[isA::Requirement]]
* [[memberOf::Vocabulary:Software engineering]]
",2013-06-12 14:53:39.608,2017-07-04 15:26:07.950283
Concept,State,"== Headline ==

The state of a program or system

== Synonyms ==

* Program state

== Metadata ==
* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/State_(computer_science)]]
* [[relatesTo::http://en.wikipedia.org/wiki/Program_state]]
* [[isA::Concept]]

",2013-06-12 14:56:09.491,2017-07-04 15:26:25.001544
Concept,Structural typing,"== Headline ==

Equivalence of types based on their structure

== Illustration ==

Consider the following declarations in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
type Point = (Float, Float) -- A Cartesian point
type Rectangle = (Float, Float) -- A rectangle with width and height
</syntaxhighlight>

Because both types are defined as [[type synonym]]s, they are subject to structural typing. Thus, points and rectangles are compatible such that a point can be used whereever a rectangle is expected, and vice versa. This is arguably not intended. We may instead define the types as follows:

<syntaxhighlight lang=""haskell"">
data Point = Point Float Float -- A Cartesian point
data Rectangle = Rectangle Float Float -- A rectangle with width and height
</syntaxhighlight>

While both types are structurally equivalent, as both types declare one [[data constructor]] with the exact same types for the [[constructor component]]s, the types are still different as [[nominal typing]] applies for Haskell's [[algebraic data type]]s.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Structural_type_system]]
* [[relatesTo::http://c2.com/cgi/wiki?NominativeAndStructuralTyping]]
* [[relatesTo::Nominal typing]]
* [[isA::Concept]]

",2013-06-12 14:56:12.87,2017-07-04 15:26:26.104453
Language,PNG,"== Headline ==

A bitmapped image format

== Metadata ==
* [[instanceOf::Image format language]]
* [[sameAs::http://en.wikipedia.org/wiki/Portable_Network_Graphics]]
* ",2013-06-12 15:00:33.67,2017-07-04 13:46:41.488484
Concept,Template engine,"== Headline ==

A program for template-based document generation

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Template_processor]]
* [[isA::Software technology]]

",2013-06-12 14:56:20.53,2017-07-04 15:26:26.835911
Concept,Test case,"== Headline ==

executable test data and expected result in [[testing]]

== Synonyms ==

* Test

== Metadata ==

* [[memberOf::Vocabulary:Software engineering]]
* [[sameAs::http://en.wikipedia.org/wiki/Test_case]]
* [[isA::Concept]]

",2013-06-12 14:56:23.171,2017-07-04 15:26:26.886323
Language,Parsec,"== Headline ==

A C-based simulation language

== Metadata ==

* [[sameAs::http://pcl.cs.ucla.edu/projects/parsec]]
* [[instanceOf::Software language]]
* ",2013-06-12 15:00:33.931,2017-07-04 13:46:41.499136
Concept,Type-class instance,"== Headline ==

Type-specific function definitions for a [[type class]]

== Illustration ==

See the concept of [[type class]]es for an illustration.

== Metadata ==

* [[memberOf::Vocabulary:Haskell]]
* [[isA::Concept]]

",2013-06-12 14:56:35.327,2017-07-04 15:26:28.671187
Concept,Software system,"== Headline ==

A system of intercommunicating software components

== Illustration ==

The [[@project]] is obviously concerned with one particular system: the [[@system]] which is actually an imaginary software system that is built time and again in different ways by the various contributions of the project. The [[@system]] it is a [[human resource management system]]. Thus, it deals, for example, with payroll-related management aspects in a company.

== Citation ==

(http://en.wikipedia.org/wiki/Software_system, 14 April 2013)

A software system is a system of intercommunicating components based on software forming part of a computer system (a combination of hardware and software). It ""consists of a number of separate programs, configuration files, which are used to set up these programs, system documentation, which describes the structure of the system, and user documentation, which explains how to use the system"".

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Software_system]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:56:06.591,2017-07-04 15:26:24.361836
Concept,Record type,"== Headline ==

A [[type]] of [[record]]s
== Illustration ==

Record types are available or conveniently expressible in many programming languages.
== Record types in Haskell ==

[[Language:Haskell]] provides syntactic sugar for [[algebraic data type]]s such that [[constructor component]]s can be be labeled so that they can be accessed in a record-like manner. Consider, for example, the following algebraic data type for points:

<syntaxhighlight lang=""haskell"">
data Point = Point Float Float
</syntaxhighlight>

The [[data constructor]] can be defined using record notation instead:

<syntaxhighlight lang=""haskell"">
data Point = Point { getX :: Float, getY :: Float }
</syntaxhighlight>

Here is an example of constructing a record:

<syntaxhighlight lang=""haskell"">
myPoint :: Point
myPoint = Point { getX = 42, getY = 88 }
</syntaxhighlight>

Here is an example of accessing record components:

<syntaxhighlight lang=""haskell"">
-- Compute the distance between two points
distance :: Point -> Point -> Float
distance p1 p2 = sqrt (deltax^2+deltay^2)
  where
    deltax = abs (getX p1 - getX p2)
    deltay = abs (getY p1 - getY p2)
</syntaxhighlight>

The constructors and component selectors are of these types:

<syntaxhighlight lang=""haskell"">
> :t Point
Point :: Float -> Float -> Point
> :t getX
getX :: Point -> Float
> :t getY
getY :: Point -> Float
</syntaxhighlight>

We can also update records in the sense that we can construct new records from existing records by updating specific components. For instance:

<syntaxhighlight lang=""haskell"">
myPoint' :: Point
myPoint' = myPoint { getY = 77 }
</syntaxhighlight>

For what it matters, the position-based approach to construction, as with normal algebraic data types, can also be used. Thus, component selectors can be omitted at will. This is demonstrated with constructing the same point as above:

<syntaxhighlight lang=""haskell"">
myPoint :: Point
myPoint = Point 42 88
</syntaxhighlight>

Component selectors are also omitted during pattern matching:

<syntaxhighlight lang=""haskell"">
-- Represent point as pair
toPair :: Point -> (Float, Float)
toPair (Point x y) = (x, y)
</syntaxhighlight>

The record notation can also be used in algebraic data types with multiple constructors, e.g.:

<syntaxhighlight lang=""haskell"">
data Shape = Circle { getRadius :: Float }
           | Rectangle { getWidth :: Float, getHeight :: Float }
</syntaxhighlight>

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Record_(computer_science)]]
* [[isA::Type]]
* [[memberOf::Vocabulary:Data structure]]
",2013-06-12 14:55:41.847,2017-07-04 15:26:20.984339
Concept,Multithreading,"== Headline ==

A lecture on [[multithreading]] and [[concurrency]] in [[Language:Java|]] as part of the [[Course:Programming in Koblenz]]

== Material ==

<media url=""http://www.slideshare.net/rlaemmel/multithreaded-programming""/>

== Concepts ==

* [[Thread]]
* [[Multithreading]]
* [[Task parallelism]]
* [[Data parallelism]]
* [[Distribution]]
* [[Concurrency]]

== Contributions ==

* [[Contribution:javaMultithreading]]

== Metadata ==

* [[instanceOf::Course:Programming in Koblenz]]
* [[instanceOf::Concept]]
",2013-06-12 14:54:59.425,2017-07-04 13:44:52.728083
Language,Perl,"== Headline ==

A [[Multi-paradigm programming language|multi-paradigm]], [[Functional  programming language|functional]], [[OO programming language|object-oriented]], [[Scripting language|interpreted]] and [[Procedural programming language|procedural]] [[Software language|language]]

== Metadata ==

* [[instanceOf::Multi-paradigm programming language]]
* [[instanceOf::Functional programming language]]
* [[instanceOf::OO programming language]]
* [[instanceOf::Scripting language]]
* [[instanceOf::Procedural programming language]]
* [[sameAs::http://en.wikipedia.org/wiki/Perl]]
* [[uses::Reference counting]]

",2013-06-12 15:00:34.296,2017-07-04 13:46:41.528432
Technology,JGoodies,"== Headline ==

JGoodies open source libraries for [[Technology:Swing]]

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://www.jgoodies.com/freeware/libraries/]]
* ",2013-06-12 15:01:32.121,2017-07-04 13:47:29.62366
Concept,Thread,"== Headline ==

a thread of execution

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Thread_(computing)]]
* [[isA::Concept]]

",2013-06-12 14:56:26.287,2017-07-04 15:26:27.178429
Concept,Tool-defined language,"== Headline ==

A software language that is effectively defined by a tool

== Metadata ==

* [[isA::Software language]]
",2013-06-12 14:56:29.86,2017-07-04 15:26:27.242469
Concept,User interface,"== Intent ==

the part of a software system that serves for human-computer interaction

== Abbreviation ==

UI

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[memberOf::Vocabulary:Software architecture]]
* [[sameAs::http://en.wikipedia.org/wiki/User_interface]]
* [[isA::Concept]]

",2013-06-12 14:56:48.58,2017-07-04 15:26:30.734956
Language,Plain text,"== Headline ==

Plain text as opposed to formatted text

== Details ==

A plain text file contains readable text. Plain text in the context of the 101companies projects is used, for example, for readme files, which may be called README.txt or README.md.

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/Plain_text]]
* ",2013-06-12 15:00:34.61,2017-07-04 13:46:41.545397
Concept,Persistence,"== Headline ==

The [[capability]] of maintaining program data beyond the runtime of the program

== Description ==

The (sometimes implicit) assumption is here that data is not simply maintained but there is
also support for reading and writing program data incrementally including potentially
transaction management and efficient index-based access. Without such additional
requirements, persistence may be hard to distinguish from [[serialization]].
In practice, the capability of persistence is often associated with database technology,
but there exist also some technologies in other technical spaces that facilitate proper
persistence. The term persistence is even in use in ways to include the capability of
[[O/R mapping]] which clearly goes beyond the basic idea of maintaining program data
beyond the runtime of the program; see, for example, [[Technology:Hibernate]] for the
Java platform.

== Metadata ==

* [[instanceOf::Capability]]
* [[sameAs::http://en.wikipedia.org/wiki/Persistence_(computer_science)]]

",2013-06-12 14:55:21.135,2017-07-04 13:44:54.098564
Language,Prolog,"== Headline ==

A [[programming language]] for [[logic programming]]

== Metadata ==
* [[instanceOf::Logic programming language]]
* [[sameAs::http://en.wikipedia.org/wiki/Prolog]]
* ",2013-06-12 15:00:35.049,2017-07-04 13:46:41.55762
Concept,Schema-based validation,"== Headline ==

The process of validating data according to a schema

== Metadata ==

* [[memberOf::Vocabulary:Software language engineering]]
* [[isA::Concept]]

",2013-06-12 14:55:53.717,2017-07-04 15:26:23.087774
Language,Python,"== Headline ==

A [[instanceOf::multi-paradigm programming language]]

== Metadata ==

* [[instanceOf::OO programming language]]
* [[instanceOf::Interpreted programming language]]
* [[instanceOf::Functional programming language]]
* [[instanceOf::Multi-paradigm programming language]]
* [[sameAs::http://en.wikipedia.org/wiki/Python_(programming_language)]]
* [[sameAs::http://wiki.python.org/moin/FrontPage?action=show&redirect=StartSeite]]
* [[facilitates::dictionary]]

",2013-06-12 15:00:35.347,2017-07-04 13:46:41.583072
Concept,Separation of concerns,"== Headline ==

A [[software design|design]] principle to modularize concerns

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Separation_of_concerns]]
* [[memberOf::Vocabulary:Software engineering]]
* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::Modularity]]
* [[relatesTo::Modularization]]
* [[relatesTo::Modular programming]]
* [[instanceOf::Concept]]

",2013-06-12 14:56:00.062,2017-07-04 13:44:57.175773
Issue,Parsing1,"== Section ==

=== Ill

== Next section ==",2013-08-27 15:40:11.886,2017-07-04 13:47:53.870046
Concept,Recursive descent parser,"== Headline ==

A [[top-down parsing | top-down]] [[parser]] using mutually recursive procedures

== Illustration ==

Consider this grammar for binary numbers:

<syntaxhighlight lang=""haskell"">
[number] number : bits rest ;
[single] bits : bit ;
[many] bits : bit bits ;
[zero] bit : '0' ;
[one] bit : '1' ;
[integer] rest : ;
[rational] rest : '.' bits ;
</syntaxhighlight>

A recursive descent parser could be implemented in Haskell as follows:

<syntaxhighlight lang=""Haskell"">
import Control.Monad
-- Accept and enforce complete input consumption
accept :: String -> Bool
accept i = case number i of
  Just [] -> True
  _ -> False

-- Functions for nonterminals
number, bits, bit, rest :: String -> Maybe String

-- [number] number : bits rest ;
number i = bits i >>= rest

-- [single] bits : bit ;
-- [many] bits : bit bits ;
bits i = if lookahead 2 (flip elem ['0','1']) i
           then many
           else single
  where
    single = bit i
    many = bit i >>= bits

-- [zero] bit : '0' ;
-- [one] bit : '1' ;
bit i = if lookahead 1 ((==) '0') i
          then zero
          else one
  where
    zero = match '0' i
    one = match '1' i

-- [integer] rest : ;
-- [rational] rest : '.' bits ;
rest i = if lookahead 1 ((==) '.') i
           then rational
           else integer
  where
    integer = Just i
    rational = match '.' i >>= bits

-- Look ahead in input; avoid looking beyond end of input
lookahead :: Int -> (Char -> Bool) -> String -> Bool
lookahead l f i = length i >= l && f (i!!(l-1))
-- BEGIN ...
-- Match a terminal (a character)
match :: Char -> String -> Maybe String
match t (t':i) | t == t' = Just i
match _ _ = Nothing
</syntaxhighlight>

This parser uses 'lookahead', i.e., it looks into the input stream to make decisions where necessary.

Here is a variation which uses backtracking instead:

<syntaxhighlight lang=""haskell"">
import Control.Monad
-- Accept and enforce complete input consumption
accept :: String -> Bool
accept i = case number i of
  Just [] -> True
  _ -> False

-- Functions for nonterminals
number, bits, bit, rest :: String -> Maybe String

-- [number] number : bits rest ;
number i = bits i >>= rest

-- [single] bits : bit ;
-- [many] bits : bit bits ;
bits i = many `mplus` single
  where
    single = bit i
    many = bit i >>= bits

-- [zero] bit : '0' ;
-- [one] bit : '1' ;
bit i = zero `mplus` one
  where
    zero = match '0' i
    one = match '1' i

-- [integer] rest : ;
-- [rational] rest : '.' bits ;
rest i = rational `mplus` integer
  where
    integer = Just i
    rational = match '.' i >>= bits

-- Match a terminal (a character)
match :: Char -> String -> Maybe String
match t (t':i) | t == t' = Just i
match _ _ = Nothing
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Recursive_descent_parser]]
* [[instanceOf::Software language engineering]]
* [[isA::Parser]]
",2013-06-12 14:55:43.361,2017-07-04 15:26:21.645106
Language,Smalltalk,"== Intent ==

an  object-oriented, dynamically typed programming language

== Links ==

* [http://en.wikipedia.org/wiki/Smalltalk Wikipedia]



== Metadata ==
* [[instanceOf::OO programming language]]
* ",2013-06-12 15:00:38.804,2017-07-04 13:46:41.781483
Concept,Transformation language,"== Headline ==

A software language for executable transformations

== Metadata ==

* [[isA::Software language]]
",2013-06-12 14:56:32.216,2017-07-04 15:26:27.83921
Concept,Type constraint,"== Headline ==

A means of constraining a [[Polymorphism|polymorphic type]]

== Illustration ==

The notion of type constraint is pretty general as it occurs in different ways in programming languages which is why we do not attempt a comprehensive description here. Instead, we briefly compare how type constraints show up in Java versus Haskell.

We use the following problem to illustrate type constraints: Suppose you want to count the elements in an array that are ''greater'' than a given element. This sort of function (or method) would need to be parametric in the element type of the array and that type would also need to be constrained to admit comparison.

=== Type comstraints in Java ===

The [[type signature]] for a suitable method for the problem at hand is of the following form:

<syntaxhighlight lang=""java"">
public static <T extends Comparable<T>> int countGreaterThan(T[] anArray, T elem)
</syntaxhighlight>

=== Type comstraints in Java ===

The [[type signature]] for a suitable function for the problem at hand is of the following form:

<syntaxhighlight lang=""haskell"">
countGreaterThan :: Ord t => [t] -> t -> Ordering
</syntaxhighlight>

Haskell's type constraints are discussed in more detail in the broader context of [[type signature]]s.

== Metadata ==

* [[memberOf::Vocabulary:Programming language]]
* [[relatesTo::http://msdn.microsoft.com/en-us/library/d5x73970.aspx]]
* [[relatesTo::http://en.wikipedia.org/wiki/Generic_programming]]
* [[relatesTo::http://docs.oracle.com/javase/tutorial/java/generics/bounded.html]]
* [[isA::Concept]]

",2013-06-12 14:56:38.289,2017-07-04 15:26:29.213488
Issue,Parsing2,"=== some 1 ==

text 1

=== some 2

text 2",2013-08-28 11:24:44.422,2017-07-04 13:47:53.875534
Concept,Stack,"== Headline ==

A last in, first out (LIFO) [[abstract data type]]

== Illustration ==

A simple implementation of stacks (of ints) is shown here as a functional data structure in [[Language:Haskell]]:.

<fragment url=""Stack.hs""/>

These stacks are immutable. The push operation does not modify the given stack; it returns a new stack which shares the argument stack possibly with other parts of the program. The pop operation does not modify the given stack; it returns a part of the argument stack. We refer to [[Document:Handbook of data structures and applications]] for a profound discussion of functional data structures including the stack example. The functions for operations top and pop, as given above, are partial because they are undefined for the empty stack.

There are also alternative illustrative Stack implementations available:

https://github.com/101companies/101repo/tree/master/concepts/Stack

=== Stacks as lists without information hiding ===

<file url=""LeakyListStack.hs""/>

That is, stacks are represented as lists while the ''Stack'' type is simply defined as a type synonym to this end. This implementation does not enforce information hiding.

=== Stacks as lists with information hiding ===

<file url=""OpaqueListStack.hs""/>

As before, stacks are represented as lists, but the ''Stack'' type is defined as a [[newtype]] which hides the representation as its constructor is not exported.

=== Stack with length ===

<file url=""FastListStack.hs""/>

As before, stacks are represented as lists and again this representation is hidden, but an additional data component for the size of the stack is maintained so that the size of a stack can be returned without traversing the stack.

== Metadata ==

* [[instanceOf::Abstract data type]]
* [[sameAs::http://en.wikipedia.org/wiki/Stack (abstract data type)]]
* [[memberOf::Vocabulary:Data]]

      ",2013-06-12 14:56:08.96,2017-07-04 13:44:57.964099
Concept,Technology profile,"== Intent ==

a way of using technologies

== Description ==

Certain technologies are frequently used together in a certain manner. The present concept of a [[Technology profile]] makes it possible to capture explicitly some general facts about such ""usage scenario"".

== Metadata ==

* [[instanceOf::Misc]]
",2013-06-12 14:56:20.254,2017-07-04 13:44:58.984475
Language,RAR,"== Headline ==

An archive file format

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/RAR]]
* ",2013-06-12 15:00:35.665,2017-07-04 13:46:41.594404
Contribution,haskellScott,"== Headline ==

Exercise [[Scott encoding]] in [[Language:Haskell|]]

== Characteristics ==

One of the consequences of the [[Scott encoding]] is that [[algebraic data type]]s are not needed; instead [[newtype]]s in combination with ""forall"" ([[parametric polymorphism]]) can be used to encode the case analysis of algebraic data types. This is illustrated for a Scott-encoded variation on the [[Contribution:haskellVariation]], which involves an algebraic data type for subunits of departments (being either an employee or a department).

== Illustration ==

Consider the straightforward algebraic data type for subunits in a company:

<syntaxhighlight lang=""haskell"">
-- | A sub-unit is either an employee or a sub-department
data SubUnit = Employee Employee | Department Department
 deriving (Eq, Read, Show)
</syntaxhighlight>

When using the Scott encoding, then the data type is defined as follows:

<syntaxhighlight lang=""haskell"">
-- | A sub-unit is either an employee or a sub-department
newtype SubUnit
      = SubUnit { getSubUnit ::
          forall x. (Employee -> x)
                 -> (Department -> x)
                 -> x }
</syntaxhighlight>

Thereby, a value of type ''SubUnit'' would essentially describe case analysis on the forms of subunits. The result type is forall-quantified, as need to perform arbitrary case analyses with arbitrary result types.

The following functions can be used instead of the constructors of an algebraic data type.

<syntaxhighlight lang=""haskell"">
-- | Construct a subunit from an employee
employee :: Employee -> SubUnit
employee e = SubUnit (\f   -> f e)

-- | Construct a subunit from a department
department :: Department -> SubUnit
department d = SubUnit (\  f -> f d)
</syntaxhighlight>

For instance, the ''cut'' function would need to take this form now with the only changes affected the helper function ''cutS'' which directly examines and reconstructs subunits:

<syntaxhighlight lang=""haskell"">
-- | Cut all salaries in a company
cut :: Company -> Company
cut (n, ds) = (n, (map cutD ds))
  where
    -- Cut all salaries in a department
    cutD :: Department -> Department
    cutD (n, m, sus)
      = (n, cutE m, map cutS sus)
      where
        -- Cut the salary of an employee in half
        cutE :: Employee -> Employee
        cutE (n, a, s) = (n, a, s/2)
        -- Cut all salaries for a subunit
        cutS :: SubUnit -> SubUnit
        cutS s
          = getSubUnit s
                       (employee . cutE)
                       (department . cutD)
</syntaxhighlight>

== Relationships ==

The present contribution was derived by minimal changes from [[Contribution:haskellVariation]].

== Architecture ==

See [[Contribution:haskellVariation]].

== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:Cabal]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell data]]

",2013-08-29 12:47:31.619,2017-07-05 15:30:13.935295
Concept,Sum function,"== Headline ==

Compute the sum of a list of numbers

== Illustration ==

[[Language:Haskell]]'s [[Prelude module]] function offers the [[sum function]]:

<syntaxhighlight lang=""haskell"">
Prelude> sum [1..5]
15
</syntaxhighlight>

For what it matters, this function can be defined in terms of the [[fold function]] as follows:

<syntaxhighlight lang=""haskell"">
Prelude> let sum = foldr (+) 0
Prelude> sum [1..5]
15
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Common function]]
",2013-06-12 14:56:15.381,2017-07-04 13:44:58.606493
Language,HSQLDialect,"== Intent ==

the [[Technology:Hibernate]]-specific dialect of [[Language:SQL]]



== Metadata ==
* [[instanceOf::Query language]]
* ",2013-06-12 15:00:26.412,2017-07-04 13:46:41.01857
Language,Rascal,"== Headline ==

A DSL for source code analysis and manipulation implemented by the [[Technology:Rascal]] platform.

== Metadata ==
* [[sameAs::http://www.rascal-mpl.org/]]
* [[instanceOf::Metalanguage]]
* ",2013-06-12 15:00:35.959,2017-07-04 13:46:41.606601
Concept,Syntax,"== Headline ==

Rules defining a [[software language]] as a set of structured elements

== Illustration ==

Software languages may be defined as sets of strings, trees, graphs, etc.

See the notion of [[grammar]] for an illustration.

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Syntax_(programming_languages)]]
* [[memberOf::Vocabulary:Programming languages]]

",2013-06-12 14:56:16.619,2017-07-04 13:44:58.765966
Feature,Job role,"== Headline ==

Add job roles for employees

== Description ==

The database structure shall be extended by introducing job roles for employees.

== Motivation ==

The current data structure of [[Contribution:mySqlMany]] and [[Contribution:mySqlOne]] only allows two-dimensional aggregation and analysis of data. Adding [[Feature:Job role]] enables us aggregating data multi-dimensional and therefore creating a more advanced reporting commonly used in the area of Business Intelligence (i.e. OLAP cubes).
In addition, if implemented in a normalized structure, it motivates to use more complex join queries across several tables.

== Relationships ==

* See [[Contribution:mySqlOneReporting]] for an implementation of this feature
* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical_company]].

== Metadata ==

* [[isA::Functional requirement]]
* [[isA::Optional feature]]

",2013-06-12 14:59:47.96,2017-07-04 15:26:32.358938
Theme,Datalog basics,"== Headline ==

[[Language:Datalog]] theme of implementations

== Metadata ==

* [[isA::Namespace:Theme]]
* ",2013-06-12 15:02:24.682,2017-07-04 15:26:32.686781
Language,Ruby,"== Headline ==

A [[multi-paradigm programming language]]
== Metadata ==
* [[instanceOf::multi-paradigm programming language]]
* [[sameAs::http://www.ruby-lang.org/]]
* [[relatesTo::http://en.wikipedia.org/wiki/Ruby_(programming_language)]]
",2013-06-12 15:00:36.296,2017-07-04 13:46:41.62043
Theme,Web applications in Java,"== Headline ==

A theme of [[Language:Java]]-based web applications

== Description ==

The theme collects contributions which exercise different kinds of [[web-application framework]]s for [[Language:Java]]. Different technologies such as [[Technology:Struts]], [[Technology:JSF]], and [[Technology:GWT]] are explored. For some technologies, different options of technology usage are explored, e.g., the use of annotations versus XML-based configuration.

== Metadata ==

* [[isA::Namespace:Theme]]
* ",2013-06-12 15:02:28.353,2017-07-04 15:26:32.888171
Vocabulary,Data,"== Headline ==

Concepts related to [[data]] in [[programming]]

== Metadata ==

* [[isA::Namespace:Vocabulary]]
* ",2013-06-12 15:02:30.311,2017-07-04 15:26:33.054564
Language,SML,"== Headline ==

A [[functional programming language]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Standard_ML]]
* [[instanceOf::Functional programming language]]
* ",2013-06-12 15:00:36.559,2017-07-04 13:46:41.632931
Concept,Requirement,"== Headline ==

A requirement for a new or altered [[software system]] or [[software component|component]]

== Illustration ==

Consider the following [[functional requirement]] for the [[@system]]: ""The system must be able to total the salaries of all employees of the company and to report the total to the user."" [[Feature:Total]] describes this requirement in more detail.

== Details ==

Requirements can be classified in different way. The following classifiers are used on the 101wiki specifically also for the classification of the requirements of the [[@system]]:
* [[Functional requirement]]
* [[Non-functional requirement]]
* [[Data requirement]]
* [[UI requirement]]
Requirements may invoke different abstraction levels. On the 101wiki, requirements may refer to the abstraction levels of [[software architecture]], [[software design]], and [[data modeling]] as opposed to any narrow focus on [[requirements analysis]].

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Requirement]]
* [[relatesTo::http://en.wikipedia.org/wiki/Requirements analysis]]
* [[relatesTo::http://en.wikipedia.org/wiki/Software requirements specification]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Software feature]]

",2013-06-12 14:55:47.981,2017-07-04 15:26:22.380154
Language,SQL,"== Headline ==

[[Data definition language|Data definition]] and [[Data manipulation language|manipulation]] for relational databases
== Metadata ==

* [[instanceOf::Query language]]
* [[instanceOf::Data definition language]]
* [[instanceOf::Data manipulation language]]
* [[instanceOf::Unspecific version]]
* [[sameAs::http://en.wikipedia.org/wiki/SQL]]
",2013-06-12 15:00:36.849,2017-07-04 13:46:41.654227
Language,SVG,"== Headline ==

A format for vector-based graphics

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Scalable_Vector_Graphics Scalable Vector Graphics]]
* [[instanceOf::External DSL]]
* [[instanceOf::XML language]]
*

",2013-06-12 15:00:37.143,2017-07-04 13:46:41.670111
Concept,Test automation,"== Headline ==

automate the execution of tests including reporrting

== Discussion ==

For instance, a [[Technology:JUnit]]-based test suite serves test automation.

One can also use command-line tools such as ''make'' and ''diff''.

== Metadata ==

* [[instanceOf::Development technique]]

",2013-06-12 14:56:22.354,2017-07-04 13:44:59.010844
Language,SWF,"== Headline ==

A format used for multimedia, vector graphics and ActionScript
== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/SWF]]
*
",2013-06-12 15:00:37.534,2017-07-04 13:46:41.682139
Language,Sass,"== Headline ==

An extension of [[Language:CSS]]

== Metadata ==
* [[instanceOf::Style sheet language]]
* [[sameAs::http://sass-lang.com/]]
* [[relatesTo::http://en.wikipedia.org/wiki/Sass_(stylesheet_language)]]
* ",2013-06-12 15:00:37.828,2017-07-04 13:46:41.695969
Concept,Type system,"== Headline ==

Rules used for [[type checking]] or [[type inference|inference]]

== Illustration ==

Consider a [[function application]] in [[Language:Haskell]] like this:

<syntaxhighlight lang=""haskell"">
not True
</syntaxhighlight>

This expression applies logical negation (''not'') to the Boolean literal ''True''. (For what it matters, the result of the function application would be ''False''.) This expression type-checks because the associated rule of the type system succeeds, which is that '''the type of a function application is the result type of the applied function where the actual argument must be of the declared formal argument type'''.

== Metadata ==

* [[memberOf::Vocabulary:Programming language]]
* [[sameAs::http://en.wikipedia.org/wiki/Type_system]]
* [[isA::Concept]]

",2013-06-12 14:56:41.251,2017-07-04 15:26:30.090161
Concept,Web server,"== Headline ==

A server that hosts web pages and delivers them to clients

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Webserver]]
* [[isA::Software technology]]

",2013-06-12 14:56:54.295,2017-07-04 15:26:31.035815
Language,Settings,"== Headline ==

A language that stores preferences

== Description ==
File formats that store different settings come in different flavours. They have all in common that they are key value based. The key and the value are seperated by the letter =. Every key value pair is stored in a new line. Line comments are introduced with the letter #.
Under Windows, a .ini file is a widely used example. Other examples include .prefs or .properties files.

== Metadata ==
* [[relatesTo::http://en.wikipedia.org/wiki/INI_file]]
* [[relatesTo::http://stackoverflow.com/questions/1539792/eclipse-preference-store-persistance]]
* [[relatesTo::http://en.wikipedia.org/wiki/.properties]]
* ",2013-06-12 15:00:38.336,2017-07-04 13:46:41.749065
Concept,Zipper,"== Headline ==

A [[data structure]] for location-based manipulation of a data structure

== Metadata ==

* [[isA::Data structure]]
* [[memberOf::Vocabulary:Data]]
* [[memberOf::Vocabulary:Functional programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Zipper_(data_structure)]]
* [[sameAs::http://www.haskell.org/haskellwiki/Zipper]]
* [[sameAs::http://dx.doi.org/10.1017/S0956796897002864]]
",2013-06-12 14:56:59.866,2017-07-04 15:26:32.054985
Concept,Table,"== Headline ==

Data elements organized in vertical columns and horizontal rows

== Details ==

The table is the core [[data structure]] in a [[database]]. Columns are identified by name; they can be of different types. Hence, rows are essentially [[tuple]]s.

== Metadata ==

* [[instanceOf::Data structure]]
* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Table_(database)]]
",2013-06-12 14:56:18.262,2017-07-04 13:44:58.883702
Language,Shell Script,"== Headline ==
A  [[scripting language]] written for shells or command line interpreters

== Description ==
A shell script is a type of script that is mainly used for file manipulation, program execution and printing text.

== Metadata ==
* [[instanceOf::Scripting language]]
* [[sameAs::http://en.wikipedia.org/wiki/Shell_script]]
* ",2013-06-12 15:00:38.575,2017-07-04 13:46:41.767224
Vocabulary,Software engineering,"== Headline ==

The vocabulary in the context of [[software engineering]]

== Metadata ==

* [[isA::Namespace:Vocabulary]]
* ",2013-06-12 15:02:33.586,2017-07-04 15:26:33.189983
Concept,Scrap your boilerplate,"== Headline ==

A generic programming style
== Illustration ==

""Scrap Your Boilerplate"" ([[SYB]]) refers to a generic programming style where highly polymorphic function combinators are leveraged in assembling data-processing operations that recurse into compound data while being customized by type-specific cases. Consider the following implementation of [[Feature:Cut]] as part of [[Contribution:haskellSyb]]:

<syntaxhighlight lang=""haskell"">
cut :: Company -> Company
cut = everywhere (extT id (/(2::Float)))
</syntaxhighlight>

''everywhere'' is a highly polymorphic function combinator which takes a polymorphic argument function to transform all immediate and non-immediate subterms of a given term of possibly any type. The actual traversal is provided by ''everywhere''; the per-subterm functionality is to be described by the polymorphic argument of ''everywhere''. Thus, the following type is needed:

<syntaxhighlight lang=""haskell"">
everywhere :: forall a. Data a => (forall b. Data b => b -> b) -> a -> a
</syntaxhighlight>

In the Haskell context, the combinators for SYB turn out to be polymorphic in an interesting manner from a typing perspective: they are rank-2 polymorphic and customization requires a form of type case. The rank-2 status can be observed in the above function signature: the inner ""forall"" is to the left of a function arrow. The use of type case is evident from the above application of ''everywhere''. In particular, ''extT'' models type case such that the type-specific second argument is applied when possible and otherwise the generic first argument is applied. In general terms, ''extT g s x'' translates to ''s x'' if the argument type of ''s'' equals (or generalizes) the type of ''x''; otherwise ''extT g s x'' translates to ''g x''.

SYB has been conceived in a [[Language:Haskell|Haskell]] setting, but the style has been applied to other programming languages as well. SYB is particularly helpful in describing all kinds of transformations and queries for compound data in a concise manner, without involving conceptually irrelevant details of the data structures involved.
== Metadata ==

* [[relatesTo::Generic programming]]
* [[relatesTo::Boilerplate code]]
* [[sameAs::http://dx.doi.org/10.1145/640136.604179]]
* [[relatesTo::http://www.haskell.org/haskellwiki/Scrap_your_boilerplate]]
* [[relatesTo::http://en.wikipedia.org/wiki/Generic_programming]]
* [[isA::Concept]]
",2013-06-12 14:55:55.041,2017-07-04 15:26:23.328619
Language,UML,"== Headline ==

The Unified Modeling Language

== Metadata ==
* [[instanceOf::Modeling language]]
* [[sameAs::http://en.wikipedia.org/wiki/Unified_Modeling_Language]]
* ",2013-06-12 15:00:39.09,2017-07-04 13:46:41.792311
Vocabulary,MDE,"== Headline ==

The vocabulary in the context of [[MDE]]

== Metadata ==

* [[isA::Namespace:Vocabulary]]
* ",2013-06-12 15:02:32.14,2017-07-04 15:26:33.123357
Concept,Reverse_Polish_notation,"== Headline ==

A mathematical notation where operators follow their operands

== Illustration ==

Consider the following expression using regular infix operators:

<syntaxhighlight lang=""haskell"">
5 + ((1 + 2) * 4) − 3
</syntaxhighlight>

In RPN:

<syntaxhighlight lang=""haskell"">
5 1 2 + 4 * + 3 -
</syntaxhighlight>

RPN can be evaluated by means of a simple iterative, [[stack]]-based algorithm which handles one input item (operator or operand) in each iteration. An operand is pushed on the stack. An operator is immediately applied to the two top-most stack entries. When the (well-formed) input has been consumed, then the result of expression evaluation is the one and only entry on the stack.

The input ""5 1 2 + 4 * + 3 -"" is processed as follows:

* Push 5 on the stack.
* Push 1 on the stack.
* Push 2 on the stack.
* Apply ""+"" to second top of stack (1) and top of stack (2); pop twice, push 3.
* Push 4 on the stack.
* Apply ""*"" to second top of stack (3) and top of stack (4); pop twice, push 12.
* Apply ""*"" to second top of stack (5) and top of stack (12); pop twice, push 17.
* Push 3 on the stack.
* Apply ""-"" to second top of stack (17) and top of stack (3); pop twice, push 14.

See <file url=""RPN.hs""/> for a [[Language:Haskell|]]-based implementation of the algorithm.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Reverse_Polish_notation]]
* [[relatesTo::Stack]]
* [[isA::Concept]]



      ",2013-06-12 14:55:49.019,2017-07-04 15:26:22.902656
Concept,Relational model,"== Headline ==

The fundamental model underlying [[relational database]]s

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Relational_model]]
* [[memberOf::Vocabulary:Data modeling]]
* [[isA::Concept]]

",2013-06-12 14:55:46.436,2017-07-04 15:26:22.09822
Concept,Result,"== Headline ==

The result of invoking certain [[abstraction]]s

== Details ==

For instance, the evaluation of a function application may return a result.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[relatesTo::Argument]]
* [[isA::Concept]]

",2013-06-12 14:55:48.549,2017-07-04 15:26:22.618599
Language,Unicode,"== Summary ==

TBD



== Metadata ==
* [[instanceOf::Format language]]
* ",2013-06-12 15:00:39.344,2017-07-04 13:46:41.801433
Language,VB.NET,"== Headline ==

a programming language by Microsoft

== Metadata ==
* [[instanceOf::OO programming language]]
* [[instanceOf::Unspecific version]]
* [[sameAs::http://en.wikipedia.org/wiki/Visual_Basic_.NET]]
* ",2013-06-12 15:00:39.702,2017-07-04 13:46:41.815065
Language,WSDL,"== Intent ==

An [[Language:XML]]-based [[Software language|language]] for functionality description of webservices
== Metadata ==
* ",2013-06-12 15:00:39.964,2017-07-04 13:46:41.823233
Technology,simplejson,"== Headline ==

An extensible [[Language:JSON|]] encoder/decoder for [[Language:Python|]]

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://pypi.python.org/pypi/simplejson/]]
*

",2013-06-12 15:02:21.977,2017-07-04 13:47:33.557922
Concept,Text to Model transformation,"== Headline ==

A [[transformation]] that transform text into a [[model]]

== Metadata ==

* [[instanceOf::Transformation]]
* [[instanceOf::MDE_term]]
* [[sameAs::http://en.wikipedia.org/wiki/Model_transformation]]
",2013-06-12 14:56:25.784,2017-07-04 13:44:59.146192
Concept,Textbook,"== Headline ==

A manual of instruction in any branch of study

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Textbook]]
* [[isA::Concept]]

",2013-06-12 14:56:26.016,2017-07-04 15:26:27.130361
Concept,Assertion,"== Headline ==

A programmer's codified assumption for a property to hold
== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Assertion_(software_development)]]
* [[isA::Concept]]
",2013-06-30 22:02:08.025,2017-07-04 15:26:33.549398
Feature,Reporting,"== Headline ==

Numbers and views on company data for reporting
== Description ==

Reporting must compute certain numbers or views (charts) on company data to help management, e.g., for the purpose of business analytics.
== Motivation ==

Reporting relies on basic statistical notions and techniques, e.g., medians and charts for distribution, but also visualization techniques, such as scaling for salary distribution. Further, by considering grouping of employees (when the relevant reporting feature [[Feature:Grouping]] is chosen), query languages are also challenged some more than with the basic features such as [[Feature:Total]].
== Illustration ==

See the concrete reporting features for illustrations.
== Relationships ==

See [[Feature:Median]], [[Feature:Charting]], [[Feature:Grouping]] for concrete reporting features.
== Guidelines ==

This is an abstract (an OR) feature, which should not be chosen as such, but instead [[Feature:Median]], [[Feature:Charting]], [[Feature:Grouping]], or any combination thereof is to be selected.
== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Business_reporting]]
* [[isA::Functional requirement]]
* [[isA::Optional feature]]
* ",2013-06-12 14:59:52.377,2017-07-04 15:26:32.467198
Feature,COI,"== Headline ==

Associate employees in terms of conflicts of interest

== Description ==

Employees may declare conflicts of interests (COIs) with each other so that management can observe those conflicts when they may be relevant. For instance, during management-level discussions for a performance appraisal, it should be carefully avoided, if possible, that employees evaluate other employees with whom they may have a COI, declared by either side. As far as the [[system:Company]] is concerned, it suffices to merely maintain COIs so that management knows about everything. It is assumed that a COI must be declared, when two employees are closely related, or they are close friends, or judgement may be significantly impaired otherwise.

The association for COIs is constrained as follows:
* Each employee has an associated set of employees with whom he or she has declared a COI.
* If ''A'' is a member of the COIs declared by ''B'', then it does not need to hold that ''B'' is a member of the COIs declared by ''A''. (Thus, the declarations are not symmetric, but this may be entirely possible in practice.)

Unidirectional navigation of the association is considered sufficient here. (Arguably, one may need the symmetric closure of declared COIs for some applications, but this is omitted here. ''A'' and ''B'' would have a COI under symmetric closure, if ''A'' has a declared COI with ''B'' or vice versa.)

== Motivation ==

The feature is interesting in so far that it involves an association with [[many-to-many]] cardinality. Thus, any given employee may declare COIs with many employees, and in fact, many employees may declare a COI with the same employee. In a [[Language:UML]] class diagram or an [[entity-relationship model]], for example, the COI association (or relationship) can be modeled in a straightforward way. In an [[OO programming language]] with references, the corresponding links are easily implemented, too. (Unidirectional navigation is particularly easy to implement, when compared to bidirectional navigation.)  When the data model is implemented as a [[relational schema]], then an extra junction table is needed to model the many-to-many relationship.

== Relationships ==

* See [[Feature:Mentoring]] for another association, also between employees. The two associations differ in terms of cardinalities and directions of navigation, with the present association targeting many-to-many cardinality and unidirectional navigation.
* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical company]].

== Guidelines ==

* Unidirectional navigation is sufficient for the COI association. The ''name'' of  the accessor to the declared COIs of an employee should involve the term ""conflicts"" (e.g., ""getConflicts"").
* A suitable ''demonstration'' of the feature's implementation should link some employees according to the association and retrieve COIs for some employee.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Conflict of interest]]
* [[relatesTo::http://en.wikipedia.org/wiki/Performance appraisal]]
* [[instanceOf::Data requirement]]
* [[instanceOf::Optional feature]]
* [[facilitates::Many-to-many]]

",2013-06-12 14:59:42.048,2017-07-04 13:46:33.246246
Feature,Day of birth,"== Headline ==

Add day of birth for employees

== Description ==

The data structure shall be extended by introducing day of birth for employee.

== Motivation ==

The current data structure of [[Contribution:mySqlMany]] and [[Contribution:mySqlOne]] only allows two-dimensional aggregation and analysis of data. Adding [[Feature:Gender]] enables us aggregating data multi-dimensional and therefore creating a more advanced reporting commonly used in the area of Business Intelligence (i.e. OLAP cubes).

== Relationships ==

* See [[Contribution:mySqlOneReporting]] for an implementation of this feature
* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical_company]].

== Metadata ==


* [[isA::Data requirement]]
* [[isA::Optional feature]]
* ",2013-07-07 22:03:21.887,2017-07-04 15:26:34.226289
Technology,xsd.exe,"== Intent ==

== Description ==

xsd.exe is a tool that generates XML schemas or [[Technology:CLR]] classes from XDR, XML, and XSD files, or from classes in a [[runtime]] assembly. The tool can be used in different reasons; one is for classes for strongly typed DataSet objects; another is plain old C# classes for  [[Object-XML mapping]] (say, XML data binding).

== Local components ==

=== Function:xsdToClasses ===

This is the functionality for generating classes from XSD as used in [[Technology:.NET XML Serialization]].

==== Language:CodeDomFromXsd ====

xsd.exe generates code based on .NET's CodeDom model.
The xsdToClasses functionality generates very specific CodeDom.
Hence, a name is introduced here for that subset.
For instance, the generated code does not use methods.
Also, the generated code only contains classes but no interfaces.

===== Language:CSharpFromXsd =====

Based on CodeDom provider that is used, C# code may be generated by xsd.exe eventually.

=== Function:xsdToDataSets ===

This is another functionality provided by xsd.exe.
It is about generating classes for typed datasets.

=== Metadata ===

* [[instanceOf::Program generator]]
* [[sameAs::http://msdn.microsoft.com/en-us/library/x6c1kb0s(VS.80).aspx]]
* [[relatesTo::http://msdn.microsoft.com/en-us/library/5s2x1sy7.aspx]]
* [[relatesTo::http://msdn.microsoft.com/en-us/library/esbykkzb(v=vs.71).aspx]]
*

",2013-06-12 15:02:23.469,2017-07-04 13:47:33.668854
Concept,Semantics,"== Headline ==

Rules associating a [[software language]] 's syntax with meaning.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Semantics_(computer_science)]]
* [[memberOf::Vocabulary:Programming languages]]
* [[isA::Concept]]

",2013-07-13 17:13:15.407,2017-07-04 15:26:34.280622
Feature,Gender,"== Headline ==

Add gender for employees

== Description ==

The data structure shall be extended by introducing a gender for an employee.

== Motivation ==

The current data structure of [[Contribution:mySqlMany]] and [[Contribution:mySqlOne]] only allows two-dimensional aggregation and analysis of data. Adding [[Feature:Gender]] enables us aggregating data multi-dimensional and therefore creating a more advanced reporting commonly used in the area of Business Intelligence (i.e. OLAP cubes).

== Relationships ==

* See [[Contribution:mySqlOneReporting]] for an implementation of this feature
* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical_company]].

== Metadata ==


* [[isA::Data requirement]]
* [[isA::Optional feature]]
",2013-06-12 14:59:45.704,2017-07-04 15:26:32.174863
Contribution,tmvar,"== Headline ==

[[Concurrent programming]] and [[STM]] in [[Language:Haskell]] with [[TMVar]]s
== Motivation ==

The implementation demonstrates [[concurrent programming]] and specifically [[STM]] in [[Language:Haskell]] with Haskell's concept of [[TMVar]]s, i.e., transactional [[MVar]]s. To this end, the computations for the operations for totaling and cutting salaries are organized in multiple threads, in fact, transactions based on [[TMVar]]s. (See [[Contribution:mvar]] for a more basic approach that uses regular thread synchronization variables, i.e., [[MVar]]s.) The TMVars are used to store the progress and intermediate results of computations across multiple threads. The <syntaxhighlight lang=""haskell"" enclose=""none"">retry</syntaxhighlight> combinator is leveraged to wait for certain values of transactional variables. Overall, the present implementation serves as a limited illustration of [[STM]] since the operations in question do not obviously benefit from STM.
== Illustration ==

In the following we will illustrate both the implementation of totaling and cutting. To explain the code we first introduce a way to store and handle progress of computation, wait for results and enable multi-threaded cutting/totaling.

=== Representing and handling computational progress ===

We represent positions of interest for the next computation/transaction by using the zipper related term of focus (see the [[Contribution:wxHaskell|wxHaskell implementation]] for more information). A algebraic datatype for progress can therefore be defined as follows:

<syntaxhighlight lang=""haskell"" source=""haskellConcurrent/Types.hs"">
data Progress a = Do a | Done

type TFocusProgress = TMVar (Progress Focus)
</syntaxhighlight>

The progress of a computation can either be that there is still some work to do or that all work is done. In the first case the corresponding type constructor takes a value providing some information about the computation to be executed. Here we use a value of the <syntaxhighlight lang=""haskell"" enclose=""none"">Focus</syntaxhighlight> type. This <syntaxhighlight lang=""haskell"" enclose=""none"">TFocusProgress</syntaxhighlight> datatype is defined as an <syntaxhighlight lang=""haskell"" enclose=""none"">MVar</syntaxhighlight> because it should be shared among multiple threads. It is a transactional <syntaxhighlight lang=""haskell"" enclose=""none"">MVar</syntaxhighlight> (<syntaxhighlight lang=""haskell"" enclose=""none"">TMVar</syntaxhighlight>) because the manipulation of the progress will be part of the transaction: Each total/cut transaction will call <syntaxhighlight lang=""haskell"" enclose=""none"">nextEmployeeFocus</syntaxhighlight> to update the progress. This function is illustrated in the following image:

http://images6.fanpop.com/image/photos/32900000/Cat-cats-32958715-1440-900.jpg

The blue arrows illustrate the function. Each time <syntaxhighlight lang=""haskell"" enclose=""none"">nextEmployeeFocus :: Company -> Focus -> Maybe Focus</syntaxhighlight> is called to compute a new focus of interest the function either returns a new focus (<syntaxhighlight lang=""haskell"" enclose=""none"">Just focus</syntaxhighlight>) or <syntaxhighlight lang=""haskell"" enclose=""none"">Nothing</syntaxhighlight> in case all employees are processed. In the following we make use of this function to define a generic transaction function.

=== Generic companies transaction ===

We can now define a general transaction for both total and cut:

<syntaxhighlight lang=""haskell"" source=""haskellConcurrent/CompanySTM.hs"" line>
companyTransaction :: Company -> TFocusProgress -> TMVar b -> (Focus -> b -> b) -> STM Bool
companyTransaction c tprogress tb f = do
    currentProgress <- readTMVar tprogress
    case currentProgress of
        (Do currentFocus) -> do
            currentB <- readTMVar tb
            let newB = f c currentFocus currentB
            swapTMVar tb newB
            case nextEmployeeFocus c currentFocus of
                Just newFocus -> do
                    swapTMVar tprogress (Do newFocus)
                    return False
                Nothing -> do
                    swapTMVar tprogress Done
                    return True
        Done -> return False
</syntaxhighlight>

This function takes a company, a transactional progress and some other transactional variable which will be used in the concrete transaction. <syntaxhighlight lang=""haskell"" enclose=""none"">companyTransaction</syntaxhighlight> also takes a function that transforms the value of the content of the transactional variable based on a given focus.
That is, in line 3 <syntaxhighlight lang=""haskell"" enclose=""none"">companyTransaction</syntaxhighlight> reads the current progress and matches on the type constructors afterwards. In case all work is done (type constructor <syntaxhighlight lang=""haskell"" enclose=""none"">Done</syntaxhighlight>) the function returns <syntaxhighlight lang=""haskell"" enclose=""none"">True</syntaxhighlight> in line 16. In case there is still work to do <syntaxhighlight lang=""haskell"" enclose=""none"">companyTransaction</syntaxhighlight> reads the current value of the second transactional variable and passes this value and the current focus to the given function <syntaxhighlight lang=""haskell"" enclose=""none"">f</syntaxhighlight> in lines 6 - 7. The result of <syntaxhighlight lang=""haskell"" enclose=""none"">f</syntaxhighlight> is then written in the transaction variable by swapping the content in line 8. After that the next focus is computed using <syntaxhighlight lang=""haskell"" enclose=""none"">nextEmployeeFocus</syntaxhighlight>. Lines 13 and 10 match either on <syntaxhighlight lang=""haskell"" enclose=""none"">Just newFocus</syntaxhighlight> or <syntaxhighlight lang=""haskell"" enclose=""none"">Nothing</syntaxhighlight>. In case there is a next focus this value is swapped in the progress variable and <syntaxhighlight lang=""haskell"" enclose=""none"">False</syntaxhighlight> is returned in line 12. Otherwise <syntaxhighlight lang=""haskell"" enclose=""none"">Done</syntaxhighlight> is put in the variable for progress and <syntaxhighlight lang=""haskell"" enclose=""none"">True</syntaxhighlight> is returned.

=== Waiting for results ===

We also provide a generic transaction that waits for a job to be done and returns the result of the job:

<syntaxhighlight lang=""haskell"" source=""haskellConcurrent/CompanySTM.hs"" line>
getResult :: TFocusProgress -> TMVar a -> STM a
getResult tprogress ta = do
    currentProgress <- readTMVar tprogress
    case currentProgress of
        (Do  ) -> retry
        Done    -> do
            result <- readTMVar ta
            return result
</syntaxhighlight>

In line 3 <syntaxhighlight lang=""haskell"" enclose=""none"">getResult</syntaxhighlight> reads the current progress of the transaction. If there is still work to do the function matches on <syntaxhighlight lang=""haskell"" enclose=""none"">Do  </syntaxhighlight>. In this case we use the <syntaxhighlight lang=""haskell"" enclose=""none"">retry</syntaxhighlight> combinator which blocks the current thread until the content of the transactional variable for progress in modified. In case all transactions are done the function matches on <syntaxhighlight lang=""haskell"" enclose=""none"">Done</syntaxhighlight> in line 6. It then reads the result from the transactional variable <syntaxhighlight lang=""haskell"" enclose=""none"">ta</syntaxhighlight> and returns the content.

=== Using multiple threads ===

We make use of <syntaxhighlight lang=""haskell"" enclose=""none"">forkIO</syntaxhighlight> to start multiple threads for executing the transactions:

<syntaxhighlight lang=""haskell"" source=""haskellConcurrent/CompanySTM.hs"" line>
startTransactions :: Company -> b -> (TFocusProgress -> TMVar b -> STM Bool) -> IO b
startTransactions c initb trans = do
    case firstEmployeeFocus c of
        (Just firstFocus) -> do
            tprogress <- newTMVarIO (Do firstFocus)
            tb <- newTMVarIO initb
            forM [1..3] $ \  ->
                forkIO $ repeatTransaction (trans tprogress tb)
            atomically $ getResult tprogress tb
        Nothing -> return initb
</syntaxhighlight>

This function takes a company, an initial value for the content of a transactional variable and a transaction function. It returns the result from the transactional variable.
To do this it first computes the first focus in question in line 3. In case this focus does not exist <syntaxhighlight lang=""haskell"" enclose=""none"">startTransactions</syntaxhighlight> returns the given initial value <syntaxhighlight lang=""haskell"" enclose=""none"">b</syntaxhighlight> in line 10. In case such a focus does exist <syntaxhighlight lang=""haskell"" enclose=""none"">b</syntaxhighlight> it put into an transactional variable in line 5. The value of <syntaxhighlight lang=""haskell"" enclose=""none"">b</syntaxhighlight> is also put in a transactional variable. After that <syntaxhighlight lang=""haskell"" enclose=""none"">startTransactions</syntaxhighlight> creates three threads, each one repetitively executing the transaction.
In line 9 the function waits for the result of the computation by using <syntaxhighlight lang=""haskell"" enclose=""none"">getResult</syntaxhighlight> which was shown above.

To execute the transaction until the computation is done we define <syntaxhighlight lang=""haskell"" enclose=""none"">repeatTransaction</syntaxhighlight> which should be straighforward:
<syntaxhighlight lang=""haskell"" source=""haskellConcurrent/CompanySTM.hs"" line>
repeatTransaction :: STM Bool -> IO ()
repeatTransaction t = do
	done <- atomically t
	unless done $ repeatTransaction t
</syntaxhighlight>


Now that we have defined generic functions for a company transaction, a function for waiting for results and a function for starting multiple threads to execute the transaction, we can define totaling and cutting salaries:

=== Total ===

We first define a transactional variable for holding the (intermediate) result of totaling:

<syntaxhighlight lang=""haskell"" source=""haskellConcurrent/Total.hs"" line>
type TTotal = TMVar Float
</syntaxhighlight>

The actual transaction for one step of totaling all salaries is defined as follows:

<syntaxhighlight lang=""haskell"" source=""haskellConcurrent/Total.hs"" line>
addSalary :: Company -> TFocusProgress -> TTotal -> STM Bool
addSalary c tprogress ttotal = companyTransaction c tprogress ttotal (f c)
    where f c currentFocus currentTotal = currentTotal + (salary (readEM currentFocus c))
</syntaxhighlight>

<syntaxhighlight lang=""haskell"" enclose=""none"">addSalary</syntaxhighlight> uses the <syntaxhighlight lang=""haskell"" enclose=""none"">companyTransaction</syntaxhighlight>.
The actual computation is that it reads the employee at the current focus, reads the salary and adds it the current (intermediate) total.

We  can now use <syntaxhighlight lang=""haskell"" enclose=""none"">addSalary</syntaxhighlight> to define <syntaxhighlight lang=""haskell"" enclose=""none"">total</syntaxhighlight>:

<syntaxhighlight lang=""haskell"" source=""haskellConcurrent/Total.hs"" line>
total :: Company -> IO Float
total c = startTransactions c 0.0 (addSalary c)
</syntaxhighlight>

=== Cut ===

Cut also uses <syntaxhighlight lang=""haskell"" enclose=""none"">companyTransaction</syntaxhighlight> to do the cutting for each focus:

<syntaxhighlight lang=""haskell"" source=""haskellConcurrent/Cut.hs"" line>
cutSalary :: TFocusProgress -> TCompany -> STM Bool
cutSalary tprogress tcompany = do
    currentCompany <- readTMVar tcompany
    companyTransaction currentCompany tprogress tcompany f
    where
        f currentFocus currentCompany = (writeEM currentFocus currentCompany) (cutEmployee $ readEM currentFocus currentCompany)
        cutEmployee (Employee n a s) = Employee n a (s/2)
</syntaxhighlight>

It reads the employee at the given focus, cuts his/her salary and writes the employee back into the company by making use of <syntaxhighlight lang=""haskell"" enclose=""none"">readEM</syntaxhighlight> and <syntaxhighlight lang=""haskell"" enclose=""none"">writeEM</syntaxhighlight>.

Analogously to <syntaxhighlight lang=""haskell"" enclose=""none"">total</syntaxhighlight> we define <syntaxhighlight lang=""haskell"" enclose=""none"">cut</syntaxhighlight>:

<syntaxhighlight lang=""haskell"" source=""haskellConcurrent/Cut.hs"" line>
cut :: Company -> IO Company
cut c = startTransactions c c cutSalary
</syntaxhighlight>
== Usage ==

* [this!!Main.hs] has to be loaded into GHCi.
* The <syntaxhighlight lang=""haskell"" enclose=""none"">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].
== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Task parallelism]]
* [[developedBy::Contributor:tschmorleiz]]
",2013-06-12 14:59:09.763,2017-07-05 15:29:56.873777
Concept,STM,"== Headline ==

A control mechanism in [[concurrent programming]]

== Details ==

STM stands for Software Transactional Memory.

== Metadata ==

* [[memberOf::Vocabulary:Programming]]
* [[sameAs::http://en.wikipedia.org/wiki/Software_transactional_memory]]
* [[isA::Concept]]

",2013-06-12 14:55:53.084,2017-07-04 15:26:23.017995
Concept,Traversal,"== Headline ==

Systematic exploration of a [[tree]]- or [[graph]]-like [[data structure]] in programming

== Illustration ==

Consider the problem of totaling the salaries of all employees in a company (e.g., according to [[Feature:Total]]). Assume that the company is represented as a tree- or graph-like structure (e.g., in the sense of terms of [[algebraic data type]]s, [[Language:XML]] trees, or [[object]] graphs). Thus, the aggregation of all the salaries boils down to a traversal of the tree (or the graph).

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Tree_traversal]]
* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-06-12 14:56:32.419,2017-07-04 15:26:27.913349
Concept,Search algorithm,"== Headline ==

An [[algorithm]] to solve the [[search problem]]

== Illustration ==

Consider the following list of ints as the input for searching:

<syntaxhighlight language=haskell>
[2,4,3,1,4]
</syntaxhighlight>

A search algorithm returns ''True'' if asked to search for 1 and ''False'' for 5.

See [[linear search]] and [[binary search]] for specific search algorithms.

== Citation ==

(http://en.wikipedia.org/wiki/Search_algorithm, 14 April 2012)

In computer science, a search algorithm is an algorithm for finding an item with specified properties among a collection of items. The items may be stored individually as records in a database; or may be elements of a search space defined by a mathematical formula or procedure, such as the roots of an equation with integer variables; or a combination of the two, such as the Hamiltonian circuits of a graph.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Search_algorithm]]
* [[isA::Algorithm]]
* [[relatesTo::Search problem]]

      ",2013-06-12 14:55:56.754,2017-07-04 15:26:23.469618
Concept,Software design,"== Headline ==

The process of problem solving and planning for a software solution

== Details ==

The term is somewhat overloaded; [[software design]] may also refer to the ''result'' of the design ''process'', i.e., a description or [[specification]] or [[model]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Software_design]]
* [[relatesTo::http://en.wikipedia.org/wiki/Software_Design_Description]]
* [[relatesTo::http://en.wikipedia.org/wiki/Design]]
* [[memberOf::Vocabulary:Software engineering]]
* [[isA::Concept]]

",2013-06-12 14:56:05.069,2017-07-04 15:26:24.179742
Theme,Python potpourri,"== Headline ==

Contributions achieving basic coverage of [[Language:Python]]

== Description ==

This theme is under construction.

== Direction ==

* [[Contribution:py3k]]: A basic implementation.
* [[Contribution:pyjson]]: An implementation leveraging the JSON API reasonably.
* [[Contribution:pyjamas]]: Web programming with [[Technology:Pyjamas]].

== Relationships ==

TODO: Perhaps, some of the implementations could be claimed to be similar to what's going on for other languages.

== Metadata ==

* [[isA::Namespace:Theme]]
* ",2013-06-12 15:02:27.441,2017-07-04 15:26:32.837594
Feature,Singleton,"== Headline ==

Support a single company, not many

== Description ==

The [[system:Company]] is required to support a single company as opposed to many companies.  Support for many companies is appropriate when the system provides services to multiple companies, e.g., in the sense of a [[web service]] or [[cloud application]]. There are cases when a constraint for a single company may be preferable, e.g., in the case of a [[system:Company]] that serves a specific company because of in-house development or a local installation.

For a system to implement [[Feature:Singleton]], the system should guarantee that it is not possible to instantiate multiple companies. Also, any functionality could readily assume that all data is evidently associated with the one and only company, thereby eliminating the need to include constraints on the company into queries or transformations. Accordingly, when a system does not implement [[Feature:Singleton]], the system allows for the instantiation of multiple companies and no confusion arises as to what company is processed, e.g., within a query or an update.

== Motivation ==

Various [[data modeling]] approaches may naturally lead to an initial data model that would enable the representation of many companies. For instance, an object model would typically dedicate a class to companies. Also, the algebraic datatypes in a functional program would typically dedicate one type to companies, i.e., to many companies. Further, a relational schema would typically dedicate a relation to companies, and thereby also enable the representation of multiple companies.

The restriction to one company may often require extra effort. For instance, an object model would need to apply the [[singleton pattern]] to the companies class. In other cases, the restriction to one company may be implemented in a straightforward manner. For instance, an XML-based model of companies would immediately enforce the restriction to one company, if the company element is associated with cardinality 1.

The issue of one company versus many companies goes well beyond data modeling: the implementation of functional requirements is affected also. Queries and transformations may need to involve constraints on the company in some cases. For instance, a database query for totaling salaries is simple, when multiple companies are not permitted, whereas it requires grouping or a selection condition for the company, when multiple companies are permitted.

Overall, this situation promises good opportunities for demonstrating options and capabilities in design and implementation. Simple implementations of the [[system:Company]] may be largely oblivious to the issue of one company versus many companies in that they come with the ability of representation of multiple companies, while this is not exploited in any way, neither does the possibility of multiple companies arise in any way that would need to be addressed by the other feature implementations.

== Illustration ==

Consider a relational table for employees, when the constraint for a single company is intended; this example stems from [[Contribution:mySqlOne]]:

<syntaxhighlight lang=""sql"">
CREATE TABLE IF NOT EXISTS employee (
        id INTEGER AUTO INCREMENT PRIMARY KEY,
        name VARCHAR(50) NOT NULL,
        address VARCHAR(50) NOT NULL,
        salary DOUBLE NOT NULL,
        manager BOOL NOT NULL,
        did INTEGER NOT NULL,
        FOREIGN KEY (did) REFERENCES department(id)
);
</syntaxhighlight>

A query for totaling salaries does not need to refer, in any way, to any company id, since all employees belong to one and only company:

<syntaxhighlight lang=""sql"">
SELECT SUM(salary) FROM employee;
</syntaxhighlight>

For comparison, consider a relational table for employees, when support for many companies is permitted. The employee table should carry a foreign key for the company of an employee; this example stems from [[Contribution:mySqlMany]]:

<syntaxhighlight lang=""sql"">
CREATE TABLE IF NOT EXISTS employee (
        # ... as before ...
        FOREIGN KEY (cid) REFERENCES company(id)
);
</syntaxhighlight>

(Alternatively, such a foreign key could be managed by the department table alone, which would make queries even more complicated than what is shown in the sequel.) A query for totaling salaries needs to refer to a specific company, unless we were interested in totaling salaries of all companies:

<syntaxhighlight lang=""sql"">
SELECT SUM(salary) FROM employee
 WHERE cid =
  (SELECT id FROM company
   WHERE name = ""Acme Corporation"");
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Data requirement]]
* [[instanceOf::Optional feature]]

",2013-06-12 14:59:54.419,2017-07-04 13:46:36.443114
Concept,Zip function,"== Headline ==

Map a tuple of sequences into a sequence of tuples

== Illustration ==

In [[Language:Haskell]], the basic ''zip'' function is of the following type:

<syntaxhighlight lang=""haskell"">
> :t zip
zip :: [a] -> [b] -> [(a, b)]
</syntaxhighlight>

Thus, the ''zip'' function takes two lists of possibly different element types and returns a list of pairs. Here is an illustrative application of ''zip'' to build pairs of characters with associated ASCII codes:

<syntaxhighlight lang=""haskell"">
> zip ['A','B','C'] [65,66,67]
[('A',65),('B',66),('C',67)]
</syntaxhighlight>

There exist further variation on zipping. For instance, there is also a ''zipWith'' function which applies an argument function to pairs rather than constructing pairs. For instance, consider two lists of operands for addition; pairwise addition can be applied as follows:

<syntaxhighlight lang=""haskell"">
> :t zipWith
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
> zipWith (+) [1,2,3] [4,5,6]
[5,7,9]
</syntaxhighlight>

For what it matters, the basic ''zip'' function is defined as follows:

<syntaxhighlight lang=""haskell"">
zip :: [a] -> [b] -> [(a, b)]
zip = zipWith (,) -- apply pair construction
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Common function]]
* [[instanceOf::Higher-order function]]
* [[relatesTo::https://en.wikipedia.org/wiki/Convolution_(computer_science)]]
* [[relatesTo::http://stackoverflow.com/questions/1115563/what-is-zip-functional-programming]]
",2013-06-12 14:56:59.574,2017-07-04 13:45:02.580063
Concept,Sorting algorithm,"== Headline ==

An [[algorithm]] to solve the [[sorting problem]]

== Citation ==

(http://en.wikipedia.org/wiki/Sorting_algorithm, 14 April 2012)

A sorting algorithm is an algorithm that puts elements of a list in a certain order. The most-used orders are numerical order and lexicographical order. [...] More formally, the output must satisfy two conditions:
# The output is in nondecreasing order (each element is no smaller than the previous element according to the desired total order);
# The output is a permutation (reordering) of the input.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Sorting_algorithm]]
* [[relatesTo::Sorting problem]]
* [[isA::Concept]]

",2013-06-12 14:56:07.295,2017-07-04 15:26:24.419913
Vocabulary,101companies,"== Headline ==

The vocabulary specific to the [[101project]]

== Metadata ==

* [[isA::Namespace:Vocabulary]]
* ",2013-06-12 15:02:29.19,2017-07-04 15:26:32.982429
Vocabulary,Computing,"== Headline ==

The vocabulary in the context of [[computing]]

== Metadata ==

* [[isA::Namespace:Vocabulary]]
* ",2013-06-12 15:02:29.966,2017-07-04 15:26:33.015579
Concept,Unparser,"== Headline ==

A [[software component]] that performs [[unparsing]]

== Illustration ==

See [[Contribution:hughesPJ]] for a contribution that contains a [[Language:Haskell]]-based unparser.

== Relationships ==

* An unparser performs [[unparsing]].
* An unparser is the opposite of a [[parser]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Unparser]]
* [[memberOf::Vocabulary:Software language engineering]]
* [[isA::Language technology]]

",2013-06-12 14:56:47.372,2017-07-04 15:26:30.612059
Concept,Vertical transformation,"== Intent ==

a transformation that lowers or raises the level of abstraction

== Discussion ==

In model-driven engineering, a model-to-code transformation lowers the level of abstraction.

In reverse engineering or de-compilation, a transformation raises the level of abstraction.

== Metadata ==

* [[instanceOf::Transformation]]
",2013-06-12 14:56:50.158,2017-07-04 13:45:01.961051
Contribution,wcf,"== Headline ==

A [[web service]] based on [[Technology:.NET|]]'s [[Technology:WCF|]]

== Motivation ==

The [[Technology:WCF]] technology supports the development of applications based on [[service-oriented architecture]]. Our implementation illustrates a [[Stateful|stateful]] [[Web service|web service]] created with WCF. It also introduces the use of [[SOAP]] over [[Technology:HTTP]]. That necessitates the use of [[DTO]]s to wrap the domain model into leightweight serializable containers and pass it to the client.

== Illustration ==

[[Technology:WCF]] uses contracts to generate [[Language:WSDL]] definitions for the [[Web service|web service]]. The contract is provided by a [[Language:CSharp]] interface. It contains all necessary methods for retreiving the company data and invoking the method cut on every entity within the company:

<syntaxhighlight lang=""csharp"" source=""wcf/ICompanyService.cs"">
[ServiceContract]
public interface ICompanyService
{
	// The following methods define the interface for data retrieval.
	[OperationContract]
	CompanyDto GetCompany();

	[OperationContract]
	DepartmentDetailsDto GetDepartmentDetails(Guid id);

	[OperationContract]
	EmployeeDto GetEmployee(Guid id);

	// The following methods define the interface for performing cut on each entity.
	[OperationContract]
	decimal CutDept(DepartmentDetailsDto dept);

	[OperationContract]
	decimal CutEmpl(EmployeeDto emp);

	[OperationContract]
	decimal Cut(CompanyDto company);
}
</syntaxhighlight>

The class <syntaxhighlight lang=""csharp"" enclose=""none"">CompanyService</syntaxhighlight> is the concrete contract implementation. The implementation uses the basic [[Contribution:csharp]] for data generation and manipulation. Our contract class invokes the methods of the implementation and creates DTOs out of the retrieved entities. The example shows the implementation of the method <syntaxhighlight lang=""csharp"" enclose=""none"">GetCompany</syntaxhighlight>. The method returns all necessary data for the company view encapsulated into a DTO:

<syntaxhighlight lang=""csharp"" source=""CompanyService.svc.cs"">
[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
[ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
public class CompanyService : ICompanyService
{

	...

	// The concrete method implementation creates the DTO for a company using the data provided in the baseline csharp implementation.
	public CompanyDto GetCompany()
	{
		var dto = new CompanyDto
		{

			// The DTO is filled with ID, Name and subdepartments.
			Id = Company.Id,
			Name = Company.Name,
			Departments = Company.Departments.Select(d => new DepartmentDto
			{

				// The data for each department are included iteratively.
				Details = new DepartmentDetailsDto
				{
					Id = d.Id,
					Name = d.Name,
					Manager = new EmployeeDto
					{
						// Every Manager has its id, address, name and salary.
						Address = d.Manager.Person.Address,
						Id = d.Manager.Id,
						Name = d.Manager.Person.Name,
						Salary = d.Manager.Salary
					}

				},

				// The data for each employee are included iteratively.
				Employees = d.Employees.Select(e => new EmployeeDto
				{
					// Every Manager has its id, address, name and salary.
					Id = e.Id,
					Address = e.Person.Address,
					Name = e.Person.Name,
					Salary = e.Salary
				}).ToList(),

				SubDepartments = FillSubDepartments(d),
			}).ToList(),

			// The parameter ""Total"" is filled.
			Total = Company.Total
		};

		return dto;
	}

	...

}
</syntaxhighlight >

The DTO classes <syntaxhighlight lang=""csharp"" enclose=""none"">CompanyDto</syntaxhighlight>, <syntaxhighlight lang=""csharp"" enclose=""none"">DepartmentDetailsDto</syntaxhighlight>, and <syntaxhighlight lang=""csharp"" enclose=""none"">EmployeeDto</syntaxhighlight> provide the serializability for view informations. The following example illustrates the DTO of the company, which contains fields for identifier, name, subdepartments and [[Feature:Total]].

<syntaxhighlight lang=""csharp"" source=""wcf/Dto/CompanyDto.cs"">
[ServiceContract]
[DataContract]
public class CompanyDto
{
	// Identifier
	[DataMember]
	public Guid Id { get; set; }

	// Name
	[DataMember]
	public string Name { get; set; }

	// Subdepartments
	[DataMember]
	public List<DepartmentDto> Departments { get; set; }

	// Total value
	[DataMember]
	public decimal Total { get; set; }
}
</syntaxhighlight>

== Architecture ==

The base folder contains the contract definition [this!!ICompanyService.cs] and the contract implementation ''ComanyService.svc.cs''. The file [this!!CompanyService.svc] links to the concrete implementation. DTO definitions are located in the ''dto'' folder. Both files, [this!!clientaccesspolicy.xml] and [this!!crossdomain.xml], solve possible cross-domain issues. The ''.config'' files in the base folder are generated.

== Usage ==

''Requirements:''
* You need Microsoft Windows (preferably Vista or 7) running in combination with [[Technology:.NET]] 4.0.
* Install [[Technology:IIS]] (Internet Information Services) 7 or 7.5 using the installation tutorials on [http://learn.iis.net/page.aspx/28/installing-iis-on-windows-vista-and-windows-7/ IIS] or [http://msdn.microsoft.com/de-de/library/aa964620.aspx MSDN]. Make sure, that you have installed the ""static content"" feature as well.
* Download the wcf implementation from github.

''Build:''
* Use [[Technology:Visual Studio]] to build the project.

''Create web site:''
* Go to the ""Computer Management"" dialog.
* Open the ""Services and Applications"" root and select the ""Internet Information Services (IIS) Manager"".
* On the right, there is a panel ""Connections"". Create a new web site by right click on ""web sites"".
* Use ''wcf'' as ""sitename"" and link to the physical folder of the wcf implementation. Use port 1212.

Make sure that http://localhost:1212/CompanyService.svc shows that you have created a service. After the [[Web service|web service]] is running, continue with your [[Client|client]] side application, for example [[Contribution:silverlight]].

We also used:
* version 4.0 of WCF
* version 4.0 of [[Language:CSharp]]
* and version 4.0 of the [[Technology:csc.exe]] [[Compiler|compiler]]
to create the implementation.

Attention: When creating a service anywhere other than on the web server, that hosts your Silverlight application, cross-domain issues can arise. Cross-domain calls between Silverlight applications and services present a security vulnerability and must be specifically enabled by an appropriate cross-domain policy. For procedures that describe how to implement such a policy, see ""Making a Service Available Across Domain Boundaries"" <cite>MSDN2012CD</cite>.

== Metadata ==
* [[uses::Language:CSharp]]
* [[uses::Language:XML]]
* [[uses::Language:WSDL]]
* [[uses::Technology:csc.exe]]
* [[uses::Technology:.NET]]
* [[uses::Technology:WCF]]
* [[uses::Technology:IIS]]
* [[uses::SOAP]]
* [[uses::Technology:ASP .NET]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Distribution]]
* [[developedBy::Contributor:avaranovich]]
* [[reviewedBy::Contribor:tzimmer]]
* [[sameAs::http://msdn.microsoft.com/en-us/library/cc197955(v=vs.95).aspx]]

",2013-06-12 14:59:11.359,2017-07-05 15:29:57.61597
Vocabulary,Data modeling,"== Headline ==

The vocabulary in the context of [[data modeling]]

== Metadata ==

* [[isA::Namespace:Vocabulary]]
* ",2013-06-12 15:02:30.577,2017-07-04 15:26:33.090874
Vocabulary,Software language engineering,"== Headline ==

The vocabulary in the context of [[software language]]s

== Metadata ==

* [[isA::Namespace:Vocabulary]]
* ",2013-06-12 15:02:33.852,2017-07-04 15:26:33.224486
Concept,Web application,"== Headline ==

An application that leverages web resources and technologies
== Details ==

""A web-application is a software system based on technologies and standards of the world wide web, that provides web specific resources such as content and services through a [[user interface]], the [[web browser]].""<cite>Web-Engineering</cite>
== Metadata ==

* [[memberof::Vocabulary:Internet]]
* [[sameAs::http://en.wikipedia.org/wiki/Web_application]]
* [[isA::Concept]]
",2013-06-12 14:56:52.591,2017-07-04 15:26:30.966538
Concept,XML data binding,"== Headline ==

Mapping between XML types and types of a programming language

== Synonyms ==

* [[Object-XML mapping]]

== Details ==

XML data binding stands for the general notion of mediating between XML types (e.g., based on [[Language:XSD]]) and programming languages types (e.g., [[OO class]]es or [[algebraic data type]]s in [[functional programming]]). Careful, one can easily run into the O/X impedance mismatch.<ref>Ralf Lämmel and Erik  Meijer: ""Revealing the X/O impedance mismatch (Changing lead into gold)"". In SSDGP'06
Proceedings of the 2006 international conference on Datatype-generic programming. Springer. 2007. Available online http://homepages.cwi.nl/~ralf/xo-impedance-mismatch/</ref>

== Metadata ==

* [[instanceOf::Mapping]]
* [[sameAs::http://en.wikipedia.org/wiki/XML data binding]]
",2013-06-12 14:56:56.574,2017-07-04 13:45:02.419979
Concept,XML serialization,"== Intent ==

serialization with XML as the serialization format

== Metadata ==

* [[instanceOf::Serialization]]
",2013-06-12 14:56:58.371,2017-07-04 13:45:02.462675
Concept,XMLware,"== Intent ==

a technological space focused on XML representation and XML processing

== Description ==

TBD

== Metadata ==

* [[instanceOf::Space]]
",2013-06-12 14:56:58.918,2017-07-04 13:45:02.473763
Concept,Remote method invocation,"== Headline ==

The [[OOP]] form of [[remote procedure call]]s

== Illustration ==

[[RMI]] is specifically established for the [[Technology:Java platform|Java platform]].

See [[Contribution:javaRmi]] for an illustration.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Java_remote_method_invocation]]
* [[isA::Concept]]

",2013-06-30 13:45:13.395,2017-07-04 15:26:33.45419
Concept,Template metaprogramming,"== Headline ==

A [[metaprogramming]] technique based on compile-time template instantiation

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Template_metaprogramming]]
* [[memberOf::Vocabulary:Programming]]
* [[isA::Concept]]

",2013-07-05 20:56:22.286,2017-07-04 15:26:34.148655
Category,101proposer,"== Intent ==

anyone who proposes an idea for the [[101project]]

== Description ==

TBD



== Metadata ==
* [[isA::101contributor]]",2013-08-12 13:38:36.139,2017-07-04 15:26:34.345498
Contribution,antlrAcceptor,"== Headline ==

An [[Technology:ANTLR|]]-based acceptor for textual syntax

== Characteristics ==

A concrete syntax for companies is defined using the grammar notation of [[Technology:ANTLR]] so that a parser can be generated. The underlying grammar is LL(1). Such parsing of concrete syntax is viewed as an instance of [[Feature:Parsing]]. However, the resulting implementation does not provide no further operations on companies. Hence, this is an incomplete implementation.

== Illustration ==

The data model is implemented as plain textual files:


A Parser for [[Feature:Company]] will be generated by [[Technology:ANTLR]] using src/main/antlr/Company.g.

A Company is defined by:

<syntaxhighlight language=""antlr"">
company :
  'company' STRING '{' department* '}' EOF;

department :
  'department' STRING '{'
    ('manager' employee)
    ('employee' employee)*
    department*
  '}';

employee :
  STRING '{'
    'address' STRING
    'salary' FLOAT
  '}';

STRING  :   '""' (~'""')* '""';
FLOAT   :   ('0'..'9')+ ('.' ('0'..'9')+)?;
WS      :   (' '|'\r'? '\n'|'\t')+ {skip();};
</syntaxhighlight>

[[Feature:Parsing]] is implemented using the generated Parser:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java/class/Parsing""/>

Test cases are implemented for all [[Namespace:Feature]]s. There is also an invalid input:

== Relationships ==
For a ANTLR4 version see [[Contribution:antlr4Acceptor]].

For plain syntax checking with [[Technology:ANTLR]] see [[Contribution:antlrAcceptor]].

For lexer-based text processing in pure [[Language:Java]] see [[Contribution:javaScanner]].


For lexing/tokenization with [[Technology:ANTLR]] see [[Contribution:antlrLexer]].

For a custom made lexer in pure [[Language:Java]] see [[Contribution:javaLexer]].


For parsing with semantic actions with [[Technology:ANTLR]] see [[Contribution:antlrParser]].

For recursive-descent parsing in pure [[Language:Java]]] see [[Contribution:javaParser]].

For parser combinators in pure [[Language:Java]]] see [[Contribution:javaParseLib]].


For object/text mapping from test to companies with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].

For object/text mapping from text to trees with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].

== Architecture ==

The contribution follows a standardized structure:
* src/main/antlr contains grammar files for [[Technology:ANTLR]].
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.antlr for [[Technology:ANTLR]]-generated Java classes (post build).
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[uses::Language:Java]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[memberOf::Theme:ANTLR]]
* [[memberOf::Theme:Java mapping]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:57:00.987,2017-07-05 15:25:23.900723
Contribution,atlCutPlugin,"== Headline ==

[[Model to Model transformation]]s with an [[ATL plugin]]

== Motivation ==
[[Model to Model transformation]]s with an [[ATL plugin]] is exercised in this implementation. Since a [[ATL plugin]] is usually a single [[transformation]], the only feature that is implemented by this contribution is the Cut feature. The Cut transformation is a [[endogenous model transformation]].

== Illustration ==
This contribution is mostly autogenerated by [[Language:ATL]] and [[Technology:Eclipse]]. The only manual component is the actual transformation, which is a standard [[Language:ATL]] [[transformation]] which can also be found in [[Contribution:atl]]. The [[metamodel]] that is used by the transformation must be provided by the implementation that uses the plugin.

== Architecture ==
* The transformation can be found in the ""ATL CutPlugin/files"" subfolder

== Usage ==
This implementation is not meant to be executed alone. It is used by [[Contribution:atlPluginUsage]]

== Metadata ==

* [[uses::Language:ATL]]
* [[uses::Language:Java]]
* [[uses::Technology:Eclipse]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:Hugo Brunelière]]
* [[reviewedBy::Contributor:rlaemmel]]
* [[reviewedBy::Contributor:martinleinberger]]
* [[memberOf::Theme:MDE]]

",2013-06-12 14:57:05.02,2017-07-05 15:25:33.078764
Concept,Uncurrying,"== Headline ==

Transformation of a function to take its multiple arguments at once

== Illustration ==

In [[Language:Haskell]], functions are typically in curried form. Consider, for example, the signature of addition:

<syntaxhighlight lang=""haskell"">
> :t (+)
(+) :: Num a => a -> a -> a
</syntaxhighlight>

Thus, addition takes one argument at a time. If we were to define addition in uncurried form, then this would look as follows:

<syntaxhighlight lang=""haskell"">
add :: Num a => (a, a) -> a
add (x,y) = x + y
</syntaxhighlight>

In fact, the uncurrying transformation can be represented by the following [[higher-order function]]:

<syntaxhighlight lang=""haskell"">
uncurry :: (a -> b -> c) -> (a, b) -> c
uncurry f (a,b) = f a b
</syntaxhighlight>

(We would need such an uncurry(ing) function for each number of arguments.) Thus, we can express the uncurrying transformation as follows:

<syntaxhighlight lang=""haskell"">
add' :: Num a => (a, a) -> a
add' = uncurry (+)
</syntaxhighlight>

== Relationships ==

See [[currying]] for the dual transformation.

== Citation ==

(http://en.wikipedia.org/wiki/Currying, 18 May 2013)

Uncurrying is the dual transformation to currying, and can be seen as a form of defunctionalization. It takes a function ''f''(''x'') which returns another function ''g''(''y'') as a result, and yields a new function ''f′''(''x'',''y'') which takes a number of additional parameters and applies them to the function returned by function ''f''.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Currying]]
* [[isA::Concept]]

",2013-06-12 14:56:43.477,2017-07-04 15:26:30.532313
Contribution,clojure,"== Intent ==
The present project provides a simple implementation of 101companies in Clojure.

== Description ==

We define the company's hierarchical structure by making use of clojure's defrecord.
defrecord will generate compiled class bytecode for companies, departments and employees. Each class with a set of the given fields.

There are two scenarios: Cutting and summing up salaries in a company.
We also provide a sample company (meganalysis).

=== Architecture of the project ===

In company.clj we make use of clojure's defrecord to define the companies structure.
scenarios.clj provides functionality to cut and total salaries.
A sample company can be found in meganalysis.clj

== Requirements ==

We make use of CounterClockwise: http://code.google.com/p/counterclockwise/
Update Site:
http://updatesite.counterclockwise.googlecode.com/hg/

== Demo ==

To run a demo:
* Open meganalysis.clj
* Hit ""run""
* Type ""(totalCompany meganalysis)"" or ""(totalCompany (cutCompany meganalysis))"" to cut and total the sample company's salaries.

== Metadata ==
* [[developedBy::Contributor:tschmorleiz]]

",2013-06-12 14:57:06.517,2017-07-04 13:45:06.011153
Language,XHTML,"== Headline ==

A markup language for documents on the Web

== Description ==

XHTML is a derivative or dialect of [[Language:HTML]].

It is more strictly XML-based.

== Metadata ==

* [[relatesTo::http://www.w3.org/MarkUp]]
* [[instanceOf:Markup language]]
* [[instanceOf:Domain-specific language]]
* [[instanceOf:XML language]]
* ",2013-06-12 15:00:40.215,2017-07-04 13:46:41.839043
Language,JPEG,"== Headline ==

A method of compression and an image format

== Metadata ==
* [[instanceOf::Image format language]]
* [[sameAs::http://en.wikipedia.org/wiki/JPEG]]
* ",2013-06-12 15:00:29.404,2017-07-04 13:46:41.258915
Language,XLS,"== Headline ==

The file format for the spreadsheet application [[Technology:Microsoft Excel]]

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/Microsoft_Excel]]
* ",2013-06-12 15:00:40.499,2017-07-04 13:46:41.851433
Contribution,coq,"== Headline ==

Demonstration of the [[Technology:Coq]] Proof Assistant

== Metadata ==

* [[developedBy::Contributor:jlouis]]
* [[carries::Tag:Stub]]


",2013-06-12 14:57:07.672,2017-07-04 13:45:06.288794
Contribution,cobol,"== Headline ==

A simple implementation in [[Language:Cobol]]

== Motivation ==

Cobol is a language that readily comes with means of data modeling and
storage (persistence). Hence, it provides a good fit for the basic features and persistence.

== Architecture ==

Directory hierarchy:
* ''programs'': main Cobol programs for sample data and features
* ''copybooks'': copybooks reused across the different programs
* ''data'': location for keyed files
* ''baselines'': baselines for automated test; see below

== Usage ==

There is a ''Makefile'' that exercises all features in some scripted order. All programs are compiled with the OpenCobol compiler (Version 1.0) and executed with its runtime.

== Issues ==

It would be interesting to provide a Cobol-like user interface.

== Metadata ==

* [[uses::Language:Cobol 85]]
* [[uses::Technology:OpenCOBOL]]
* [[implements::Feature:Tree structure]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Persistence]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:57:07.403,2017-07-05 15:25:35.593213
Contribution,cppMpl,"== Headline ==

Template metaprogramming with C++

== Motivation ==

This is an esoteric implementation in C++ using template metaprogramming. It isn't how you would ''want'' to ever do this, but there are some pretty simple examples of C++ MPL, so it might be a good example for people wanting to learn C++ MPL.

== Metadata ==

* [[developedBy::Contributor:tgockel]]
* [[carries::Tag:Stub]]
* [[carries::Tag:Experiment]]
",2013-06-12 14:57:07.952,2017-07-04 13:45:06.310001
Contribution,csharpDryadLinq,"== Headline ==

Parallel processing with [[Technology:DryadLINQ]]

== Usage ==

* Download and install HPC Pack with SP1 SDK http://www.microsoft.com/download/en/details.aspx?id=9230
* Download and install HPC Pack 2008 R2 Client Utilities http://www.microsoft.com/download/en/details.aspx?id=17017
* http://research.microsoft.com/en-us/downloads/03960cab-bb92-4c5c-be23-ce51aee0792c/

== Metadata ==

* [[memberOf::Theme:Data parallelism]]
",2013-06-12 14:57:10.098,2017-07-04 13:45:06.69108
Technology,Java security,"== Headline ==

Java's security framework

== Metadata ==

* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/security/package-summary.html]]
* ",2013-06-12 15:01:39.77,2017-07-04 13:47:30.167408
Contribution,csharpLinqToXml,"== Headline ==

[[In-memory XML processing]] with [[Technology:LINQ]]
== Characteristics ==

LINQ to XML is used in 2 scenarios:

* Reconstruct full in-memory model. Linq2Xml is used to create a full in-memory object tree from the source XML file.
* Cut and Total operations implemented directly on top of XML file where the model is stored.
== Architecture ==

C# object-oriented representation of 101companies model iimlemented in [[Contribution:csharp]] is used. It contains classes with required properties and methods(features implementations).

* Manual reconsctruction of object model from xml
* Transformations for pure xml model representation without using OO-model
== Usage ==

[[Technology:Visual Studio]] 2010 should be used to open a project file.
The project itself is a class-library and compiles into a DLL. To run a project you must execute at least one unit test (or all at once).
Nunit GUI or other Visual studio extension (e.g., Resharper) should be used for executing unit tests.
== Metadata ==

* [[memberOf::Theme:XML programming]]
* [[uses::Language:CSharp]]
* [[uses::Technology:csc.exe]]
* [[uses::Technology:LINQ to XML]]
* [[uses::Technology:.NET]]
* [[uses::Technology:NUnit]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:avaranovich]]
",2013-06-12 14:57:10.441,2017-07-05 15:25:37.030516
Concept,Zipper monad,"== Headline ==

A [[Monad|monadic]] implementation of the [[zipper]] concept in [[Language:Haskell|Haskell]]

== Discussion ==

In Haskell zippers for binary trees are implemented by means of a monad <cite>haskellWikiZipper</cite>.

== Metadata ==

* [[isA::Monad]]
* [[sameAs::http://www.haskell.org/haskellwiki/Zipper]]

",2013-06-12 14:57:00.124,2017-07-04 15:26:32.09789
Concept,Ranking,"== Headline ==

Check salaries to follow ranks in company hierarchy

== Description ==

Any company needs a pay structure (say, pay model). The present feature describes a constraint for a particular pay structure. Within each department, the salary of the department's manager is higher than all salaries of a department's immediate and sub-immediate employees. The constraint needs to be checked or enforced along construction and the modification of company data. Clearly, this is just one possible and arguably rather rigid and unrealistic pay structure.

== Motivation ==

Conceptually, the feature imposes a global invariant on company data. Straightforward expressiveness of type systems is not sufficient to model the constraint. Simple contracts in the sense of pre- and post-conditions or class invariants on local state are also not sufficient; we need to allow for traversal of object graphs. Of course, the constraint can be expressed more or less easily as a recursive computation, very much like a query over the hierarchical structure of companies; see [[Feature:Depth]].

== Illustration ==

The feature is illustrated with a [[Function]] in [[Language:Haskell]] that works on top of appropriate [[algebraic data type]]s for company data; the function recurses into company data in a straightforward manner and it counts departments along the way:

<syntaxhighlight lang=""haskell"">
align :: Company -> Bool
align (Company   ds) = and (map (align' Nothing) ds)
  where
    align' :: Maybe Float -> Department -> Bool
    align' v (Department   m ds es)
      =  maybe True (>getSalary m) v
      && and (map (align' (Just (getSalary m))) ds)
      && and (map ((<getSalary m) . getSalary) es)
    getSalary :: Employee -> Float
    getSalary (Employee     s) = s
</syntaxhighlight>

Further, in some code locations the constraint needs to be invoked. Here is some snippet that shows how the constraint is invoked past cutting salaries:

<syntaxhighlight lang=""haskell"">
main = do
      ... -- code omitted

      -- Cut all salaries
      let company' = cut company

      -- Test that salaries align with hierarchy
      if not (align company')
        then error ""constraint violated""
        else return ()
</syntaxhighlight>

The snippet originates from [[Contribution:haskellComposition]].

== Relationships ==

* The present feature can only usefully instantiated on top of [[Feature:Hierarchical_company]], as it assumes nesting of departments for non-trivial results.
* A straightforward scenario for testing the present feature would check the constraint past cutting salaries according to [[Feature:Cut]].

== Guidelines ==

* The ''name'' of a constrain for checking alignment of salaries with hierarchical company structure should involve the term ""align"".
* A suitable ''demonstration'' of the feature's implementation should show the constraint is to be invoked (explicitly or implicitly) past construction or modification of company data.

== Metadata ==

* [[relatesTo::http://www.aafp.org/fpm/2000/0200/p30.html]]
* [[relatesTo::http://www.ehow.com/info 12076331 alternative-pay-structures-salaried-employees.html]]
* [[relatesTo::http://www.slideshare.net/aaronphamilton/strategic-compensation-structure-egalitarian-v-hierarchical]]
* [[relatesTo::http://papers.ssrn.com/sol3/papers.cfm?abstract id=74303]]
* [[relatesTo::http://en.wikipedia.org/wiki/Hierarchical organization]]
* [[isA::Data requirement]]
* [[isA::Optional feature]]
* [[implies::Feature:Hierarchical_company]]
* ",2015-07-26 20:56:40.77,2017-07-04 15:26:43.460682
Feature,Persistence,"== Headline ==

[[Persistence|Persist]] companies

== Description ==

This feature covers the capability of [[persistence]] for the [[system:Company]]. The feature is considered an [[101execution|execution quality]] in the sense that the system can save and re-load data for use beyond the lifetime of a specific execution instance of the system while also providing the scalability-related aspects of proper persistence. Otherwise, [[Feature:Serialization]] applies. That is, persistence is supposed to make the system specifically scale for large data volume due to lazy loading.

== Metadata ==

* [[instanceOf::Non-functional requirement]]
* [[instanceOf::Optional feature]]

",2013-06-12 14:59:50.937,2017-07-04 13:46:35.456489
Concept,Specification,"== Headline ==

A description of a [[software system]] or [[software component|component]]

== Description ==

A [[specification]] describes a [[software system]] or [[software component|component]] at a higher level of abstraction and it should abstract from [[implementation]] details. A [[specification]] may be written in a [[specification language]] as opposed to a [[programming language]].

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Specification_language]]
* [[memberOf::Vocabulary:Software engineering]]
* [[relatesTo::Implementation]]
* [[isA::Concept]]

",2013-06-12 14:56:08.461,2017-07-04 15:26:24.862083
Concept,Specification language,"== Headline ==

A [[software language]] in which [[specification]]s are written

== Metadata ==

* [[memberOf::Vocabulary:Software engineering]]
* [[sameAs::http://en.wikipedia.org/wiki/Specification_language]]
* [[relatesTo::Software design]]
* [[isA::Concept]]

",2013-06-12 14:56:08.678,2017-07-04 15:26:24.925967
Language,XMI,"== Headline ==

An [[Language:XML]]-based interchange format for [[Technology:MOF]]-based [[metadata]] or [[model]]s

== Metadata ==
* [[sameAs::http://en.wikipedia.org/wiki/XML_Metadata_Interchange]]
* [[instanceOf::Structural_modeling_language]]
* [[subsetOf::Language:XML]]",2013-06-12 15:00:40.767,2017-07-04 13:46:41.868589
Technology,Kiama,"== Intent ==

a [[Language:Scala]] [[library]] for language processing

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://code.google.com/p/kiama/]]
* ",2013-06-12 15:01:41.466,2017-07-04 13:47:30.25147
Contribution,fsharpRecords,"== Headline ==

A simple implementation in [[Language:FSharp|F#]] for the [[Technology:.NET]] Framework

== Characteristics ==

The contribution demonstrates  basic style of [[functional programming]] in [[Language:FSharp|F#]].
Persons, Employees, Departments and Companies are represented via [[record]] types.  [[Pure function]]s are implemented
in pipelining  style to realize totaling and cutting salaries.

== Illustration ==

The company model uses records to [[data composition]]:

Basic types for [[string]]s and [[float]]s are used to represent names, addresses and salaries.
More advanced [[array]]s are used to represent a collection of the recently named [[record]]s (Employee, Department)

The Department record is structured as follows

<syntaxhighlight lang=""fsharp"">
type Department = {
         mutable Name : string;
         mutable Manager : Employee;
         mutable Employees : Employee[];
         mutable SubUnits : Department[];
        }
</syntaxhighlight>

[[Feature:Total]] and [[Feature:Cut]] are implemented by families of functions on the company types.
We only show the family for totaling salaries here which uses pipelining style.

<syntaxhighlight lang=""fsharp"">
-- Total all salaries in a company
-- totalComp:: Company -> Decimal
let totalComp (comp:Company) =
    List.fold (fun (acc) (elem:Department) -> acc + totalDept(elem)) 0M (List.ofSeq comp.Departments)


-- Total all salaries in a department
-- totalDept:: Department -> Decimal
let rec totalDept (dept:Department) =
    dept.Manager.Salary
    |> fun t -> List.fold (fun (acc) (elem:Department) -> acc + totalDept(elem)) t (List.ofSeq dept.SubUnits)
    |> fun t -> List.fold (fun (acc) (elem:Employee) -> acc + elem.Salary) t (List.ofSeq dept.Employees)
</syntaxhighlight>

== Architecture ==

The contribution consit of four modules: ""CompanyModels.fs"" which contains the definition of the used classes (including the total / cut function);
""CompanyBuilder.fs"" which creates a sample instance of a company;
""Program.fs"" which basically creates a sample company through ""buildCompany"" of ""CompanyBuilder.fs"" and executes total and cut printing the results (simple testing);
""Test.fs"" which contains a more professional NUnit Test scenario.

== Metadata ==

* [[uses::Language:FSharp|F#]]
* [[uses::Technology:fcs.exe]]
* [[uses::Technology:.NET]]
* [[uses::Technology:NUnit]]
* [[uses::Technology:Visual Studio]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Company]]
* [[developedBy::Contributor:MightyNoob]]

",2013-06-12 14:57:19,2017-07-05 15:26:03.894597
Contribution,gra2mol,"== Headline ==

[[Text to Model transformation]] with [[Technology:Gra2Mol]]

== Motivation ==

A [[Text to Model transformation]] from a [[grammar]] into a [[model]] with Gra2MoL is exercised in this implementation. [[Technology:ANTLR]] is used to create a [[lexer]] and a [[parser]] based on a [[grammar]]. Then, the [[Technology:Gra2Mol]] specific rules are used to convert the parsing results into a [[model]] that conforms to a given [[Language:Ecore]] [[metamodel]].

== Illustration ==

The grammar used in the example is a normal [[Technology:ANTLR]] grammar. For example, the line for parsing companies looks like
<syntaxhighlight lang=""text"">
company :
  'company' STRING '{' department* '}' EOF;
</syntaxhighlight>

The results of the parsing process are then converted into a model by using rules like
<syntaxhighlight lang=""text"">
rule 'mapCompany'
	from company c
	to   Company
	queries
	  dElem : /c//#department;
	mappings
	  name  = removeQuotes c.STRING;
	  depts = dElem;
end rule
</syntaxhighlight>
The rule takes the result ""c"" from the  [[Technology:ANTLR]] rule and converts it into an element of type ""Company"" in the resulting model. To do so, it queries all departments in ""c"". It then maps the String from the  [[Technology:ANTLR]] rule on the name property of the Company element. The departments ""dElem"" are mapped on the property ""deps"" of the Company element.

== Architecture ==

* The ""Company.ecore"" metamodel models companies (see ""grammars"" folder)
* transformation rules are defined in ""transformation.g2m"" (see ""src"" folder)
* The grammar used is called ""Company.g"" (see ""grammars"" folder)
* example1.101 in the directory ""src"" is the input file for the transformation

== Usage ==

To this end, the [http://www.eclipse.org/modeling/ Eclipse Modeling Project] or a standard Eclipse with the [http://download.eclipse.org/modeling/m2m/updates/site.xml MDE Plugin] is needed.

Steps:
* The project should be imported into Eclipse (""File"" -> ""Import"")
* The project provides an Ant file called build.xml. This file can be used to apply the transformation.
* Right click on the build.xml and select ""Run As"" -> ""1 Ant build"". This may fail the first time, but it should succeed the second time.

Comments:
* In order to see the output, it may be needed to refresh the Package Explorer View in Eclipse. To do that, right click on the project and choose ""Refresh"".

== Metadata ==
* [[uses::Language:Java]]
* [[uses::Language:Ecore]]
* [[uses::Language:XMI]]
* [[uses::Technology:ANTLR]]
* [[uses::Technology:Gra2Mol]]
* [[uses::Technology:EMF]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:jlcanovas]]
* [[reviewedBy::Contributor:martinleinberger]]
* [[memberOf::Theme:MDE]]

",2013-06-12 14:57:20.528,2017-07-05 15:26:04.545006
Concept,Strategic programming,"== Headline ==

A form of programming inspired by [[Technology:Stratego]]

== Metadata ==

* [[isA::Programming]]
",2013-06-12 14:56:10.544,2017-07-04 15:26:25.70064
Contribution,gremlin-neo4j,"== Headline ==

A graph-based implementation using Neo4J and the Gremlin graph query DSL

== Motivation ==

This implementation uses the [[Technology:Neo4j]] [[Technology:Graph database]] to directly map the 101companies [[Feature:Hierarchical company]] to the database model.

== Illustration ==

Employees and departments both are modelled as nodes with names and addresses as properties. Employment, Management and Subdepartment relations are modelled as the graph's edges. Salaries are considered properties of employment and therefore annotated to the corresponding edges.

* Employment is marked via edges with a ""EMPLOYED"" relation.
* A department having a subdepartment is shown by an edge with the ""HAS SUBUNIT"" relation.
* An employee being manager of a department is noted via the ""MANAGES"" relation.

The Gremlin language works by chaining operations on the graph that traverse, or select nodes and edges. To total all salaries in a company, the graph just has to be queried for all edges that are of the ""EMPLOYED"" type, take their salary property and sum it up. This is achieved with the line:

<syntaxhighlight lang=""groovy"">
g.V.outE('EMPLOYED').collect{it.salary}.flatten().sum()
</syntaxhighlight>

To cut the salaries of employees, Gremlin has to set the value of a property which is treated as a side effect and properly signaled by the use of the sideEffect method:

<syntaxhighlight lang=""groovy"">
g.V.out('EMPLOYED').sideEffect{it.salary = (double)it.salary / 2.0}
</syntaxhighlight>

Note that there has to be a cast in the division as Groovy treats the results of division as BigDecimal rather than double.

Gremlin scripts can be executed on Neo4J via its [[REST]] API. Example queries can be sent via the UNIX tool curl, either directly as payload to a request to the respective URL at the local database host:

<syntaxhighlight lang=""bash"">
$ curl -d ""script=$MYSCRIPT"" http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute script
</syntaxhighlight>

Please note that special characters in the script need to be properly escaped.

== Usage ==

There are three shellscripts that send the respective commands to a local running Neo4J database on default port 7474. Please make sure that no other content is hosted on the local database!
Run rebuild.sh to insert the example information into the database:

<syntaxhighlight lang=""bash"">
$ ./rebuild.sh
</syntaxhighlight>

The basic features are demonstrated by running the respective shellscripts such as:

<syntaxhighlight lang=""bash"">
$ ./total.js
</syntaxhighlight>

Each script will print out the results of the respective computation.

== Metadata ==

* [[uses::Technology:Neo4j]]
* [[uses::Technology:Gremlin]]
* [[uses::Language:Groovy]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:DerDackel]]
* [[memberOf::Theme:NoSQL]]

",2013-06-12 14:57:22.714,2017-07-05 15:26:07.13451
Language,XML,"== Headline ==

The extensible markup language

== Metadata ==

* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/XML]]
* [[sameAs::https://www.w3.org/XML/]]
* [[facilitates::Data exchange]]
",2013-06-12 15:00:41.038,2017-07-04 13:46:41.883338
Language,XPath,"== Headline ==

A query language for XML queries

== Metadata ==

* [[instanceOf::External DSL]]
* [[sameAs::http://www.w3.org/TR/xpath/]]
* [[partOf::Language:XSLT]]
",2013-06-12 15:00:41.314,2017-07-04 13:46:41.896689
Contribution,javaParser,"== Headline ==

Recursive-descent parsing in [[Language:Java]]

== Characteristics ==

Recursive-descent parsing is used to process a text-based representation of companies.
The underlying lexer is custom-made, too.
Both lexer and parser use a lookahead of 1.
The lexer reports all tokens excluding whitespace.
The parser relies on protected handler methods to allow for injection of semantic actions.
For instance, [[Feature:Total]] is implemented by defining the handler for employees to aggregate salaries.
The implementation of [[Feature:Cut]] requires ad hoc pretty printing.
Such a combination of parsing and pretty printing implements [[Feature:Parsing]] and [[Feature:Unparsing]].

== Illustration ==

The data model is implemented as plain textual files:

<fragment url=""inputs/sample.Company""/>

[[Feature:Parsing]] is implemented with helper class org.softlang.company.features.recognizer.Parser:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java/class/Parsing""/>

[[Feature:Unparsing]] is implemented as part of [[Feature:Cut]].

[[Feature:Total]] and [[Feature:Cut]] extend the Parser with semantic actions. For example Total:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/getTotal""/>

Test cases are implemented for all [[Namespace:Feature]]s. There is also an invalid input:

<fragment url=""inputs/nonSample.Company""/>

== Relationships ==

For plain syntax checking with [[Technology:ANTLR]] see [[Contribution:antlrAcceptor]].

For lexer-based text processing in pure [[Language:Java]] see [[Contribution:javaScanner]].


For lexing/tokenization with [[Technology:ANTLR]] see [[Contribution:antlrLexer]].

For a custom made lexer in pure [[Language:Java]] see [[Contribution:javaLexer]].


For parsing with semantic actions with [[Technology:ANTLR]] see [[Contribution:antlrParser]].

For recursive-descent parsing in pure [[Language:Java]]] see [[Contribution:javaParser]].

For parser combinators in pure [[Language:Java]]] see [[Contribution:javaParseLib]].


For object/text mapping from test to companies with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].

For object/text mapping from text to trees with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
*** org.softlang.company.features.recognizer for lexer, acceptor and parser for companies.
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:12.391,2017-07-05 15:28:46.74695
Language,XQuery,"== Headline ==

A language for XML processing, specifically for querying

== Metadata ==

* [[instanceOf::XML language]]
* [[instanceOf::Functional programming language]]
* [[sameAs::http://www.w3.org/XML/Query XQuery]]
* ",2013-06-12 15:00:41.645,2017-07-04 13:46:41.910519
Language,XSD,"== Headline ==

TBD

== Discussion ==

TBD

== Links ==

TBD

== Metadata ==

* [[instanceOf::XML language]]
* ",2013-06-12 15:00:41.872,2017-07-04 13:46:41.925973
Contribution,groovyDataFlowVariables,"== Headline ==

A [[Language:Groovy|Groovy]]-based implementation that uses [[data flow variables]]

== Motivation ==

[[Language:Groovy|Groovy]] is one of the most well-known [[JVM languages]].
One of its strength lies in the [[Technology:GPars|GPars]] ,
which offers many different approaches to [[parallel programming]]. An
interesting concept is the [[concurrency]] based on [[data flow]]. The overall
idea is the creation of a temporal order between processes, seeing the availability
of certain values as [[constraints]]. This project demonstrates the usage of
this [[data flow]] [[concurrency]] in [[Language:Groovy|Groovy]] using [[data flow variables]].

== Illustration ==

Queries like [[Feature:Total]] depends on different values (e.g.
the [[Feature:Total]] of each department). Because these subqueries
are independent from each other they can be executed in parallel.

In general, all subcomputations are outsourced in a new [[thread]]. Therefore,
these computations are encapsulated into [[Closure|closures]] and transfered
to the ''task'' method. If such a [[thread]] needs a value of a [[data flow variables|data flow variable]],
which is not bound (i.e. computed) yet, it is [[wait|suspended]] until its [[notify all|awoken]]
by the system. For compact programing [[Technology:GPars|GPars]] offers a
[[container]] like [[bean]], which properties are [[data flow variables]].
These variables are initialized [[Lazy Evaluation|lazily]] the first time they are accessed.
An example for such a [[bean]] is ''totals''.

 <nowiki>
// outsourcing total computation for each the department
depts.each() { d ->
    task {
    // adding dept's total as dataflow variable to the bean
        totals.putAt d.name, d.total()
    }
}
</nowiki>

== Architecture ==

* ''Company.groovy'' everything related to a company
* ''Department.groovy'' everything related to a department
* ''Employee.groovy'' everything related to an employee
* ''Basic.groovy'' basic functionality tests with a sample company

== Usage ==

You need to install the [[Technology:Eclipse|Eclipse]] plugin [[Technology:Groovy-Eclipse|Groovy-Eclipse]].
Update Site: [http://dist.springsource.org/release/GRECLIPSE/e3.7/]

Then open ''Basic.groovy'' and start the [[Technology:JUnit|JUnit]] test case you like.
The implementation has been tested with:
* Eclipse IDE (Version 3.7)
* Groovy-Eclipse: Eclipse plugin (Version 2.5.1)
* GPars: Parallel computing framework (Version 0.12)
* JUnit: Unit testing (Version 4.8.2)

== Metadata ==

* [[uses::Language:Groovy]]
* [[uses::Technology:Eclipse]] IDE (Version 3.7)
* [[uses::Technology:Groovy-Eclipse]]  Eclipse plugin (Version 2.5.1)
* [[uses::Technology:GPars]] Parallel computing framework (Version 0.12)
* [[uses::Technology:JUnit]] Unit testing (Version 4.8.2)
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Task parallelism]]
* [[developedBy::Contributor:jbaltzer]]

",2013-06-12 14:57:23.086,2017-07-05 15:26:08.398579
Contribution,gwtTree,"== Intent ==

[[Feature:Browsing]] [[web programming]] with [[Technology:GWT]]

== Motivation ==

[[Technology:GWT]] is a framework for creating [[Language:JavaScript]] [[Web application|web applications]] with [[Ajax]] support in [[Language:Java]]. Thereby, the complete JavaScript code is generated out of the Java code. The result is a complete [[Client-server architecture|client-server-based]] web application with a tree based [[GUI]]. Additionaly, the implementation extends the basic [[Contribution:gwt]] adding the [[Feature:Editing]] and [[Feature:Restructuring]].

== Illustration ==

The main difference to the [[Contribution:gwt]] implementation is the improvement of the [[Feature:Browsing]]. Hence, the focus of this section is the development of the GUI and the implementation of the new features.

=== GUI implementation ===

The supervising component of the GUI is the parent class implemented in [this!!src/org/softlang/client/GwtTree.java GwtTree.java]. This component manages the visibility of the three panels [this!!src/org/softlang/client/CompanyPanel.java CompanyPanel.java], [this!!src/org/softlang/client/DepartmentPanel.java DepartmentPanel.java] and [this!!src/org/softlang/client/EmployeePanel.java EmployeePanel.java] and, additionaly, contains the panel [this!!src/org/softlang/client/TreePanel.java TreePanel.java]. The method <syntaxhighlight lang=""java"" enclose=""none"">onModuleLoad()</syntaxhighlight> initializes all these panels on application start.

==== Tree ====

The class <syntaxhighlight lang=""java"" enclose=""none"">Tree</syntaxhighlight>, included in [[Technology:GWT]], provides great support for a tree based view. Every tree item contains a user object with the identifier of the specific entity. The tree generation starts with the company as root:

<syntaxhighlight lang=""java"" source=""gwtTree/src/org/softlang/client/TreePanel.java"">
...

for (CompanyItem item : info.getCompanies()) {
	TreeItem root = new TreeItem(item.getName());
	root.setUserObject(item);
	appendDepsAndEmps(root, item.getDepartments());
	addItem(root);
}

...
</syntaxhighlight>

First, the tree item for the company is generated with the name of the company. The <syntaxhighlight lang=""java"" enclose=""none"">setUserObject</syntaxhighlight> method adds the <syntaxhighlight lang=""java"" enclose=""none"">CompanyItem</syntaxhighlight> with the identifier of the company. The method <syntaxhighlight lang=""java"" enclose=""none"">appendDepsAndEmps</syntaxhighlight> appends all departments and employees to the company root. At last, this root is added to the tree.

The selection handler of the tree invokes the displaying of the additional informations for each entity included in the company:

<syntaxhighlight lang=""java"" source=""gwtTree/src/org/softlang/client/TreePanel.java"">
...

this.addSelectionHandler(new SelectionHandler<TreeItem>() {

	@Override
	public void onSelection(SelectionEvent<TreeItem> event) {
		Object obj = event.getSelectedItem().getUserObject();
		if (obj instanceof CompanyItem) {
			TreePanel.this.main.showCompany(((CompanyItem)obj).getId());
		} else if (obj instanceof DepartmentItem) {
			TreePanel.this.main.showDepartment(((DepartmentItem)obj).getId());
		} else if (obj instanceof EmployeeItem) {
			TreePanel.this.main.showEmployee(((EmployeeItem)obj).getId());
		}
	}
});

...
</syntaxhighlight>

The <syntaxhighlight lang=""java"" enclose=""none"">TreePanel.this.main</syntaxhighlight> member provides the main class [this!!src/org/softlang/client/GwtTree.java GwtTree.java]. There is a different method <syntaxhighlight lang=""java"" enclose=""none"">TreePanel.this.main.show...</syntaxhighlight> for each different entity class. This method includes the specific company, department or employee panel into the GUI and initializes it with the corresponding data.

==== Panel ====

The following section illustrates the main functionalities of the department panel. This panel containes two textfields for the name and the total value and two listboxes for the parent department and the manager. These elements are encapsulated within a <syntaxhighlight lang=""java"" enclose=""none"">grid</syntaxhighlight>:

<syntaxhighlight lang=""java"" source=""gwtTree/src/org/softlang/client/DepartmentPanel.java"">
...

Grid grid = new Grid(4, 3);

...

Label lname = new Label(""Name:"");
lname.setWidth(""60px"");

// add labels
grid.setWidget(0, 0, lname);
grid.setWidget(1, 0, new Label(""Total:""));
grid.setWidget(2, 0, new Label(""Manager:""));
grid.setWidget(3, 0, new Label(""Parent:""));

// add textboxes
grid.setWidget(0, 1, name);
grid.setWidget(1, 1, total);
grid.setWidget(2, 1, manager);
grid.setWidget(3, 1, parent);

...

add(grid);

HorizontalPanel buttons = new HorizontalPanel();

...

buttons.add(save);
buttons.add(cut);
buttons.add(delete);

add(buttons);

...
</syntaxhighlight>

The Grid constructor has two parameters for the table rows and columns. First, the labels are added and second, the textfields and listboxes are added. The buttons cut, save and delete are added within a seperate <syntaxhighlight lang=""java"" enclose=""none"">HorizontalPanel buttons</syntaxhighlight>.

=== Feature implementation ===

The following part shows the implementation of the [[Feature:Cut]] for departments. We assume, that a user has clicked on the ""Cut"" button to create a corresponding request. All [[Client|client]] side requests are handled via [[Asynchronous communication|asynchronous communication]]. First we need a connection to the server-side service:

<syntaxhighlight lang=""java"" source=""gwtTree/src/org/softlang/client/DepartmentPanel.java"">
private final DepartmentServiceAsync departmentService = GWT.create(DepartmentService.class);
</syntaxhighlight>

This simple initialisation provides an easy possibility to connect the [[Client|client]] to the [[Server|server]]. The next step is to create a [[Feature:Cut]] request. We have implemented this feature with the [this!!src/org/softlang/client/interfaces DepartmentService.java] interface. By calling this method, the request is created and the corresponding [[Server|server]] side method is invoked. The two parameters of the method are in first the department identifier (""''department''"") and in second an object for the asynchronous callback.

<syntaxhighlight lang=""java"" source=""gwtTree/src/org/softlang/client/DepartmentPanel.java"">
departmentService.cut(department, new AsyncCallback<Double>() {

	// If the server responds an error, this method is invoked.
	@Override
	public void onFailure(Throwable caught) {
		Window.alert(caught.getMessage());
	}

	// If the request is successfully executed on server side, this method is invoked with a new total value as parameter.
	@Override
	public void onSuccess(Double result) {
		DepartmentPanel.this.total.setText(Double.toString(result));
	}
});
</syntaxhighlight>

If the request fails, the ''onFailure'' method simply returns an adequate error message. If the request succeeds, the server returns the new total value for the department. The server side request handler is implemented as a method:

<syntaxhighlight lang=""java"" source=""gwtTree/src/org/softlang/server/DepartmentServiceImpl.java"">
	@Override
	public double cut(Integer id) {
		// This statement loads the department with the given id.
		Department department = CompanyApp.getInstance().getDepartments().get(id);

		// The department gets cutted.
		department.cut();

		// The new total value for the department is returned.
		return department.total();
	}
</syntaxhighlight>

This method first calls amethod cut for the specific department and then returns the new total value to the client. The method for one department is implemented the following way:

<syntaxhighlight lang=""java"" source=""gwtTree/src/org/softlang/server/company/Department.java"">
public class Department implements Parent {

	// Members
	private int id;
	private String name;
	private List<Department> departments;
	private List<Employee> employees;
	private Parent parent;

	...

	// This method cuts the salary of all contained employees and all contained subdepartments.
	public void cut() {
		for (Employee employee : employees) {
			// The employees salary is devided by 2.
			employee.cut();
		}
		for (Department department : departments) {
			// The subdepartments are cutted recursively.
			department.cut();
		}
	}

	...

}
</syntaxhighlight>

== Architecture ==

* The application architecture is devided into client and server packages: [this!!src/org/softlang/client org.softlang.client] and [this!!src/org/softlang/server org.softlang.server]. While the server package contains all relevant data for the representation of the [[Feature:Hierarchical company]], the client package contains all relevant informations to generate a [[user interface]].
* The interfaces for [[asynchronous communication]] between client and server are defined in [this!!src/org/softlang/client/interfaces org.softlang.client.interfaces]. These interfaces are also implemented by the service classes of the server.
* The communication between server and client is provided with [[Serialization|serialized]] classes, which can be interpreted by the client implementation. Therefore, we have two classes for each company, department and employee to submit the data from the server to the client. The first class, provided in [this!!src/org/softlang/client/guiinfo org.softlang.client.guiinfo], delivers the data needed for the whole set of information for an entity like name, address, salary and parent for a given employee. The second class, provided in [this!!src/org/softlang/client/guiinfo/tree org.softlang.client.guiinfo.tree], delivers the data needed for generating a tree-based [[GUI]].
* The GUI is divided into panels for each concern. They are located in [this!!src/org/softlang/client org.softlang.client]. The panels are initialized in the class [this!!src/org/softlang/client/GwtTree.java GwtTree.java]. The panels [this!!src/org/softlang/client/CompanyPanel.java CompanyPanel.java], [this!!src/org/softlang/client/DepartmentPanel.java DepartmentPanel.java] and [this!!src/org/softlang/client/EmployeePanel.java EmployeePanel.java] are exchangeable with each other, while the panels [this!!src/org/softlang/client/TreePanel.java TreePanel.java] and the [this!!src/org/softlang/client/ButtonPanel.java Buttonpanel.java] are always visible.

== Usage ==

The [[101implementation|implementation]] is created with [[Technology:Eclipse]] (3.7/Indigo) and the [[Technology:GWT]]-plugin (Version 2.5). If you want to compile the code, you need these versions to run it safely. You can get them at:

* [http://www.eclipse.org/downloads/ Eclipse]
* [http://code.google.com/intl/de-DE/eclipse/docs/download.html GWT]

After installation and start, simply open this [[web application]] as project in Eclipse:

* Please clean up (Project -> Clean...) the project before running.
* Right-click on the project, left-click on ""Run As"" and left-click on ""Web-application"".
* Visit http://127.0.0.1:8888/GwtTree.html?gwt.codesvr=127.0.0.1:9997

If you want to recompile it, please end the old server-process by terminating the process in the [[Technology:Eclipse]] console first.
The web browser is required to exersise the contribution.
The implementation has been tested with GWT version 2.5.

== Metadata ==

* [[uses::Language:Java]]
* [[uses::Language:JavaScript]]
* [[uses::Language:HTML]]
* [[uses::Language:XML]]
* [[uses::Language:CSS]]
* [[uses::Technology:GWT]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Ranking]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Restructuring]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:tzimmer]]
* [[memberOf::Theme:Web applications in Java]]
",2013-06-12 14:57:26.317,2017-07-05 15:26:15.512078
Contribution,haskellData,"== Headline ==

Use of [[algebraic data type]]s in [[Language:Haskell]]
== Characteristics ==

A data model for flat companies is defined in terms of Haskell's [[algebraic data type]]s. Other than that, the contribution is a simple variation on [[Contribution:haskellEngineer]]. The systematic use of algebraic data types implies nominal type distinctions in the sense of [[nominal typing]]. For instance, arbitrary floats cannot be confused with salaries which are floats only structurally. The different kinds of names for companies, departments, and employees are not distinguished, even though this would also be possible, in principle.
== Illustration ==

The data model looks like this:

<fragment url=""src/Company/Data.hs""/>

A sample company looks like this:

<fragment url=""src/Company/Sample.hs""/>

[[Feature:Total]] is implemented as follows:

<fragment url=""src/Company/Total.hs""/>
== Relationships ==

* The present contribution is a slightly more complex variation on [[Contribution:haskellEngineer]] in that it uses data types as opposed to type synonyms.
* See also [[Contribution:haskellRecord]], which uses record types instead of plain data types.
== Architecture ==

See [[Contribution:haskellEngineer]].
== Usage ==

See https://github.com/101companies/101haskell/blob/master/README.md.
== Metadata ==


* [[memberOf::Theme:Haskell data]]
* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Flat company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Closed serialization]]
* [[developedBy::Contributor:rlaemmel]]
* [[varies::Contribution:haskellEngineer]]
* [[varies::Contribution:haskellRecord]]
* [[moreComplexThan::Contribution:haskellEngineer]]
",2013-06-12 14:57:41.853,2017-07-05 15:26:52.145369
Contribution,haskellFlattened,"== Headline ==

A [[Language:Haskell]]-based data model illustrative for [[data parallelism]]

== Motivation ==

This is a simple variation on [[Contribution:haskellComposition]] such that the tree structure of companies is represented in a flattened manner. To this end, all departments and employees are qualified with names of their ancestor departments and hosting companies. In this manner, the set of all employees is effectively represented as a plain list of tuples. As a result, this representation could be used for data parallelism, e.g., a la [[MapReduce]]. This potential is further illustrated by adding a variation on the functionality for totaling salaries such that subtotals are derived per company and department. Thus, company and department names serve as keys for grouping and aggregating elementary results.

== Architecture ==

See [[Contribution:haskellComposition]].

There is an additional module ""MapReduce.hs"" capturing the [[MapReduce]] abstraction.

== Usage ==

See [[Contribution:haskellComposition]].

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Flattened company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Data parallelism]]
* [[developedBy::Contributor:rlaemmel]]]

",2013-06-12 14:57:42.819,2017-07-05 15:27:40.415944
Language,XSLT,"== Headline ==

An XML language for XML for transformation

== Metadata ==

* [[sameAs::http://www.w3.org/TR/xslt]]
* [[instanceOf::XML language]]
* [[instanceOf::Functional programming language]]

",2013-06-12 15:00:42.12,2017-07-04 13:46:41.939847
Language,YAML,"== Headline ==

A human-readable data serialization format

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://www.yaml.org/]]
* [[relatesTo::http://en.wikipedia.org/wiki/YAML]]
* ",2013-06-12 15:00:42.394,2017-07-04 13:46:41.951955
Language,Zip,"== Headline ==

An archive file format

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/Zip_(file_format)]]
* ",2013-06-12 15:00:42.667,2017-07-04 13:46:41.962874
Language,gzip,"== Headline ==

An archive file format

== Details ==

[[Technology:gzip]] is also the name of a technology for compression and decompression.

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/Gzip]]
* ",2013-06-12 15:00:42.952,2017-07-04 13:46:41.977889
Language,tar,"== Headline ==

An archive file format

== Metadata ==
* [[instanceOf::Format language]]
* [[sameAs::http://en.wikipedia.org/wiki/tar_(file_format)]]
* ",2013-06-12 15:00:43.489,2017-07-04 13:46:42.000329
Language,xjc POJOs,"== Headline ==

A sub-language of [[Language:Java]] that is generated by [[Technology:xjc]]

== Metadata ==

* [[instanceOf::Tool-defined language]]
* ",2013-06-12 15:00:43.8,2017-07-04 13:46:42.012465
Module,Integrate,"== Headline ==

A module for the integration of knowledge resources

== Metadata ==

",2013-06-12 15:00:44.031,2017-07-04 13:46:42.019074
Module,build,"== Headline ==

A module that is intended for building of technologies (101repo) and modules (101worker)

== Metadata ==

",2013-06-12 15:00:44.221,2017-07-04 13:46:42.025811
Concept,Subtype polymorphism,"== Headline ==

A form of [[bounded polymorphism]] applying to all [[subtype]]s of a given type

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Subtype_polymorphism]]
* [[isA::Bounded polymorphism]]
",2013-06-12 14:56:14.706,2017-07-04 15:26:26.281795
Contribution,html5XMLHttpRequest,"== Intent ==

basic use of [[Technology:XMLHttpRequest]] with [[Language:HTML5]]

== Motivation ==

This implementation provides simple [[Server|server]] side [[Language:XML]] based data storage. Therefor, it introduces [[Technology:XMLHttpRequest]] in a very simple way of use. This helps to understand the [[Asynchronous communication|asynchronous]] mechanisms of the XMLHttpRequest [[API]]. In order to keep it simple, there is no greater [[Ajax]] support in this implementation. If you want to see an Ajax based implementation, please visit [[Contribution:html5ajax]].

== Illustration ==

This section illustrates, how the data moves from an [[Language:XML]] file to a [[Technology:DOM]] based [[Web application]] and back. The first section shows the structure of the initial XML file, the second part shows the load mechanism with [[Technology:XMLHttpRequest]], the third part shows some data manipulation according to the [[Feature:Cut]] and the last part shows the save mechanism with XMLHttpRequest. Please visit [[Contribution:html5local]] for the aspect of [[GUI]] generation.

=== [[Language:XML]] document structure ===

The [this!!company.xml] file represents the company. It models the company structure in typical XML manner: Each entity is represented by a node, at which its parameters or appended entities are represented by subnodes. Each department and employee contains an aditional parameter node for the ''id''.

<syntaxhighlight lang=""xml"" source=""html5XMLHttpRequest/company.xml"">
<Company>
	<name>Meganalysis</name>
	<departments>

		...

	</departments>
</company>
</syntaxhighlight>

This example shows the <syntaxhighlight lang=""xml"" enclose=""none"">company</syntaxhighlight> node with the two subnodes <syntaxhighlight lang=""xml"" enclose=""none"">name</syntaxhighlight> and <syntaxhighlight lang=""xml"" enclose=""none"">departments</syntaxhighlight>. The <syntaxhighlight lang=""xml"" enclose=""none"">departments</syntaxhighlight> node contains all direct subdepartments of the company as a single subnode.

=== Load company ===

We are able to access this [this!!company.xml] file by using a simple XMLHttpRequest. The request itself needs three informations:

* The request method is ''GET'', because we only want to load the file,
* the filename is ''company.xml'',
* and we want to perform an [[Asynchronous communication|asynchronous]] request, announced by the last boolean parameter ''true''.

<syntaxhighlight lang=""javascript"" source=""html5XMLHttpRequest/company.js"">
company.loadData = function() {

	var xhr = new XMLHttpRequest();

	// This statement creates a new request with the parameters:
	// - ""GET"": only load
	// - ""company.xml"": filename of the requested xml doc
	// - ""true"": asynchronous request
	xhr.open('GET', 'company.xml', true);

	// This method is triggered after the response reaches the client.
	xhr.onload = function(e) {
		if (this.status == 200) {
			// This line guarantess, that the result has xml format.
			company.response = xhr.responseXML;
			controller.loadInner();
		}
	};

	// This call starts the request.
	xhr.send();

}
</syntaxhighlight>

The <syntaxhighlight lang=""javascript"" enclose=""none"">loadData</syntaxhighlight> function first creates a new XMLHttpRequest object. The three necessary values mentioned before are used as parameters for the <syntaxhighlight lang=""javascript"" enclose=""none"">open</syntaxhighlight> function. The <syntaxhighlight lang=""javascript"" enclose=""none"">onload</syntaxhighlight> function defines the reaction after finish the file load. Status 200 means, that the file is successfully transfered to the client. The advantage of XML is, that it is extremely easy to load with [[Technology:XMLHttpRequest]]. The <syntaxhighlight lang=""javascript"" enclose=""none"">xhr.responseXML</syntaxhighlight> function returns a complete data structure for the company traversable with [[Technology:DOM]].

=== Feature implementation ===

We use the DOM API to retrieve all salary nodes of the company:

<syntaxhighlight lang=""javascript"" source=""html5XMLHttpRequest/companyModel.js"">
model.cut = function() {
	// This call retrieves all salary nodes.
	var salaryNodes = company.response.documentElement.getElementsByTagName(""Salary"");

	// This loop cuts the salary values by two and saves the value to the specific nodes.
	for (var i = 0; i < salaryNodes.length; i++) {
		salaryNodes[i].childNodes[0].nodeValue = parseFloat(salaryNodes[i].childNodes[0].nodeValue) / 2;
	}

	// This function saves the company to the xml file.
	company.saveData(company.response);
	// The new total value has to be determined after the cut.
	model.total();
}
</syntaxhighlight>

The <syntaxhighlight lang=""javascript"" enclose=""none"">getElementsByTagName(""Salary"")</syntaxhighlight> returns all salary nodes for the company. The return value is a simple array. The ''for'' loop traverses this array and cuts all the salaries. After cutting the salaries, all new values have to be saved and the new total value has to be determined. In our example we will save the complete company with the new data into the [this!!company.xml] file.

=== Save company ===

The save mechanism is as simple as the load mechanism. The difference is, that some parameters of the <syntaxhighlight lang=""javascript"" enclose=""none"">open</syntaxhighlight> function have to be changed:

* The request method is now ''POST'', because we want to have write access
* and the filename is ''update.php'', refering to the [[Language:PHP]] script, which accepts the changed content for the [this!!company.xml].

<syntaxhighlight lang=""javascript"" source=""html5XMLHttpRequest/company.js"">
company.saveData = function(data) {
	var serializer = new XMLSerializer();
	var xml = serializer.serializeToString(data);

	var xhr = new XMLHttpRequest();
	xhr.open('POST', 'upload.php', true);
	xhr.setRequestHeader(""X-Requested-With"", ""XMLHttpRequest"");
	xhr.setRequestHeader(""X-File-Name"", ""company.xml"");
	xhr.setRequestHeader(""Content-Type"", ""application/octet-stream"");
	xhr.send(xml);
}
</syntaxhighlight>

There are some additional parameters, which are used to define the following proceeding on the [[Server|server]] sides [[Language:PHP]] script. The three elements of the request header show, that the request is an XMLHttpRequest, that the concerning file has its relative path ''company.xml'' and the content is a stream. The [this!!upload.php] script handles the stream and saves it as XML file with the given name:

<syntaxhighlight lang=""php"" source=""html5XMLHttpRequest/upload.php"">
<?php
	$uploaddir = """";

	if($ SERVER['HTTP X FILE NAME']!="""") {

		$nomefile=$ SERVER['HTTP X FILE NAME'];

		$fh = fopen($uploaddir.$nomefile, 'w') or die(""<h1 style='color:red;'>Upload failed</h1>"");

		fwrite($fh, $HTTP RAW POST DATA);

		fclose($fh);

		echo ""<h1>success uploaded</h1>.\n"";
	}
?>
</syntaxhighlight>

The first ''if'' control structure proofs, that the filename is not empty. After that, the script opens the file with the given filename and write access. If it is successfully opened, the stream can be written to the file handled by the function <syntaxhighlight lang=""php"" enclose=""none"">fwrite</syntaxhighlight> The parameters for this function are the opened file (<syntaxhighlight lang=""php"" enclose=""none"">$fh</syntaxhighlight>) and the delivered content (<syntaxhighlight lang=""php"" enclose=""none"">$HTTP RAW POST DATA</syntaxhighlight>).

== Architecture ==

All necessary files are located in the base folder. The architecture is based on [[MVC]]:

* All [[Language:HTML]] files in combination with the [[Language:JavaScript]] (.js) files with the suffix ''View'' represent the view.
* The controller is implemented within the JavaScript (.js) files with the suffix ''Controller''.
* The model files have the suffix ''Model''.

There is an additional [this!!upload.php] file, which is necessary to upload new content for the [[Language:XML]] file.

== Usage ==

* Please check out all files in the repository.
* Open the index.html with your web-browser (check [[Language:HTML5|HTML5]] for the HTML5-support of your browser).

This HTML5-program does not work over file-protocol when using Chrome. In this case, you need access over http. To gain access over http, you can use XAMPP, for example, to create a webserver.

* Download XAMPP from http://www.apachefriends.org/en/xampp.html.
* Install XAMPP.
* Deploy all files to your htdocs-directory (for example: E:/xampp/htdocs/xhr/).
* Start the XAMPP-Control Panel and activate Apache.
* Start your web-browser.
* Call http://localhost/xhr/index.html.

== Metadata ==

* [[uses::Language:HTML5]]
* [[uses::Language:JavaScript]]
* [[uses::Language:PHP]]
* [[uses::Language:XML]]
* [[uses::Technology:DOM]]
* [[uses::Technology:XMLHttpRequest]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:tzimmer]]
",2013-06-12 14:57:55.169,2017-07-05 15:28:09.443192
Module,extract101meta,"== Headline ==

A module to extract facts from 101repo files

== Metadata ==

",2013-06-12 15:00:44.42,2017-07-04 13:46:42.032086
Module,geshi101meta,"== Headline ==

Generate HTML representation of 101repo files with GeSHi

== Description ==

This module looks up the GeSHi code from the metadata for a file and applies GeSHi accordingly so that suitable HTML is generated for the file. GeSHi is invoked in a manner that the line numbers are addressable via CSS, if needed, for example, when highlighting some located fragment.

== Input ==

http://data.101companies.org/dumps/matches.json as prepared by [[Module:matches101meta]]

== Output ==

*.geshi.html file per 101repo file with GeSHi code per metadata

== Metadata ==

",2013-06-12 15:00:44.631,2017-07-04 13:46:42.056937
Module,index101meta,"== Headline ==

Aggregate metadata, metrics, et al. per directory in one file index.json

== Description ==

The module aggregates existing data for use in other 101companies components, e.g., the 101explorer. The output is written to a file index.json. Such index.json files are constructed at all directory levels. The module simply iterates over all immediate subdirectories and combines their index.json files and it iterates over all immediate files in the directory and incorporates their *.summary.json files.

== Input ==

*.summary.json files per 101repo file as prepared by Module summary101meta

== Output ==

*.index.json files per 101repo directory

== Metadata ==

",2013-06-12 15:00:44.828,2017-07-04 13:46:42.085356
Module,interpretRules,"== Headline ==
abstract module to apply rules to files

== Description ==

Apply the rules gathered by [[Module:rules101meta]] to specified files. This module is abstract and it can not be called directly but is rather used a library for other modules to apply rules to the file system. It could also be used by non-modules as it is independent from the path it is called from. It implements the whole new api, including fpredicates. It can be called in append or overwrite/create mode.

== Output ==

One file per input "".metadata.json""

== Usage ==

The most important function of this module is:
<syntaxhighlight lang=""python"" source=""program.py"">

def apply_rules(files, rules, filter_function, append):
    # code omitted
    pass

</syntaxhighlight>

The application works like this:

<syntaxhighlight lang=""python"" source=""program.py"">

apply_rules(['/tmp/antlrParser/contributions/antlrParser/src/file.java'], rules, lambda rule: not any(filter(lambda key: key in ('predicate', 'fpredicate', 'content', 'locator'), rule['rule'].keys())), append=False)

</syntaxhighlight>

The third predicate is a filter function to filter out rules, it is advised to use this parameter instead doing this by hand.

== Metadata ==

",2013-06-12 15:00:45.243,2017-07-04 13:46:42.181881
Contribution,html5indexedDatabase,"== Intent ==

[[Web programming]] with [[Technology:IndexedDB|indexedDB]] based on the [[Language:HTML5]] ecosystem

== Motivation ==

The [[Technology:IndexedDB]] [[API]] is a good alternative solution for persisting data on the [[Client|client]] side of a [[Web application|web application]]. While the [[Technology:Web storage]] API uses ''key-value pairs'', the IndexedDB API uses indexed tables represented by a ''B''-tree structure for data storage. This is an applicable approach for larger amounts of data. Since the [[Synchronous communication|synchronous]] API is not fully implemented yet, we used the [[Asynchronous communication|asynchronous]] API.

== Illustration ==

The communication between the application and the [[Technology:IndexedDB|indexedDB]] is transaction based. But before using any transactions to gain access to the data we have to create the database and the data within. This section will start with the database initialization and data generation and will finish with illustrating a transaction based [[Feature:Cut]] request for the whole company. Please visit [[Contribution:html5local]] for the aspect of [[GUI]] generation.

=== Database initialization ===

The implementation contains an initial open function for the database creation. If the database initialization is successful, the function also generates tables and data.

<syntaxhighlight lang=""javascript"" source=""html5indexedDatabase/company.js"">
companies.indexedDB.open = function(f) {

	// opens a connection to the 101Companies database
	// - if it does not exist, create new database
	// - if it exists, use database
	var request = indexedDB.open(""101Companies"");

	// the database connection is successfully established
	request.onsuccess = function(e) {

		...

	};

	// the database connection is unavailable
	request.onfailure = companies.indexedDB.onerror;
}
</syntaxhighlight>

The <syntaxhighlight lang=""javascript"" enclose=""none"">indexedDB.open(""101Companies"");</syntaxhighlight> function opens the connection to an existing database named ''101Companies'' or creates a new database with this name, if it does not exist. It returns a request status object, as well. This object allows an [[Asynchronous communication|asynchronous]] callback for the two possible results of the ''open'' function: success or failure. On failure, the <syntaxhighlight lang=""javascript"" enclose=""none"">companies.indexedDB.onerror</syntaxhighlight> function returns some user notification. On success, we are able to continue with the table generation:

<syntaxhighlight lang=""javascript"" source=""html5indexedDatabase/company.js"">

...

// creates a data table for Companies
var companiesStore = db.createObjectStore(""Company"", {keyPath: ""id""});

...

</syntaxhighlight>

This simple call creates a table named ''Company'' with the key ''id''. This table is able to store arrays with any fields, except that the field called ''id'' is used as the key for the b-tree of the table. It returns the table object for further use, as well.

=== Data generation ===

Data manipulations are handled with transactions. This is why we have to create transactions to generate the table contents. Each data manipulation consists of three steps:

* create transaction
* retrieve table object
* put data into the table as an array

<syntaxhighlight lang=""javascript"" source=""html5indexedDatabase/company.js"">
companies.indexedDB.addData = function() {

	// get database
	var db = companies.indexedDB.db;
	// create transaction
	var transComp = db.transaction([""Company""], IDBTransaction.READ WRITE, 0);
	// get company table
	var compStore = transComp.objectStore(""Company"");

	...

	// create data object with id = 0
	var compData = {
		""company"": ""Meganalysis"",
		""id"": 0
	};

	...

	// store data object
	compStore.put(compData);

	...

};
</syntaxhighlight>

We first retrieve the database using the field <syntaxhighlight lang=""javascript"" enclose=""none"">companies.indexedDB.db;</syntaxhighlight>. After that,  a new transaction to the ''Company'' table with <syntaxhighlight lang=""javascript"" enclose=""none"">READ WRITE</syntaxhighlight> access has to be created. The table is retrieved with <syntaxhighlight lang=""javascript"" enclose=""none"">transComp.objectStore(""Company"");</syntaxhighlight>. We now are able to read and write data from and into the table.

=== Feature implementation ===

The manipulation of data corresponds to its creation except that we need a cursor to get the required arrays out of the b-tree. In case of cutting the company we need all employees:

<syntaxhighlight lang=""javascript"" source=""html5indexedDatabase/companyModel.js"">
companies.indexedDB.cut = function() {
	// get database
	var db = companies.indexedDB.db;

	// create transaction
	var transEmp = db.transaction([""Employee""], IDBTransaction.READ WRITE, 0);
	// get employee table
	var empStore = transEmp.objectStore(""Employee"");

	// Key range: Get every single employee in the store
	var keyRange = IDBKeyRange.lowerBound(0);
	// create Cursor with key range
	var cursorRequest = empStore.openCursor(keyRange);

	// cursor runs through the result-set
	cursorRequest.onsuccess = function(e) {
		var result = e.target.result;
		if(!!result == false)
			return;
		// cut the salary
		result.value.salary = result.value.salary / 2;
		// store the employee
		empStore.put(result.value);
		// next employee ...
		result.continue();
	};

	// error handling
	cursorRequest.onerror = companies.indexedDB.onerror;
}
</syntaxhighlight>

The <syntaxhighlight lang=""javascript"" enclose=""none"">IDBKeyRange.lowerBound(0);</syntaxhighlight> means, that all keys are greater than 0. That is, in case of employees, every element within the employee b-tree. If the cursor is successfully created (<syntaxhighlight lang=""javascript"" enclose=""none"">var cursorRequest = empStore.openCursor(keyRange);</syntaxhighlight>), we are able to run through the results within the <syntaxhighlight lang=""javascript"" enclose=""none"">onsuccess</syntaxhighlight> function. The function <syntaxhighlight lang=""javascript"" enclose=""none"">e.target.result</syntaxhighlight> delivers the next element. If it exists, we cut the salary and restore it into the database. After that, we continue with the next element at <syntaxhighlight lang=""javascript"" enclose=""none"">result.continue();</syntaxhighlight>.

== Architecture ==

The architecture is equal to [[Contribution:html5local]], except that the model organizes the connection to the [[Technology:IndexedDB|indexed database]].

== Usage ==

* Check out all files from the repository.
* Open the [this!!index.html] with your [[Web browser]]. This application currently does work only with [[Technology:Google Chrome|google chrome]].

== Metadata ==
* [[developedBy::Contributor:tzimmer]]
* [[uses::Language:HTML5]]
* [[uses::Language:JavaScript]]
* [[uses::Technology:IndexedDB]]
* [[uses::Web browser]]
* [[implements::Feature:Hierarchical_company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Web UI]]

",2013-06-12 14:57:58.197,2017-07-05 15:28:15.520381
Contribution,html5local,"== Headline ==

[[Web programming]] based on the [[Language:HTML5]] ecosystem with local [[Technology:Web storage]]

== Motivation ==

This implementation illustrates the use of [[client]] side data storage within a [[web application]]. Specifically, HTML5 offers a [[Language:JavaScript]] [[API]] for [[Technology:Web storage]] to permanently store data as ''key-value pairs'' on the [[client]] side. While this implementation supports session-independent storage, there is a similar implementation [[Contribution:html5session]] which supports session storage instead.

== Illustration ==

The illustration section is devided into two parts. The first section shows the method of data storage, the second section shows the implementation of the [[Feature:Total]]. Most of the [[Web application|web application]] is written in [[Language:JavaScript]].

=== Web storage ===

The [[Technology:Web storage]] [[API]] provides the <syntaxhighlight lang=""javascript"" enclose=""none"">localStorage</syntaxhighlight> and the <syntaxhighlight lang=""javascript"" enclose=""none"">sessionStorage</syntaxhighlight> objects. This application uses <syntaxhighlight lang=""javascript"" enclose=""none"">localStorage</syntaxhighlight>, at which the use of <syntaxhighlight lang=""javascript"" enclose=""none"">sessionStorage</syntaxhighlight> in [[Contribution:html5session]] is completely the same. We initialize our own variable <syntaxhighlight lang=""javascript"" enclose=""none"">storageObject</syntaxhighlight> in order to keep the possibility for a simple exchange of the storage principe:

<syntaxhighlight lang=""javascript"">
    var storageObject = localStorage;
</syntaxhighlight>

The value of the key-value pairs provided by web storage have to be primitive data types or a string. Since [[Language:JavaScript]] provides a great [[Language:JSON]] support, we store the [[Feature:Hierarchical_company]] data as  JSON encoded string within the web storage. But first we have to create the company objects. Since JavaScript does not provide classes, there is a possibility to emulate classes with functions. The example shows one of these emulated classes for the company:

<syntaxhighlight lang=""javascript"" source=""html5local/company.js"">
function Company(id, name) {
	this.id = id;
	this.name = name;
	this.departments = new Array();
}
</syntaxhighlight>

After providing the functions for each company, department and employee, we are now able to instantiate the company structure:

<syntaxhighlight lang=""javascript"" source=""html5local/company.js"">
function loadData(reset) {
	// If the company does not exist, it must be created locally.
	if (storageObject.company == null || reset == true) {
		// create company ...
		var company = new Company(0, ""Meganalysis"");

		...

		// save company
		storageObject.setItem('company', JSON.stringify(company));

	}
	return JSON.parse(storageObject.getItem('company'));
}
</syntaxhighlight>

The <syntaxhighlight lang=""javascript"" enclose=""none"">setItem('company', JSON.stringify(company))</syntaxhighlight> call encodes the company as JSON string and stores it to a variable <syntaxhighlight lang=""javascript"" enclose=""none"">company</syntaxhighlight> within our <syntaxhighlight lang=""javascript"" enclose=""none"">storageObject</syntaxhighlight>. If this <syntaxhighlight lang=""javascript"" enclose=""none"">company</syntaxhighlight> variable already exists, the method simply returns the stored company. To get the company string, the <syntaxhighlight lang=""javascript"" enclose=""none"">getItem('company')</syntaxhighlight> [[Method|method]] has to be invoked on the <syntaxhighlight lang=""javascript"" enclose=""none"">storageObject</syntaxhighlight>.

=== Feature implementation ===

The data-structure is a tree, which can be traversed to cut salaries or determine the total of the whole company or individual departments. The following example shows the method for totalling companies with the help of totalling departments:

<syntaxhighlight lang=""javascript"" source=""html5local/companyModel.js"">
// This method calculates the total for a company.
function totalCompany(company) {
 	var total = 0;
 	var len = company.departments.length;
 	for (var i = 0; i < len; i++) {
 	 	// To get the total for the company, this method calls the total method for departments and adds the results.
 		total += totalDepartment(company.departments[i]);
 	}
 	return total;
}

// This method calculates the total value for departments.
function totalDepartment(department) {
 	var total = 0;
 	var len = department.subdepartments.length;
 	// Here, the total values of all subdepartments are added recursively.
 	for (var i = 0; i < len; i++) {
 		total += totalDepartment(department.subdepartments[i]);
 	}
 	var lenEmp = department.employees.length;
 	// Here, the salaries of all contained employees are added.
 	for (var i = 0; i < lenEmp; i++) {
 		total += department.employees[i].salary;
 	}
 	return total;
}
</syntaxhighlight>

The function <syntaxhighlight lang=""javascript"" enclose=""none"">totalCompany</syntaxhighlight> uses the function <syntaxhighlight lang=""javascript"" enclose=""none"">totalDepartment</syntaxhighlight>, to get the values of its subdepartments. This total values are calculated recursively.

=== [[GUI]] generation ===

The [[Language:HTML]] code for the [[GUI]] is completely generated with JavaScript. The following code generates the name textfield for the company view:

<syntaxhighlight lang=""javascript"" source=""html5local/companyView.js"">
...

// Create a form for the company view.
var content = ""<form name=\""company\"">"";

// Create a table within the company view.
content += ""<table border=0>"";

// Create a table row with the name textfield and a save button.
content += ""<tr><td align=\""right\"">Name: </td>"";
content += ""<td><input type=\""text\""""
	+ "" class=\""text\"" name=\""name\"" value='""
	+ model.headline
	+ ""'>"";
content += "" <input type=\""button\"" name=\""save\""""
	+ "" class=\""button\"" value=\""save\""""
	+ "" onclick=\""controller.changeName(this.form.name.value)\"">""
	+ ""</td></tr>"";
...

// Close table and form tags.
content += ""</table>"";
content += ""</form>"";

// Move the content to the 'content' division of the company.html file.
document.querySelector('#content').innerHTML = content;

...
</syntaxhighlight>

The first step is to create an HTML form (<syntaxhighlight lang=""xml"" enclose=""none""><form name=""company""></syntaxhighlight>) including the table as a grid for proper alignment of the GUI components. The table row starting with the <syntaxhighlight lang=""xml"" enclose=""none""><tr></syntaxhighlight> tag contains the name label, the name textfield and the save button. The textfield (the first <syntaxhighlight lang=""xml"" enclose=""none""><input ... /></syntaxhighlight>) is initialized with the value <syntaxhighlight lang=""javascript"" enclose=""none"">model.headline</syntaxhighlight>, which contains the name of the company. The save button (second <syntaxhighlight lang=""xml"" enclose=""none""><input ... /></syntaxhighlight>) invokes the method <syntaxhighlight lang=""javascript"" enclose=""none"">changeName</syntaxhighlight>, where the <syntaxhighlight lang=""javascript"" enclose=""none"">this.form.name.value</syntaxhighlight> parameter contains the current content of the name textfield. Finally, the last allocation (<syntaxhighlight lang=""javascript"" enclose=""none""> ... = content;</syntaxhighlight>) moves the generated HTML code to the ''content'' division of the document [this!!company.html].

== Architecture ==

All files of the application are contained in one folder:

* There is an initial [[Language:HTML]] page for each company entity of the [[Feature:Hierarchical_company]]: [this!!company.html], [this!!department.html] and [this!!employee.html]. The content is generated by [[Language:JavaScript]]. Both, the HTML pages and [this!!companyView.js], [this!!departmentView.js] and [this!!employeeView.js] form the view of this [[MVC]] based implementation.
* The controller (the files [this!!companyController.js], [this!!departmentController.js] and [this!!employeeController.js]) passes the data to the model and refreshes the [[GUI]]. It is very lightweight, based on the character and limited use of the [[101feature|features]] and on the pure [[Client|client]] side implementation.
* The model ([this!!companyModel.js], [this!!departmentModel.js], [this!!employeeModel.js]) handles the access to the [[Technology:Web storage]].
* The company is initialized in [this!!company.js].

== Usage ==

* Download the complete folder content.
* Open the local [this!!index.html] with your [[Web browser|web browser]].

== Metadata ==

* [[developedBy::Contributor:tzimmer]]
* [[memberOf::Theme:Web programming]]
* [[uses::Language:HTML5]]
* [[uses::Language:JavaScript]]
* [[uses::Language:JSON]]
* [[uses::Technology:Web storage]]
* [[uses::Web browser]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Web UI]]
* [[memberOf::Theme:Starter]]
* [[uses::Language:CSS]]

",2013-06-12 14:58:01.415,2017-07-05 15:28:20.971433
Contribution,hughesPJ,"== Headline ==

[[Unparsing]] in [[Language:Haskell]] with a [[pretty printing]] [[combinator library]]
== Characteristics ==

This contribution demonstrates [[unparsing]], i.e., rendering a term-based representation as according to a some specific text-based concrete syntax. The [[unparser]] is described at a relatively high level of abstraction by means of an appropriate [[library]] in [[Language:Haskell]].
== Illustration ==

Input of unparsing is a term-based representation like this; ""..."" indicates an elision:

<syntaxhighlight lang=""haskell"">
sampleCompany = Company
  ""Acme Corporation""
  [ Department ""Research""
      (Employee ""Craig"" ""Redmond"" 123456)
      []
      [ Employee ""Erik"" ""Utrecht"" 12345,
        Employee ""Ralf"" ""Koblenz"" 1234
      ],
    Department ""Development""
      ...
  ]
</syntaxhighlight>

Output of unparsing is a test-based representation like this:

<pre>
company ""Acme Corporation"" {
  department ""Research"" {
    manager ""Craig"" {
      address ""Redmond""
      salary 123456.0
    }
    employee ""Erik"" {
      address ""Utrecht""
      salary 12345.0
    }
    employee ""Ralf"" {
      address ""Koblenz""
      salary 1234.0
    }
  }
  department ""Development"" {
    ...
  }
}
</pre>

Here is the function for unparsing:

<fragment url='src/Company/Unparser.hs/function/unparse' explore='true'/>

It uses various combinators of [[Technology:HughesPJ]] all over the place. For instance, it uses ''vcat'' to vertically compose departments; it uses ''nest'' to achieve indentation for constituents of companies, departments, and employees. Overall, all the subexpressions render the company terms to a library-specific type of ''Doc'', which is essentially an abstraction over text.
== Relationships ==

* The data model is the same as the one of [[Contribution:haskellComposition]].
* The textual output format is the same as the one parsed by [[Contribution:haskellParsec]].
== Architecture ==

* <file url='src/Company/Data.hs'/>: a data model based on [[algebraic data type]]s
* <file url='src/Company/Sample.hs'/>: a sample company using term-based representation
* <file url='src/Company/Unparser.hs'/>: the actual unparser, rendering terms as text
== Usage ==

See [[Contribution:haskellComposition]].
== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Language:Haskell 98]]
* [[uses::Technology:GHC]]
* [[uses::Technology:HughesPJ]]
* [[basedOn::Contribution:haskellComposition]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:Haskell potpourri]]
",2013-06-12 14:58:03.848,2017-07-05 15:28:26.615172
Module,matches101meta,"== Headline ==

Basic matching of 101meta rules against 101repo

== Description ==

This is one the modules which matches 101meta rules against the files in 101repo. Depending on the conditions in a rule, it may be checked by this module or by another module. This module deals with basic rules that contain neither predicate nor fragment conditions. Matching is not performed by a single module so that some simple basic order constraints and interleaving with other modules is possible. In particular, basic matching may provide metadata that is needed for modules that in turn prepare data for predicate execution and fragment location to be performed during those other phases of matching. Thus, the right order of matching is this:
* [[Module:matches101meta]]
* Any modules that suffice with basic matching and that may prepare data for the other matching phases.
* [[Module:predicates101meta]]
* [[Module:fragments101meta]]

== Output ==

http://data.101companies.org/dumps/matches.json

== Metadata ==

",2013-06-12 15:00:45.433,2017-07-04 13:46:42.216521
Concept,Subtyping,"== Headline ==

Another term for [[subtype polymorphism]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Subtyping]]
* [[memberOf::Vocabulary:OO programming]]
* [[isA::Concept]]

",2013-06-12 14:56:14.92,2017-07-04 15:26:26.344735
Contribution,javaParseLib,"== Headline ==

Parse companies with parser combinators in [[Language:Java]]

== Characteristics ==

We implement a functor-based combinator library for top-down parsing with which we parse concrete textual syntax for companies. Such parsing implements [[Feature:Parsing]]. Salaries can be totaled along with parsing. The library supports plain acceptance and proper parsing into an intermediate representation. There are acceptor and parser combinators for all common EBNF constructs as well as building blocks for lexical analysis. Class inheritance can also be used to attach semantic actions to applications of parser combinators.

== Illustration ==

The data model is implemented as plain textual files:

<fragment url=""inputs/sample.Company""/>

[[Feature:Parsing]] is implemented with helper classes using the library:

<fragment url=""src/main/java/org/softlang/company/features/Parsing.java/class/Parsing""/>

Helper org.softlang.company.features.parser.CompanyParser:

<fragment url=""src/main/java/org/softlang/company/features/parser/CompanyParser.java/class/CompanyParser/method/company""/>

[[Feature:Total]] is implemented as part of [[Feature:Parsing]] with a semantic action:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

Test cases are implemented for all [[Namespace:Feature]]s. There is also an invalid input:

<fragment url=""inputs/nonSample.Company""/>

== Relationships ==

For plain syntax checking with [[Technology:ANTLR]] see [[Contribution:antlrAcceptor]].

For lexer-based text processing in pure [[Language:Java]] see [[Contribution:javaScanner]].


For lexing/tokenization with [[Technology:ANTLR]] see [[Contribution:antlrLexer]].

For a custom made lexer in pure [[Language:Java]] see [[Contribution:javaLexer]].


For parsing with semantic actions with [[Technology:ANTLR]] see [[Contribution:antlrParser]].

For recursive-descent parsing in pure [[Language:Java]]] see [[Contribution:javaParser]].

For parser combinators in pure [[Language:Java]]] see [[Contribution:javaParseLib]].


For object/text mapping from test to companies with [[Technology:ANTLR]] see [[Contribution:antlrObjects]].

For object/text mapping from text to trees with [[Technology:ANTLR]] see [[Contribution:antlrTrees]].

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** javaf.prelude for function patterns.
** parseLib.acceptor for accaptance.
** parseLib.parser for parsing.
** parseLib.util for type declarations.
** org.softlang.company.features for implementations of [[Functional requirements]].
*** org.softlang.company.features.parser for lexer, acceptor and parser for companies.
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.
** parseLib.tests for [[Technology:JUnit]] test cases for the parse library.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:12.044,2017-07-05 15:28:45.665067
Contribution,javaStatic,"== Headline ==

Modular programming with [[static method]]s in [[Language:Java|]]

== Characteristics ==

Operations on companies are implemented as families of [[static method]]s with a class designated to each operation. This is straightforward '''if''' the operations are not polymorphic. This is the case for the given object model which only uses object composition as opposed to class inheritance or interface polymorphism.

== Illustration ==

The data model is implemented with object composition. For example Companies:

<fragment url=""src/main/java/org/softlang/company/model/Company.java/class/Company""/>

[[Feature:Closed serialization]] is implemented using [[Language:Java]] [[Technology:Object Streams]]:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented as static mathods iterating over departments and employees:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For basic OO without inheritance see [[Contribution:javaComposition]].

For basic OO with inheritance see [[Contribution:javaInheritance]].

For modular OO programming with static methods see [[Contribution:javaStatic]].

For use of Java reflection see [[Contribution:javaReflection]] (data processing) and [[Contribution:javaSyb]] (SYB-style generic programming).

For design patterns see [[Contribution:javaTemplate]] (template design pattern), [[Contribution:javaVisitor]] (visitor design pattern) and [[Contribution:javaExorcism]] (excessive illustration of design patterns).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.model for implementations of [[Feature:Company]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:14.075,2017-07-05 15:28:50.104463
Module,metrics101meta,"== Headline ==

Tokenize 101repo files and compute some basic metrics
== Description ==
This module looks up the GeSHi code from the metadata for a file and applies GeSHi and MegaLib to extract a token sequence from the the file contents. What GeSHi considers a token for a given language is quite likely not exactly what a proper lexer for the language would consider a token. This is because GeSHi does not perform proper lexical analysis. In addition to the token sequence, this module also computes also basic metrics such as ""lines of code"".
== Input ==

http://data.101companies.org/dumps/matches.json as prepared by Module matches101meta
== Output ==


* *.tokens.json file per 101repo file with GeSHi code per metadata
* *.metrics.json file per 101repo file with GeSHi code per metadata
== Metadata ==

",2013-06-12 15:00:45.625,2017-07-04 13:46:42.245776
Module,predicates101meta,"== Headline ==

Matching of 101meta rules with predicate conditions against 101repo

== Description ==
This is one the modules which matches 101meta rules against the files in 101repo. This module deals with rules that contain predicates. See the [[Module:matches101meta]] for a comprehensive description of matching as it is scattered over multiple modules.

== Input ==

* 101repo as prepared by [[Module:pull101repo]]
* 101meta rules as collected by [[Module:rules101meta]]


== Output ==

http://data.101companies.org/dumps/predicates.json

== Metadata ==

",2013-06-12 15:00:45.817,2017-07-04 13:46:42.273812
Contribution,jdbc,"== Headline ==

Database programming with [[Technology:JDBC|JDBC]]

== Characteristics ==

We use JDBC/SQL for data processing. That is, we use embedded SQL in Java.

== Usage ==

* You need a suitable JDBC Driver for MySQL
** An appropriate driver is available here: http://dev.mysql.com/downloads/connector/j/
** Some version of that driver is readily included into the project.
* Set up a company database.
** Follow the steps described here [[Contribution:mySqlMany]] to set up the company database. That is, stop after populating the tables.
* There are JUnit tests available as the package ''org.softlang.tests''.
** Run class ''Query'' first to exercise query features.
** Run class ''Transform'' next to modify the database state.
** ''Query'' does not succeed anymore once ''Transform'' was executed.

== Metadata ==

* [[uses::Language:SQL]]
* [[uses::Language:Java]]
* [[uses::Technology:JDBC]]
* [[uses::Technology:MySQL]]
* [[uses::Technology:Eclipse]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:19.26,2017-07-04 13:46:13.42556
Contribution,javaTemplate,"== Headline ==

Use of the Template design pattern in [[Language:Java|]]

== Characteristics ==

We identify templates for queries and transformations over companies.
We instantiate those templates for totaling and cutting salaries.

== Illustration ==

The data model is implemented with object composition. For example Companies:

<fragment url=""src/main/java/org/softlang/company/model/Company.java/class/Company""/>

[[Feature:Closed serialization]] is implemented using [[Language:Java]] [[Technology:Object Streams]]:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany""/>

[[Feature:Total]] is implemented as a Reducer (query):

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

[[Feature:Cut]] is implemented as a Walker (transformation):

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For basic OO without inheritance see [[Contribution:javaComposition]].

For basic OO with inheritance see [[Contribution:javaInheritance]].

For modular OO programming with static methods see [[Contribution:javaStatic]].

For use of Java reflection see [[Contribution:javaReflection]] (data processing) and [[Contribution:javaSyb]] (SYB-style generic programming).

For design patterns see [[Contribution:javaTemplate]] (template design pattern), [[Contribution:javaVisitor]] (visitor design pattern) and [[Contribution:javaExorcism]] (excessive illustration of design patterns).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
** org.softlang.company.features.template for query and transformation patterns.
** org.softlang.company.model for implementations of [[Feature:Company]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Closed serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Language:Java]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:15.13,2017-07-05 15:28:52.463708
Contribution,jaxbComposition,"== Headline ==

[[Object-XML mapping]] with [[Technology:JAXB|]] of the [[Technology:Java platform|]]

== Characteristics ==

[[Language:XML]] import and export is supported for a Java-based implementation by means of O/X mapping. The primary data model for companies is an XML schema. The schema compiler [[Technology:xjc]] of [[Technology:JAXB]] is used to generate Java classes from the schema. In this manner, operations on an XML representation of companies can be implemented in near-to-regular OO fashion while using a problem-specific object model. In different terms, one can carry out [[XML processing]] while essentially staying in the technological space of [[objectware]]. It is insightful to compare XML schema and schema-derived classes. The XML schema is defined in a manner that the resulting object model systematically leverages [[object composition]] and no [[class inheritance]]. In fact, the schema-derived classes are very similar to a regular OO design; see
[[Contribution:javaComposition]]. It is important to note that the operations on companies are not implemented as [[instance method]]s since this would imply modification of schema-derived classes---unless advanced  modularization mechanisms were leveraged. Instead, the operations are implemented as [[static method]]s in non-schema-derived classes.

== Illustration ==

The data model is implemented as xml files (sampleCompany.xml) that conform to a schema (Company.xsd). For example departments:

<syntaxhighlight lang=""xml"">
 <xs:element name=""department"">
  <xs:complexType>
   <xs:sequence>
    <xs:element ref=""name""/>
    <xs:element name=""manager"" type=""employee""/>
    <xs:element ref=""department"" maxOccurs=""unbounded"" minOccurs=""0""/>
    <xs:element name=""employee""
        type=""employee"" maxOccurs=""unbounded"" minOccurs=""0""/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</syntaxhighlight>

Actual [[Language:Java]] classes will be generated using [[Technology:xjc]].

[[Feature:Open serialization]] is implemented using [[Technology:JAXB]] Un-/Marshaller:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented as static methods:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For DOM-like implementations of in-memory XML processing see [[Contribution:dom]], [[Contribution:jdom]] and [[Contribution:xom]].

For a query-based implementation of in-memory XML processing see [[Contribution:xpathAPI]].

For push-based XML processing see [[Contribution:sax]].

For Object/XML mapping see [[Contribution:jaxbChoice]] (XSD with choice for different subunits), [[Contribution:jaxbComposition]] (XSD with object composition), [[Contribution:jaxbExtension]] (XSD with type extension) and [[Contribution:jaxbSubstitution]] (XSD with substitution groups).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Open serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[memberOf::Theme:XML programming]]
* [[uses::Language:Java]]
* [[uses::Language:JAXB annotations]]
* [[uses::Language:XML]]
* [[uses::Language:XSD]]
* [[uses::Technology:JAXB]]
* [[uses::Technology:xjc]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:17.89,2017-07-05 15:28:58.533993
Module,resolve101meta,"== Headline ==

Resolving of metadata and contributions

== Description ==

This module tries to resolve all metadata defined in 101meta rules. It goes over the rules dump of rules101meta and checks for every metadata value if a page on the wiki exists. If there is a page, the link to the page is constructed and the headline is extracted. All found values go into the dump, including the link and, if available, the headline. It then goes over all contributions defined in the wiki and checks if a repo entry exists for this contribution. It constructs the link to the wiki, the link to the repo, and tries to extract the headline from the wiki page. All data is appended to the dump.

== Output ==
http://data.101companies.org/dumps/resolution.json



== Metadata ==

",2013-06-12 15:00:46.026,2017-07-04 13:46:42.299073
Module,rules101meta,"== Headline ==

Collect and validate all 101meta rules scattered over 101repo. 101meta rules are allowed to appear anywhere in 101repo so that these rules can be maintained close to the contribution, language, or technology of interest. The present module collects these scattered rules for simplified processing beyond this point. Also, the module validates the rules in some basic manner to detect some obvious errors. The report for validation is included into the collected rule set. The origin of each rule is preserved also in the collected rule set so that this origin can be used, e.g., for the user's benefit.
== Description ==

101repo as prepared by [[Module:pull101repo]]
== Output ==

Collected rules: http://data.101companies.org/dumps/rules.json
== Metadata ==

",2013-06-12 15:00:46.329,2017-07-04 13:46:42.325099
Contribution,jaxbChoice,"== Headline ==

[[Object-XML mapping]] for [[Language:Java]] and [[Language:XSD]] with [[Technology:JAXB]]

== Characteristics ==

See [[Contribution:jaxbComposition]] for the overall motivation of exercising
[[Technology:JAXB]] and arguably a simple baseline for a schema and the
corresponding schema-derived classes. The present implementation exercises
an XSD choice for different kinds of subunits. The schema-derived class
Subunit encodes the choice in an arguably sub-optimal manner (as a result
of the lack of a good match for XSD choices in the Java type system).
One could expect that XSD choices (of a restricted kind) could be
translated into class inheritance, but this does not happen here (and
this may be understandable).

== Illustration ==

The data model is implemented as xml files (sampleCompany.xml) that conform to a schema (Company.xsd). For example departments:

<syntaxhighlight lang=""xml"">
 <xs:element name=""department"">
  <xs:complexType>
   <xs:sequence>
    <xs:element ref=""name""/>
    <xs:element name=""manager"" type=""employee""/>
    <xs:element ref=""department"" maxOccurs=""unbounded"" minOccurs=""0""/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</syntaxhighlight>

Actual [[Language:Java]] classes will be generated using [[Technology:xjc]].

[[Feature:Open serialization]] is implemented using [[Technology:JAXB]] Un-/Marshaller:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/serializeCompany""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented as static methods:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For DOM-like implementations of in-memory XML processing see [[Contribution:dom]], [[Contribution:jdom]] and [[Contribution:xom]].

For a query-based implementation of in-memory XML processing see [[Contribution:xpathAPI]].

For push-based XML processing see [[Contribution:sax]].

For Object/XML mapping see [[Contribution:jaxbChoice]] (XSD with choice for different subunits), [[Contribution:jaxbComposition]] (XSD with object composition), [[Contribution:jaxbExtension]] (XSD with type extension) and [[Contribution:jaxbSubstitution]] (XSD with substitution groups).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Open serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[memberOf::Theme:XML programming]]
* [[uses::Language:Java]]
* [[uses::Language:XML]]
* [[uses::Language:XSD]]
* [[uses::Technology:JAXB]]
* [[uses::Technology:xjc]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:17.411,2017-07-05 15:28:56.77747
Module,summary101meta,"== Headline ==

Aggregate scattered metadata, metrics, et al. per file
== Description ==
Various metadata, metrics et al. is computed for each file (see the input dependencies above). As a result of the modular approach and some implementation constraints, all such data is scattered over several files, which makes it hard to consume by other modules. Thus, the present module aggregates all such data in a single summary file (see the sample above). Such aggregation is also continued at the directory level; see the Module index101meta.
== Input ==

* http://data.101companies.org/dumps/matches.json as prepared by [[Module:matches101meta]]
* http://data.101companies.org/dumps/predicates.json as prepared by [[Module:predicates101meta]]
* http://data.101companies.org/dumps/fragments.json as prepared by [[Module:fragments101meta]]
* *.metrics.json files in 101repo as prepared by [[Module:metrics101meta]]
== Output ==

*.summary.json files per 101repo file
== Metadata ==

",2013-06-12 15:00:46.52,2017-07-04 13:46:42.363746
Module,wiki2tagclouds,"== Headline ==

Generate tagclouds for languages and technologies on 101wiki

== Description ==
The JSON extracted from 101wiki (101companies.org) readily includes the languages and technologies associated with each implementation. These associations are accumulated as counts per language and technology and visualized by simple HTML-based tagclouds.

== Input ==

http://data.101companies.org/dumps/Wiki101Full.json as prepared by [[Module:wiki2json]]

== Output ==

* http://data.101companies.org/views/frequencyOfLanguages.html
* http://data.101companies.org/views/frequencyOfTechnologies.html


== Metadata ==

",2013-06-12 15:00:46.913,2017-07-04 13:46:42.400277
Contribution,jdbc2,"== Intent ==

Database programming with [[Technology:JDBC]]

== Description ==

This is a sophistication of [[Contribution:jdbc]]. We experiment with a naive O/R mapping for companies.
We exercise some company scenarios with the resulting object model. In the implementation of the O/R mapping, we use JDBC.

== Architecture ==

The package ''org.softlang.company'' contains the object model.
The ''ObjectFactory'' in ''org.softlang.util'' is used to retrieve objects from the database.
The PersistenceTool writes objects back to the database.
Some minimal effort is made to only commit *changes* to the database.
The tests package ''org.softlang.tests'' contains test cases.

Prerequisites (very much like in project ""jdbc""):

== Usage ==

* You will need a suitable JDBC Driver for MySQL
**  An appropriate driver is available here: http://dev.mysql.com/downloads/connector/j/
**  Add the JAR that comes with the download to the build path of this project.
* Set up a company database.
** Follow the steps described here [[Contribution:mySqlMany]] to set up the company database. That is, stop after populating the tables.
* There are JUnit tests available as the package ''org.softlang.tests''.
** Run class ''Basics'' with JUnit to exercise basic features.
** Run class ''Persistence'' with JUnit to exercise O/R mapping / persistence.

== Issues ==

* Overall, the idea of loading employees one by one may be ill-conceived.
* Lazy load is triggered upon testing collection items for changes; see Department.isChanged.
* The load method should not be in the iterator for collections but in the getters (and some of the setters) for items in the collection.
* Persist methods seem to drill down to leafs even beyond what had been loaded (and could be changed).
* Clear methods should use information about what has been *added* or *removed*.
* The id after insertion should be determined in a more robust manner.

Cosmetics:
* Rename ObjectFactory to Loader?
* Rename PersistenceTool to Saver?
* Use shorter names pstmt -> stm for example.
* Use overloading rather than long names such as persistDepartment.

== Metadata ==

* [[uses::Language:SQL]]
* [[uses::Language:Java]]
* [[uses::Technology:JDBC]]
* [[uses::Technology:MySQL]]
* [[uses::Technology:Eclipse]]
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:19.599,2017-07-04 13:46:13.536653
Contribution,jgralab,"== Headline ==

Use [[Language:TGraphs]] with [[Technology:JGraLab]] in [[Language:Java]] for [[Model to Model transformation]]s

== Motivation ==

[[Model to Model transformation]]s with TGraphs are excercised in this implementation. The Cut feature shows an [[endogenous model transformation]], the Total feature is an example for an [[exogenous model transformation]]. TGraphs are typed, attributed, ordered, and directed graphs. TGraphs can be maintained in a repository and programmatically processed. One can clearly use TGraphs to represent companies. In fact, a TGraphs schema defines the structure of companies. One can then use supplementary languages and technologies to query and transform such graphs so that typical operations on companies are implemented. In particular, [[Technology:JGraLab]] supports Java-class generation from a TGraphs schema, and query evaluation with [[Language:GReQL]] on TGraphs. [[Transformation]]s can be performed with [[Language:GReTL]] or ''plain'' Java based on the schema-derived API.

== Architecture ==

The file ''101companies-schema.xmi'' is the schema TGraph that represents the data
structure for companies. This file was exported from the IBM Rational Software Architect (RSA) tool and is based on a simple UML class diagram. The file ''101companies-schema.pdf'' illustrates the UML class diagram that was modeled to represent the schema. The file ''101companies-schema.emx'' is the original IBM RSA model file. Once generated, the file ''101companies-schema.tg''

The jgralab.jar contains the core technology for creating and operating on TGraphs. It also contains the facilities for using GReQL. The gretl.jar contains GReTL for modifying TGraphs.

Package ''src.de.uni koblenz.oneoonecompanies'' contains a programmer-defined class ''CompanyServices'' that provides an API for several operations on TGraphs. Packages ''src.de.uni koblenz.oneoonecompanies.schema'' and ''...schema.impl.std'' contain schema-derived interfaces and classes for companies.

== Usage ==

* The implementation is provided as an Eclipse project.
* Run ''build.xml'' with ant to generate schema-derived classes and interfaces.
* There are tests in package ''...tests''.
** Run JUnit test ''Serialization'' to exercise serialization.
** Run JUnit test ''Operations'' to exercise the basic operations.
** Run main method of ''Visualization'' to visualize the company graph.

Please note: Upon initial checkout and whenever the TGraphs schema ''101companies-schema.xmi''
is changed, then code generation must be re-executed. To this end, run ''ant'' on the included
''build.xml'' file from the command line or from within Eclipse. This process re-generates
all types in the packages ''...schema'' and ''...schema.impl.std''.  These packages provide
the API for ''CompanyServices''.

== Metadata ==
* [[uses::Language:TGraphs]]
* [[uses::Language:GReQL]]
* [[uses::Language:GReTL]]
* [[uses::Language:Java]]
* [[uses::Technology:JGraLab]]
* [[uses::Technology:GReTL]]
* [[uses::Technology:Graphviz]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Mentoring]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[developedBy::Contributor:tsdh]]
* [[developedBy::Contributor:Mahdi Derakhshanmanesh]]
* [[reviewedBy::Contributor:rlaemmel]]
* [[memberOf::Theme:MDE]]
* [[sameAs::http://www.uni-koblenz-landau.de/koblenz/fb4/institute/IST/RGEbert/MainResearch-en/Graphtechnology/tgraphs?set language=en]]
",2013-06-12 14:58:20.961,2017-07-05 15:29:03.11074
Contribution,jocamlJoinPatterns,"== Headline ==

A [[Language:JoCaml|JoCaml]]-based implementation that uses [[join patterns]]

== Motivation ==

Nowadays, [[event handling]] is a standard technique in GUI programming. However,
there is a lot of research going on to use such an [[event handling|event-based]]
approach for [[concurrency|concurrent programming]]. The idea is to [[Parallelism|parallelize]]
the [[event handling|handling of events]] by combining simple [[events]] to
more complex ones using so called [[join patterns]]. This project demonstrates
the usage of [[concurrency]] by [[event handling]] in JoCaml using such
[[join patterns]].

== Illustration ==

[[Join patterns]] combine several [[events|event]] [[channels]], which all must be
served in order to start the [[event handling|handling]]. If [[channels]]
represent functions on an object-like strucure another [[channels|channel]] is often used
as a internal [[state]], which is modified by the function.

 <nowiki>
(* join pattern for cut *)
def employeeState (n, a, s) & cut () =
    employeeState (n, a, s *. 0.5)
</nowiki>

For example the internal state ''employeeState (n, a, s)'' describes an employee
with name, address and salary. If a [[Feature:Cut]]-[[Events|event]]
occurs this internal [[state]] is consumed and triggered again with a modified
salary.

== Architecture ==

* ''company.ml'' company structure
* ''company.mli'' header, company signature
* ''meganalysis.ml'' sample company
* ''main.ml'' simple test program

== Usage ==

You need to install J[[Language:JoCaml|JoCaml]] .

Use the [[Technology:GNU make|makefile]] for some demo:
* Enter ''make compile'' to compile the code
* Enter ''make test'' to execute the script contained in ''main.ml'' and to perform a simple [[Technology:diff|diff-based]] test

== Metadata ==
* [[uses::Language:JoCaml]]
* [[uses::Technology:jocaml]]
* [[uses::Technology:jocamlc]]
* [[uses::Technology:GNU make]]
* [[uses::Technology:diff]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Task parallelism]]
* [[developedBy::Contributor:jbaltzer]]
",2013-06-12 14:58:21.379,2017-07-05 15:29:03.679259
Contribution,webDSL,"== Intent ==

this projects provides a very simple WebDSL WebApp for companies

== Motivation ==

We define pages (company/department/employee view) using the [http://webdsl.org WebDSL] DSL.
We also provide a metamodel for companies and scenerios to [[Feature:Cut]] and [[Feature:Total]] salaries.

=== Architecture of the project ===

""webDSL.app"" is the ""main file"", containing the page definitions.
""company.app"" holds the company model while meganalysis.app contains ""meganalysis"" as an instance of the model.

== Usage ==

We make use of the WebDSL Plugin. Update Site: http://webdsl.org/page/Download

* Build the project by running the Ant Build file
* Select the project in the package explorer -> right click -> Run As -> Run on Server
* Select your preferred server (we made use of [[Technology:Apache Tomcat]] v6.0 Server) and click ""Next""
* Click ""Download and Install"" and follow the menu's steps
* Click ""Finish""
* The project will be published on the installed server
* Visit http://localhost:8080/webDSL/
(Eventually you will have to re-build or restart the server)

== Metadata ==
* [[uses::Language:JavaScript]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Distribution]]
* [[developedBy::Contributor:tschmorleiz]]

== Acknowlegdement ==

[[101contributor:Eelco Visser]] provided some basic advice on the usage of WebDSL.
",2013-06-12 14:59:12.007,2017-07-05 15:29:57.955223
Namespace,101,"== Headline ==

The namespace for concepts specific to the [[101project]]

== Metadata ==
* ",2013-06-12 15:00:47.105,2017-07-04 13:46:42.413261
Namespace,Concept,"== Headline ==

The namespace of [[software concept]]s

== Description ==

This namespace is dedicated to [[software concept]]s, e.g., [[design pattern]]s such as the [[Visitor pattern]]. Software concepts are supposed to be described already elsewhere on the web, e.g., on Wikipedia, and thus, 101wiki coverage can be minimalistic and the 101wiki page for a concept serves essentially as a [[linked open data]] resource. Metadata for a concept should serve the classification of concepts on 101wiki. It is a good practice to include a short illustration for a concept, but it is not mandatory. In fact, the illustration may be more extensive, if the concept at hand plays a role in 101wiki-based course material.

== Metadata ==

* [[relatesTo::Software concept]]
* [[hasMandatory::Section:Headline]]
* [[hasOptional::Section:Details]]
* [[hasOptional::Section:Quote]]
* [[hasOptional::Section:Illustration]]
* [[hasMandatory::Section:Metadata]]
* [[exemplifiedBy::Design pattern]]
* [[exemplifiedBy::Visitor pattern]]
* [[exemplifiedBy::Monad]]
",2013-06-12 15:00:47.368,2017-07-04 13:46:42.46502
Namespace,Contribution,"== Headline ==

The namespace for [[101contribution]]s

== Metamodel ==

* '''Headline''' (required): the headline introducing the contribution.
* '''Characteristics''' (required): the characteristics of the contribution, which make it a relevant addition to the [[101repo]]. Trivially, relevance could be claimed, if languages and technologies are exercised not previously exercised by the repository. Typically, convincing relevance requires a more complex argument such as a certain programming technique or technology usage pattern or a certain technology/language combo to be covered originally by the contribution at hand.
* '''Illustration''' (optional): an illustration of the contribution based on source-code snippets and explanations.
* '''Relationships''' (optional): explanations regarding related contributions.
* '''Architecture''' (optional): explanations regarding the files, directories, and other such details regarding the organization of the contribution.
* '''Usage''' (optional): explanations regarding building and testing the contribution so that its execution can be easily reproduced relatively easily by diverse users.
* '''Metadata''' (required):
** The contribution must be declared to be, indeed, an instance of [[Namespace:Contribution]].
** The contribution must be associated with used [[software language]]s in [[Namespace:Language]].
** The contribution must be associated with used [[software technology|software technologies]]s in [[Namespace:Technology]].
** The contribution must be associated with implemented features in [[Namespace:Feature]].
** The contribution may be linked to relevant online resources.
** The contribution may also be related to any relevant [[software concept]]s.

== Illustration ==

[[Contribution:haskellStarter]] serves as a strong example, as it is maintained as a showcase.

== Metadata ==


* [[relatesTo::Namespace:Contributor]]
* ",2013-06-12 15:00:47.633,2017-07-04 13:46:42.520166
Contribution,xom,"== Headline ==

Exercise [[in-memory XML processing]] with [[Technology:XOM]] in [[Language:Java]]

== Characteristics ==

See [[Contribution:dom]] for a general motivation for exercising
[[in-memory XML processing]]. The present implementation simply exercises
yet another DOM-like API. We end up providing a descendants axis to this
end.

== Illustration ==

The data model is implemented as xml files (sampleCompany.xml) that conform to a schema (Company.xsd).

[[Feature:Open serialization]] is implemented using [[Technology:xom]] Builder:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/deserializeCompany""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented by using descendants:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut""/>

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For DOM-like implementations of in-memory XML processing see [[Contribution:dom]], [[Contribution:jdom]] and [[Contribution:xom]].

For a query-based implementation of in-memory XML processing see [[Contribution:xpathAPI]].

For push-based XML processing see [[Contribution:sax]].

For Object/XML mapping see [[Contribution:jaxbChoice]] (XSD with choice for different subunits), [[Contribution:jaxbComposition]] (XSD with object composition), [[Contribution:jaxbExtension]] (XSD with type extension) and [[Contribution:jaxbSubstitution]] (XSD with substitution groups).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
*** org.softlang.company.features.xom for descendants helper.
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Open serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[memberOf::Theme:XML programming]]
* [[uses::Language:Java]]
* [[uses::Language:XML]]
* [[uses::Language:XSD]]
* [[uses::Technology:XOM]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:rlaemmel]]
",2013-06-12 14:59:17.621,2017-07-05 15:30:03.816806
Contribution,linq2DataSet,"== Headline ==

O/R mapping using [[Technology:LINQ to DataSet]]

== Motivation ==

== Architecture ==

== Usage ==

== Metadata ==

* [[developedBy::Contributor:avaranovich]]
* [[uses::Language:CSharp]]",2013-06-12 14:58:28.134,2017-07-04 13:46:15.585052
Technology,ODBC,"== Headline ==

A standard [[API]] for accessing database management systems

== Metadata ==

* [[instanceOf::API]]
* [[sameAs::http://en.wikipedia.org/wiki/ODBC]]
",2013-06-12 15:01:50.126,2017-07-04 13:47:30.72065
Contribution,linq2Sql,"== Headline ==

O/R mapping with [[Technology:.NET|]]s [[Technology:LINQ to SQL|]]

== Characteristics ==

TBD

== Architecture ==

TBD

== Usage ==

TBD

== Metadata ==

* [[uses::Language:CSharp]]
* [[developedBy::Contributor:avaranovich]]
* [[documentedBy::Contributor:avaranovich]]
* [[carries::Tag:Stub]]

",2013-06-12 14:58:28.384,2017-07-04 13:46:15.626896
Contribution,luaClasses,"== Headline ==

[[Object oriented Programming]] in [[Language:Lua]]

== Characteristics ==

== Metadata ==

",2013-06-12 14:58:28.581,2017-07-04 13:46:15.638821
Contribution,xpathAPI,"== Headline ==

Exercise [[XML processing]] with [[Language:XPath]] embedded in [[Language:Java]]

== Characteristics ==

Companies are represented in [[Language:XML]] and processed by XPath and Java.
XPath is embedded into Java code which makes it possible to process
query results in Java. Query results are bound to DOM-like node sets, and
one can iterate over those and mutate them, thereby implementing
impure transformations.

== Illustration ==

The data model is implemented as xml files (sampleCompany.xml).

[[Feature:Open serialization]] is implemented using [[Technology:DOM]] Document objects:

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/loadDocument""/>

<fragment url=""src/main/java/org/softlang/company/features/Serialization.java/class/Serialization/method/saveDocument""/>

[[Feature:Total]] and [[Feature:Cut]] are implemented by using [[Technology:DOM]] trees and [[Language:XPath]] queries:

<fragment url=""src/main/java/org/softlang/company/features/Total.java/class/Total/method/total""/>

<fragment url=""src/main/java/org/softlang/company/features/Cut.java/class/Cut/method/cut""/>

The [[Language:XPath]] processor is implemented by [[Technology:Xalan-Java]].

Test cases are implemented for all [[Namespace:Feature]]s.

== Relationships ==

For DOM-like implementations of in-memory XML processing see [[Contribution:dom]], [[Contribution:jdom]] and [[Contribution:xom]].

For a query-based implementation of in-memory XML processing see [[Contribution:xpathAPI]].

For push-based XML processing see [[Contribution:sax]].

For Object/XML mapping see [[Contribution:jaxbChoice]] (XSD with choice for different subunits), [[Contribution:jaxbComposition]] (XSD with object composition), [[Contribution:jaxbExtension]] (XSD with type extension) and [[Contribution:jaxbSubstitution]] (XSD with substitution groups).

== Architecture ==

The contribution follows a standardized structure:
* inputs contains input files for tests
* src/main/java contains the following packages:
** org.softlang.company.features for implementations of [[Functional requirements]].
* src/test/java contains the following packages:
** org.softlang.company.tests for [[Technology:JUnit]] test cases for [[Namespace:Feature]]s.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Open serialization]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[memberOf::Theme:XML programming]]
* [[uses::Language:Java]]
* [[uses::Language:XML]]
* [[uses::Language:XPath]]
* [[uses::Technology:Xalan-Java]]
* [[uses::Technology:JAXP]]
* [[uses::Technology:SAX]]
* [[uses::Technology:DOM]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]

* [[developedBy::Contributor:rlaemmel]]
",2013-06-12 14:59:18.268,2017-07-05 15:30:04.73511
Contribution,mobileAndroid,"== Headline ==

Advanced [[Technology:Android]] programming

== Motivation ==

The implementation demonstrates advanced style of [[Technology:Android]] programming using the [[Technology:Android SDK]] and the [[Technology:Android Development Tool]]. The application uses other approaches compared to the two other implementations [[Contribution:simpleAndroid | simpleAndroid]] and [[Contribution:richerAndroid | richerAndroid]]. This application is intended for employees. It aims to track his worked time. At the end of the month the Employee get an approximate salary expectation. It uses the [[Feature:Geolocation | geolocation]] feature by checking into a [[Android Service]] which is a background application to determine whether the employee is in the workplace. The time difference between the last and current review is added to the working hours.

The application demonstrates how to use...

* ... different [[Activity | activities]] and [[Layout | layouts]] like the Tab activity.
* ... the [[Feature:Data export | export]] and [[Feature:Data import | import]] features.
* ... a [[Android Service]] which is a background application.
* ... the [[Connectivity Manager | connectivity manager]] and [[Location Listener | location listener]]
* ... a [[Map view]] with different [[Overlay | overlays]]
* ... the toggle button or table layout which are different [[View | views]]
* ... [[Android Preference | Android preferences]]

== Illustration ==

=== [[AppWidget]] ===

<syntaxhighlight lang=""xml"" source="""" line>
<?xml version=""1.0"" encoding=""utf-8""?>
<appwidget-provider xmlns:android=""http://schemas.android.com/apk/res/android""
	android:minWidth=""147dip""
	android:minHeight=""72dip""
	android:initialLayout=""@layout/main""
/>
</syntaxhighlight>

In the XML-Code we define the default properties of our AppWidget. In line three and four we define the size of the AppWidget-Layout and in line five we define the Layout of the AppWidget.

<syntaxhighlight lang=""java"" source="""" line>
public class CompanyWidget extends AppWidgetProvider{
   @Override
   public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
      super.onUpdate(context, appWidgetManager, appWidgetIds);
      ...
      appWidgetManager.updateAppWidget(appWidgetIds, views);
}
</syntaxhighlight>

In the class CompanyWidget we update the [[AppWidget]]

=== TabActivity ===

<syntaxhighlight lang=""java"" source="""" line>
intent = new Intent().setClass(this, GeneralSettings.class);
spec = tabHost.newTabSpec(""general"").setIndicator(""General"",
           res.getDrawable(android.R.drawable.ic dialog map))
           .setContent(intent);
tabHost.addTab(spec);
// Do the same for the other tabs
...
tabHost.setCurrentTab(1);
</syntaxhighlight>

In line one we create an Intent to launch an Activity for the tab. In line two till five we initialize a TabSpec for each tab and add it to the TabHost. In the last line we set our default TabSpec.

=== Manager & Provider===

<syntaxhighlight lang=""java"" source="""" line>
lManager = (LocationManager) getSystemService(LOCATION SERVICE);
cManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY SERVICE);
</syntaxhighlight>

We use the system services [[Location Manager]] and [[Connectivity Manager]] to get the status of GPS and internet connection.

=== [[Android Service | Service]] ===

<syntaxhighlight lang=""java"" source="""" line>
Intent i = new Intent(this, WorkService.class);
i.putExtra(""profile"", profile);
startService(i);
</syntaxhighlight>

In line one we create an Intent with the Service Class. In line two we put the profile object in the intent and in line three we start the Service.

=== Geolocation ===

<syntaxhighlight lang=""java"" source="""" line>
if(gps enabled) {
   lManager.requestLocationUpdates(LocationManager.GPS PROVIDER, UPDATE TIME, 0, updateListenerForGPS);
}
   else
      if(network enabled)
         lManager.requestLocationUpdates(LocationManager.NETWORK PROVIDER, UPDATE TIME, 0, updateListenerForNetwork);
</syntaxhighlight>

In line two and five we start the requests for the location.

<syntaxhighlight lang=""java"" source="""" line>
private LocationListener updateListenerForGPS = new LocationListener() {
   @Override
   public void onStatusChanged(String provider, int status, Bundle extras) {
   }
   @Override
   public void onProviderEnabled(String provider) {
      lManager.removeUpdates(updateListenerForNetwork);
   }
   @Override
   public void onProviderDisabled(String provider) {
   }
   @Override
   public void onLocationChanged(Location location) {
   ...
   profile.addWorkedTime((double)(actualTime-lastUpdateTime)/60000);
   ...
   }
};
</syntaxhighlight>

In line twelve we get in the onLocationChanged-method the current location. We use it, to look if the Employee is in the company. If he is then he get in line 14 a salary increase.

=== Map view & Overlay ===

==== [[Map view]] ====

<syntaxhighlight lang=""xml"" source="""" line>
<RelativeLayout
   ...>
   <com.google.android.maps.MapView
      android:id=""@+id/mv google map""
      ...
      android:apiKey=""@string/map key""/>
</RelativeLayout>
</syntaxhighlight>

In line 4 we give the [[Map view]] an ID. In line 6 we use a map key. [https://developers.google.com/maps/documentation/android/mapkey Here] you find more information about the Map key. We show the Map in a MapActivity.

==== [[Overlay]] ====

We use two [[Overlay | overlays]] in our implementation. The MapActivity constructs an rectangle with the CompanyOverlay and the MyLocationOverlay is a standard Android overlay to draw your own position.

<syntaxhighlight lang=""java"" source="""" line>
MapView mView;
List<Overlay> mapOverlays;
MyLocationOverlay myLocationOverlay;
...
myLocationOverlay = new MyLocationOverlay(this, mView);
...
mView.getOverlays().add(myLocationOverlay);
</syntaxhighlight>

In line 5 we create a MyLocationOverlay. In line 7 we get a list with overlays and we add the created mylocationOverlay to draw our position.

=== [[Android Preference | Preferences]] ===

<syntaxhighlight lang=""xml"" source="""" line>
<PreferenceScreen xmlns:android=""http://schemas.android.com/apk/res/android"" >
   <PreferenceCategory>
      <Preference android:key=""profile"" />
   </PreferenceCategory>
</PreferenceScreen>
</syntaxhighlight>

In line three we define the key for the preference.

<syntaxhighlight lang=""java"" source="""" line>
private SharedPreferences settings;
...
settings = getSharedPreferences(getPackageName()+"" preferences"", MODE PRIVATE);
...
settings.edit().putInt(""profile"", pos).commit();
...
settings.getInt(""profile"", 0);
</syntaxhighlight>

In line three we get the preference-object. In line five we edit the preference with putInt(key,value) and we commit the changes. In line seven we get the value with getInt(key,default).

== Architecture ==

* In the package ''org.softlang.company.mobileAndroid'' we define the app widget provider and the tab activities.
* In [this!!res/values/strings.xml strings.xml] we specify the Strings of the Application.
* In [this!!res/layout layout] we define various [[Layout | layouts]] of the different [[View | views]].
* In the package ''org.softlang.company.services'' we implement the [[Android Service]].
* In the package ''org.softlang.company.location'' we demonstrate the [[Map view | map view]] and [[Overlay | overlay]].
* In the package ''org.softlang.company.data'' we define the profile class and the xml Parser to import and export the data.
* In [this!!res/xml/company widget provider.xml company widget provider.xml] we have settings for the [[AppWidget]].
* In  [this!!res/xml/settings.xml settings.xml] we have the [[Android Preference]] xml-file.

== Usage ==

* See Usage of [[Contribution:simpleAndroid | simpleAndroid]].
* If you want to use the Google map view, then you need to follow these [https://developers.google.com/maps/documentation/android/start#getting the google maps android api v2 instructions] during development.

== Metadata ==
* [[uses::Language:Java]]
* [[uses::Language:XML]]
* [[uses::Technology:Android]]
* [[uses::Technology:Android SDK]]
* [[uses::Technology:Android Development Tool]]
* [[implements::Feature:Touch control]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Geolocation]]
* [[implements::Feature:Offline mode]]
* [[implements::Feature:Persistence]]
* [[developedBy::Contributor:hakanaksu]]

",2013-06-12 14:58:30.188,2017-07-05 15:29:16.175553
Namespace,Contributor,"== Headline ==

The namespace for [[101contributor]]

== Metadata ==


* [[relatesTo::Namespace:Contribution]]
* ",2013-06-12 15:00:47.871,2017-07-04 13:46:42.534573
Contribution,mobl,"== Intent ==

Implementation of 101 companies in mobl (http://mobl-lang.org).

== Description ==

Implements:
* Data model (plus sample data)
* Total, cut and depth scenarios

=== Architecture of the project ===

Main file is ""companies.mobl""
""data.mobl"" holds the company model, while ""init.mobl"" cotains functionality to fill the database
with meganalysis (as an model instance).

== Requirements ==

Requires the mobl Eclipse plug-in to be installed (from the update site: http://mobl-lang.org/update).

== Demo ==

To demo execute ""java -jar fileserver.jar 8080 www"" in the project's directory and
open http://localhost:8080/companies.html in your browser.

== Metadata ==
* [[developedBy::Contributor:tschmorleiz]]
* [[developedBy::Contributor:zefhemel]]

",2013-06-12 14:58:30.466,2017-07-04 13:46:16.387234
Namespace,Course,"== Headline ==

The namespace for courses that leverage the [[101project]]

== Description ==

Course pages summarize the structure and content of an actual course. Ideally, a course is described as a series of events such as lectures and labs where each event can be described in terms of languages, technologies, concepts, features, contributions, and information covered by the event.

== Illustration ==

See [[Course:Lambdas in Koblenz]] for a functional programming course that leverages the [[101project]].

== Metamodel ==

* '''Headline''' (required): the headline introducing the course.
* '''Summary''' (optional): a short summary of the course.
* '''Events''' (optional): any number of subsections of the following form:
** The subsection is of the form ""Event type"" (such as lecture) followed by event name (required).
** ""Software concepts"" followed by an itemized list of concepts (optional).
** ""Software languages"" followed by an itemized list of languages (optional).
** ""Software technologies"" followed by an itemized list of technologies (optional).
** ""Features of the 101companies:Project"" followed by an itemized list of features (optional).
** ""Contributions of the 101companies:Project"" followed by an itemized list of contributions (optional).
** ""Information regarding the 101companies:Project"" followed by an itemized list of information (optional).
* '''Relationships''' (optional): explanations regarding related courses.
* '''Metadata''' (required):
** The course must be declared to be, indeed, an instance of [[Namespace:Course]].
** The course may be linked to relevant online resources.

== Metadata ==
* ",2013-06-12 15:00:48.105,2017-07-04 13:46:42.584148
Namespace,Dotnet,"== Headline ==

The namespace for .NET packages

== Description ==

See http://101companies.org/api/api.php?action=query&generator=allpages&gapprefix=Dotnet&format=json for all members of the namespace.

== Metadata ==
* ",2013-06-12 15:00:48.409,2017-07-04 13:46:42.598591
Namespace,Feature,"== Headline ==

The namespace for [[software feature]]s of systems on 101wiki

== Description ==

101wiki hosts (documentation of) features of software systems. The members of the [[Namespace:Feature]] are feature descriptions. Features need to be described. In the case of features for [[System:Company]], the features need to be motivated. Features may be illustrated.

== Metadata ==

* [[hasMandatory::Section:Headline]]
* [[hasMandatory::Section:Description]]
* [[hasOptional::Section:Motivation]]
* [[hasOptional::Section:Illustration]]
* [[hasMandatory::Section:Metadata]]
* [[hasMandatory::Property:relatesTo]]
* [[hasOptional::Property:childOf]]
* [[hasOptional::Property:instanceOf]]
* [[exemplified::Feature:Abstract syntax]]
* [[exemplified::Feature:Hierarchical company]]
",2013-06-12 15:00:48.748,2017-07-04 13:46:42.64422
Theme,Haskell data,"== Headline ==

Varying [[Language:Haskell|]]-based approaches to [[data modeling]]

== Description ==

Different feature models and design choices are exercised for the [[Language:Haskell]]-based data model of companies. Thereby, Haskell's data modeling expressiveness and common styles are explored. Here is summary of included contributions and reasons for inclusion:

* [[Contribution:haskellStarter|haskellStarter]]: A data model with only type synonyms
* [[Contribution:haskellData|haskellData]]: A data model with algebraic data types
* [[Contribution:haskellRecord|haskellRecord]]: A data model with record types
* [[Contribution:haskellComposition|haskellComposition]]: A data model with [[data composition|composition]]
* [[Contribution:haskellVariation|haskellVariation]]: A data model with [[data variation|variation]]
* [[Contribution:haskellTermRep|haskellTermRep]]: A universal term representation

Any mentioning of ""trivial data model"" implies [[Feature:Flat company]] as opposed to [[Feature:Hierarchical_company]]. The remaining contributions involve data models that deal with [[Feature:Hierarchical_company]]. It should be noted that the contributions may serve additional purposes other than just illustrating data modeling options.

== Relationships ==

There are further themes with Haskell-based contributions:
* [[Theme:Haskell introduction]]: basics of Haskell.
* [[Theme:Haskell potpourri]]: more advanced and diverse coverage of the Haskell ecosystem.
* [[Theme:Haskell genericity]]: different styles of generic functional programming in Haskell.

== Metadata ==

",2013-06-12 15:02:25.234,2017-07-04 13:47:33.800615
Contribution,mongodb,"== Headline ==

Employ a document-oriented database

== Motivation ==

This implementation demonstrates the basic features of a [[Document-oriented database]] by example of [[Technology:MongoDB]]. Entries do not need to adhere to a rigid tuple shape like in a relational database. In MongoDB, entries are contained in [[Language:BSON]] objects which are organized in collections. The implementation is done in [[Language:JavaScript]] which is MongoDB's primary query language and shows how to use of the MapReduce pattern to process contained data inside the database. Typical patterns for a data model most beneficial for a document-oriented DB are also explained.

== Illustration ==

One MongoDB instance can handle many databases, in which collections of documents reside. In this implementation the 101companies [[Feature:Hierarchical company]] is mapped onto the MongoDB server as follows:

* Each company has its own database.
* Per database there is:
** One collection for employees
** one collection for departments

Each employee refers to her department by its ObjectID, a unique identifier assigned by MongoDB to each entry. This is also employed to have departments refer to their super-departments in the tree, as well as to their managers.
For top-level departments, this reference is simply omitted.

An example employee entry looks like this:

<syntaxhighlight lang=""javascript"">
{
	"" id"" : ObjectId(""4fd1ef6716fc9783d9e779f0""),
	""address"" : {
		""city"" : ""Koblenz"",
		""country"" : ""Germany""
	},
	""dept"" : ObjectId(""4fd1ea2942afa58847224864""),
	""name"" : ""Ralf"",
	""salary"" : 1234
}
</syntaxhighlight>

Each department carries information about its direct parent under the key ""super"" and a list of all its ancestor department Object IDs under ""ancestors"". Note that both the ""ancestors"" and ""super"" field are omitted in top-level departments as those have neither and there is now schema forcing us to keep these entries.

An example Department looks like this:

<syntaxhighlight lang=""javascript"">
{
	"" id"" : ObjectId(""4fd2061816fc9783d9e779f6""),
	""manager"" : ObjectId(""4fd2073116fc9783d9e779f7""),
	""super"" : ObjectId(""4fd1f7b616fc9783d9e779f3""),
	""name"" : ""Dev1.1"",
	""ancestors"" : [
		ObjectId(""4fd1f7b616fc9783d9e779f3""),
		ObjectId(""4fd1f78316fc9783d9e779f2"")
	]
}
</syntaxhighlight>

The reasoning behind the collection layout is as follows: One could easily use the capabilities of MongoDB to save a company as one document, like this:

<syntaxhighlight lang=""javascript"">
{
        ""company"" : ""meganalysis""
        ""depts"" : [
                        {
                                ""name"" : ""Research"",
                                ""manager"" : {...},
                                ""employees"" : [...]
                        },
                        {
                                ""name"" : ""Development"",
                                ""manager"" : {...},
                                ""employees"" : [...],
                                ""subdepts"" : [
                                                {
                                                    ""name"" : ""Dev1"",
                                                    ...
                                                }
                                             ]}]}
</syntaxhighlight>

This has two major disadvantages: First, it is difficult to search through this structure and secondly MongoDB places a 16 MB limit on single documents. If a company grows large, it might hit this limit.
The second problem might apply even if we change ""subdepts"" and ""employees"" fields to reference to different documents as the lists might still grow indefinitely. By adding parent information to the children instead, we work around this limitation.
For departments, references to all ancestors are also saved as this enables us to build the department hierarchy tree-structure more easily.

Total is implemented using MongoDBs MapReduce capabilities. The map function will emit one entry per employee, all under the same key. The reduce function will just sum up all these entries and return the results.
Note: Normally, the result of a MapReduce computation will be written into a new collection inside MongoDB, due to the small size of the example, the server is advised to simply return the computation as a JSON object.

Cut is implemented by simply iterating over the employees collection and changing the salary field for each document inside.

In addition to this, MapReduce code to create all subtrees to a company is provided. This is achieved as follows:

The map function essentially takes the list of ancestors for each department and emits pairs of {ancestor, dept} for each of the department's ancestors. The reduce function then gathers all pairs who are keyed by the same ancestors, yielding all subtrees contained in the hierarchy.
In a second step, using a few simple queries on the employee database, all employees that are associated with each subtrees are added.

== Usage ==

In the json subfolder are two collection dumps created via the mongoexport tool. To import those, make sure you have a MongoDB server running on your local machine and simply run the packaged script:

<syntaxhighlight lang=""bash"">
$ ./rebuild.sh
</syntaxhighlight>

This will reimport the employee and dept collections for the meganalysis company into the local MongoDB instance.

Feature demonstrations are run using the mongo command by simply specifying the correct database and the corresponding JavaScript files as command line arguments like this:

<syntaxhighlight lang=""bash"">
$ mongo meganalysis total.js
</syntaxhighlight>

Each script will print out the results of the respective computation.

== Metadata ==
* [[uses::Technology:MongoDB]]
* [[uses::Technology:Data aggregation]]
* [[uses::Language:JavaScript]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:NoSQL]]
* [[developedBy::Contributor:DerDackel]]
",2013-06-12 14:58:31.621,2017-07-05 15:29:18.599258
Namespace,Java,"== Headline ==

The namespace for Java packages

== Description ==

See http://101companies.org/api/api.php?action=query&generator=allpages&gapprefix=Java&format=json for all members of the namespace.

== Metadata ==
* ",2013-06-12 15:00:49.214,2017-07-04 13:46:42.73421
Namespace,Language,"== Headline ==

The namespace of [[software language]]s

== Description ==

This namespace is dedicated to [[software language]]s, e.g., programming languages such as [[Language:Java]], [[Language:Python]], and [[Language:Haskell]]. Software languages are supposed to be described already elsewhere on the web, e.g., on Wikipedia, and thus, 101wiki coverage can be minimalistic and the 101wiki page for a language serves essentially as a [[linked open data]] resource. Metadata for a language should serve the classification of languages on 101wiki.

== Metadata ==

* [[relatesTo::Software language]]
* [[hasMandatory::Section:Headline]]
* [[hasOptional::Section:Details]]
* [[hasOptional::Section:Quote]]
* [[hasOptional::Section:Illustration]]
* [[hasMandatory::Section:Metadata]]
* [[hasMandatory::Property:instanceOf]]
* [[exemplifiedBy::Language:Haskell]]
",2013-06-12 15:00:49.467,2017-07-04 13:46:42.777632
Namespace,Module,"== Headline ==

The namespace for 101worker modules

== Description ==
This module tries to resolve all metadata defined in 101meta rules. It goes over the rules dump of rules101meta and checks for every metadata value if a page on the wiki exists. If there is a page, the link to the page is constructed and the headline is extracted. All found values go into the dump, including the link and, if available, the headline. It then goes over all contributions defined in the wiki and checks if a repo entry exists for this contribution. It constructs the link to the wiki, the link to the repo, and tries to extract the headline from the wiki page. All data is appended to the dump.

== Output ==

http://data.101companies.org/dumps/resolution.json

== Input ==

* 101meta rules as collected by [[Module:rules101meta]]
* 101repo as prepared by [[Module:pull101repo]]
* The wiki data as collected by [[Module:wiki2json]]


== Metadata ==
* ",2013-06-12 15:00:49.697,2017-07-04 13:46:42.814277
Namespace,Technology,"== Headline ==

The namespace of [[software technology|software technologies]]

== Description ==

This namespace is dedicated to [[software technology|software technologies]], e.g., APIs such as [[Technology:JUnit]] or [[Technology:JDOM]]. Software technologies are supposed to be described already elsewhere on the web, e.g., on Wikipedia, and thus, 101wiki coverage can be minimalistic and the 101wiki page for a technology serves essentially as a [[linked open data]] resource. Metadata for a technology should serve the classification of technologies on 101wiki. It is a good practice to include a short illustration for a technology, but it is not mandatory. In fact, the illustration may be more extensive, if the technology at hand plays a role in 101wiki-based course material.

== Metadata ==

* [[relatesTo::Software technology]]
* [[hasMandatory::Section:Headline]]
* [[hasOptional::Section:Details]]
* [[hasOptional::Section:Quote]]
* [[hasOptional::Section:Illustration]]
* [[hasMandatory::Section:Metadata]]
* [[hasMandatory::Property:instanceOf]]
* [[hasMandatory::Property:facilitates]]
* [[exemplifiedBy::Technology:JUnit]]
* [[exemplifiedBy::Technology:JDOM]]
* [[exemplifiedBy::Technology:QuickCheck]]

",2013-06-12 15:00:51.423,2017-07-04 13:46:43.007405
Namespace,Namespace,"== Headline ==

The namespace of 101wiki namespaces

== Description ==

101wiki uses namespaces for pages so that some form of name qualification is achieved, thereby avoiding name clashes and facilitating searching. Further, namespaces are 'reflectively' described on the 101wiki in terms of section structure ([[Property:hasOptional]] and [[Property:hasMandatory]]) as well as metadata items ([[Property:hasDomain]] and [[Property:hasRange]]), thereby guiding authors and potentially permitting lax validation. Generally, the namespace shows up, as is, in the URLs for the pages with the exception of [[Namespace:Concept]] where 'Concept' is simply omitted in the URLs.

== Metadata ==

* [[hasMandatory::Section:Headline]]
* [[hasMandatory::Section:Description]]
* [[hasMandatory::Section:Metadata]]
* [[hasMandatory::Property:exemplifiedBy]]
* [[exemplifiedBy::Namespace:Namespace]]
* [[exemplifiedBy::Namespace:Language]]
* [[exemplifiedBy::Namespace:Technology]]
* [[exemplifiedBy::Namespace:Concept]]
* [[exemplifiedBy::Namespace:Feature]]
* [[exemplifiedBy::Namespace:System]]
* [[exemplifiedBy::Namespace:Perspective]]
* [[exemplifiedBy::Namespace:Type]]
",2013-06-12 15:00:50.069,2017-07-04 13:46:42.874749
Namespace,Document,"== Headline ==

101wiki reifications of external documents

== Metadata ==

*

",2013-06-12 15:00:50.734,2017-07-04 13:46:42.883748
Namespace,Script,"== Headline ==

The namespace for event scripts

== Description ==

When events such as lectures or labs or tutorials leverage the [[101project]] at a detailed level, then those events can be loosely scripted according to the metamodel of [[Namespace:Script]]. The idea of these liberal scripts is to capture all concepts, languages, technologies, features, and contributions that are covered during the event. Specifically, the order of listed concepts should resemble the order actually intended for the event.

== Illustration ==

See [[Script:First steps in Haskell]] for an illustrative script.

== Metamodel ==

* '''Headline''' (required): the headline introducing the script.
* '''Summary''' (optional): a short summary of the course.
* '''Concepts''' (optional): an itemized list of software concepts.
* '''Languages''' (optional): an itemized list of software languages.
* '''Technologies''' (optional): an itemized list of software technologies.
* '''Features''' (optional): an itemized list of features of the [[system:Company]].
* '''Contributions''' (optional): an itemized list of contributions of the [[system:Company]].
* '''Information''' (optional): an itemized list of members of [[Namespace:Information]].
* '''Metadata''' (required):
** The script must be declared to be, indeed, an instance of [[Namespace:Script]].
** The script may be linked to relevant online resources.

== Metadata ==
* ",2013-06-12 15:00:50.973,2017-07-04 13:46:42.937301
Namespace,Service,"== Headline ==

The namespace for 101worker services

== Metadata ==
* ",2013-06-12 15:00:51.177,2017-07-04 13:46:42.946452
Contribution,mps,"== Headling ==

An implementation based on [[Technology:MPS]]

== Metadata ==
* [[developedBy::Contributor:Thiago Tonelli Bartolomei]]
* [[developedBy::Contributor:rlaemmel]]
",2013-06-12 14:58:32.512,2017-07-04 13:46:17.696926
Contribution,php,"== Intent ==

[[Web programming]] in [[Language:PHP]]

== Motivation ==

Currently the most popular and complete [[web programming]] [[Software language|language]], which is focused on the creation of web resources - is [[Language:PHP]]. Its popularity is due to a number of advantages that it gives the developer. Code written in this [[Software language|language]], does not look bulky and basic scenarios are created in a few lines.

[[Language:PHP]] is embedded in ordinary [[Language:HTML]]-code page, which provides a high level of flexibility in its use, and security is provided by [[Language:PHP]] -stealth insertions in the browser (displayed normal [[Language:HTML]]). [[Software language|Language]]allows you to create dynamic pages that open up great opportunities for web design and programming.

Due to the simplicity of the code, script execution takes place at a fairly high speed, since the nature of [[Software language|language]] can be described as an interpreter translating (the script is processing and displaying its result in a visual form). Speed ​​of processing scenarios is ideal for applications of any complexity.

In this [[Contribution:PHP]] implementation, will be described basic functions and methods of [[Language:PHP]] language.

== Illustration ==

=== Architecture ===

All requests, which are executing in current [[Language:PHP]] implementation are going through index.php file.

Lets have a look on it:

1) On first step we connection configuration file and file with functions

<syntaxhighlight lang=""php"">
include once('lib/config.php');
include once('lib/functions.php');
</syntaxhighlight>

2) Next in file you can see part, which will catch all actions. This mean, that all POST queries (and queries that are not required display something to user) will be executed, and page will be redirected back.
<syntaxhighlight lang=""php"">

if (get input('type') == 'action'){
	switch(get input('action')){
		case 'company':
			include('actions/company.php');
			back();
			break;
		case 'department':
		…………

</syntaxhighlight>

3) Includes part.

Includes header and in the end of file footer. This HTML code, that will be the same for all pages (it includes [[Language:CSS]] and [[Language:JavaScript]] files).

<syntaxhighlight lang=""php"">
include once('template/header.php');
……
include once('template/footer.php');
</syntaxhighlight>

In the middle located code, that will catch “section” variable. And display need content to user

<syntaxhighlight lang=""php"">
switch(get input('section')){
	case 'employee':
		$eid = get input('eid');
		$employeeInfo = getEmployees($eid, true);
		include('template/employee.php');
		break;
		……..
</syntaxhighlight>

=== PHP and Mysql connection ===

For more details about Mysql, please read [[Contribution:mySqlMany]]

[[Language:PHP]] has build-in functions for working with database. Lets have a look more detailed on them.

<syntaxhighlight lang=""php"">
// /lib/functions.php
$db = mysql connect(DB HOST, DB USER, DB PASSWORD);
if (!$db) {
    	die('Db connection error: ' . mysql error());
}
$dbSelected = mysql select db(DB NAME, $db);
return $dbSelected;
</syntaxhighlight>

On this example:

<syntaxhighlight lang=""php"">
$db = mysql connect(DB HOST, DB USER, DB PASSWORD);
</syntaxhighlight>

is function for connecting with [[Technology:MySQL]] database, taking as parameters [[Technology:MySQL]]host, Username and password. Look http://www.php.net/manual/en/function.mysql-connect.php for more information

After we initialized connection, we will use it as default in all operations with database in this implementation.

List of [[Technology:MySQL]] functions that were used in [[Language:PHP]] implementation.

<syntaxhighlight lang=""php"">
mysql select db(); select used Database name;
mysql query(); // execution of Mysql query;
mysql fetch assoc(); // return query result as associative array;

// get company information
function getCompany(){
	//Execute query
	$result = mysql query('SELECT * FROM company');

	//get DB table as Array
	$data = array();
	while($row = mysql fetch assoc($result)){
		$data[] = $row;
	}

	return $data;
}

</syntaxhighlight>

=== Feature implementation ===

Cut salary for all employees or for all department, making using [[Technology:MySQL]] queries:

<syntaxhighlight lang=""php"">
function cutCompanySalary($did = 0){

// Prepare query for cutting the salary
	$query = 'UPDATE employee SET salary = salary/2';
	$query .= "" WHERE cid = 1""; // set Id of company – in our case we have just one company

	if ($did != 0){ // if we have department ID to cut, then add department id selector
		$query .= ' AND did='.$did;
	}

//Execute mysql query
	if (mysql query($query)){
		return true;
	}else{
		return false;
	}

}
</syntaxhighlight>

== Usage ==

You need a [[Web Browser]] to open the HTML files.

This implementation required to have [[Technology:MySQL]]-database.
Can be used ''company.sql'' and ''sampleCompany.sql'' of [[Contribution:mySqlMany]] for this project.

For run this implementation, you should have [[Technology:Apache HTTP Server]] installed, with supporting of [[Technology:PHP]] and [[Technology:MySQL]] server installed.

* download and install [[Contribution:mySqlMany]]
* copy all files from [[Contribution:php]] to your server folder
* edit /lib/config.php file and set your Database credentials.

== Metadata ==
* [[uses::Language:PHP]]
* [[uses::Language:HTML]]
* [[uses::Language:CSS]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Persistence]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Web UI]]
* [[developedBy::Contributor:nuzil]]
",2013-06-12 14:58:38.251,2017-07-05 15:29:30.539406
Namespace,Theme,"== Headline ==

The namespace of moderated collections of [[Namespace:Contribution|contributions]] to the [[101project]]

== Description ==

A theme is a moderated collection of [[Namespace:Contribution|contributions]] to the [[101project]]. Themes are meant to be helpful in accessing contributions by collecting selected contributions according to some perspective, likely of interest to some stakeholders.

== Illustration ==

Here are typical patterns for theme headlines with some emphasis added to better convey the assumed focus of a theme:

* Contributions that demonstrate ''basics'' of a ''specific programming language''
* Contributions that demonstrate a ''specific programming domain'' across ''different programming languages''
* Contributions that demonstrate ''different programming technologies'' for the ''same programming problem''

See [[Theme:Scrap your boilerplate]] for a recommended illustration.

See the actual instances of this namespace for more concrete illustrations.

== Guidelines ==

To help comprehension, themes should be of a manageable size. As a guideline, 5-10 contributions per theme. Accordingly, the composition of a theme needs to be selective in identifying theme members. For instance, [[Theme:XML programming]] covers presumably all fundamental approaches to XML processing, but it leaves out variations in terms of APIs and languages. Such variations can still be discovered easily by users because contributions are richly tagged and cross-referenced.

== Relationships ==

* [[Namespace:Contribution]] is concerned with contributions whereas [[Namespace:Theme]] is concerned with collections of contributions.

== Metamodel ==

* '''Headline''' (required): the headline introducing the theme.
* '''Description''' (required): the description of the theme which explains selection criteria for the inclusion of contributions into the theme and which also identifies the perspective or the stakeholders served by the theme. Information may also be provided regarding the order in which the contributions should be approached.
* '''Relationships''' (optional): explanations regarding related themes.
* '''Metadata''' (required):
** The theme must be declared to be, indeed, an instance of [[Namespace:Theme]].
** The theme may be linked to relevant online resources.
** The theme may also be related to any relevant [[software concept]]s.

== Metadata ==
* ",2013-06-12 15:00:51.688,2017-07-04 13:46:43.104558
Contribution,pyVisitors,"== Intent ==

modular programming with [[Visitor pattern|visitors]] in [[Language:Python]]

== Motivation ==

This contribution is similar to [[Contribution:javaVisitor]]. The Visitor Pattern
allows the separation of operations from an object model.

== Illustration ==

There is a method for every class to work on it because python has no method
overloading. The dispatch is done by the Visitor class which uses reflection.
It searches for a method which has the name <code>visit [class name]</code>
but if there is not any method, it calls a default method that performs a deeper
traversal.

<syntaxhighlight language=""python"">
class CutVisitor(Visitor):

    def visit Company(self, c):
        for d in c.depts:
            self.visit(d)

    def visit Department(self, d):
        self.visit(d.manager)
        for s in d.subunits:
            self.visit(s)

    def visit Employee(self, e):
        e.salary /= 2.0
</syntaxhighlight>

== Usage ==

Download the source and run <code>python operations.py</code>

== Metadata ==

* [[uses::Language:Python]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[developedBy::Contributor:kevin-klein]]
",2013-06-12 14:58:40.829,2017-07-05 15:29:33.160456
Contribution,pyjson,"== Headline ==

Processing [[Language:JSON]]-based data in [[Language:Python]]

== Motivation ==

This is a very basic implementation which shows to process company data, externally represented in [[Language:JSON]], can be processed with basic idioms of [[Language:Python]]. The JSON input is represented in memory as a hierarchically nested dictionary. Hence, all processing depends on recursive loops over the dictionary.

== Architecture ==

There are modules for the basic features.

* [[Feature:Total]]: ""total.py""
* [[Feature:Cut]]: ""cut.py""

The sample company is available as a JSON file ""input.json"".

== Usage ==

Tested with Python 2.7.3.

There is Makefile that automates a test case; see the ""test target"".

All steps could as well be executed just on the command line.

<pre>
./total.py input.json
326927
./cut.py input.json output.json
./total.py output.json
163462
</pre>

== Metadata ==

* [[uses::Language:Python]]
* [[uses::Language:JSON]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Open serialization]]
* [[memberOf::Theme:Starter]]
* [[developedBy::Contributor:rlaemmel]]

",2013-06-12 14:58:43.481,2017-07-05 15:29:36.357478
Technology,Opera,"== Intent ==

A free (partially open source) Web browser

== Metadata ==
* [[instanceOf::Web browser]]
* [[sameAs::http://www.opera.com/]]
* [[relatesTo::http://en.wikipedia.org/wiki/Opera_%28web_browser%29]]
* ",2013-06-12 15:01:51.996,2017-07-04 13:47:30.818781
Course,Data technologies for Debeka,"== Headline ==

Professional training on modern data technologies

== Summary ==

The course was designed for professional training at [http://www.debeka.de Debeka].

The course was done in the form of a one day tutorial in September 2012.

== Metadata ==

* [[sameAs::http://github.com/avaranovich/datatechcourse/wiki]]
* ",2013-06-12 14:59:38.654,2017-07-04 13:46:32.839642
Namespace,Vocabulary,"== Headline ==

The namespace for vocabularies

== Description ==

Within the context of the 101companies project and this wiki specifically, the notion of vocabulary is used in the simple sense of a collection of terms that are characterized by some common context of usage, as captured by the name of the vocabulary. By associating individual terms (concepts) with vocabularies, their use within the wiki is hence disambiguated.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Vocabulary]]
* ",2013-06-12 15:00:52.041,2017-07-04 13:46:43.124965
Document,Design patterns,"== Headline ==

The [[textbook]] on [[design pattern]]s by the ""gang of four""

== Metadata ==


* [[instanceOf::Textbook]]
* [[relatesTo::Design pattern]]

",2013-06-12 15:00:52.441,2017-07-04 13:46:43.140317
Document,Handbook of data structures and applications,"== Headline ==

The Handbook of data structures and applications

== Metadata ==

* [[instanceOf::Handbook]]
* [[sameAs::http://www.e-reading-lib.org/bookreader.php/138822/Mehta - Handbook of Data Structures and Applications.pdf ]]
* [[relatesTo::Data structure]]
* [[relatesTo::Functional data structure]]

",2013-06-12 15:00:52.667,2017-07-04 13:46:43.159279
Document,Haskell's overlooked object system,"== Headline ==

A report studying object encodings in Haskell

== Metadata ==

* [[sameAs::http://arxiv.org/abs/cs/0509027]]

",2013-06-12 15:00:52.866,2017-07-04 13:46:43.168183
Contribution,wxHaskell,"== Headline ==

[[GUI programming]] in [[Language:Haskell]] with [[Technology:wxHaskell]]

== Motivation ==

The implementation demonstrates [[GUI programming]] in [[Language:Haskell]] with [[Technology:wxHaskell]]. A simple [[GUI]] for companies is provided. The user can navigate the hierarchical company structure, cut salaries, and edit attributes such as names, addresses, and salaries. The implementation uses a [[zipper]]-inspired focus concept to enable modification of the company tree along editing in the GUI. The focus keeps track of a location in the company tree and enables read and write operations for the location.

== Illustration ==

=== Focus datatype ===

We are using a datastructure inspired by the concept of [[Zipper|Zippers]] to specify positions of components within the company. We provide an algebraic datatype <syntaxhighlight lang=""haskell"" enclose=""none"">Focus</syntaxhighlight>:

<syntaxhighlight lang=""haskell"" source=""wxHaskell/Focus.hs"" line>
data Focus =
     CompanyFocus
   | DeptFocus [Int]
   | ManagerFocus [Int]
   | EmployeeFocus [Int] Int
    deriving (Show, Read)
</syntaxhighlight>

We define one constructor per company datatype and one for managers. For example to construct a focus for an employee one needs to pass:
* A list of indexes: Starting from the company root this list is used to navigate through the departments and subdepartments to the employee's department.
* An index: The index of this employee in the employee's department's employees list.
On top of this definition we provide functions to get sub and upper foci and to read and write company components (see [this!!Focus.hs] for details).

=== The views ===

For each company datatype, that is <syntaxhighlight lang=""haskell"" enclose=""none"">Company</syntaxhighlight>, <syntaxhighlight lang=""haskell"" enclose=""none"">Department</syntaxhighlight> and <syntaxhighlight lang=""haskell"" enclose=""none"">Employee</syntaxhighlight>, [this!!Views.hs] provides a view to display the specific component including buttons to navigate and cut salaries. All of these functions are of type <syntaxhighlight lang=""haskell"" enclose=""none"">Frame () -> Focus -> Company -> IO ()</syntaxhighlight>. That is, given the global frame, a focus and a company these functions perform GUI actions (which are IO actions).
In the following we demonstrate how an employee is displayed.

==== Viewing an employee ====

<syntaxhighlight lang=""haskell"" enclose=""none"">showEmployee</syntaxhighlight> is the view function for employees:

<syntaxhighlight lang=""haskell"" source=""wxHaskell/Views.hs"" line>
viewEmployee :: Frame () -> Focus -> Company -> IO ()
viewEmployee f focus c = do
    -- reading employee
    let e = readEM focus c
    -- setting up frames and panels
    set f [ text := ""Employee \"""" ++ ename e ++ ""\""""]
    p <- panel f [textColor := textBlue]
    -- boxes for name, address and salary
    nameBox <- entry p [text := ename e]
    addressBox <- entry p [text := address e]
    salaryBox <- entry p [text := show $ salary e]
    -- cut button
    cButton <- cutButton p f focus c
    -- back button
    bButton <- backButton p f focus c
    -- save button
    sButton <- button  p
          [ text := ""Save""
          , size := Size 50 22
          , on command := do {
              newName <- get nameBox text;
              newAddress <- get addressBox text;
              newSalary <- get salaryBox text;
              objectDelete p;
              viewEmployee f focus $
               writeEM focus c $
                Employee newName newAddress $
                 read newSalary; }]
    -- compose layout
    setEmployeeLayout f p sButton bButton nameBox addressBox salaryBox cButton
</syntaxhighlight>

In line 4 we read the employee in question using the ''Focus'' module's function <syntaxhighlight lang=""haskell"" enclose=""none"">readEM</syntaxhighlight>. In lines 6-7 we set the frame title and create a new panel for this view. In lines 9-11 we create one input box per employee field. We create buttons to cut the employee's salary and to go back to the department level in lines 13-15. In lines 17-28 we set up a save button: When a user clicks the button, the name, address and salary fields are read, the panel is deleted, the employee is updated in the company and the new company is displayed. In the last line  we call <syntaxhighlight lang=""haskell"" enclose=""none"">setEmployeeLayout</syntaxhighlight>, which composes the layout using various layout combinators (see [this!!Views.hs] for details).

=== Cutting button ===

On each view the GUI provides a button to cut all salaries:

<syntaxhighlight lang=""haskell"" source=""wxHaskell/Views.hs"" line>
cutButton :: Panel () -> Frame () -> Focus -> Company -> IO (Button ())
cutButton p f focus c =
  button p [ text := ""Cut""
           , size := Size 50 22
           , on command := do {
                objectDelete p;
                view f focus $ readCutWrite focus c;}]
</syntaxhighlight>

When the user clicks the button the <syntaxhighlight lang=""haskell"" enclose=""none"">command</syntaxhighlight> action (lines 5-7) is executed. First the view's panel is deleted in line 6. We use <syntaxhighlight lang=""haskell"" enclose=""none"">readCutWrite</syntaxhighlight> to cut the company component's salaries. This function reads the component in question based on the focus, then cuts this component's salaries and replaces it in the given company. In line 7 the <syntaxhighlight lang=""haskell"" enclose=""none"">command</syntaxhighlight> action calls <syntaxhighlight lang=""haskell"" enclose=""none"">view</syntaxhighlight> to view the company, department or employee. Based on the focus <syntaxhighlight lang=""haskell"" enclose=""none"">view</syntaxhighlight> decides which concrete view-function to call:

<syntaxhighlight lang=""haskell"" source=""wxHaskell/Views.hs"" line>
view:: Frame () -> Focus -> Company -> IO ()
view f focus = view' f focus
  where
    view' = case focus of
              CompanyFocus        -> viewCompany
              (DeptFocus  )       -> viewDept
              (EmployeeFocus    ) -> viewEmployee
              (ManagerFocus  )    -> viewEmployee
</syntaxhighlight>

=== Starting the GUI ===

We use xwHaskell's <syntaxhighlight lang=""haskell"" enclose=""none"">start :: IO a -> IO ()</syntaxhighlight>. This function runs the given GUI of type <syntaxhighlight lang=""haskell"" enclose=""none"">IO a</syntaxhighlight> while discarding <syntaxhighlight lang=""haskell"" enclose=""none"">a</syntaxhighlight> and returning <syntaxhighlight lang=""haskell"" enclose=""none"">IO ()</syntaxhighlight>:

<syntaxhighlight lang=""haskell"" source=""wxHaskell/Main.hs"" line>
gui :: IO ()
gui = do
    f <- frame [ textBgcolor := colorRGB 112 128 144
               , resizeable := False
               , fontWeight := WeightBold
               , fontUnderline := False
               , position := Point 50 50]
    showCompany f CompanyFocus company

main :: IO ()
main = start gui
</syntaxhighlight>

In lines 3-7 <syntaxhighlight lang=""haskell"" enclose=""none"">gui</syntaxhighlight> creates the main frame for all views passing a list attributes, which are assigned by making use of assign operator <syntaxhighlight lang=""haskell"" enclose=""none"">(:=)</syntaxhighlight>. In the last line the function calls <syntaxhighlight lang=""haskell"" enclose=""none"">showCompany</syntaxhighlight> passing the frame, the root focus and a sample company in line 8.

== Architecture ==

[this!!Views.hs] provides one view per company datatype. [this!!Main.hs] starts the GUI. The algebraic datatype for companies can be found in [this!!Company.hs], a sample company in [this!!SampleCompany.hs]. [this!!Focus.hs] provides a focus datatype and functions on top of it. [this!!Total.hs] and [this!!Cut.hs] provide functionality to total and cut salaries.

== Usage ==

* [this!!Main.hs] has to be compiled using GHC.
* The output is executed.

There is a ''Makefile'' with a target ''start'' covering both stepts.

== Metadata ==

* [[uses::Language:Haskell]]
* [[uses::Technology:wxHaskell]]
* [[uses::Technology:GHC]]
* [[uses::Technology:GHCi]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[developedBy::Contributor:tschmorleiz]]
* [[memberOf::Theme:Haskell potpourri]]
",2013-06-12 14:59:16.217,2017-07-05 15:30:02.771203
Script,Functional OO programming,"== Headline ==

[[Functional OO programming]] in [[Language:Java|]]

== Material ==

<media url=""http://www.slideshare.net/rlaemmel/functional-oo-programming""/>

== Concepts ==

* [[Functional programming]]
* [[OO programming]]
* [[Functional OO programming]]
* [[Nested class]]
* [[Anonymous class]]
* [[Function object]]
* [[Closure]]
* [[Traversal]]
* [[Traversal scheme]]
* [[Parsing]]
* [[Parser combinator]]

== Contributions ==

* [[Contribution:javaSyb]]
* [[Contribution:javaParseLib]]

== Metadata ==

* [[instanceOf::Course:Programming in Koblenz]]
*

",2013-06-12 15:00:54.752,2017-07-04 13:46:48.693817
Technology,Antenna,"== Headline ==

(an Apache project on) a template engine

== Metadata ==
* [[instanceOf::Preprocessor]]
* [[sameAs::http://antenna.sourceforge.net/wtkpreprocess.php]]
* ",2013-06-12 15:01:03.268,2017-07-04 13:47:26.99429
Service,discovery,"== Headline ==

Linked data enabled service for discovering resources

== Metadata ==

",2013-06-12 15:00:58.515,2017-07-04 13:47:26.527284
Service,sourceLinks,"== Headline ==

sourceLinks service

== Metadata ==

",2013-06-12 15:00:58.906,2017-07-04 13:47:26.539267
Technology,GeFLo,"== Headline ==

a generic fragment locator based on [[Technology:GeSHi]]

== Description ==

GeFLo is a part of the [[101companies:Explorer]]; it is a generic tool for fragment location. The technology supports the token-aware, and regular expression-based location of fragments for all languages that are supported by [[Technology:GeSHi]]. The input/output behavior of GeFLo is the following:

* Input:
** a source file
** a fragment description using regexp-like syntax on tokens
* Output:
** the line range of the located fragment

Suppose we are in need of fragment location for Ruby. Consider the following code [https://github.com/101companies/101repo/blob/master/contributions/ruby/company/company.rb]:

<pre>
class Company

  attr_accessor :name, :topDepts

  def total
    ttl = 0.0
    topDepts.each do |topDept|
      ttl += topDept.total
    end
    ttl
  end

  def cut
    topDepts.each do |topDept|
      topDept.cut
    end
  end
end
</pre>

A GeFLo-based fragment description for the function ""total"" takes this form:

<pre>
def total ^[def]*
</pre>

The expression matches with the leftmost, longest substring of the input that consists of ""def"", followed by ""total"", followed by any number of tokens that are different from ""def"". Fragment location hence returns the line range 5-11.

A GeFLo-based fragment description for the function ""cut"" takes this form:

<pre>
def cut .* > end $
</pre>

The expression matches with the leftmost, longest substring of the input that consists of ""def"", followed by ""cut"", followed by any number of tokens, where the substring must be followed by ""end"" and ""$"" (the end of the input). The operator "">"" does not carry any semantics in matching; it only denotes the separation between matched input to be returned by fragment location as opposed to additional matched content. (We may also use the notion of ""follow restriction"".) Fragment location hence returns the line range 13-17.

Special conventions regarding comments and whitespace:
* Comments and whitespace are skipped in the input during matching.
* Whitespace in regular expressions serves for sequential composition.

Summary of regexp syntax:
* Metasymbol "" "" for sequential composition.
* Metasymbol ""."" for any token.
* Metasymbol ""^"" for start of input.
* Metasymbol ""$"" for end of input.
* Metasymbol "">"" for separating the appended matched substring from follow restriction. (look-ahead)
* Metasymbol ""<"" for separating the prepended matched substring from follow restriction. (look-behind)
* Metasymbol ""\"" for escpaping metasymbols for use in token.
* Metasymbols ""?"", ""+"", ""*"" as usual quantifiers for optional parts and iteration.
* Metasyntax ""^[''e'']"" for negation; ''e'' is a regular expression.

== Grammatic of GeFLo ==

This grammatic is only one possibility, but it is very near to the implementation, where some exceptions had to be made. There exists interfaces or classes in the implementation for all these rules.
So it is ambiguous because of StarAnyToken and PlusAnyToken, which could be also interpreted as concrete rule, e.g. ""Star = AnyToken '*'"".
But these both have a semantic difference to a regular quantified AnyToken: They can also match beyond the token limit.
<pre>
Pattern = Start? LookBehind? SubPattern LookAhead? End?

Start = '^'
End = '$'
LookBehind =  SubPattern '<'
LoonAhead = SubPattern '>'

SubPattern =
      '(' SubPattern ')'
    | Sequence
    | Negation
    | Quantifier
    | Token

Sequence = SubPattern (WhiteSpace SubPattern)+
Negation = '^' '[' SubPattern ']'

Quantifier = QuestionMark | Plus | Star
QuestionMark = SubPattern '?'
Plus = SubPattern '+'
Star = SubPattern '*'

Token = AnyToken | StarAnyToken | PlusAnyToken | SpecificToken
AnyToken = '.'
StarAnyToken = '.' '*'
PlusAnyToken = '.' '+'
SpecificToken = (~MetaSymbol | Escape MetaSymbol)+

(* Symbols *)
MetaSymbol = '(' | ')' | '^' | '[' | ']' | '.' | '<' | '>' | '$' | '?' | '*' | '+' | WhiteSpace | Escape
WhiteSpace = ' ' | '\t' | '\r' | '\n'
Escape = '\'
</pre>

== Technical details ==

Matching GeFLo-patterns against source code is implementend in several stages:
# Script preparation:
## Tokenize script in token array by GeSHi
## Joining the token array to a string with line numbers and delimiters
# Pattern preparation:
## Parsing GeFLo-pattern char-by-char and building an abstract syntax-tree
## Building a Java-Pattern compatible regular expression from the syntax-tree
# Execution and post-processing:
## Applying the Java-Pattern on the joined token string by java.util.regex.Matcher#replaceAll
## Splitting the result string to start and end line number

=== Script preparation ===

Input:
  See the ruby script[https://github.com/101companies/101repo/blob/master/contributions/ruby/company/company.rb] above.

Output:
<pre>
{
  ""tokens"": [
    {
      ""text"": ""class"",
      ""class"": ""kw"",
      ""line"": 1,
      ""i"": 0
    },
    {
      ""text"": ""Company"",
      ""class"": ""de"",
      ""line"": 1,
      ""i"": 1
    },
    ...,
    {
      ""text"": ""def"",
      ""class"": ""kw"",
      ""line"": 13,
      ""i"": 1
    },
    {
      ""text"": ""cut"",
      ""class"": ""de"",
      ""line"": 13,
      ""i"": 2
    },
    ...,
    {
      ""text"": ""end"",
      ""class"": ""kw"",
      ""line"": 17,
      ""i"": 1
    },
    {
      ""text"": ""end"",
      ""class"": ""kw"",
      ""line"": 18,
      ""i"": 0
    }
}
</pre>

This token array will be joined to a string with a more simple syntax, so it will be easier to extract the line numbers by regular expressions.
This joined form may look like this without any line breaks or whitespaces:
<pre>
%1§class%1§Company%3§attr_accessor%3§:name%3§,%3§:topDepts%5§def%5§total%6§ttl%6§=%6§0.0
%7§topDepts%7§.%7§each%7§do%7§|%7§topDept%7§|%8§ttl%8§+=%8§topDept%8§.%8§total%9§end
%10§ttl%11§end%13§def%13§cut%14§topDepts%14§.%14§each%14§do%14§|%14§topDept%14§|
%15§topDept%15§.%15§cut%16§end%17§end%18§end
</pre>
There you see that all tokens and linenumbers got replaced by ""%LINE_NUMBER§TOKEN"". Internally there is a step before that. Each token string will be quoted, which means all special chars for regular expressions (""\"" and ""$"" for backreferences) are prefixed by a backslash. This includes also that the line number delimiter chars (% and $) are replaced by invisible unicode-chars. This would not be used in any known programming language as valid names or tokens. Usage in strings is not from interest, because they are not contained in the token array.

=== Pattern preparation ===

On base of the example pattern from above:
<pre>
  def cut .* > end $
</pre>

the following syntax-tree will be build:
<pre>
LookaroundPattern:
    |- Pattern:
    |    |- Sequence:
    |    |    |- SpecificToken: ""def""
    |    |    |- SpecificToken: ""cut""
    |    |    |- StarAnyToken
    |
    |- Lookahead:
    |    |- SpecificToken: ""end""
    |
    |- End
</pre>

The Java-Pattern which is compiled from this syntax-tree looks rather complex:
<pre>
^.*?%(\d+)§(?:%\d+§)?\Qdef\E(?:%\d+§)?\Qcut\E(?:%\d+§)?(?:.*)%(\d+)§(?:[^%]+)?(?:%\d+§)\Qend\E$

Explained:
^.*?        => Added to apply pattern on the whole script
%(\d+)§     => Matching region starts
(?:%\d+§)?  => Sequence: optional non-matching line number pattern
\Qdef\E     => SpecificToken: ""def"" (quoted by \Q...\E)
(?:%\d+§)?  => Sequence: optional non-matching line number pattern
\Qcut\E     => SpecificToken: ""cut""
(?:%\d+§)?  => Sequence: optional non-matching line number pattern
(?:.*)      => StarAnyToken
%(\d+)§     => Matching region ends
(?:[^%]+)?  => Lookahead: optional non-matching line number pattern
(?:%\d+§)   => Line number pattern
\Qend\E     => SpecificToken: ""end""
$           => End
</pre>

=== Execution and post-processing ===

If you apply the resulting regular expression on the joined token array with java.util.regex.Matcher#replaceAll(),
where the replace pattern is ""$1:$2"", the returned string will be:
<pre>
13:17
</pre>
This is split into ""13"" and ""17"", the numbers are parsed as integers and a JSON-output is built, which could look like:
<pre>
{""from"":13, ""to"":17}
</pre>

== Contributors ==

* {{101contributor|Ralf Lämmel|author}}
* {{101contributor|Marius Rackwitz|developer}}
* {{101contributor|Jean-Marie Favre|proposer}}




== Metadata ==
* [[instanceOf::Fragment locator]]
* [[instanceOf::@technology]]
* [[sameAs::https://github.com/101companies/101repo/tree/master/technologies/GeFLo]]
* [[relatesTo::http://en.wikipedia.org/wiki/Regular_expression]]
* ",2013-06-12 15:01:15.687,2017-07-04 13:47:28.261903
Concept,SYB,"== Headline ==

[[Scrap your boilerplate]]

== Metadata ==

* [[carries::Tag:Abbreviation]]

",2013-06-20 15:27:30.184,2017-07-04 13:47:38.474934
Technology,HughesPJ,"== Headline ==

A [[Language:Haskell]] library [[pretty printing]]
== Illustration ==

The library's central type is ''Doc'' for documents. ''Doc'' is abstraction over text. The idea is that one maps [[abstract syntax]] (modeled by [[algebraic data type]]s) to ''doc''s with the help of combinators serving, for example, horizontal and vertical composition. A ''doc'' can then be ""shown"" literally as text.

Thus:

<syntaxhighlight lang=""haskell"">
instance Show Doc
  where
    -- type is abstract; it can be shown
</syntaxhighlight>

Documents can be contructed from literals by these combinators:

<syntaxhighlight lang=""haskell"">
-- Map string to document
text :: String -> Doc

-- Map int to document
int :: Int -> Doc
</syntaxhighlight>

Here is an illustration:

<syntaxhighlight lang=""haskell"">
> text ""hello""
hello
> int 42
42
</syntaxhighlight>

Documents can be composed in some ways, e.g.:

<syntaxhighlight lang=""haskell"">
-- The empty docment
empty :: Doc

-- Compose horizontally
(<>) :: Doc -> Doc -> Doc

-- Compose horizontally with extra space for separation
(<+>) :: Doc -> Doc -> Doc

-- Compose vertically
($$) :: Doc -> Doc -> Doc
</syntaxhighlight>

Here is an illustration:

<syntaxhighlight lang=""haskell"">
> empty

> text ""4"" <> text ""2""
42
> text ""before"" <+> text ""after""
before after
> text ""above"" $$ text ""below""
above
below
</syntaxhighlight>

The combinators also satisfy some reasonable laws. For example, ''empty'' is a unit of horizontal composition -- even the form with an extra space for separation.

<syntaxhighlight lang=""haskell"">
> empty <+> int 42
42
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Library]]
* [[facilitates::Unparsing]]
* [[sameAs::http://hackage.haskell.org/package/pretty]]
",2013-06-21 09:27:31.131,2017-07-04 13:47:38.719754
Concept,Call-by-value evaluation,"== Headline ==

See [[eager evaluation]]
",2013-07-13 19:38:43.708,2017-07-04 13:47:52.58335
Tag,Synonym,"== Headline ==

Tag used to indicate a ""synonym"" page

== Description ==

This tag may be applied specifically to pages for synonyms. Such pages would simply link to the other term without duplicating any documentation. The tag is not applied to the page with complete documentation.

== Metadata ==

",2014-09-03 21:30:13.781,2017-07-04 13:48:05.093907
Concept,Browsing,"== Headline ==

UI support for browsing company data

== Rationale ==

* '''Simplicity''': The interface is supposed to be simple in that it is not meant to result in a GUI programming challenge. Anyone modestly familiar with a given GUI technology should be able to provide the GUI for the [[@system]]. Anyone modestly familiar with the basic concepts of GUI programming should be able to understand the GUI part of the implementation without much effort. Clearly, the GUI should be functionally correct and architecturally sound as well as usable. Any form of tuning should be avoided in the interest of simplicity.

* '''Data model-driven''': Companies are essentially hierarchical structures that break down into departments and employees. Hence, the GUI should bind companies, departments, and employees, and there should be navigation support to operate at all the levels of departmental nesting. All properties of companies, departments, and employees must be reachable by navigation.

* '''Focus on navigation as opposed to editing''': Read-only navigation is sufficient except that the application of the cut operation should be supported at any level of hierarchical navigation. No other modifications need to be supported. See [[feature:Editing]] for GUI expressiveness that goes beyond navigation. Implementations may make editable basic properties for names, addresses, and salaries. Such over-achievement of the present feature is not encouraged though.

* '''Layer-based versus tree-based approach''': In the layer-based approach, a company, a department, or an employee is shown at the time. Accordingly, there is a company view, a department view, and an employee view. Navigation begins at the company view and selection of view components transfers to other views. In the layer-based approach, the state of navigation can be essentially viewed as a (possibly incomplete) path from the company root to an inner department or employee. Navigation may maintain this path like a stack. In the tree-based approach, the company structure is shown as a tree in terms of the company's departmental nesting. Folding and unfolding may be applied to such a view. When additional relationships for mentoring, see [[Feature:Mentoring]], are involved, then a directed graph as opposed to a plain tree needs to be visualized.

== Description ==

The following description applies well to classic GUI as well as web-based GUI approaches.

=== Data binding for the layer-based approach ===

Labels are shown in ''italics'' in the sequel.

Order of bindings per view suggest order in the actual layout.

* The Company view:
** A labeled, read-only text field for the ''Name'' of the company.
** A labeled, listbox for the ''Departments'' of the company.
* The Department view:
** A labeled, read-only text field for the ''Name'' of the department.
** A labeled, read-only text field for the name of the department's ''Manager''.
** A labeled, listbox for the ''Employees'' of the company.
** A labeled, listbox for the ''Sub-departments'' of the company.
* The Employee view:
** A labeled, read-only text field for the ''Name'' of the employee.
** A labeled, read-only text field for the ''Address'' of the employee.
** A labeled, read-only text field for the ''Salary'' of the employee.

=== Navigation for the layer-based approach ===

Navigation in the GUI is to be supported as follows:

* The Company view:
** The ''Close Window'' handler terminates the application.
** When selecting a department from the ''Departments'' listbox, the corresponding Department view is invoked.
* The Department view:
** There is a ''Back'' button that navigates back to the previous view.
** The ''Close Window'' handler copies the action of the ''Back'' button.
** The ''Close Window'' terminates the application.
** When selecting an employee from the ''Employees'' listbox, the corresponding Employee view is invoked.
** When selecting a department from the ''Sub-departments'' listbox, the corresponding Department view is invoked.
* The Employee view:
** There is a ''Back'' button that navigates back to the previous view.
** The ''Close Window'' handler copies the action of the ''Back'' button.

At any point, it should be possible to ''quit'' the application in a way that is in alignment with the OS/GUI technology at hand.

=== Operations ===

[[Feature:Total]] and [[Feature:Cut]] are to be supported by the GUI.

For instance, the layer-based approach may support these operations as follows:

* The Company view:
** There is a labeled, read-only text field for the company's ''Total''.
** A ''Cut'' button is attached to the ''Total'' field.
* The Department view:
** There is a labeled, read-only text field for the department's ''Total''.
** A ''Cut'' button is attached to the ''Total'' field.
* The Employee view:
** A ''Cut'' button is attached to the ''Salary'' field.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Tree structure]]
* [[isA::UI requirement]]
* [[isA::Optional feature]]
* ",2015-04-23 15:54:04.999,2017-07-04 15:26:42.994841
Concept,Web UI,"== Headline ==

A web-based user interface

== Description ==

The feature applies when an implementation of the [[@system]] uses a Web-based user interface subject to execution in a [[Web browser]]. Such a Web-based implementation may be a self-contained local implementation or it may rely on [[distribution]] such that it accesses remote data and operations on an appropriate server; see [[Feature:Distribution]].

== Metadata ==

* [[instanceOf::UI requirement]]
* [[instanceOf::Optional feature]]
* [[dependsOn::Feature:Browsing]]

",2015-04-23 15:57:30.915,2017-07-04 13:48:06.516497
Concept,Case expression,"== Headline ==

An expression form to discriminate between different results

== Illustration ==

Case expressions are typically available in [[functional programming language]]s as a means to perform [[pattern matching]] over values of [[algebraic data type]]s. For instance, consider the following function in [[Language:Haskell]]:

<syntaxhighlight lang=""haskell"">
length :: [a] -> Int
length [] = 0
length (_:xs) = 1 + length xs
</syntaxhighlight>

This definition expresses case discrimination in terms of multiple equations, but we could define a variation on ''length'' so that case discrimination is expressed by a single expression instead:

<syntaxhighlight lang=""haskell"">
length' :: [a] -> Int
length' l =
  case l of
    [] -> 0
    (_:xs) -> 1 + length' xs
</syntaxhighlight>

A case expression may feature multiple branches in the same way as a function definition may feature multiple equations. In essence, the syntax of having multiple equations is ""syntactic sugar''; we can always suffice with function definitions with just one equation and reside to case expressions for pattern matching. Also, case expression is more general in so far that it is an expression form which does not require the introduction of an explicit function name.

== Metadata ==

* [[sameAs::http://zvon.org/other/haskell/Outputsyntax/caseQexpressions_reference.html]]
",2015-06-10 15:41:49.772,2017-07-04 13:48:06.590016
Technology,ASM,"== Headline ==

a Java bytecode engineering framework

== Metadata ==
* [[instanceOf::Framework]]
* [[instanceOf::Java bytecode processor]]
* [[sameAs::http://asm.ow2.org/]]
* ",2013-06-12 15:01:01.104,2017-07-04 13:47:26.831811
Technology,Web crawler,"A Program/Libary to retrieve (recursively) data from webpages.

== Metadata ==

* [[isA::Web technology]]
* [[dependsOn:: Technology:HTTP ]]
* [[sameAs::https://en.wikipedia.org/wiki/Web_crawler]]

",2015-08-13 14:47:21.882,2017-07-04 15:26:43.548526
Contribution,Perl6,"== Headline ==

Base implementation in Perl 6.",2015-11-21 04:09:01.522,2017-07-04 13:48:08.52259
Concept,Sqlite,"== Intent ==

a library, implementing a relational model database server

== Spaces ==

* [[Relationalware]]

== Links ==

* http://www.sqlite.org/

== Metadata ==

* [[instanceOf::DBMS]]

",2016-05-10 17:36:20.01,2017-07-04 13:48:10.689574
Concept,Haskell data,"== Headline ==

A theme of [[Language:Haskell]]-based contributions varying data representation
== Description ==

Different feature models and design choices are exercised for the [[Language:Haskell]]-based data model of companies. Thereby, Haskell's data modeling expressiveness and common styles are explored. Here is summary of included contributions and reasons for inclusion:

* [[Contribution:haskellStarter|haskellStarter]]: A data model with only type synonyms
* [[Contribution:haskellData|haskellData]]: A data model with algebraic data types
* [[Contribution:haskellRecord|haskellRecord]]: A data model with record types
* [[Contribution:haskellComposition|haskellComposition]]: A data model with [[data composition|composition]]
* [[Contribution:haskellVariation|haskellVariation]]: A data model with [[data variation|variation]]
* [[Contribution:haskellTermRep|haskellTermRep]]: A universal term representation

Any mentioning of ""trivial data model"" implies [[Feature:Flat company]] as opposed to [[Feature:Hierarchical_company]]. The remaining contributions involve data models that deal with [[Feature:Hierarchical_company]]. It should be noted that the contributions may serve additional purposes other than just illustrating data modeling options.
== Relationships ==

There are further themes with Haskell-based contributions:
* [[Theme:Haskell introduction]]: basics of Haskell.
* [[Theme:Haskell potpourri]]: more advanced and diverse coverage of the Haskell ecosystem.
* [[Theme:Haskell genericity]]: different styles of generic functional programming in Haskell.
== Metadata ==
* ",2016-06-07 20:10:14.162,2017-07-04 13:48:16.38699
Concept,Visualization,"== Headline ==

The visualization of company data

== Description ==

Users of the [[@system]] may want to examine the company data to gain certain insights. For instance, employees and managers may find it equally interesting to understand overall the different salaries across the company structure. Hence, the company structure may be essentially visualized as a tree where the size of the employee nodes correlates with the salary. Optionally, the department nodes may also be scaled to convey additional information such that, for example, the node's size correlates with the average salary of employees in the department. Other ideas for visualization are welcome, too.


== Metadata ==
* [[instanceOf::Behavioral 101feature]]
* ",2016-06-14 23:02:38.937,2017-07-04 13:48:16.785587
Concept,Document,"== Headline ==

101wiki reifications of external documents
",2016-06-14 23:12:19.025,2017-07-04 13:48:17.796805
Concept,make,"== Headline ==

A popular build automation tool

== Description ==

''make'' is de-facto a name that could refer to different implementations.

One popular implementation of ''make'' is [[Technology:GNU make]].

== Metadata ==

* [[instanceOf::Build tool]]
* [[sameAs::http://en.wikipedia.org/wiki/Make_(software)]]

",2016-06-14 23:20:23.547,2017-07-04 13:48:17.813794
Concept,Software extension and integration with type classes,"== Headline ==

A paper studying some aspects of expressiveness of [[type class]]es

== Metadata ==

* [[sameAs::http://dblp.uni-trier.de/rec/bibtex/conf/gpce/LammelO06]]
* ",2016-06-23 16:04:13.913,2017-07-04 13:48:17.827933
Concept,Unparsing and parsing in Haskell,"== Headline ==

Lecture ""Unparsing and parsing in Haskell"" as part of [[Course:Lambdas in Koblenz]]
== Details ==

Various data structures, e.g., term- or tree-based representations, can be rendered as text by means of [[unparsing]]. (Unparsing is very similar to what's called [[pretty printing]].) The other way around, the structure underlying some text can be recovered by means of [[parsing]]. In both cases, we assume some [[syntax]] for underlying a textual representation. This syntax can be also be made explicit in the form of [[grammar]]. We put suitable Haskell [[combinator library|combinator libraries]] to work for the implementation of [[unparser]]s and [[parser]]s.
== Concepts ==

* [[Combinator library]]
* [[Unparsing]]
* [[Pretty printing]]
* [[Unparser]]
* [[Syntax]]
* [[Grammar]]
* [[Parsing problem]]
* [[Parse tree]]
* [[Parsing]]
* [[Parser]]
* [[Either type]]

== Technologies ==

* [[Technology:HughesPJ]]
* [[Technology:Parsec]]
== Features ==

* [[Feature:Unparsing]]
* [[Feature:Parsing]]
== Contributions ==

* [[Contribution:hughesPJ]]
* [[Contribution:haskellParsec]]
== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
",2015-08-03 21:34:07.937,2017-07-04 13:48:07.040647
Document,Principles of information systems,"== Headline ==

A textbook on information systems

== Metadata ==


* [[instanceOf::Textbook]]
* [[sameAs::http://www.amazon.com/Principles-Information-Systems-Sixth-Edition/dp/0619064897]]
* ",2013-06-12 15:00:53.106,2017-07-04 13:46:43.179951
Document,Okasaki96,"== Headline ==

Okasaki' PhD thesis on [[functional data structure]]s

== Metadata ==


* [[instanceOf::PhD thesis]]
* [[sameAs::http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf]]
* [[relatesTo::Functional data structure]]

",2013-06-12 15:00:53.328,2017-07-04 13:46:43.2035
Technology,.NET XML Serialization,"== Intent ==

.NET's approach to [[Object-XML mapping]]

== Components ==

* [[dotnet:System.Xml.Serialization]]
* [[Technology:xsd.exe]]

== Description ==

This technology supports [[open serialization]] with [[Language:XML]] for .NET. It relies on the .NET namespace [[dotnet:System.Xml.Serialization]] and the class generator tool [[Technology:xsd.exe]]. Plain-old .NET classes can be annotated so that their serialization properties are defined in terms of element names, fields or properties to be included, and others. Such classes can also be generated with the [[Technology:xsd.exe]] tool from an [[Language:XSD|XML schema]].

== Metadata ==
* [[instanceOf::XML technology]]
* [[sameAs::http://msdn.microsoft.com/en-us/library/ms950721.aspx]]
* ",2013-06-12 15:00:59.669,2017-07-04 13:47:26.59839
Technology,101explorer,"== Headline ==

an explorer for 101companies contributions

== Summary ==

The classic experience of exploring the [[101project]] is based on the straightforward use of the [[101wiki]] and a repository explorer or a file-system explorer for the [[101repo]]. The [[Technology:101explorer]] incorporates metadata into exploration. Each encountered file is associated with metadata for language, technology, and tag usage. Also, additional perspectives are provided so that contributions can be explored in a more language-, technology-, or tag-centric manner.

== Views ==

The separation of the following views is made here for conceptual clarity. The actual explorer integrates these views into an integrated, interactive experience.

=== The file system-centric view ===

The view departs from the basic organization of all contributions in a hierarchical directory structure. The exploration of the hierarchical structure is enriched with metadata for each file and directory. More specifically, for each given file the following metadata is reported: the corresponding language, if known; any technology implied by the file; any tag associated with the file. This metadata is gathered from metadata files using the designated metadata languages [[Language:LaTaLa]], [[Language:TeTaLa]], and [[Language:FraTaLa]]. For each given directory, such metadata is aggregated. For instance, a directory is associated with a language, if any of the files in the directory or any of its subdirectories are associated with the language.

=== The language-centric view ===

The explorer can ''list all the languages used by the given contribution''. The ''selection of a language'' translates into a list of files, as part of the contribution, that use the selected language. The ''selection of a file'' translates into rendering the file's content. Thus, exploration is language-centric and flat as opposed to the hierarchical, file system-centric approach in a file/repository viewer.

The view is enabled by metadata according to the [[Language:LaTaLa]] language because such metadata, for example, maps file extensions to languages. Arguably, some files may not be associated with any language in this manner, and they may be listed separately, or they may be accessible through a file system-centric view.

Clearly, the language-centric view is not limited to the specific focus on a contribution. It may be useful at any level of exploration of the hierarchical file system for contributions. This is also true for the following two views, i.e., the technology- and the tag-centric views.

=== The technology-centric view ===

The explorer can ''list all the technologies used by the given contribution''. The ''selection of a technology'' translates into a list of files, as part of the contribution, that imply usage of the selected technology. The ''selection of a file'', perhaps subject to restrictions on the file type, translates into rendering the file's content. Thus, exploration is technology-centric and flat as opposed to the hierarchical, file system-centric approach in a file/repository viewer.

This view is enabled by metadata according to the [[Language:TeTaLa]] language for the recognition of files that imply a certain's technology's usage. When listing files, the role of each file (in terms of [[Language:TeTaLa]] roles ""input"", ""output"", or ""support"") is also shown. Quite likely, some files may not be associated with any technology in this manner, and they may be listed separately, or they may be accessible through a file system-centric view.

=== The tag-centric view ===

The explorer can ''list all the tags used by the given contribution''. The ''selection of a tag'' translates into a list of files, as part of the contribution, that use (in fact, that are associated with) the selected tag. The ''selection of a file'' translates into rendering the file's content. If tagging involved a fragment description, then the tagged fragment is highlighted. Thus, exploration is tag-centric and flat as opposed to the hierarchical, file system-centric approach in a file/repository viewer.

This view is enabled by metadata according to the [[Language:FraTaLa]] language for non-invasive tagging of files and fragments thereof. Tags may correspond to features of the [[system:Company]] or entities and categories in the [[101companies:Ontology]]. Quite likely, some files may not be associated with any tag in this manner, and they may be listed separately, or they may be accessible through a file system-centric view.

== Components ==

* Languages
** [[Language:101meta]]
* Technologies
** [[Technology:CSharpFragmentLocator]]
** [[Technology:GeFLo]]
** [[Technology:HsFragmentLocator]]
** [[Technology:HsImportMatcher]]
** [[Technology:JFragmentLocator]]
** [[Technology:XmlFragmentLocator]]




== Metadata ==
* [[instanceOf::@technology]]
* [[instanceOf::Comprehension technology]]
* ",2013-06-12 15:01:00.043,2017-07-04 13:47:26.765822
Technology,101worker,"== Headline ==

The server infrastructure of the [[101project]]

== Metadata ==
* [[instanceOf::@technology]]
* ",2013-06-12 15:01:00.294,2017-07-04 13:47:26.783034
Technology,AJDT,"== Intent ==

[[Language:AspectJ]] Development Tools (AJDT)

== Discussion ==

AJDT specifically targets [[Technology:Eclipse]].

AJDT contains the [[Technology:ajc]].

AJDT requires [[Technology:JDK]].

== Metadata ==
* [[instanceOf::Toolkit]]
* [[sameAs::http://www.eclipse.org/ajdt]]
* ",2013-06-12 15:01:00.577,2017-07-04 13:47:26.801629
Technology,ANTLR,"== Headline ==

A parser generator with various language processing capabilities

== Spaces ==

* [[Grammarware]]
* [[Objectware]]

== Metadata ==

* [[sameAs::http://www.antlr.org/]]
* [[instanceOf::Parser generator]]

",2013-06-12 15:01:00.827,2017-07-04 13:47:26.817934
Technology,ASP .NET,"==Links==

*[http://en.wikipedia.org/wiki/ASP.NET Wikipedia]
*[http://www.asp.net/ Official site]
== Metadata ==
* ",2013-06-12 15:01:01.342,2017-07-04 13:47:26.840844
Technology,ASP .NET MVC,"==Links==

*[http://en.wikipedia.org/wiki/ASP.NET_MVC_Framework Wikipedia]
*[http://www.asp.net/mvc Official site]
== Metadata ==
* ",2013-06-12 15:01:01.579,2017-07-04 13:47:26.849663
Technology,AWT,"== Headline ==

Java framework for windowing, graphics, and GUIs

== Metadata ==

* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://en.wikipedia.org/wiki/Abstract_Window_Toolkit]]
* [[relatesTo::http://docs.oracle.com/javase/7/docs/api/java/awt/package-summary.html]]
* ",2013-06-12 15:01:01.935,2017-07-04 13:47:26.865254
Technology,Android,"== Headline ==

A software stack for mobile devices that includes an operating system, middleware, and key applications

== Metadata ==
* [[instanceOf::Platform]]
* [[sameAs::http://en.wikipedia.org/wiki/Android_%28operating_system%29]]
* [[relatesTo::http://www.android.com/]]
* [[relatesTo::http://developer.android.com/about/dashboards/index.html]]
* ",2013-06-12 15:01:02.19,2017-07-04 13:47:26.880363
Technology,Apache Tomcat,"== Intent ==

A [[Language:Java]] based [[Web server|web server]] and container for [[Language:Java]] [[Technology:Servlet API|Servlets]]

== Metadata ==
* [[instanceOf::Application server]]
* [[sameAs::http://tomcat.apache.org/]]
* [[relatesTo::http://de.wikipedia.org/wiki/Apache_Tomcat]]
* ",2013-06-12 15:01:04.179,2017-07-04 13:47:27.036409
Technology,Apache_XML,"== Headline ==

Several XML-related XML APIs in the org.apache space

== Metadata ==

* [[sameAs::http://xml.apache.org/]]
* [[instanceOf::API]]
* [[instanceOf::Java package]]
* ",2013-06-12 15:01:04.431,2017-07-04 13:47:27.055094
Technology,Apache XML-RPC,"== Headline ==

a Java implementation of XML-RPC

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://ws.apache.org/xmlrpc/xmlrpc2/]]
* ",2013-06-12 15:01:04.733,2017-07-04 13:47:27.066235
Technology,ArgoUML,"== Headline ==

An UML diagramming application

== Metadata ==
* [[instanceOf::Modeling technology]]
* [[sameAs::http://en.wikipedia.org/wiki/ArgoUML]]
* ",2013-06-12 15:01:05.006,2017-07-04 13:47:27.077287
Technology,Avalon,"== Headline ==

an obsolete Apache framework for component and container programming

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://avalon.apache.org/]]
* ",2013-06-12 15:01:05.284,2017-07-04 13:47:27.088478
Technology,Avalon LogKit,"== Headline ==

the Avalon LogKit logging framework used throughout the Avalon project

== Metadata ==
* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://excalibur.apache.org/apidocs/org/apache/log/package-summary.html]]
* ",2013-06-12 15:01:05.565,2017-07-04 13:47:27.103156
Technology,BCEL,"== Headline ==

a Java bytecode engineering framework

== Metadata ==
* [[instanceOf::Framework]]
* [[instanceOf::Java bytecode processor]]
* [[sameAs::http://commons.apache.org/bcel/]]
* ",2013-06-12 15:01:05.861,2017-07-04 13:47:27.11661
Technology,BSF,"== Headline ==

a framework for [[Scripting language]] support

== Description ==

BSF stands for Bean Scripting Framework.

== Metadata ==
* [[instanceOf::Language framework]]
* [[sameAs::http://commons.apache.org/bsf/manual.html]]
* ",2013-06-12 15:01:06.223,2017-07-04 13:47:27.132002
Technology,Balsamiq Mockups,"== Headline ==

A graphical user interface mockup builder application

== Metadata ==
* [[instanceOf::Toolkit]]
* [[sameAs::http://www.balsamiq.com/products/mockups]]
* [[sameAs::http://en.wikipedia.org/wiki/Balsamiq]]
* ",2013-06-12 15:01:06.532,2017-07-04 13:47:27.144989
Technology,BaseX,"== Intent ==

an XML database with [[Language:XPath]] and [[Language:XQuery]] processor

== Metadata ==
* [[instanceOf::Toolkit]]
* [[instanceOf::Language implementation]]
* [[sameAs::http://basex.org/]]
* ",2013-06-12 15:01:06.823,2017-07-04 13:47:27.159863
Technology,Bootstrap,"== Headline ==

[[Language:JavaScript]] and [[Language:CSS]] framework for creating responsive websites or web applications

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://twitter.github.com/bootstrap/]]
* [[relatesTo::http://de.wikipedia.org/wiki/Twitter_Bootstrap]]
* ",2013-06-12 15:01:07.075,2017-07-04 13:47:27.17438
Technology,Bouncy Castle,"== Headline ==

A set of encryption technologies including an API
== Details ==

The full name of the technology is ""Bouncy Castle Crypto APIs"" according to the home page.

Bouncy Castle is available for [[Language:Java]] and [[Language:CSharp|C#]].
== Metadata ==

* [[instanceOf::API]]
* [[instanceOf::Encryption technology]]
* [[sameAs::http://www.bouncycastle.org/]]

",2013-06-12 15:01:07.359,2017-07-04 13:47:27.195545
Technology,CGI,"== Headline ==

A [[standard]] for website generation on a [[web server]]

== Details ==

CGI stands for Common Gateway Interface.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Common_Gateway_Interface]]
* [[instanceOf::Software technology]]
",2013-06-12 15:01:07.638,2017-07-04 13:47:27.212111
Technology,CLR,"== Intent ==
A part of the [[Technology:.NET]] Framework which defines an execution environment for program code

== Links ==

*[http://en.wikipedia.org/wiki/Common_Language_Runtime Wikipedia]



== Metadata ==
* [[instanceOf::Runtime]]
* ",2013-06-12 15:01:07.885,2017-07-04 13:47:27.227785
Technology,CSharpValidator,"== Headline ==

A validator for [[Language:CSharp]]

== Description ==

CSharpValidator is a [[101technology]]; it is a C#-specific validator. CSharpValidator essentially parses the source code; it does not attempt compilation; it does not enforce any static semantics rules. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure.

== Usage ==

To build and execute the validator, you need to have Mono SDK (2.10 +) installed.
Use 'make build' to build the project.

== Contributors ==

* {{101contributor|Andrei Varanovich|developer}}
* {{101contributor|Ralf Lämmel|reviewer}}

== Metadata ==
* [[instanceOf::Validator]]
* [[instanceOf::@technology]]
* [[sameAs::https://github.com/101companies/101repo/tree/master/technologies/CSharpValidator]]
* ",2013-06-12 15:01:08.511,2017-07-04 13:47:27.328088
Technology,CUP,"== Headline ==

a parser generator for [[Language:Java]]

== Description ==

There is also a runtime library [[Java:java_cup.runtime]] for CUP.

== Metadata ==
* [[instanceOf::Parser generator]]
* [[sameAs::http://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html]]
* ",2013-06-12 15:01:08.792,2017-07-04 13:47:27.347874
Technology,CVS,"== Headline ==

A revision control tool

== Metadata ==
* [[instanceOf::Revision control tool]]
* [[sameAs::http://en.wikipedia.org/wiki/Concurrent_Versions_System]]
* ",2013-06-12 15:01:09.083,2017-07-04 13:47:27.35987
Technology,Cabal,"== Headline ==

A [[build automation tool]] for [[Language:Haskell]]
== Illustration ==

Consider the [[Hello world program]] for Haskell:

<syntaxhighlight lang=""haskell"">
main = putStrLn ""Hello, world!""
</syntaxhighlight>

Now let's do packaging and build automation for this program. To this end, we set up the following Cabal file:

<syntaxhighlight lang=""haskell"">
-- Initial helloWorld.cabal generated by cabal init.  For further
-- documentation, see http://haskell.org/cabal/users-guide/

name:                helloWorld
version:             0.1.0.0
synopsis:            Demonstration of Cabal
description:         Just filled in to make ""cabal check"" go quiet.
homepage:            http://101companies.org/wiki/Technology:Cabal
license:             MIT
license-file:        LICENSE
author:              Joe Hackathon
maintainer:          101companies@gmail.com
-- copyright:
category:            Testing
build-type:          Simple
cabal-version:       >=1.8

executable helloWorld
   main-is:            Main.hs
   other-modules:
  build-depends:       base ==4.5.*
  hs-source-dirs:      src
</syntaxhighlight>

As one can see at the top, the initial file was actually generated with ""cabal init"" such that some parameters are filled in interactively, but a few subsequent modifications were applied to the file manually.

With this Cabal file in place, the program can be built and ran at the command line as follows:

<syntaxhighlight lang=""haskell"">
        cabal configure
        cabal build
        dist/build/helloWorld/helloWorld
</syntaxhighlight>

The configure step checks the Cabal file and resolves external dependencies, if necessary. The build step compiles all involved modules. Thus, an executable can be invoked in the last step.
== Metadata ==

* [[instanceOf::Build tool]]
* [[instanceOf::Haskell technology]]
* [[sameAs::http://www.haskell.org/cabal/]]
* [[relatesTo::Technology:HackageDB]]
",2013-06-12 15:01:09.712,2017-07-04 13:47:27.474809
Contribution,YAPAF,"== Headline ==

Demonstrate [[Technology:YAPAF]] on top of [Contribution:php] by implementing logging

== Motivation ==

YAPAF ""Yet another PHP aspect framework"" brings aspect-capabilities to [Language:PHP], similar to [Language:AspectJ]. This contribution uses YAPAF to implement some logging-feature to [Contribution:php] realized via a YAPAF-aspect. The contribution is showing a possible use-case for using YAPAF.

== Details ==

You can find the contribution at https://github.com/SchulteMarkus/101repo-php-yapaf/tree/master/contributions/php-yapaf

The aspects are defined at dir ""aspects"". As code is evolving, please have a look at the repository to see an YAPAF-aspect in action.

An an abstract, a YAPAF-aspect is a simple php-class including one or more methods. Using annotaions, each method defines it's possible JoinPoints:

<syntaxhighlight lang=""php"">
class LoggingAspect {

    /**
     * @Call(class=""ClassToLog"", method=""methodToLog"")
     */
    public function log() {
        # apsect-body
    }
}
</syntaxhighlight>

== Metadata ==

* [[developedBy::Contributor:SchulteMarkus]]
* [[carries::Tag:Obscurity]]

",2013-10-25 14:51:04.742,2017-07-04 13:47:54.390158
Technology,DLL,"== Headline ==

Microsoft's implementation of the [[shared library]] concept

== Details ==

DLL stands for Dynamic-link library (also written unhyphenated).

[[Language:DLL]] is also the name of a file format for such libraries.

== Metadata ==
* [[instanceOf::Technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Dynamic-link_library]]
* ",2013-06-12 15:01:10.287,2017-07-04 13:47:27.522968
Technology,DOM,"== Headline ==

A platform- and language-neutral [[API]] for tree-based XML processing

== Metadata ==

* [[instanceOf::API]]
* [[sameAs::http://www.w3.org/DOM]]
* [[sameAs::http://en.wikipedia.org/wiki/Document_Object_Model]]

",2013-06-12 15:01:10.659,2017-07-04 13:47:27.537154
Technology,DPH,"== Headline ==

A [[Technology:GHC]] extension for [[data parallelism]]

== Details ==


This extensions allows GHC to provide support for nested [[data parallelism]] <cite>jones2008harnessing, haskellWikiDPH</cite>. DPH (Data Parallel Haskell) uses [[Vectorisation|vectorised]] [[Module|modules]] to encapsulate data parallel code. In these modules one can make use of [[Parallel array|parallel arrays]] and various data parallel operations on these arrays <cite>jones2008harnessing</cite>.

== Metadata ==
* [[sameAs::http://www.haskell.org/haskellwiki/GHC/Data_Parallel_Haskell]]
* [[relatesTo::http://drops.dagstuhl.de/opus/volltexte/2008/1769]]
* ",2013-06-12 15:01:10.965,2017-07-04 13:47:27.561564
Contribution,cpp,"== Headline ==

Implementation in [[Language:CPlusPlus]], a medium-level, [[Multi-paradigm programming language|multi-paradigm]] language with a rich standard library.

== Characteristics ==

While [[Language:CPlusPlus|C++]] supports multiple programming paradigms, the 101 Companies problem is still best modelled using [[OO programming]]. However, with its powerful [[Generic programming|templates (or generics)]], the language favors general algorithms separate from the types they can operate on.

Despite that, this contribution's objects are far from [[Record|behaviorless structs]], primarily because they have constructors and destructors. Since destructors are deterministically and recursively called when an object goes out of scope, the language supports [[Resource Acquisition Is Initialization]]. Hence, and opposed to [[Contribution:c]], memory is never [[Manual memory management|manually allocated or deallocated]].

Since the language supports constant values, there is also a focus on so-called [[Const-correctness]]. Constant values, including objects, are recursively constant (not just super shallow final pointers like in [[Language:Java]]). This makes it easier for both humans and the compiler to reason about the program.

== Illustration ==

=== Data Model ===

The object model is relatively straightforward for a [[OO programming]] language. Each of the classes has a default constructor (one that can be invoked without any arguments) so that its objects can be used in containers. It also has getters, setters and visitor acceptors inherited from the ""Host"" [[OO interface|virtual base class]] Note that methods that do not modify the object are marked as ""const"" and the ones that do are not.

<syntaxhighlight language=""c++"">
class Company : public Host {
public:
    Company(const std::string            & name        = """",
            const std::vector<Department>& departments = {});
    // Getters are const
    const std::string            & getName       () const;
    const std::vector<Department>& getDepartments() const;
    // Setters are non-const
    void setName       (const std::string            & name       );
    void setDepartments(const std::vector<Department>& departments);
    // Special getter to retrieve a mutable reference
    std::vector<Department>& getMutableDepartments();
    // Constant acceptor
    void accept(const Visitor      & visitor) const override;
    // Mutable acceptor
    void accept(const MutateVisitor& visitor)       override;
    // private members omitted
};
// anologous for Department and Employee
</syntaxhighlight>

=== Graph Traversal ===

Most features require traversal of the object graph, either [[Accumulator|accumulating information]] about the objects or manipulating them. This traversal is solved via registering [[Closure]]s in a [[Visitor pattern|Visitor]].

An example for an accumulating feature is [[Feature:Total]]. Note that all given parameters are marked ""const"":

<syntaxhighlight language=""c++"">
double
total(const Host& h)
{
    double total = 0;
    h.accept(Visitor()
        .onEnter([&](const Employee& e){
            total += e.getSalary();
        }));
    return total;
}
</syntaxhighlight>

An example for a manipulating feature is [[Feature:Cut]], where the parameters are not ""const"" and an appropriate MutateVisitor is used:

<syntaxhighlight language=""c++"">
void
cut(Host& h)
{
    h.accept(MutateVisitor()
        .onEnter([](Employee& e){
            const double& sal = e.getSalary();
            e.setSalary(sal ? sal / 2 : 0);
        }));
}
</syntaxhighlight>

== Relationships ==

* [[Contribution:c]] uses [[Language:C]]. It makes clear the difference to [[Language:CPlusPlus|C++]] and how ""C/C++"" is not a thing.
* [[Contribution:UIQt]] uses [[Technology:Qt]], which is a separately compiled layer on top [[Language:CPlusPlus|C++]].

== Architecture ==

As is usual for [[Language:CPlusPlus|C++]], interface and implementation are separated into header files (declarations) and implementation files (definitions). This is mostly due to the language's primitive import capabilities: when a file is included, its contents just get dumped into the current compilation unit, only after compilation are these separate parts linked together.

Header files (.hpp) are found in the [https://github.com/hartenfels/Cpp101/tree/master/include include directory] and implementation files (.cpp) are found in the [https://github.com/hartenfels/Cpp101/tree/master/src src directory].

== Usage ==

This contribution uses [[Technology:CMake]] for handling its build process and requires the [[Technology:Boost]] libraries, specifically Boost.PropertyTree and Boost.Test. Please see the [https://github.com/hartenfels/Cpp101/blob/master/readme.md readme.md on GitHub] for details.

== Metadata ==
* [[developedBy::Contributor:hartenfels]]
* [[uses::Language:CPlusPlus]]
* [[uses::Technology:Boost]]
* [[uses::Technology:CMake]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Median]]
* [[implements::Feature:Total]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]

",2014-03-17 16:48:40.9,2017-07-05 15:30:15.636726
Technology,Dropsbox,"== Intent ==

DropsBox (Dresden Open Software Toolbox)

== Metadata ==
* [[instanceOf::Toolkit]]
* [[sameAs::http://www.dropsbox.org/]]
* ",2013-06-12 15:01:11.503,2017-07-04 13:47:27.594579
Technology,ECS,"== Headline ==

(a retired Jakarta project for) a markup construction for Java

== Description ==

ECS stands for Element Construction Set.

== Metadata ==
* [[instanceOf::API]]
* [[instanceOf::Markup technology]]
* [[sameAs::http://jakarta.apache.org/ecs/]]
* ",2013-06-12 15:01:11.779,2017-07-04 13:47:27.611943
Technology,EJB,"== Headline ==

a server-side component architecture for application development

== Metadata ==
* [[instanceOf::Component technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Enterprise_JavaBeans]]
* ",2013-06-12 15:01:12.057,2017-07-04 13:47:27.623585
Technology,QTCreator,"== Intent ==

IDE for [[Technology:Qt]] and [[Language:C++]]

== 101companies hints ==

Version 2.2.1 is recommended



== Metadata ==
* [[instanceOf::IDE]]
* ",2013-06-12 15:01:54.054,2017-07-04 13:47:31.28443
Technology,Eclipse,"== Headline ==

An [[IDE]] for Java whose architecture is plug-in based.

== Metadata ==

* [[instanceOf::IDE]]
*
* [[facilitates::Programming]]",2013-06-12 15:01:12.675,2017-07-04 13:47:27.662072
Technology,Ecore,"== Intent ==

the metamodel component of [[Technology:EMF]]

== Metadata ==
* [[sameAs::http://download.eclipse.org/modeling/emf/emf/javadoc/2.7.0/org/eclipse/emf/ecore/package-summary.html]]
* ",2013-06-12 15:01:12.963,2017-07-04 13:47:27.70198
Technology,Entity Framework,"== Intent ==

an [[Object-Relational mapping]] technology for the [[Technology:.NET]] Framework.
== Description ==

Entity Framework is consiedered to be a toolkit in our ontology as soon as [[framework]] has different properties. Even that an official name of the technology contains a ""framework"" part.
== Spaces ==

* [[Objectware]]
* [[Relationalware]]
* [[Auxiliary XMLware]]
== Metadata ==
* [[instanceOf::Mapping technology]]
* [[instanceOf::Toolkit]]
* [[sameAs::http://en.wikipedia.org/wiki/ADO.NET Entity Framework]]
* [[relatesTo::http://msdn.microsoft.com/en-us/library/aa697427(VS.80).aspx]]
* [[relatesTo::http://msdn.microsoft.com/en-us/library/bb399559.aspx SSDL]]
* [[relatesTo::http://msdn.microsoft.com/en-us/library/bb399292.aspx CSDL]]
* [[relatesTo::http://msdn.microsoft.com/en-us/library/bb399202.aspx]]
*
",2013-06-12 15:01:13.257,2017-07-04 13:47:27.749894
Technology,Facelets,"== Intent ==

A [[Template processor|template processing system]] for generating [[Language:HTML]]/[[Language:JavaScript]]-pages in the [[Technology:JSF]] context

== Metadata ==
* [[instanceOf::Template engine]]
* [[sameAs::http://en.wikipedia.org/wiki/Facelets]]
* ",2013-06-12 15:01:13.817,2017-07-04 13:47:27.773066
Technology,QuickCheck,"== Headline ==

A [[combinator library]] for software [[testing]] for [[Language:Haskell]]

== Illustration ==

=== QuickCheck basics ===

QuickCheck supports testing based on properties in the sense of parameterized [[assertion]]s. Consider the following simple properties:

<syntaxhighlight lang=""haskell"">
-- Double negation is the identity
prop_double_negation x = not (not x) == x

-- Addition on number types is commutative
prop_addition_commutative x y = x + y == y + x
</syntaxhighlight>

The first property is obviously parameterized in a Boolean value to test a trivial law of negation. The second property is parameterized in two numbers (for instance, Ints) to test a trivial law of multiplication.

Given a property, QuickCheck can check it quickly with the function ''quickCheck''. The idea is that QuickCheck generates some actual values for the parameters of the properties and checks whether the instantiated properties evaluate to ''True''. For instance:

<pre>
> quickCheck prop_double_negation
+++ OK, passed 100 tests.
> quickCheck prop_addition_commutative
+++ OK, passed 100 tests.
</pre>

It may be interesting to study the function signature of ''quickCheck'':

<syntaxhighlight lang=""haskell"">
> :t quickCheck
quickCheck :: Testable prop => prop -> IO ()
</syntaxhighlight>

Thus, there is a [[type class]] ''Testable'' designated to testable property types, which obviously includes unary operations on Booleans and binary operations on number types, as demonstrated with the two initial examples. Let us show (the existence of) two instances:

<syntaxhighlight lang=""haskell"">
> :i Testable
class Testable prop where ...
instance Testable Bool
instance (Arbitrary a, Show a, Testable prop) => Testable (a -> prop)
...
</syntaxhighlight>

The idea is that a Boolean is a non-parameterized property, which can be trivially checked to be ''True''. Recursively, more completex property types can be constructed from a parameter type ''a'' to an existing property type. However, for a parameter type to be suitable, it must instantiate in turn the [[type class]] Arbitrary, which is essentially serving for test-data generation. It is clear that default instances are available for Booleans and Ints, as demonstrated with checking quickly the two initial examples. We will discuss shortly how test-data generation can be arranged.

=== Failing checks ===

Consider the following (unreasonable) property:

<syntaxhighlight lang=""haskell"">
-- An unreasonable property for take
no'prop_take n l = length (take n l) == n
</syntaxhighlight>

Randomized test-data generation may lead to this outcome:

<pre>
> verboseCheck no'prop_take
Passed:
0
[]
Passed:
1
[()]
Passed:
0
[]
Failed:
1
[]
...
</pre>

Thus, taking 0 elements of an empty list succeeds. Also, taking 1 elements of a singleton list (with ""()"" as the only element) succeeds. However, taking 1 elements of an empty list fails, since the resulting list would be expected to be of length 1, as expressed by the unreasonable property.

A more reasonable property is this:

<syntaxhighlight lang=""haskell"">
-- A reasonable property for take
prop_take n l = length (take n l) <= n
</syntaxhighlight>

The property says that the length of the list returned by ''take'' may as well be smaller than the number of elements requested.

=== Verbosity and configurability ===

Before looking into generation of ""arbitrary"" test data, let us understand more deeply how the ''quickCheck'' function works. In fact, let us invoke its ""verbose"" partner, ''verboseCheck'':

<pre>
> verboseCheck prop_double_negation
Passed:
True
Passed:
True
Passed:
False
Passed:
True
...
+++ OK, passed 100 tests.
</pre>

In this particular case, clearly, much less than 100 tests are needed. In other cases, much more than 100 tests may be preferred. Not surprisingly, QuickCheck can be configured in a number of dimensions, including the number of test cases to consider. For instance:

<pre>
> quickCheckWith stdArgs { maxSuccess = 101 } prop_addition_commutative
+++ OK, passed 101 tests.
</pre>

=== Test-data generation ===

Consider the following property that, by definition, should hold for any [[monoid]]:

<syntaxhighlight lang=""haskell"">
-- A monoid's mempty is a unit (identity)
prop_identity x = prop_left_identity && prop_right_identity
 where
  prop_left_identity = mempty `mappend` x == x
  prop_right_identity = x `mappend` mempty == x
</syntaxhighlight>

We better specify the monoid that we want this property to be tested for. For what's it worth, we mention that the property would otherwise be checked for the default of the ""()"" monoid. Using a type annotation, let us test the property for the summation monoid, relative to the Int type:

<pre>
> quickCheck (prop_identity :: (Sum Int) -> Bool)
+++ OK, passed 100 tests.
</pre>

Thus, the property should be applied to 100 randomly generated Ints. This demonstration though requires a designated instance of the [[type class]] ''Arbitrary'' so that it is known to QuickCheck how to generate test data for the monoid at hand, as there is no standard instance for this case. The type class is defined as follows:

<syntaxhighlight lang=""haskell"">
class Arbitrary a where
  arbitrary :: Gen a
  -- another member suppressed for brevity
</syntaxhighlight>

The [[type constructor]] ''Gen'' is effectively a [[monad]] for randomized test-data generation such that the state of the underlying random-number generator is passed around along generation and composition of bigger test data from smaller test-data components is facilitated. Consider the following ''Arbitrary'' instance for the summation monoid:

<syntaxhighlight lang=""haskell"">
-- An Arbitrary instance for the summation monoid
instance (Num x, Arbitrary x) => Arbitrary (Sum x)
  where
    arbitrary = do
      x <- arbitrary
      return (Sum x)
</syntaxhighlight>

The member ''arbitrary'' is defined by first generating an ""arbitrary"" number and then wrapping it up in the [[data constructor]] for summation. Thus, test-data generation for summation is effectively delegated to test-data generation for numbers.

=== Testing for algebraic data types ===

Ultimately, we also want to check quickly properties of functionality that involves programmer-defined algebraic data types. In this case, test-data generators need to be defined carefully. For illustration, consider the following algebraic data type for expression forms along with functions for evaluation and simplification:

<syntaxhighlight lang=""haskell"">
-- Simple expression forms
data Expr = Const Int | Add Expr Expr
 deriving (Eq, Show, Read)

-- Evaluation of expressions
eval :: Expr -> Int
eval (Const x) = x
eval (Add x y) = eval x + eval y

-- Simplification based on the unit law for addition
simplify :: Expr -> Expr
simplify (Add (Const 0) x) = simplify x
simplify (Add x (Const 0)) = simplify x
simplify x = x
</syntaxhighlight>

We submit the following property:

<syntaxhighlight lang=""haskell"">
-- Simplification preserves evaluation
prop_simplify x = eval x == eval (simplify x)
</syntaxhighlight>

This property simply states that simplification does not affect evaluation. We suggest the following test-data generator:

<syntaxhighlight lang=""haskell"">
-- A generator for expressions
instance Arbitrary Expr
  where
    arbitrary = do
      -- Pick either ""Const"" or ""Add""
      n <- choose (0, 1) :: Gen Int
      case n of
        0 -> do
          -- Pick a constant in the range [0..10]
          x <- choose (0,10) :: Gen Int
          return (Const x)
        1 -> do
          -- Pick ""arbitrary"" operands for addition
          x <- arbitrary
          y <- arbitrary
          return (Add x y)
</syntaxhighlight>

The generator is defined with the following hypotheses in mind. First, it is not important to have many different constants; it is important though to exercise ""0"" (so that simplifications related to the unit law may be exercised in turn). Accordingly, numbers in the range [0..10] are generated. Second, when considering the addition form of expression, we simply resort to ""arbitrary"" operands, thereby performing test-data generation in a uniform, recursive manner.

The property appears to hold:

<pre>
> quickCheckWith stdArgs { maxSuccess = 1234 } prop_simplify
+++ OK, passed 1234 tests.
</pre>

== Metadata ==

* [[instanceOf::Testing framework]]
* [[facilitates::Property-based testing]]
* [[sameAs::http://en.wikipedia.org/wiki/QuickCheck]]
* [[sameAs::http://hackage.haskell.org/packages/archive/QuickCheck/2.4.0.1/doc/html/Test-QuickCheck.html]]
* [[relatesTo::http://www.haskell.org/haskellwiki/Introduction to QuickCheck]]
* [[relatesTo::http://stackoverflow.com/questions/10039416/use-quickcheck-tests-with-cabal]]
",2013-06-12 15:01:54.305,2017-07-04 13:47:31.646662
Technology,GHCi,"== Headline ==

The [[Language:Haskell]] interpreter as part of [[Technology:GHC]]

== Metadata ==

* [[instanceOf::Interpreter]]
* ",2013-06-12 15:01:14.377,2017-07-04 13:47:27.806866
Technology,GitHub,"== Headline ==

A web-based hosting service for software development projects

== Metadata ==

* [[sameAs::http://github.com/]]
* [[sameAs::http://en.wikipedia.org/wiki/GitHub]]
* ",2013-06-12 15:01:16.181,2017-07-04 13:47:28.304446
Technology,GNU make,"== Intent ==

a popular build automation tool

== Metadata ==
* [[instanceOf::Build tool]]
* [[sameAs::http://en.wikipedia.org/wiki/Make_(software)]]
* ",2013-06-12 15:01:14.737,2017-07-04 13:47:27.817986
Technology,GReTL,"== Intent ==

an implementation of the [[Language:GReTL]] language




== Metadata ==
* [[instanceOf::Language implementation]]
* ",2013-06-12 15:01:14.994,2017-07-04 13:47:27.828284
Technology,GWT,"== Intent ==

A [[Toolkit]] for [[web programming]] in [[Language:Java]]

== Description ==

GWT is a [[Web-application framework|web-application framework]] for developing [[Language:JavaScript]] [[Web application|web applications]] in [[Language:Java]]. It provides a Java-to-JavaScript compiler (see also: [[Technology:Pyjamas]]) as well as [[Technology:DOM]] and [[Ajax]] support in combination, and other useful components for [[Web programming|web programming]] <cite>GWT2012official</cite>.

== Languages ==

* [[Language:Java]]
* [[Language:JavaScript]]
* [[Language:HTML]]
* [[Language:XML]]
* [[Language:CSS]]
* [[Language:JSON]]

== Technologies ==

* [[Technology:DOM]]
* [[Technology:XMLHttpRequest]]


== Metadata ==
* [[instanceOf::Toolkit]]
* [[instanceOf::Web-application framework]]
* [[sameAs::http://code.google.com/intl/de-DE/webtoolkit/]]
* ",2013-06-12 15:01:15.298,2017-07-04 13:47:27.887787
Technology,GeSHi,"== Intent ==

GeSHi - Generic Syntax Highlighter

== Metadata ==
* [[instanceOf::Syntax highlighter]]
* [[sameAs::http://qbnz.com/highlighter/]]
* ",2013-06-12 15:01:15.966,2017-07-04 13:47:28.294873
Technology,Glade,"== Headline ==

a [[user interface]] designer

== Metadata ==
* [[instanceOf::Development technology]]
* [[sameAs::http://glade.gnome.org/]]
* ",2013-06-12 15:01:16.669,2017-07-04 13:47:28.31581
Technology,GlassFish,"== Intent ==

A [[Technology:Java EE]] [[Application server]]

== Metadata ==
* [[instanceOf::Application server]]
* [[relatesTo::http://en.wikipedia.org/wiki/GlassFish]]
* [[sameAs::http://glassfish.java.net/]]
* ",2013-06-12 15:01:17.226,2017-07-04 13:47:28.329595
Technology,Google Chrome,"== Intent ==

Google's Web browser

== Metadata ==
* [[instanceOf::Web browser]]
* [[sameAs::http://www.google.com/chrome]]
* [[relatesTo::http://en.wikipedia.org/wiki/Google_Chrome]]
* ",2013-06-12 15:01:17.758,2017-07-04 13:47:28.341864
Technology,Gra2Mol,"== Headline ==
A technology for [[Text to Model transformation]]s

== Metadata ==

* [[relatesTo::http://modelum.es/trac/gra2mol/]]
*

",2013-06-12 15:01:18.209,2017-07-04 13:47:28.350964
Technology,Gradle,"== Headline ==

A [[build tool]] inspired by [[Technology:Ant|Ant]] and [[Technology:Maven|Maven]]

== Metadata ==

* [[sameAs::http://www.gradle.org/]]
* [[sameAs::http://en.wikipedia.org/wiki/Gradle]]
* [[instanceOf::Build tool]]

",2013-06-12 15:01:18.536,2017-07-04 13:47:28.365033
Technology,Guava,"== Headline ==

Google Core Libraries for Java latest API

== Metadata ==

* [[instanceOf::Library]]
* [[sameAs::http://docs.guava-libraries.googlecode.com/git/javadoc/index.html]]
* ",2013-06-12 15:01:19.591,2017-07-04 13:47:28.39386
Concept,REST,"== Headline ==

Representational State Transfer (REST)

== Metadata ==

* [[instanceOf::Architectural pattern]]
* [[sameAs::http://en.wikipedia.org/wiki/Representational_state_transfer]]
",2013-06-12 15:01:54.58,2017-07-04 13:47:31.67148
Technology,Guava base,"== Headline ==

[[Technology:Guava]]'s basic utility libraries and interfaces

== Metadata ==

* [[instanceOf::Library]]
* [[partOf::Technology:Guava]]
* [[sameAs::http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/package-summary.html]]
* ",2013-06-12 15:01:19.826,2017-07-04 13:47:28.409187
Technology,Guava collections,"== Headline ==

[[Technology:Guava]]'s collection library

== Metadata ==

* [[instanceOf::Library]]
* [[partOf::Technology:Guava]]
* [[sameAs::http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/package-summary.html]]
* ",2013-06-12 15:01:20.145,2017-07-04 13:47:28.424739
Technology,Guice,"== Headline ==

An ultra-lightweight dependency injection framework

== Metadata ==

* [[instanceOf::Framework]]
* [[sameAs::http://google-guice.googlecode.com/git/javadoc/com/google/inject/package-summary.html]]
* ",2013-06-12 15:01:20.382,2017-07-04 13:47:28.436355
Technology,HAML,"== Headline ==

TBD
== Metadata ==
* [[instanceOf::Rails template engine]]
*
",2013-06-12 15:01:20.629,2017-07-04 13:47:28.445526
Technology,JPA,"== Headline ==

An API for [[persistence]] in a Java environment

== Metadata ==

* [[instanceOf::API]]
* [[instanceOf::Data technology]]
* [[facilitates::Persistence]]
* [[sameAs::http://en.wikipedia.org/wiki/Java_Persistence_API]]
",2013-06-12 15:01:33.551,2017-07-04 13:47:29.69202
Technology,HBase,"== Headline ==

HBase is an open-source [[Technology:Column-oriented database]] modeled after Google's BigTable.

== Description ==

HBase is a database which models data as a multi-dimensional map of strings to an array of bytes. Each entry in a database table is specified by a row key, a column key and a timestamp. Additionally, columns are grouped into column families.

HBase is written in Java and built on top of [[Technology:Hadoop]]. Beyond using Java to query HBase, it can also be accessed from a shell using [[Language:Ruby|JRuby]].
A query from the JRuby shell may look like this:

<syntaxhighlight lang=""ruby"">
hbase(main):001:0> get 'meganalysis_employees', 'Craig'
COLUMN                    CELL
 corporate:salary         timestamp=1347568664910, value=@\xFE$\x00\x00\x00\x00\x00
 personal:address         timestamp=1347568664910, value=Redmond
 personal:name            timestamp=1347568664910, value=Craig
3 row(s) in 0.0090 seconds

hbase(main):002:0> get 'meganalysis_employees', 'Craig', 'corporate:salary'
COLUMN                    CELL
 corporate:salary         timestamp=1347568664910, value=@\xFE$\x00\x00\x00\x00\x00
1 row(s) in 0.0210 seconds
</syntaxhighlight>

The get query takes up to four parameters: The target table, the target row key, target column family:column key and a timestamp.

Note that for the employees salary, there is just a string of Unicode escape sequences, because HBase stores only raw bytes and so the double value for the salary is not interpreted by the DB. HBase's Java libraries come with a number of helper functions to convert between byte arrays and other data types to address this.

Since HBase is built on top of it, [[Technology:Hadoop]] is used to realize [[Technology:Data Aggregation]] meaning, MapReduce jobs can be implemented as a Hadoop worker in plain Java. It is also possible to run Java or JRuby code directly on the database server.

== Spaces ==

* [[Nonrelationalware]]

== Metadata ==
* [[instanceOf::Column-oriented database]]
* [[sameAs::http://hbase.apache.org/]]
* ",2013-06-12 15:01:20.979,2017-07-04 13:47:28.58325
Technology,HDBC,"== Headline ==

A [[library]] for embedded [[Language:SQL]] programming in [[Language:Haskell]]

== Discussion ==

HDBC enables one to express database queries as strings in Haskell and execute these queries on various [[DBMS]] <cite>hackageHDBC</cite>.

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://hackage.haskell.org/package/HDBC]]
* ",2013-06-12 15:01:21.271,2017-07-04 13:47:28.608827
Technology,HUnit,"== Headline ==

A [[testing framework]] for [[unit testing]] for [[Language:Haskell]]

== Illustration ==

Consider the following test suite that tests some properties of logical negation for [[Language:Haskell]] with the help of [[Technology:HUnit]]:

<syntaxhighlight lang=""haskell"">
import Test.HUnit

-- The tests
tests =
    TestList [
      TestLabel ""notNotTrue"" (doubleNegation True),
      TestLabel ""notNotFalse"" (doubleNegation False)
    ]
  where
   doubleNegation x = x ~=? not (not x)

-- Run all tests
main = runTestTT tests
</syntaxhighlight>

Thus, there are two test cases, one for double negation of ''True'' and another one for ''False'' as the operand. The helper function ''doubleNegation'' illustrates the structure of test cases. That is, an expected value is compared with the actual value as described by an expression or computation. The specific operator ""~=?"" represents equality but it makes up for monitored test-case execution.

== Metadata ==

* [[sameAs::http://hunit.sourceforge.net/]]
* [[relatesTo::http://www.haskell.org/haskellwiki/HUnit_1.0_User's_Guide]]
* [[relatesTo::http://hackage.haskell.org/package/HUnit]]
* [[instanceOf::Testing framework]]
* [[relatesTo::Unit testing]]
* ",2013-06-12 15:01:22.824,2017-07-04 13:47:28.735413
Technology,HPC,"== Headline ==

A tool for recording and displaying [[Language:Haskell]] program coverage

== Metadata ==
* [[instanceOf::Haskell technology]]
* [[relatesTo::http://www.haskell.org/haskellwiki/Haskell_program_coverage]]
* ",2013-06-12 15:01:21.561,2017-07-04 13:47:28.621816
Technology,HSQLDB,"== Intent ==

a relational database management system

== Spaces ==

* [[Relationalware]]

== Links ==

*[[http://en.wikipedia.org/wiki/HSQLDB Wikipedia]]



== Metadata ==
* [[instanceOf::DBMS]]
* ",2013-06-12 15:01:21.845,2017-07-04 13:47:28.641258
Technology,JSF,"== Intent ==

[[Web-application framework]] for web-based [[user interface]]s with [[Technology:Java EE]]

== Description ==

""''JavaServer Faces'' (JSF) is a standard [[Language:Java]] [[Web-application framework|web-application framework]] for building [[user interface]]s for [[Web application|web applications]]"" <cite>schalk2007javaserver</cite>. In terms of [[MVC]] it is focused on the view ([[Technology:JSP]], [[Technology:Facelets]]), the model ([[Technology:Java Bean]]) and the controller (provided by the [[Technology:Servlet API]]). [[Ajax]] is included from version 2.0. ''JavaServer Faces'' controls the navigation between different pages and connects the pages to Java components implemented as Java Bean <cite>schalk2007javaserver, JSF2012official</cite>.

== Languages ==

* [[Language:Java]]
* [[Language:JavaScript]]
* [[Language:HTML]]
* [[Language:XML]]

== Technologies ==

* [[Technology:Java Bean]]
* [[Technology:Servlet API]]
* [[Technology:JSP]] / [[Technology:Facelets]]

== Metadata ==
* [[instanceOf::Web-application framework]]
* [[relatesTo::http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html]]
* [[relatesTo::http://jsfcompref.com/]]
* ",2013-06-12 15:01:33.869,2017-07-04 13:47:29.761123
Technology,HTML Parser,"== Headline ==

a Java library used to parse HTML
== Metadata ==

* [[instanceOf::Library]]
* [[sameAs::http://htmlparser.sourceforge.net/]]
",2013-06-12 15:01:22.124,2017-07-04 13:47:28.652911
Technology,HTTP,"==Intent==

a [[Communications protocol]] for message exchange in network communication

==Description==

HTTP is the major [[Term:Application layer|application layer]] [[Communications protocol|protocol]] for internet communication.


== Metadata ==
* [[instanceOf::Communications protocol]]
* [[sameAs::http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol]]
* ",2013-06-12 15:01:22.468,2017-07-04 13:47:28.676019
Technology,HXT,"== Headline ==

A [[toolkit]] for tree-based XML processing in [[Language:Haskell]]

== Discussion ==

Haskell XML Toolkit is a set of tools for processing XML data by using [[Arrow|arrows]] and arrow combinators  <cite>haskellWikiHXT</cite>. That is, the combinators are a [[Domain-specific_language|DSL]] within [[Language:Haskell]] for XML processing. HXT also enables [[XML data binding]].

== Metadata ==
* [[instanceOf::Toolkit]]
* [[sameAs::http://www.haskell.org/haskellwiki/HXT]]
* ",2013-06-12 15:01:23.132,2017-07-04 13:47:28.760802
Technology,HackageDB,"== Headline ==

A collection of releases of [[Language:Haskell]] packages

== Illustration ==

Have a look at the website of HackageDB:

http://hackage.haskell.org/packages/hackage.html

Specifically, have a look at the packages available at HackageDB:

http://hackage.haskell.org/packages/archive/pkg-list.html

For instance, here is a pointer to a specific package for [[SYB]] style of [[generic programming]]:

http://hackage.haskell.org/package/syb

== Metadata ==

* [[sameAs::http://hackage.haskell.org/]]
* [[instanceOf::Source code repository]]
* [[relatesTo::Technology:Cabal]]
* ",2013-06-12 15:01:23.412,2017-07-04 13:47:28.785916
Technology,Hamcrest,"== Headline ==

a library for building test expressions

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://code.google.com/p/hamcrest/]]
* ",2013-06-12 15:01:24.348,2017-07-04 13:47:28.871469
Technology,Happstack,"== Headline ==

A [[Framework|framework]] for [[Web programming|web programming]] in [[Language:Haskell|Haskell]]
== Discussion ==

Some features of Happstack are <cite>happstackHome, haskellWikiHappstack</cite>:
* [[Route filter|Route filters]] to extract URL path components.
* An integrated [[Technology:HTTP]]-server.
* Support for most Haskell database interfaces.
* Integration of various [[Language:HTML|HTML]] templating systems such as [[Technology:Heist]].
== Metadata ==

* [[instanceOf::Framework]]
* [[sameAs::http://happstack.com/index.html]]
* [[relatesTo::http://www.haskell.org/haskellwiki/Web/Frameworks#Happstack]]
",2013-06-12 15:01:24.724,2017-07-04 13:47:28.898165
Technology,HaskellDB,"== Headline ==

A [[Library|combinator library]] for expressing [[DBMS]] queries in [[Language:Haskell|Haskell]]

== Discussion ==

HaskellDB allows one to declare queries based on [[Relational algebra|relational algebra]] in a type-safe and declarative way and execute these queries on a relational database <cite>bringert2004student, leijen1999domain</cite>.

== Metadata ==
* [[instanceOf::Library]]
* [[relatesTo::http://doi.acm.org/10.1145/331960.331977]]
* [[relatesTo::http://dl.acm.org/citation.cfm?id=1017473]]
* ",2013-06-12 15:01:25.022,2017-07-04 13:47:28.922014
Technology,Haskell platform,"== Headline ==

A collection of tools and libraries for program development in Haskell

== Metadata ==

* [[sameAs::http://hackage.haskell.org/platform]]
* [[instanceOf::Platform]]
* ",2013-06-12 15:01:25.284,2017-07-04 13:47:28.933965
Technology,Heist,"== Headline ==

An [[Language:XHTML]] [[template engine]] for [[Language:Haskell]]

== Discussion ==

With Heist one can combine templates in a flexible manner. To generate dynamic web pages one can bind strings and XHTML fragments (splices) to template variables in Haskell <cite>hackageHeist, snapHeist</cite>.

== Metadata ==
* [[instanceOf::Template engine]]
* [[sameAs::http://hackage.haskell.org/package/heist]]
* [[relatesTo::http://snapframework.com/docs/tutorials/heist]]
* ",2013-06-12 15:01:25.648,2017-07-04 13:47:28.956374
Technology,Hibernate,"== Headline ==

an [[Object-Relational mapping]] technology for [[Language:Java]]

== Spaces ==

* [[Objectware]]
* [[Relationalware]]
* [[Auxiliary XMLware]]

== Links ==

* [http://www.hibernate.org Home page]

== Metadata ==

* [[instanceOf::Persistence technology]]
* [[instanceOf::Mapping technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Hibernate (Java) Wikipedia]]
*
",2013-06-12 15:01:26.065,2017-07-04 13:47:28.992613
Technology,HsFactExtractor,"== Headline ==

A [[fact extractor]] for [[Language:Haskell]]

== Description ==

HsFactExtractor is a [[101technology]]; it is a [[Language:Haskell]]-specific [[fact extractor]]. HsFactExtractor extracts facts from Haskell source code. Currently, facts describe imports and names of declarations. HsFactExtractor is a simple command line tool which consumes source code through stdin and return the extracted facts through stdout using a pseudo-standardized format. That is, all declarations are listed in a ""fragments"" array; each declaration is classified (see ""classifier"" link) and its name is given (see key ""name""). Currently, nested declarations (such as nested binding groups) are not supported. That is, top-level functions are listed in the output, but not local functions.

== Metadata ==

* [[instanceOf::Fact extractor]]
* [[relatesTo::https://github.com/101companies/101repo/tree/master/technologies/HsFactExtractor]]

",2013-06-12 15:01:26.312,2017-07-04 13:47:29.021742
Technology,JAF,"== Headline ==

a library for MIME handling and related problems

== Description ==

JAF stands for ""JavaBeans Activation Framework"".

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Data technology]]
* [[sameAs::http://en.wikipedia.org/wiki/JavaBeans_Activation_Framework]]
* [[relatesTo::http://www.oracle.com/technetwork/java/javase/downloads/index-135046.html]]
* [[relatesTo::http://docs.oracle.com/javaee/1.3/api/javax/activation/package-summary.html]]
* ",2013-06-12 15:01:27.933,2017-07-04 13:47:29.188705
Technology,HsFragmentLocator,"== Headline ==

A fragment locator for Haskell
== Description ==

HsFragmentLocator is an [[101technology]]; it is a Haskell-specific tool for fragment location. That is, the technology supports the syntax-aware location of a fragment in a Haskell module.
== Metadata ==

* [[instanceOf::@technology]]
* [[instanceOf::Fragment locator]]
* [[sameAs::https://github.com/101companies/101repo/tree/master/technologies/HsFragmentLocator]]
* ",2013-06-12 15:01:26.632,2017-07-04 13:47:29.041808
Technology,HsImportMatcher,"== Headline ==

an import matcher for Haskell

== Description ==

HsImportMatcher is a part of [[101companies:Explorer]]; it is a Haskell-specific tool for import matching. That is, the technology supports the syntax-aware proof of using a certain Haskell-based technology in terms of its import into Haskell sources. The input/output behavior of HsImportMatcher is the following:

* Input:
** a Haskell module
** a namespace (a string)
* Output:
** None
* Exit:
** Normal: successful matching
** Abnormal: failed matching (or other problems)

== Illustration ==

Consider this technology tagging:

<pre>
$ pwd
/home/me/projects/101repo
$ more technologies/HXT/.tetala
[
 {
  ""language"" : ""Haskell"",
  ""namespace"" : ""Text.XML.HXT""
 }
]
</pre>

Hence, [[Technology:HXT]] is said to be detectable due to the associated namespace ""Text.XML.HXT"". More operationally, any Haskell module could be scanned for ""imports"" to refer to said namespace. For instance, [[Contribution:haskellHxt]] does indeed make good use of [[Technology:HXT]]. Thus, the test case:

<pre>
$ pwd
/home/me/projects/101repo/technologies/HsImportMatcher
$ make test
$ more Makefile
build:
...
test:
...
        @./matcher.py \
                ../../contributions/hxt/Total.hs \
                ""Text.XML.HXT""
...
</pre>

== See also ==

* The [[101companies:Explorer]]

== Contributors ==

* {{101contributor|Ralf Lämmel|developer}}

== Metadata ==
* [[instanceOf::Import matcher]]
* [[instanceOf::@technology]]
* [[sameAs::https://github.com/101companies/101repo/tree/master/technologies/HsImportMatcher]]
* ",2013-06-12 15:01:27.061,2017-07-04 13:47:29.123998
Technology,IndexedDB,"== Intent ==

A [[DBMS]] [[API]] in the [[Language:HTML5]] ecosystem for [[Client|client]] side data storage

== Discussion ==

The [[Language:JavaScript]] [[API]] IndexedDB provides [[Client|client]] side data storage with the help of B-trees  <cite>W3C2012IDB</cite>.

== Metadata ==
* [[instanceOf::DBMS]]
* [[instanceOf::API]]
* [[sameAs::http://www.w3.org/TR/IndexedDB/]]
* ",2013-06-12 15:01:27.359,2017-07-04 13:47:29.152789
Technology,Internet Explorer,"== Intent ==

Microsoft's Web browser

== Metadata ==
* [[instanceOf::Web browser]]
* [[relatesTo::http://en.wikipedia.org/wiki/Internet_Explorer]]
* [[sameAs::http://windows.microsoft.com/en-US/internet-explorer/products/ie/home]]
* ",2013-06-12 15:01:27.653,2017-07-04 13:47:29.165935
Technology,Java misc,"== Headline ==

some parts of the Java package [[Technology:java.util]]

== Description ==

This framework is strongly defined by the Java platform.

Pragmatically, some slices of the [[Technology:java.util]] package were extracted; the present ""technology"" denotes the rest.

=== Interfaces ===

* Comparator
* Formattable

=== Classes ===

* Calendar
* Currency
* Date
* FormattableFlags
* Formatter
* GregorianCalendar
* ListResourceBundle
* Locale
* Locale.Builder
* Objects
* PropertyPermission
* PropertyResourceBundle
* Random
* ResourceBundle
* ResourceBundle.Control
* Scanner
* ServiceLoader
* SimpleTimeZone
* StringTokenizer
* Timer
* TimerTask
* TimeZone
* UUID

=== Enums ===

* Formatter.BigDecimalLayoutForm
* Locale.Category

=== Exceptions ===

* DuplicateFormatFlagsException
* FormatFlagsConversionMismatchException
* FormatterClosedException
* IllegalFormatCodePointException
* IllegalFormatConversionException
* IllegalFormatException
* IllegalFormatFlagsException
* IllegalFormatPrecisionException
* IllegalFormatWidthException
* IllformedLocaleException
* InputMismatchException
* InvalidPropertiesFormatException
* MissingFormatArgumentException
* MissingFormatWidthException
* MissingResourceException
* UnknownFormatConversionException
* UnknownFormatFlagsException

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/util/package-summary.html]]
* ",2013-06-12 15:01:39.174,2017-07-04 13:47:30.124264
Technology,JAMA,"== Headline ==

a basic linear algebra library for Java

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Computing technology]]
* [[sameAs::http://math.nist.gov/javanumerics/jama/]]
* ",2013-06-12 15:01:28.242,2017-07-04 13:47:29.204985
Technology,JAXB,"== Headline ==

An [[Object-XML mapping]] technology for [[Language:Java]]
== Description ==

JAXB bridges [[Objectware]] ([[Javaware]]) and [[XMLware]]. JAXB consists of the schema compiler [[Technology:xjc]] and a library that supports un-/marshaling. JAXB is typically used for [[schema-first mapping]] so that one generates Java classes and interfaces from an XML schema (i.e., an element of the [[Language:XSD]] language. Arguably, JAXB can also be said to provide the capability of [[Open serialization|(open) serialization]] based on [[Language:XML]] as serialization format.
== Metadata ==

* [[instanceOf::Mapping technology]]
* [[sameAs::http://www.oracle.com/technetwork/articles/javase/index-140168.html]]
* [[sameAs::http://jaxb.java.net/]]
* [[sameAs::http://en.wikipedia.org/wiki/Java Architecture for XML Binding Wikipedia]]
* [[uses::Java annotation]]

",2013-06-12 15:01:28.547,2017-07-04 13:47:29.242659
Technology,JAXP,"== Intent ==

a collection of XML [[API|APIs]] as part of [[Technology:Java SE]]

== Description ==

Among others, JAXP contains a Java binding for the platform- and language-neutral [[Technology:DOM]] API and a specific implementation.

Strictly speaking, JAXP provides [[API implementation]]s.

== Spaces ==

* [[XMLware]]
* [[Generic objectware]]

== Metadata ==
* [[instanceOf::API implementation]]
* [[instanceOf::XML processor]]
* [[sameAs::http://download.oracle.com/javase/6/docs/technotes/guides/xml/jaxp/index.html]]
* [[sameAs::http://en.wikipedia.org/wiki/Java_API_for_XML_Processing]]
* ",2013-06-12 15:01:28.918,2017-07-04 13:47:29.28335
Technology,JBoss Application Server,"== Headline ==

The JBoss Application Server

== Metadata ==

* [[instanceOf::Application server]]
* [[sameAs::http://www.jboss.org/jbossas/]]
* ",2013-06-12 15:01:29.559,2017-07-04 13:47:29.295663
Technology,LINQ to XML,"==Links==

*[http://msdn.microsoft.com/en-us/library/bb387098.aspx MSDN]
*[http://en.wikipedia.org/wiki/LINQ_to_SQL#LINQ_to_XML_.28formerly_called_XLINQ.29 LINQ concept on Wikipedia]
== Metadata ==
* ",2013-06-12 15:01:42.781,2017-07-04 13:47:30.282707
Technology,JDBC,"== Headling ==

An API for [[embedded SQL programming]] in Java

== Metadata ==

* [[instanceOf::API]]
* ",2013-06-12 15:01:29.809,2017-07-04 13:47:29.305664
Technology,JDK,"== Headline ==

The Java Development Kit

== Metadata ==

* [[instanceOf::Toolkit]]
* [[sameAs::http://en.wikipedia.org/wiki/Java_Development_Kit]]
* [[sameAs::http://www.oracle.com/technetwork/java/javase/downloads/index.html]]
",2013-06-12 15:01:30.064,2017-07-04 13:47:29.318146
Technology,JDOM,"== Headline ==

A ([[Technology:DOM|DOM]]-like) [[API]] for tree-based [[XML processing]]

== Metadata ==

* [[sameAs::http://www.jdom.org/]]
* [[sameAs::http://en.wikipedia.org/wiki/JDOM]]
* [[similarTo::Technology:DOM]]
* [[instanceOf::API]]
* [[facilitates::XML processing]]

",2013-06-12 15:01:30.333,2017-07-04 13:47:29.337873
Technology,JDT,"== Headline ==

(an Eclipse project providing) Java development tools for Eclipse

== Description ==

JDT stands for Java Development Tools.

== Metadata ==
* [[instanceOf::Development technology]]
* [[instanceOf::Language framework]]
* [[sameAs::http://www.eclipse.org/jdt/]]
* ",2013-06-12 15:01:30.617,2017-07-04 13:47:29.354899
Technology,JFragmentLocator,"== Headline ==

a fragment locator for Java

== Description ==

JFragmentLocator is a part of the [[101companies:Explorer]]; it is a Java-specific tool for fragment location. That is, the technology supports the syntax-aware location of a fragment in Java compilation unit. The input/output behavior of JFragmentLocator is the following:

* Input:
** a Java compilation unit
** a fragment description
* Output:
** the line range of the located fragment

JFragmentLocator leverages JSON for the description of fragments and the derived line ranges. Consider, for example, the following Java compilation unit:

<pre>
package org.softlang.trivia;

public class HelloWorld {

    public static void main(String[] args) {
        System.out.println(""Hello, World"");
    }

}
</pre>

The following fragment description locates the main method of the class:

<pre>
{
 ""method"" : ""main""
}
</pre>

If we wanted to make explicit the hosting class (which may be necessary in case there are multiple classes in the same compilation unit), then the description may take the following form instead:

<pre>
{
 ""class"" : ""HelloWorld"",
 ""method"" : ""main""
}
</pre>

The class name is unqualified in this example. It may also be desirable to explicitly specify the package qualifier of the class. Hence, the fragment description may also take the following form:

<pre>
{
 ""package"" : ""org.softlang.trivia"",
 ""class"" : ""HelloWorld"",
 ""method"" : ""main""
}
</pre>

Further, the method of interest may be overloaded. In this case, some sort of overloading resolution is needed. A simple, position-oriented approach is assumed here. That is, the 0-based index of the intended overload can be defined. In the example, the main method is not overloaded, but we can still demonstrate the extra description element at hand:

<pre>
{
 ""package"" : ""org.softlang.trivia"",
 ""class"" : ""HelloWorld"",
 ""method"" : ""main"",
 ""overload"" : ""0""
}
</pre>

All fragment descriptions locate the same fragment: the line range 3-5. Thus:

<pre>
{""to"": 3, ""from"": 5}
</pre>

It may also be necessary to deal with fields, nested classes, anonymous classes, enum types, interfaces, statement sequences, expressions, and yet other language elements. The description of such fragments is not described here, but we refer to the implementation.

== Contributors ==

* {{101contributor|Ralf Lämmel|author}}
* {{101contributor|Martin Leinberger|developer}}




== Metadata ==
* [[instanceOf::Fragment locator]]
* [[instanceOf::@technology]]
* [[sameAs::https://github.com/101companies/101repo/tree/master/technologies/JFragmentLocator]]
* ",2013-06-12 15:01:31.557,2017-07-04 13:47:29.594749
Technology,JFreeChart,"== Headline ==

a free Java chart library

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://www.jfree.org/jfreechart/index.html]]
* [[relatesTo::http://www.jfree.org/jfreechart/api/javadoc/overview-summary.html]]
* ",2013-06-12 15:01:31.834,2017-07-04 13:47:29.612005
Technology,JGraph,"== Headline ==

a library for diagramming software

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://www.jgraph.com/]]
* ",2013-06-12 15:01:32.405,2017-07-04 13:47:29.634177
Technology,JGroups,"== Headline ==

a toolkit for reliable multicast communication in Java

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://www.jgroups.org/]]
* ",2013-06-12 15:01:32.688,2017-07-04 13:47:29.644648
Technology,JMF,"== Headline ==

a Java library for handling audio, video and other time-based media

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Media processor]]
* [[sameAs::http://en.wikipedia.org/wiki/Java_Media_Framework]]
* [[relatesTo::http://docs.oracle.com/cd/E17802_01/j2se/javase/technologies/desktop/media/jmf/2.1.1/apidocs/overview-tree.html]]
* ",2013-06-12 15:01:32.979,2017-07-04 13:47:29.660609
Technology,JNDI,"== Headline ==

support for naming and directory services in Java applications

== Description ==

JNDI stands for ""Java Naming and Directory Interface"".

== Metadata ==
* [[instanceOf::API]]
* [[sameAs::http://www.oracle.com/technetwork/java/jndi/index.html]]
* ",2013-06-12 15:01:33.265,2017-07-04 13:47:29.675251
Technology,JTA,"== Headline ==

an API for distributed transactions across [[Technology:XA]] resources in a Java environment

== Metadata ==
* [[instanceOf::API]]
* [[instanceOf::Data technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Java_Transaction_API]]
* ",2013-06-12 15:01:34.455,2017-07-04 13:47:29.803856
Technology,JUnit,"== Headline ==

A [[testing framework|framework]] for [[unit testing]] for [[Language:Java]]

== Metadata ==

* [[instanceOf::Testing framework]]
* [[facilitates::Unit testing]]
* [[uses::Language:Java]]
* [[sameAs::http://junit.org/]]
* [[sameAs::http://en.wikipedia.org/wiki/JUnit]]

",2013-06-12 15:01:34.745,2017-07-04 13:47:29.824661
Technology,JValidator,"== Headline ==

A validator for Java
== Description ==

JValidator is a [[101technology]]; it is a Java-specific validator. JValidator essentially parses the source code; it does not attempt compilation; it does not enforce any static semantics rules. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure.
== Metadata ==

* [[developedBy::Martin Leinberger]]
* [[developedBy::Ralf Lämme]]
* [[instanceOf::Validator]]
* [[instanceOf::@technology]]
* [[sameAs::https://github.com/101companies/101repo/tree/master/technologies/JValidator]]
",2013-06-12 15:01:35.041,2017-07-04 13:47:29.858197
Technology,JavaBeans,"== Headline ==

The JavaBeans architecture

== Metadata ==

* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://en.wikipedia.org/wiki/JavaBeans]]
* [[relatesTo::http://docs.oracle.com/javase/7/docs/api/java/beans/package-summary.html]]
* ",2013-06-12 15:01:35.285,2017-07-04 13:47:29.874926
Concept,Interpretation,"== Headline ==

Direct execution of source code without [[compilation]]

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Interpreter_(computing)]]

",2014-04-23 20:53:51.233,2017-07-04 13:47:55.995434
Technology,JavaMail,"== Headline ==

a library for handling [Technology:Email emails] in a Java environment

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Web technology]]
* [[instanceOf:: Technology:Email]]
* [[sameAs::http://www.oracle.com/technetwork/java/javamail/index.html]]
* [[relatesTo::http://docs.oracle.com/javaee/6/api/javax/mail/package-summary.html]]
*


",2013-06-12 15:01:35.643,2017-07-04 13:47:29.898254
Technology,Java Bean,"== Intent ==

a [[Library|library]] for creating reusable software components in [[Language:Java]]

== Technologies ==

* [[Technology:Java SE]]

== Metadata ==
* [[instanceOf::Library]]
* [[relatesTo::http://download.oracle.com/otndocs/jcp/7224-javabeans-1.01-fr-spec-oth-JSpec/]]
* [[sameAs::http://en.wikipedia.org/wiki/JavaBean]]
* ",2013-06-12 15:01:35.903,2017-07-04 13:47:29.919456
Technology,Java EE,"== Intent ==

the Java Enterprise Edition is a [[Platform]] for [[Server]] programming in [[Language:Java]]

== Metadata ==
* [[instanceOf::Platform]]
* [[instanceOf::Runtime]]
* [[sameAs::http://www.oracle.com/technetwork/java/javaee/overview/index.html]]
* [[relatesTo::http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition]]
* ",2013-06-12 15:01:36.195,2017-07-04 13:47:29.938009
Technology,Java Media APIs,"== Headline ==

support for advanced media capabilities on the Java platform

== Description ==

For instance, the package [[Java:com.sun.image.codec.jpeg]] is part of the API(s).

== Metadata ==
* [[instanceOf::API]]
* [[sameAs::http://java.sun.com/javase/technologies/desktop/media/]]
* ",2013-06-12 15:01:36.78,2017-07-04 13:47:29.954528
Technology,Java SE,"== Intent ==

the Java Standard Edition as a concrete instance of the Java platform
== Links ==

* [http://www.oracle.com/technetwork/java/javase/overview/index.html Oracle]
== Metadata ==

* [[instanceOf::Platform]]
* [[instanceOf::Runtime]]
",2013-06-12 15:01:37.341,2017-07-04 13:47:29.982264
Technology,Java Servlet,"== Headline ==

a kind of server side Java component

== Description ==

See also the corresponding [[Technology:Java Servlet API]].

== Metadata ==
* [[instanceOf::Server technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Java_Servlet]]
* ",2013-06-12 15:01:37.706,2017-07-04 13:47:29.997758
Technology,Java Servlet API,"== Headline ==

an API for [[Technology:Java Servlet]]s

== Metadata ==
* [[instanceOf::Server technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Java_Servlet]]
* [[relatesTo::http://docs.oracle.com/javaee/6/api/javax/servlet/package-summary.html]]
* ",2013-06-12 15:01:38.002,2017-07-04 13:47:30.012048
Technology,Java applet,"== Headline ==

The Java framework for applets

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Java_applet]]
* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/applet/package-summary.html]]
* ",2013-06-12 15:01:38.25,2017-07-04 13:47:30.028015
Technology,Java collections,"== Headline ==

Java's collection framework

== Description ==

The framework is hosted by the [[Technology:java.util]] package.

The following list of types does not separate modern versus legacy types.

=== Interfaces ===

* Collection
* Deque
* Enumeration
* Iterator
* List
* ListIterator
* Map
* Map.Entry
* NavigableMap
* NavigableSet
* Queue
* RandomAccess
* Set
* SortedMap
* SortedSet

=== Classes ===

* AbstractCollection
* AbstractList
* AbstractMap
* AbstractMap.SimpleEntry
* AbstractMap.SimpleImmutableEntry
* AbstractQueue
* AbstractSequentialList
* AbstractSet
* ArrayDeque
* ArrayList
* Arrays
* BitSet
* Collections
* Dictionary
* EnumMap
* EnumSet
* HashMap
* HashSet
* Hashtable
* IdentityHashMap
* LinkedHashMap
* LinkedHashSet
* LinkedList
* PriorityQueue
* Properties
* Stack
* TreeMap
* TreeSet
* Vector
* WeakHashMap

=== Exceptions ===

* ConcurrentModificationException
* EmptyStackException
* NoSuchElementException

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/util/package-summary.html]]
* ",2013-06-12 15:01:38.552,2017-07-04 13:47:30.061985
Technology,Java events,"== Headline ==

Java's event framework

== Description ==

The framework is hosted by the [[Technology:java.util]] package.

=== Interfaces ===

* EventListener
* Observer

=== Classes ===

* EventListenerProxy
* EventObject
* Observable

=== Exceptions ===

* TooManyListenersException

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/util/package-summary.html]]
* ",2013-06-12 15:01:38.858,2017-07-04 13:47:30.085607
Technology,Java platform,"== Intent ==

a collection of software and specifications for developing and deploying Java software

== Discussion ==

An important instance of the Java platform is the [[Technology:Java SE]].

== Links ==

* [http://en.wikipedia.org/wiki/Java_(software_platform) Wikipedia]



== Metadata ==
* [[instanceOf::Platform]]
* ",2013-06-12 15:01:39.443,2017-07-04 13:47:30.152227
Technology,Ruby on Rails,"== Headline ==

A [[Language:Ruby|Ruby]]-based [[web-application framework]]

== Description ==

Ruby on Rails, is a [[full-stack web-application framework]], using [[Language:Ruby]] as a primary language. Ruby on Rails includes [[Technology:WEBrick]], a Ruby web server, and [[Technology:Rake]], a build system.

It facilitates the use of the [[MVC]] and [[Active record]] design patterns, also enforces usage of [[Technology:REST | REST]], organizing the  application around resources and standard [[Technology:HTTP | HTTP]] verbs.
A view in the default configuration of Rails is an erb file, implemented in [[Technology:eRuby]], which is a default [[Rails template engine]]. Alternative [[Templating engine|template engines]], such as [[Technology:HAML | HAML]] and [[Technology:Mustache | Mustache]] are supported.
It builds [[Technology:Rake]] applications.

Production Rails applications typically deployed behind [[Technology:nginx]] as reverse proxy with [[Technology:Puma]] as the application server.

== Metadata ==

* [[instanceOf::Web-application framework]]
* [[uses::Language:Ruby]]
* [[facilitates::MVC]]
* [[facilitates::Active record]]
* [[sameAs::http://rubyonrails.org]]
* [[sameAs::http://en.wikipedia.org/wiki/Ruby_on_Rails]]

",2013-06-12 15:01:56.365,2017-07-04 13:47:31.782568
Technology,Java util,"== Headline ==

Miscellaneous Java libraries

== Description ==

java.util consists of the following sub-APIs:
* [[Technology:Java collections|Java's collection framework]]
* [[Technology:Java events|Java's event framework]]
* [[Technology:Java misc|""the rest of java.util""]]

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/util/package-summary.html]]
* ",2013-06-12 15:01:40.013,2017-07-04 13:47:30.190869
Technology,Javassist,"== Headline ==

a Java bytecode engineering framework

== Metadata ==
* [[instanceOf::Framework]]
* [[instanceOf::Java bytecode processor]]
* [[sameAs::http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/]]
* ",2013-06-12 15:01:40.302,2017-07-04 13:47:30.205744
Technology,Maven,"== Headline ==

A [[build tool]] for [[Language:Java]] with enhanced dependency management

== Metadata ==

* [[sameAs::http://maven.apache.org/]]
* [[sameAs::http://en.wikipedia.org/wiki/Apache_Maven]]
* [[instanceOf::Build tool]]
* ",2013-06-12 15:01:44.263,2017-07-04 13:47:30.339185
Technology,Jaxen,"== Headline ==

an open source XPath library written in Java

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://jaxen.codehaus.org/]]
* ",2013-06-12 15:01:40.596,2017-07-04 13:47:30.216978
Technology,Jetty,"== Headline ==

an HTTP server, an HTTP client, and javax.servlet container

== Metadata ==
* [[instanceOf::Web technology]]
* [[sameAs::http://jetty.codehaus.org/jetty/]]
* ",2013-06-12 15:01:40.881,2017-07-04 13:47:30.228156
Technology,Jython,"== Headline ==

Python for the Java Platform

== Metadata ==
* [[instanceOf::Language Technology]]
* [[sameAs::http://www.jython.org/javadoc/index.html]]
* ",2013-06-12 15:01:41.184,2017-07-04 13:47:30.239318
Technology,LINQ,"== Headline ==

[[Technology:.NET]] Language-integrated Queries

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Language_Integrated_Query]]
* [[sameAs::http://msdn.microsoft.com/en-us/library/bb308959.aspx]]

",2013-06-12 15:01:42.189,2017-07-04 13:47:30.26221
Technology,LINQ to SQL,"== Headline ==

[[Technology:LINQ|Language-integrated queries]] for relational data

== Metadata ==

* [[sameAs::http://msdn.microsoft.com/en-us/library/bb386976.aspx]]
* [[sameAs::http://en.wikipedia.org/wiki/LINQ_to_SQL]]
",2013-06-12 15:01:42.491,2017-07-04 13:47:30.272923
Technology,LogicBlox,"== Headline ==

A toolkit for language support for [[Language:DatalogLB]]



== Metadata ==
* [[instanceOf::Language technology]]
* ",2013-06-12 15:01:43.047,2017-07-04 13:47:30.292739
Technology,Lucene,"== Headline ==

(an Apache project for) the development of open-source search software

== Metadata ==
* [[instanceOf::Search technology]]
* [[sameAs::http://lucene.apache.org/]]
* ",2013-06-12 15:01:43.354,2017-07-04 13:47:30.303915
Technology,MOF,"== Intent ==

an OMG standard for model-driven engineering

== Metadata ==
* [[sameAs::http://en.wikipedia.org/wiki/Meta-Object_Facility]]
* ",2013-06-12 15:01:43.67,2017-07-04 13:47:30.312023
Technology,MSBuild,"== Headline ==

A build system used in [[Language:CSharp]] projects

== Description ==
MSBuild is originally the build system of the Visual Studio IDE. It is also used in other C# IDEs like MonoDevelop. MSBuild describes the build informations in XML.

== Metadata ==
* [[sameAs::http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx]]
* ",2013-06-12 15:01:43.936,2017-07-04 13:47:30.325476
Technology,MediaWiki,"== Headline ==

A free [[wiki software]] system

== Metadata ==

* [[sameAs::http://www.mediawiki.org/wiki/MediaWiki]]
* [[instanceOf::Wiki software]]
* ",2013-06-12 15:01:44.585,2017-07-04 13:47:30.350439
Concept,Parsing problem,"== Headline ==

The membership problem for the language generated by a grammar

== Illustration ==

The problem can described like this: Given a grammar and a string, is the string an element of the language generated by the grammar? There exist corresponding algorithms for certain classes of grammars, e.g., for [[context-free grammar]]s, in which case the parsing problem turns out to be an [[algorithmic problem]], thus. While the parsing problem, in a narrow sense, focuses indeed on the membership aspect, it may be understood more broadly to cover the richer algorithmic problem of what a [[parser]] is supposed to that, which include recovery of the syntactical structure of the input in the form of a [[syntax tree]].

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Parsing]]
* [[instanceOf::Algorithmic problem]]
* [[memberOf::Vocabulary:Software language engineering]]

",2014-07-16 07:09:23.303,2017-07-04 13:47:58.461335
Technology,MediaWikiRefactorer,"== Headline ==

a refactoring tool for [[Technology:MediaWiki]] content

== Description ==

The tool currently supports advanced forms of renaming.

See the technical documentation for details.

== Metadata ==
* [[instanceOf::@technology]]
* [[sameAs::https://github.com/101companies/101dev/tree/master/tools/wikiRefactoring]]
* ",2013-06-12 15:01:44.891,2017-07-04 13:47:30.366434
Technology,Mercurial,"== Headline ==

A revision control tool

== Metadata ==
* [[instanceOf::Revision control tool]]
* [[sameAs::http://en.wikipedia.org/wiki/Mercurial]]
* ",2013-06-12 15:01:45.215,2017-07-04 13:47:30.377698
Technology,Microsoft Excel,"== Headline ==

A spreadsheet application

== Details ==

There is also the related file format [[Language:XLS]].

== Metadata ==
* [[instanceOf::Technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Microsoft_Excel]]
* ",2013-06-12 15:01:45.541,2017-07-04 13:47:30.392461
Technology,Microsoft PowerPoint,"== Headline ==

A commercial software presentation program
== Metadata ==

* [[instanceOf::Office application]]
* [[sameAs::http://en.wikipedia.org/wiki/Microsoft_PowerPoint]]

",2013-06-12 15:01:45.857,2017-07-04 13:47:30.403748
Technology,MoDisco,"== Intent ==

a framework for software modernization

== Description ==



== Home page ==

http://www.eclipse.org/MoDisco/

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://www.infoq.com/news/2010/07/introduction-modisco]]
* [[relatesTo::http://ercim-news.ercim.eu/en88/special/how-to-deal-with-your-it-legacy-what-is-coming-up-in-modisco]]
* ",2013-06-12 15:01:46.2,2017-07-04 13:47:30.427159
Technology,Mozilla Firefox,"== Intent ==

An open source Web browser
== Metadata ==

* [[instanceOf::Web browser]]
* [[relatesTo::http://en.wikipedia.org/wiki/Mozilla_firefox]]
* [[sameAs::http://www.mozilla.org/]]
",2013-06-12 15:01:47.444,2017-07-04 13:47:30.606302
Technology,Mustache,"== Headline ==

TBD



== Metadata ==
* [[instanceOf::Rails template engine]]
* ",2013-06-12 15:01:47.716,2017-07-04 13:47:30.616076
Technology,MySQL,"== Headline ==

A relational database management system

== Spaces ==

* [[Relationalware]]

== Metadata ==
* [[instanceOf::DBMS]]
* [[sameAs::http://www.mysql.com]]
* ",2013-06-12 15:01:48.028,2017-07-04 13:47:30.629897
Technology,MySQL Workbench,"== Headline ==

A unified visual tool for database architects, developers, and DBAs

== Metadata ==

* [[sameAs::http://www.mysql.com/products/workbench/]]
* [[sameAs::http://en.wikipedia.org/wiki/MySQL_Workbench]]
* ",2013-06-12 15:01:48.287,2017-07-04 13:47:30.64035
Technology,NORMA,"== Headline ==

A conceptual modeling tool based on [[Object Role Modeling]]

== Metadata ==
* [[instanceOf::Modeling technology]]
* [[instanceOf::Mapping technology]]
* [[sameAs::http://en.wikipedia.org/wiki/NORMA_(software_modeling_tool)]]
* ",2013-06-12 15:01:48.593,2017-07-04 13:47:30.655261
Technology,NUnit,"

== Metadata ==
* [[instanceOf:: Toolkit]]
* ",2013-06-12 15:01:48.858,2017-07-04 13:47:30.663263
Technology,Neo4j,"== Headline ==

Neo4j is a [[Technology:Graph database]] implemented in the [[Language:Java]] language.

== Description ==

Neo4j is an open-source graph database, meaning it stores data in the form of graphs in the mathematical sense rather than relational tables.

== Links ==

* <primary>http://neo4j.org/ Official Neo4j website</primary>
== Metadata ==
* ",2013-06-12 15:01:49.122,2017-07-04 13:47:30.682541
Technology,NetBeans,"== Intent ==

an IDE for [[Language:Java]], [[Language:php]], [[Language:c++|c++]] and other languages

== 101companies hints ==

* Version 7.0 is recommended



== Metadata ==
* [[instanceOf::IDE]]
* ",2013-06-12 15:01:49.368,2017-07-04 13:47:30.698162
Technology,Nix,"== Headline ==

A purely functional package manager

== Metadata ==
* [[instanceOf::Package manager]]
* [[sameAs::http://nixos.org/nix/]]
* ",2013-06-12 15:01:49.804,2017-07-04 13:47:30.709405
Technology,OGNL,"== Headline ==

a Java library for object graph navigation

== Description ==

OGNL stands for ""Object Graph Navigation Library"", but see the language [[Language:OGNL]]

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Reflection technology]]
* [[sameAs::http://commons.apache.org/ognl/]]
* ",2013-06-12 15:01:50.413,2017-07-04 13:47:30.740134
Technology,ORO,"== Headline ==

(a retired Jakarta project for) a text processing library for Java

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://jakarta.apache.org/oro/]]
* ",2013-06-12 15:01:50.715,2017-07-04 13:47:30.752245
Technology,OSCache,"== Headline ==

a framework for caching content in web applications

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://en.wikipedia.org/wiki/OSCache]]
* [[relatesTo::http://www.opensymphony.com/oscache/]]
* ",2013-06-12 15:01:51.079,2017-07-04 13:47:30.765096
Technology,Object Streams,"== Intent ==

Classes of of the [[Technology:Java SE]] for I/O for objects

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://download.oracle.com/javase/tutorial/essential/io/objectstreams.html]]
* ",2013-06-12 15:01:51.391,2017-07-04 13:47:30.777938
Technology,OpenCOBOL,"== Intent ==

== Installation ==

There is an [http://www.opencobol.org/modules/bwiki/index.php?InstallGuide installation guide] available.

[[101contributor:Ralf Lämmel]] adds the following:

* You need GNU MP (libgmp). It works with [http://ftp.gnu.org/gnu/libtool/libtool-2.4.tar.gz].
* You need GNU Libtool (libltdl). It works with [ftp://ftp.gmplib.org/pub/gmp-5.0.1/gmp-5.0.1.tar.bz2].
* Berkley DB is not optional if you want indexed files. It works with [http://freshmeat.net/projects/berkeleydb/] (Version 5.1.19).

You should make sure that ''configure'' install Berkley DB in <nowiki>/usr/local</nowiki>.

== Metadata ==
* [[sameAs::http://www.opencobol.org]]
* ",2013-06-12 15:01:51.696,2017-07-04 13:47:30.804642
Technology,POI,"== Headline ==

(an Apache project for) a Java API for Microsoft documents

== Metadata ==
* [[instanceOf::API]]
* [[sameAs::http://poi.apache.org/]]
* ",2013-06-12 15:01:52.311,2017-07-04 13:47:30.835216
Technology,Pharo,"== Intent ==

An open-source [[Language:Smalltalk]] environment

== Links ==

* [http://www.pharo-project.org/home Project home page]
* [http://en.wikipedia.org/wiki/Pharo Wikipedia]
== Metadata ==
* ",2013-06-12 15:01:52.879,2017-07-04 13:47:31.176444
Technology,Phusion Passenger,"== Headline ==

A web server and an application server

== Details ==

Phusion Passenger supports [[Language:Ruby]] (Rack), [[Language:Python]] (WSGI), and Node.js.

There are these modes:
* Passenger nginx module based on [[Nginx module specification]]
* Usage with Apache based on [[Apache module specification]]
* Usage standalone

== Metadata ==

* [[instanceOf::Web server]]
* [[supports::Language:Ruby]]
* [[supports::Language:Python]]
* [[relatesTo::http://www.modrails.com/documentation/Users%20guide%20Standalone.html]]
",2013-06-12 15:01:53.141,2017-07-04 13:47:31.205339
Technology,Rebar,"== Intent ==

an Erlang build tool that makes it easy to compile and test Erlang applications, port drivers and releases

== Metadata ==
* [[sameAs::https://bitbucket.org/basho/rebar/wiki/Home]]
* [[relatesTo::https://github.com/basho/rebar]]
* ",2013-06-12 15:01:55.696,2017-07-04 13:47:31.718712
Technology,Plexus XML,"== Headline ==

XML utilities of org.codehaus.plexus

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://plexus.codehaus.org/plexus-utils/apidocs/org/codehaus/plexus/util/xml/package-summary.html]]
* ",2013-06-12 15:01:53.437,2017-07-04 13:47:31.225254
Technology,Pyjamas,"== Intent ==

A [[Language:Python]]-[[Web-application framework]] for [[Language:JavaScript]]-[[Web application|web applications]]

== Description ==

Pyjamas provides a [[Language:Python]]-to-[[Language:JavaScript]] [[Compiler|compiler]], and many other components including [[Ajax]] and a widget-set library. It is based on the idea of the [[Technology:GWT]], which is creating JavaScript web applications without programming JavaScript code <cite>Pyjamas2012official</cite>.

== Languages ==

* [[Language:Python]]
* [[Language:CSS]]

== Technologies ==

* [[Technology:DOM]]
* [[Technology:XMLHttpRequest]]

== Metadata ==
* [[sameAs::http://seamframework.org/]]
* ",2013-06-12 15:01:53.736,2017-07-04 13:47:31.268325
Technology,RMI-IIOP,"== Headline ==

an API for providing CORBA capabilities in a Java environment

== Metadata ==
* [[instanceOf::API]]
* [[instanceOf::Network technology]]
* [[sameAs::http://en.wikipedia.org/wiki/RMI-IIOP]]
* [[relatesTo::http://docs.oracle.com/javase/7/docs/api/javax/rmi/package-summary.html]]
* ",2013-06-12 15:01:54.882,2017-07-04 13:47:31.687354
Technology,Rails template engine,"== Headline ==

Template engine of  [[partOf :: Technology:Ruby_on_Rails]]
== Metadata ==
*
",2013-06-12 15:01:55.122,2017-07-04 13:47:31.696774
Technology,Rake,"== Headline ==

A build automation tool for [[Language:Ruby|]]

== Metadata ==

* [[instanceOf::Build tool]]
* [[sameAs::http://en.wikipedia.org/wiki/Rake_(software)]]

",2013-06-12 15:01:55.396,2017-07-04 13:47:31.708486
Technology,Rhino,"== Headline ==

[[Language:JavaScript]] for [[Language:Java]]

== Metadata ==
* [[instanceOf::Language implementation]]
* [[sameAs::http://www.mozilla.org/rhino/]]
* ",2013-06-12 15:01:55.997,2017-07-04 13:47:31.732431
Technology,SAX,"== Intent ==

a simple API for [[push-based XML parsing]]

== Discussion ==

SAX is an API for [[push-based XML parsing]].

That is, SAX allows one to process serialized XML content by [[streaming]] in a specific manner.

A Java-based implementation of SAX is part of [[Technology:JAXP]].

== Headline ==

an event-based sequential access parser API developed for XML processing in Java

== Metadata ==
* [[instanceOf::XML processor]]
* [[relatesTo::http://en.wikipedia.org/wiki/Simple_API_for_XML]]
* [[sameAs::http://sax.sourceforge.net SourceForge]]
* [[relatesTo::http://www.saxproject.org/apidoc/org/xml/sax/package-summary.html JavaDoc]]
*
* [[facilitates::XML processing]]",2013-06-12 15:01:56.678,2017-07-04 13:47:31.821803
Technology,SLF4J,"== Headline ==

a simple facade for various logging frameworks

== Description ==

SLF4J stands for Simple Logging Facade for Java.

== Metadata ==
* [[instanceOf::API]]
* [[sameAs::http://www.slf4j.org/]]
* [[relatesTo::http://www.slf4j.org/api/org/slf4j/package-summary.html]]
* ",2013-06-12 15:01:56.974,2017-07-04 13:47:31.840102
Technology,SQL Server,"== Intent ==

a relational model database server from Microsoft

== Description ==

Full name is ""Microsoft SQL Server""

== Spaces ==

* [[Relationalware]]

== Links ==

*[[http://en.wikipedia.org/wiki/Microsoft_SQL_Server Wikipedia]]



== Metadata ==
* [[instanceOf::DBMS]]
* ",2013-06-12 15:01:57.274,2017-07-04 13:47:31.86964
Technology,SVN,"== Headline ==

A revision control tool

== Metadata ==
* [[instanceOf::Revision control tool]]
* [[sameAs::http://en.wikipedia.org/wiki/Apache_Subversion]]
* ",2013-06-12 15:01:57.585,2017-07-04 13:47:31.881926
Technology,Safari,"== Intent ==

Apple's Web browser

== Metadata ==
* [[instanceOf::Web browser]]
* [[relatesTo::http://en.wikipedia.org/wiki/Safari_web_browser]]
* [[sameAs::http://www.apple.com/safari/]]
* ",2013-06-12 15:01:57.892,2017-07-04 13:47:31.894068
Technology,Seam,"== Intent ==

A [[Technology:Java EE]] based [[Web-application framework|web-application framework]]

== Description ==

[[Technology:JBoss Application Server|JBoss]] Seam is an [[Technology:JSF]] based [[Ajax]] [[Web-application framework|web-application framework]] for the development of rich [[Web application|web applications]] in [[Language:Java]]. It is based on a [[Three-tier architecture|three-tier architecture]], where the presentation layer is handled by JSF <cite>SeamF2012official</cite>.

== Languages ==

* [[Language:Java]]
* [[Language:JavaScript]] (generated)
* [[Language:XHTML]]
* [[Language:HQL]]

== Technologies ==

* [[Technology:JBoss Application Server]]
* [[Technology:EJB]]
* [[Technology:JSF]]
* [[Technology:JPA]]
* [[Technology:Hibernate]]

== Metadata ==
* [[instanceOf::Web-application framework]]
* [[sameAs::http://seamframework.org/]]
* ",2013-06-12 15:01:58.554,2017-07-04 13:47:31.961647
Technology,Seaside,"== Intent ==

A framework for building web-applications in [[Language:Smalltalk]]

== Links ==

* [http://www.seaside.st/ Project home page]
* [http://en.wikipedia.org/wiki/Seaside_(software) Wikipedia]
== Metadata ==
* ",2013-06-12 15:01:58.815,2017-07-04 13:47:31.977707
Technology,Semantic MediaWiki,"== Headline ==

A [[Technology:MediaWiki]] extension for Semantic Web-related efforts

== Metadata ==

* [[sameAs::http://semantic-mediawiki.org/]]
* [[instanceOf::Wiki software]]
* ",2013-06-12 15:01:59.076,2017-07-04 13:47:31.99069
Technology,Servlet API,"== Intent ==

A [[Technology:Java EE]] [[API]] for responding ([[Technology:HTTP]]-)requests

== Metadata ==
* [[instanceOf::API]]
* [[sameAs::http://en.wikipedia.org/wiki/Servlet]]
* [[relatesTo::http://java.sun.com/j2ee/tutorial/1_3-fcs/doc/Servlets2.html#75087]]
* ",2013-06-12 15:01:59.349,2017-07-04 13:47:32.005936
Technology,Silverlight,"== Intent ==

A [[Web-application framework]] and a [[Web browser|web browser]] [[Plugin|plugin]] for interactive [[user interface]]s

== Discussion ==

Silverlight supports the development of rich-internet applications with focus on [[user interface]] and animations<cite>Silverlight2012Official</cite>.

== Metadata ==
* [[instanceOf::Web-application framework]]
* [[sameAs::http://www.silverlight.net/]]
* [[relatesTo::http://en.wikipedia.org/wiki/Microsoft_Silverlight]]
* ",2013-06-12 15:01:59.66,2017-07-04 13:47:32.029092
Technology,Smack,"== Headline ==

an Open Source, Java-based XMPP (Jabber) client library for instant messaging and presence

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Messaging technology]]
* [[sameAs::http://www.igniterealtime.org/projects/smack/]]
* ",2013-06-12 15:01:59.964,2017-07-04 13:47:32.044318
Technology,Spring,"== Headline ==

an application development framework for Java

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://www.springsource.org/]]
* [[relatesTo::http://en.wikipedia.org/wiki/Spring_Framework]]
* ",2013-06-12 15:02:00.278,2017-07-04 13:47:32.056944
Technology,SQLite,"== Intent ==

a library, implementing a relational model database server

== Spaces ==

* [[Relationalware]]

== Links ==

* http://www.sqlite.org/

== Metadata ==

* [[instanceOf::DBMS]]

",2013-06-12 15:02:00.635,2017-07-04 13:47:32.074604
Technology,Struts,"== Intent ==

A [[Language:Java]]-based [[Web-application framework]] with [[Technology:JSP]] and [[Technology:Servlet API|Servlets]]

== Description ==

Apache Struts is a [[Web-application framework|web-application framework]] highly dedicated to [[MVC]]. It affects every component of MVC, is it the view ([[Technology:JSP]]), the controller ([[Language:Java]] actions in combination with the [[Technology:Servlet API]]) or the model (Java services). Apache Struts supports [[Ajax]] as well as [[REST]] and [[SOAP]] <cite>ApacheStruts2012official</cite>.

== Languages ==

* [[Language:Java]]
* [[Language:JavaScript]]
* [[Language:XML]]
* [[Language:HTML]]

== Technologies ==

* [[Technology:JSP]]
* [[Technology:Servlet API]]

== Concepts ==
* [[REST]]
* [[SOAP]]

== Metadata ==
* [[instanceOf::Web-application framework]]
* [[sameAs::http://struts.apache.org/ Apache]]
* ",2013-06-12 15:02:00.951,2017-07-04 13:47:32.151363
Technology,W3CValidator,"== Headline ==

A validator for multiple W3C languages

== Description ==

W3CValidator is a [[101technology]]; it uses the online validators that are provided by the W3C to validate several languages. The online validators can validate CSS, HTML, XHTML, SVG and MathML. The W3CValidator distinguishes the different languages by the language extension of the input file and calls the corresponding online validator. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure.

== Contributors ==

* {{101contributor|Martin Leinberger|developer}}
* {{101contributor|Ralf Lämmel|author}}




== Metadata ==
* [[instanceOf::Validator]]
* [[instanceOf::@technology]]
* [[sameAs::https://github.com/101companies/101repo/tree/master/technologies/W3CValidator]]
* ",2013-06-12 15:02:02.766,2017-07-04 13:47:32.260618
Technology,Swing,"== Headline ==

Java's primary primary GUI library

== Description ==

See also the major package [[Java:javax.swing]] of the library.

Note that [http://www.iam.ubc.ca/guides/javatut99/uiswing/start/_packagename.html package naming] varies considerably for Swing versions.

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://en.wikipedia.org/wiki/Swing_(Java)]]
* ",2013-06-12 15:02:01.268,2017-07-04 13:47:32.173436
Technology,TCP,"==Intent==

a [[Communications protocol]] for message exchange in network communication

==Description==

The Transmission Control Protocol is the major [[Term:Transport layer|transport layer]] [[Communications protocol|protocol]] for data transfer in computer [[Term:Network|networks]].

== Metadata ==
* [[instanceOf::Communications protocol]]
* [[sameAs::http://en.wikipedia.org/wiki/Transmission_Control_Protocol]]
* ",2013-06-12 15:02:01.542,2017-07-04 13:47:32.193009
Technology,Tidy,"== Headline ==

a utility for tiding up HTML

== Description ==

JDT stands for Java Development Tools.

== Metadata ==
* [[instanceOf::Markup technology]]
* [[sameAs::http://www.w3.org/People/Raggett/tidy/]]
* [[relatesTo::http://tidy.sourceforge.net/]]
* ",2013-06-12 15:02:01.84,2017-07-04 13:47:32.208875
Technology,Velocity,"== Headline ==

(an Apache project on) a template engine
== Metadata ==

* [[instanceOf::Template engine]]
* [[sameAs::http://velocity.apache.org/]]
",2013-06-12 15:02:02.137,2017-07-04 13:47:32.219706
Technology,Visual Studio,"

== Metadata ==
* [[instanceOf::IDE]]
* ",2013-06-12 15:02:02.41,2017-07-04 13:47:32.227102
Technology,WPF,"== Links ==
*[http://en.wikipedia.org/wiki/Windows_Presentation_Foundation Wikipedia]
*[http://msdn.microsoft.com/en-us/library/ms754130.aspx MSDN]
== Metadata ==
* ",2013-06-12 15:02:03.892,2017-07-04 13:47:32.315243
Technology,Web storage,"== Intent ==

A [[Language:JavaScript]] [[API]] for [[Client|client]] side data storage in the [[Language:HTML5]] ecosystem

== Discussion ==

There are four major differences in behaviour between [[cookie]]s and Web storage <cite>W3C2012WS, MSDN2012WS</cite>, which are shown within this implementation:

* the Web storage offers a largely enhanced amount of data (up to 5MB-10MB for web storage, 4KB for cookies),
* there is no need to use special parameters within the pages' URL to refer to a cookie with the required data,
* the [[Client|client]] does not need to transmit data to the [[Server|server]] with every request,
* and the data within Web storage never expires, if there is no explicit command to do so.

== Metadata ==
* [[instanceOf::API]]
* [[sameAs::http://en.wikipedia.org/wiki/Web_storage]]
* [[relatesTo::http://www.w3.org/TR/webstorage/]]
* [[relatesTo::http://msdn.microsoft.com/en-us/library/cc197062%28VS.85%29.aspx]]
* ",2013-06-12 15:02:04.209,2017-07-04 13:47:32.350121
Technology,XA,"== Headline ==

an X/Open group standard for distributed transactions

== Description ==

XA stands for ""eXtended Architecture"".


== Metadata ==
* [[instanceOf::Data technology]]
* [[sameAs::http://en.wikipedia.org/wiki/X/Open_XA]]
* ",2013-06-12 15:02:04.512,2017-07-04 13:47:32.366257
Technology,XAMPP,"== Headline ==

A cross-plattform open-source [[Web server]] package for local [[Web programming]]

== Description ==

XAMPP packages the following components:
* an [[Technology:Apache HTTP Server]],
* a [[Technology:MySQL]] [[DBMS]],
* a [[Language:PHP]] [[interpreter]], and
* a [[Language:Perl]] [[interpreter]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Xampp]]
* [[sameAs::http://www.apachefriends.org/en/xampp.html]]
* ",2013-06-12 15:02:04.819,2017-07-04 13:47:32.390413
Technology,XOM,"== Intent ==

an [[API|API]] ([[API implementation|implementation]]) for tree-based XML processing

== Links ==

* [http://www.xom.nu/ XOM home page]



== Metadata ==
* [[instanceOf::API implementation]]
* ",2013-06-12 15:02:06.884,2017-07-04 13:47:32.575705
Technology,XMLHttpRequest,"== Intent ==

a [[Language:JavaScript]] [[API]] for [[Technology:HTTP]]-Requests
== Discussion ==

XMLHttpRequest is an [[API]] for transfering any data over [[Technology:HTTP]]. Most commonly it is used in combination with message formats like [[Language:XML]] or [[Language:JSON]] <cite>W3C2012XMLHttpRequest</cite>.
== Metadata ==

* [[instanceOf::API]]
* [[sameAs::http://www.w3.org/TR/XMLHttpRequest/]]
",2013-06-12 15:02:05.181,2017-07-04 13:47:32.415376
Technology,XMLStreamWriter,"== Intent ==

a [[Language:Java]] [[API]] for writing [[Language:XML]]

== Metadata ==
* [[instanceOf::API]]
* [[sameAs::http://download.oracle.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html]]
* ",2013-06-12 15:02:05.487,2017-07-04 13:47:32.433596
Technology,jQuery,"== Intent ==

a free open-source [[Language:JavaScript|javaScript]] [[Library|library]] for [[Technology:DOM]] manipulation

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://de.wikipedia.org/wiki/JQuery]]
* ",2013-06-12 15:02:13.235,2017-07-04 13:47:33.093984
Technology,XMLValidator,"== Headline ==

A validator for [[Language:XML]]

== Description ==

XMLValidator is a [[101technology]]; it is a XML-specific validator. XMLValidator relies on System.Xml API to report errors in the XML document. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure.

== Usage ==

To build and execute the validator, you need to have Mono SDK (2.10 +) installed.
Use 'make build' to build the project.

== Contributors ==

* {{101contributor|Andrei Varanovich|developer}}


== Metadata ==
* [[instanceOf::Validator]]
* [[instanceOf::@technology]]
* [[relatesTo::https://github.com/101companies/101repo/tree/master/technologies/XMLValidator]]
* ",2013-06-12 15:02:05.754,2017-07-04 13:47:32.470974
Technology,XML pickler,"== Headline ==

An [[XML data binding]] technology for [[Language:Haskell]]

== Discussion ==

XML picklers come with the [[Technology:HXT|Haskell XML Toolbox]]. They allow one to ""pickle"" values of an [[algebraic data type]] to [[Language:XML]] data, and ""unpickle"" this data back to Haskell values <cite>haskellWikiHX</cite>. Both transformations are realized by using [[arrow]]s:

<syntaxhighlight lang=""haskell"">
xunpickleDocument :: PU a -> SysConfigList -> String -> IOStateArrow s b a
</syntaxhighlight>

That is, given a pickler <syntaxhighlight lang=""haskell"" enclose=""none"">PU a</syntaxhighlight> for a datatype <syntaxhighlight lang=""haskell"" enclose=""none"">a</syntaxhighlight>, a configuration list and a filename this function returns a stateful I/O arrow. This is an arrow from an arbitrary type <syntaxhighlight lang=""haskell"" enclose=""none"">b</syntaxhighlight> to the type in question <syntaxhighlight lang=""haskell"" enclose=""none"">a</syntaxhighlight>.

== Metadata ==
* [[relatesTo::http://www.haskell.org/haskellwiki/HXT/Conversion_of_Haskell_data_from/to_XML]]
* ",2013-06-12 15:02:06.6,2017-07-04 13:47:32.558133
Concept,Parse tree,"== Headline ==

Another term for [[syntax tree]]
",2014-07-16 07:27:10.153,2017-07-04 13:47:58.467781
Technology,XSDValidator,"== Headline ==

A validator for [[Language:XSD]]

== Description ==

XSDValidator is a [[101technology]]; it is a XSD-specific validator. XSDValidator relies on System.Xml.Schema API to parse the file and report the errors discovered. Zero exit code is to be interpreted as successful validation; non-zero exit code as failure.

== Usage ==

To build and execute the validator, you need to have Mono SDK (2.10 +) installed.
Use 'make build' to build the project.

== Contributors ==

* {{101contributor|Andrei Varanovich|developer}}




== Metadata ==
* [[instanceOf::Validator]]
* [[instanceOf::@technology]]
* [[sameAs::https://github.com/101companies/101repo/tree/master/technologies/XSDValidator]]
* ",2013-06-12 15:02:07.17,2017-07-04 13:47:32.614923
Technology,XStream,"== Headline ==

a library for [[XML serialization]]


== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://xstream.codehaus.org/]]
* ",2013-06-12 15:02:07.484,2017-07-04 13:47:32.628464
Technology,Xalan-Java,"== Intent ==

implementations of [[Language:XPath]] and [[Language:XSLT]] languages and [[Technology:JAXP]] interfaces

== Metadata ==
* [[instanceOf::API implementation]]
* [[instanceOf::Language implementation]]
* [[sameAs::http://xml.apache.org/xalan-j]]
* ",2013-06-12 15:02:07.866,2017-07-04 13:47:32.644555
Technology,XmlFragmentLocator,"== Headline ==

an XPath-based fragment locator for XML

== Description ==

XmlFragmentLocator is a part of the [[101companies:Explorer]]; it is a XPath-based, XML-specific tool for fragment location. That is, the technology supports the XPath-based location of a fragment in an XML document. The input/output behavior of XmlFragmentLocator is the following:

* Input:
** an XML document
** an XPath-based fragment description
* Output:
** the line range of the located XML fragment

XmlFragmentLocator leverages XPath for the description of fragments and it uses JSON for representing the derived line ranges. Consider, for example, the following XML document (which is, in fact, an XML schema):

<pre>
<xs:schema xmlns=""http://www.softlang.org/company.xsd"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" elementFormDefault=""qualified"" targetNamespace=""http://www.softlang.org/company.xsd"">

 <xs:element name=""company"">
  <xs:complexType>
   <xs:sequence>
    <xs:element ref=""name""/>
    <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""department""/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>

 <xs:element name=""department"">
  <xs:complexType>
   <xs:sequence>
    <xs:element ref=""name""/>
    <xs:element name=""manager"" type=""employee""/>
    <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""department""/>
    <xs:element maxOccurs=""unbounded"" minOccurs=""0"" name=""employee"" type=""employee""/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>

 <xs:complexType name=""employee"">
  <xs:sequence>
   <xs:element ref=""name""/>
   <xs:element ref=""address""/>
   <xs:element ref=""salary""/>
  </xs:sequence>
 </xs:complexType>

 <xs:element name=""name"" type=""xs:string""/>
 <xs:element name=""address"" type=""xs:string""/>
 <xs:element name=""salary"" type=""xs:double""/>
</xs:schema>
</pre>

The following XPath expression locates the element declaration with name ""department"":

<pre>
/xs:schema/xs:element[@name='department']
</pre>

The line range for the located fragment is this:

<pre>
{""from"":13,""to"":22}
</pre>

XPath expressions for fragment descriptions are supposed to make proper use of namespace-qualified names; see ""xs:schema"" and ""xs:element"". To simplify the use of XML namespaces, the top-level prefix declarations of the input document are extracted and made available during the evaluation of the XPath expression. In this manner, in practice, no namespaces need to be specified, but instead the prefixes of the underlying document are to be used; see ""xs"" in the example.

The following situations may be encountered in fragment location:

* The XPath expression evaluates to a single XML element node. In this case, the ""from"" line should be the line of the start tag of the identified element; the ""to"" line should be the line of the end tag of the identified element.
* The XPath expression evaluates to a non-empty sequence of XML elements. For simplicity, it is assumed here that the sequence is readily in document order. (Without this assumption, the following convention is less useful.) In this case, the ""from"" line should be the line of the start tag of the first element in the sequence; the ""to"" line should be the line of the end tag of the last element in the sequence.
* In all other cases, fragment location is defined to be unsuccessful.

== See Also ==

* The [[101companies:Explorer]]

== Contributors ==

* {{101contributor|Ralf Lämmel|author}}
* {{101contributor|Martin Leinberger|developer}}




== Metadata ==
* [[instanceOf::Fragment locator]]
* [[instanceOf::@technology]]
* [[sameAs::https://github.com/101companies/101repo/tree/master/technologies/XmlFragmentLocator]]
* [[relatesTo::http://blog.davber.com/2006/09/17/xpath-with-namespaces-in-java/]]
* ",2013-06-12 15:02:08.231,2017-07-04 13:47:32.786105
Technology,XmlReader,"== Intent ==

XmlReader is an API for [[Technology:.NET]] provides forward-only, read-only access to a stream of XML data.

== Links ==

* [http://msdn.microsoft.com/en-us/library/aa720470(v=VS.71).aspx MSDN]
== Metadata ==
* ",2013-06-12 15:02:08.51,2017-07-04 13:47:32.805588
Technology,Zend framework,"== Intent ==

An [[MVC]] framework for [[web programming]] with [[Language:PHP]]

== Description ==

Zend framework is one of the most popular [[Web-application framework|web-application frameworks]] for [[Language:PHP]]. It offers a good infrastructure based on the [[MVC]] pattern and an amount of component libraries supporting [[Web application|web application]] development <cite>Zend2012official, FC2011ZendArcBlog</cite>.

== Languages ==

* [[Language:PHP]]
* [[Language:HTML]]
* [[Language:CSS]]

== Concepts ==

* [[REST]]
* [[SOAP]]

== Metadata ==
* [[instanceOf::Web-application framework]]
* [[sameAs::http://framework.zend.com/]]
* [[relatesTo::http://blog.fedecarg.com/2008/07/28/zend-framework-architecture/]]
*
* [[facilitates::REST]]
* [[facilitates::SOAP]]",2013-06-12 15:02:09.102,2017-07-04 13:47:32.882788
Technology,ajc,"== Intent ==

the [[Language:AspectJ]] compiler as part of [[Technology:AJDT]]

== Spaces ==

* [[Objectware]]



== Metadata ==
* [[instanceOf::Compiler]]
* ",2013-06-12 15:02:09.374,2017-07-04 13:47:32.900161
Technology,basename,"== Headline ==

A standard UNIX program for filename processing

== Details ==

See also [[Technology:dirname]].

== Metadata ==
* [[instanceOf::Technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Basename]]
* ",2013-06-12 15:02:09.754,2017-07-04 13:47:32.915533
Technology,dojo,"== Headline ==

A toolkit for [[Language:JavaScript]] programming

== Metadata ==

* [[sameAs::http://dojotoolkit.org/]]
* [[uses::Language:JavaScript]]
* ",2013-06-12 15:02:11.105,2017-07-04 13:47:32.990466
Technology,com.apple.eawt,"== Headline ==

Java extensions by Apple

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::https://developer.apple.com/library/mac/documentation/Java/Reference/1.5.0/appledoc/api/com/apple/eawt/package-summary.html]]
* ",2013-06-12 15:02:10.017,2017-07-04 13:47:32.931406
Technology,com.sun.image.codec.jpeg,"== Headline ==

Classes for encoding and decoding [[Language:JPEG]] images

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/1.5.0/docs/guide/2d/api-jpeg/com/sun/image/codec/jpeg/package-summary.html]]
* ",2013-06-12 15:02:10.289,2017-07-04 13:47:32.95021
Technology,java.io,"== Headline ==

Java's I/O framework

== Metadata ==

* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/io/package-summary.html]]
* ",2013-06-12 15:02:13.496,2017-07-04 13:47:33.108697
Technology,csc.exe,"== Intent ==
The [[:Language:CSharp|C#]] compiler as part of the [[:Technology:.NET|.NET]] Framework



== Metadata ==
* [[instanceOf::Compiler]]
* ",2013-06-12 15:02:10.547,2017-07-04 13:47:32.962829
Technology,dirname,"== Headline ==

A standard UNIX program for filename processing

== Details ==

See also [[Technology:basename]].

== Metadata ==
* [[instanceOf::Technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Dirname]]
* ",2013-06-12 15:02:10.849,2017-07-04 13:47:32.978076
Technology,dom4j,"== Intent ==

an [[API|API]] ([[API implementation|implementation]]) for tree-based XML processing

== Links ==

* [http://dom4j.sourceforge.net/ sourceforge]



== Metadata ==
* [[instanceOf::API implementation]]
* ",2013-06-12 15:02:11.381,2017-07-04 13:47:33.010363
Technology,eRuby,"== Headline ==

a templating engine that embeds [[Language:Ruby]] into a text document.




== Metadata ==
* [[instanceOf::Templating engine]]
* ",2013-06-12 15:02:11.656,2017-07-04 13:47:33.021428
Technology,fcs.exe,"== Intent ==

The [[:Language:FSharp|F#]] compiler as part of the [[:Technology:.NET|.NET]] Framework



== Metadata ==
* [[instanceOf::Compiler]]
* ",2013-06-12 15:02:11.923,2017-07-04 13:47:33.032605
Technology,gnu.regexp,"== Headline ==

a Java library for regular expression matching

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://nlp.stanford.edu/nlp/javadoc/gnu-regexp-docs/]]
* [[relatesTo::http://nlp.stanford.edu/nlp/javadoc/gnu-regexp-docs/api/index.html]]
* ",2013-06-12 15:02:12.313,2017-07-04 13:47:33.048529
Technology,gzip,"== Headline ==

A compression and decompression technology

== Details ==

[[Language:gzip]] is also the name of a format (language) for compression and decompression.

== Metadata ==
* [[instanceOf::Technology]]
* [[sameAs::http://en.wikipedia.org/wiki/Gzip]]
* ",2013-06-12 15:02:12.632,2017-07-04 13:47:33.064007
Technology,iText,"== Headline ==

a library for creation and manipulation of PDF documents

== Description ==

iText is available in [[Language:Java]] as well as in [[Language:CSharp|C#]].

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://itextpdf.com/]]
* ",2013-06-12 15:02:12.937,2017-07-04 13:47:33.080321
Technology,java.lang,"== Headline ==

the fundamental Java library


== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/lang/package-summary.html]]
* ",2013-06-12 15:02:13.806,2017-07-04 13:47:33.122795
Technology,java.lang.management,"== Headline ==

the API for monitoring and managing the JVM and other components in the Java runtime

== Metadata ==
* [[instanceOf::API]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/lang/management/package-summary.html]]
* ",2013-06-12 15:02:14.134,2017-07-04 13:47:33.138047
Technology,java.lang.ref,"== Headline ==

the Java library for reference objects for interaction with the garbage collector

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/lang/ref/package-summary.html]]
* ",2013-06-12 15:02:14.522,2017-07-04 13:47:33.153624
Technology,java.lang.reflect,"== Headline ==

Java's [[reflection]] API

== Metadata ==

* [[instanceOf::API]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/package-summary.html]]
* [[relatesTo::https://github.com/101companies/101repo/tree/master/technologies/Java_platform/samples/javaReflectionSamples]]
* ",2013-06-12 15:02:14.837,2017-07-04 13:47:33.170653
Technology,java.util.jar,"== Headline ==

Java library for the JAR format

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/util/jar/package-summary.html]]
* ",2013-06-12 15:02:17.663,2017-07-04 13:47:33.342143
Technology,java.math,"== Headline ==

Java library for arbitrary precision arithmetic

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/math/package-summary.html]]
* ",2013-06-12 15:02:15.099,2017-07-04 13:47:33.185581
Theme,Haskell genericity,"== Headline ==

Varying [[generic programming]] approaches in [[Language:Haskell|]]

== Description ==

There are different classes of [[generic programming]]. The present theme is concerned with the class of generic programming that involves data type-polymorphic functions such that the functions can be applied to data of different types as, for example, in the case of the ""[[Scrap your boilerplate]]"" style of generic programming. The present theme is focused on different generic programming styles as they exist for [[Language:Haskell]]. Certain [[Namespace:Feature|features]] of the [[system:Company]] are particularly relevant for the present theme. These are the features for cutting and totaling salaries as they illustrate the need for data transformations and queries that may need to fully traverse compound data while only some details of such data (i.e., salaries) are conceptually relevant. Thus, [[Feature:Total]] and [[Feature:Cut]] make up the baseline set of features to be covered by any member contribution of this theme.

These are the members of the theme:

* [[Contribution:haskellSyb|haskellSyb]]: ""[[Scrap your boilerplate]]"" style
* [[Contribution:strafunski|strafunski]]: [[Strategic programming]]
* [[Contribution:haskellTree|haskellTree]]: [[Rose tree]]s for representation
* [[Contribution:tabaluga|tabaluga]]: [[Fold]]s for systems of data types

== Relationships ==

* See [[Theme:Scrap your boilerplate]] for a specific style of generic programming with Haskell coverage.

== Metadata ==


* [[relatesTo::Feature:Total]]
* [[relatesTo::Feature:Cut]]
*

",2013-06-12 15:02:25.52,2017-07-04 13:47:33.867331
Technology,java.net,"== Headline ==

Java's framework for networking applications

== Description ==

See also the package [[Java:javax.net]].

== Metadata ==

* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/net/package-summary.html]]
* ",2013-06-12 15:02:15.377,2017-07-04 13:47:33.20457
Technology,java.nio,"== Headline ==

A supplement of the Java package [[Java:java.io]]

== Metadata ==

* [[instanceOf::framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/nio/package-summary.html]]
* ",2013-06-12 15:02:15.655,2017-07-04 13:47:33.220829
Technology,java.rmi,"== Headline ==

The Java framework for [[RMI]]

== Metadata ==

* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/6/docs/api/java/rmi/package-summary.html]]
*

",2013-06-12 15:02:15.916,2017-07-04 13:47:33.2369
Technology,java.sql,"== Headline ==

The Java API for accessing and processing data stored in a data source

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/sql/package-summary.html]]
* ",2013-06-12 15:02:16.186,2017-07-04 13:47:33.252524
Theme,Haskell introduction,"== Headline ==

Introductory [[Language:Haskell|]]-based contributions

== Description ==

This theme collects the following relatively basic Haskell-based contributions:

* [[Contribution:haskellStarter|]]: Basics of functional programming
* [[Contribution:haskellEngineer|]]: Basics of software engineering
* [[Contribution:haskellList|]]: List processing with [[Map function|map]] and friends
* [[Contribution:haskellProfessional|]]: Idiomatic code for many features
* [[Contribution:haskellLambda|]]: [[Anonymous function]]s
* [[Contribution:haskellComposition|]]: Recursive [[algebraic data type]]s
* [[Contribution:haskellVariation|]]: Multiple [[constructor]]s per type
* [[Contribution:haskellMonoid|]]: Queries in [[Monoid|monoidal style]]
* [[Contribution:haskellLogging|]]: Logging in non-[[Monad|monadic]] style
* [[Contribution:haskellWriter|]]: Logging in [[Monad|monadic style]]
* [[Contribution:haskellParsec|]]: Parsing with the [[Technology:Parsec|]] library
* [[Contribution:haskellSyb|]]: Generic programming à la [[SYB]] style

== Relationships ==

There are further themes with Haskell-based contributions:
* [[Theme:Haskell potpourri]]: more advanced and diverse coverage of the Haskell ecosystem.
* [[Theme:Haskell data]]: mostly simply variations on data modeling in Haskell.
* [[Theme:Haskell genericity]]: different styles of generic functional programming in Haskell.

== Metadata ==
*

",2013-06-12 15:02:25.919,2017-07-04 13:47:33.932846
Technology,java.util,"== Headline ==

Miscellaneous Java libraries

== Description ==

java.util consists of the following sub-APIs:
* [[Technology:Java collections|Java's collection framework]]
* [[Technology:Java events|Java's event framework]]
* [[Technology:Java misc|""the rest of java.util""]]

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/util/package-summary.html]]
* ",2013-06-12 15:02:16.836,2017-07-04 13:47:33.292607
Technology,java.util.Scanner,"== Intent ==

a library for scanning text in [[Language:Java]]

== Metadata ==
* [[instanceOf::Library]]
* [[sameAs::http://download.oracle.com/javase/1.5.0/docs/api/java/util/Scanner.html]]
* ",2013-06-12 15:02:17.142,2017-07-04 13:47:33.306601
Technology,java.util.concurrent,"== Headline ==

Java library for concurrent programming

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-summary.html]]
* ",2013-06-12 15:02:17.403,2017-07-04 13:47:33.326473
Technology,java.util.logging,"== Headline ==

Java's core logging facilities

== Metadata ==

* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html]]
* ",2013-06-12 15:02:17.917,2017-07-04 13:47:33.356756
Technology,java.util.regex,"== Headline ==

A Java library for regular expression matching

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/util/regex/package-summary.html]]
* ",2013-06-12 15:02:18.174,2017-07-04 13:47:33.371419
Technology,java.util.zip,"== Headline ==

Java library for zip and gzip file formats

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/java/util/zip/package-summary.html]]
* ",2013-06-12 15:02:18.436,2017-07-04 13:47:33.38615
Technology,javax.imageio,"== Headline ==

The Java Image I/O API

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* ",2013-06-12 15:02:18.988,2017-07-04 13:47:33.423136
Vocabulary,Functional programming,"== Headline ==

[[Functional programming]] concepts

",2013-06-12 15:02:31.34,2017-07-04 13:47:34.408174
Technology,javax.jnlp,"== Headline ==

a framework starting applications over the web

== Description ==

This implementation also goes by the name ""Java Web Start"".

See also the [[Language:JNLP]] language for some background.

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://en.wikipedia.org/wiki/Java_Web_Start]]
* [[relatesTo::http://docs.oracle.com/javase/7/docs/jre/api/javaws/jnlp/]]
* ",2013-06-12 15:02:19.382,2017-07-04 13:47:33.441916
Technology,javax.net,"== Headline ==

Classes for Java networking applications

== Details ==

See also the package [[Technology:java.net]].

== Metadata ==

* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/api/javax/net/package-summary.html]]
* ",2013-06-12 15:02:19.651,2017-07-04 13:47:33.461429
Technology,javax.servlet,"== Headline ==

The servlet framework

== Metadata ==

* [[sameAs::http://docs.oracle.com/javaee/6/api/javax/servlet/package-summary.html]]
* [[instanceOf::Framework]]
* [[instanceOf::Java package]]
* ",2013-06-12 15:02:19.91,2017-07-04 13:47:33.475817
Technology,log4j,"== Headline ==

the Apache framework for logging in Java

== Metadata ==
* [[instanceOf::Framework]]
* [[sameAs::http://logging.apache.org/log4j/]]
* ",2013-06-12 15:02:20.22,2017-07-04 13:47:33.48713
Vocabulary,Haskell,"== Headline ==

[[Language:Haskell|]] concepts

",2013-06-12 15:02:31.603,2017-07-04 13:47:34.413425
Technology,Make,"== Headline ==

A build automation tool

== Details ==

''make'' is de-facto a name that could refer to different implementations.

One popular implementation of ''make'' is [[Technology:GNU make]].

== Metadata ==

* [[instanceOf::Build tool]]
* [[sameAs::http://en.wikipedia.org/wiki/Make (software)]]

",2013-06-12 15:02:20.531,2017-07-04 13:47:33.504048
Technology,megalib,"== Intent ==

megalib - php library to deal with strings, graphs, patterns, rdf, source code, etc.

== Metadata ==
* [[sameAs::https://github.com/megaplanet/megalib megaplanet/megalib]]
* ",2013-06-12 15:02:20.81,2017-07-04 13:47:33.513715
Technology,nginx,"== Headline ==

Web server
== Metadata ==

* [[instanceOf::Web server]]

",2013-06-12 15:02:21.091,2017-07-04 13:47:33.522659
Technology,org.htmlparser,"== Headline ==

An API for HTML parsing

== Metadata ==

* [[sameAs::http://htmlparser.sourceforge.net/javadoc/org/htmlparser/package-summary.html]]
* [[instanceOf::API]]
* ",2013-06-12 15:02:21.355,2017-07-04 13:47:33.533896
Technology,org.syntax.jedit,"== Headline ==

a syntax highlighting JavaBean

== Metadata ==
* [[instanceOf::Syntax highlighter]]
* [[sameAs::http://syntax.jedit.org/]]
* ",2013-06-12 15:02:21.666,2017-07-04 13:47:33.545039
Technology,sun.misc,"== Headline ==

a package private to Sun

== Metadata ==
* [[instanceOf::Library]]
* [[instanceOf::Java package]]
* ",2013-06-12 15:02:22.264,2017-07-04 13:47:33.570439
Technology,wxHaskell,"== Headline ==

A [[Technology:wxWidgets]]-based [[GUI]] [[library]] for [[Language:Haskell]]

== Discussion ==

The wxHaskell library is built on [[Technology:wxWidgets]] allowing one to implement portable GUI applications in [[Language:Haskell|Haskell]] <cite>leijenwxHaskell</cite>.

== Metadata ==
* [[instanceOf::Library]]
* [[relatesTo::http://doi.acm.org/10.1145/1017472.1017483]]
* ",2013-06-12 15:02:22.589,2017-07-04 13:47:33.592898
Technology,wxWidgets,"== Intent ==

a [[Language:C++|C++]] [[GUI]] [[Library|library]] supporting all major operating systems



== Metadata ==
* [[instanceOf::Library|library]]
* ",2013-06-12 15:02:22.842,2017-07-04 13:47:33.60663
Technology,xjc,"== Intent ==

the class generator of the [[Technology:JAXB]] technology for [[O/X mapping]] for the [[Technology:Java platform]]



== Metadata ==
* [[instanceOf::Program generator]]
* ",2013-06-12 15:02:23.131,2017-07-04 13:47:33.61936
Vocabulary,Information system,"== Headline ==

[[Information system]] concepts

",2013-06-12 15:02:31.876,2017-07-04 13:47:34.418601
Technology,xsltproc,"== Intent ==

a popular implementation of [[Language:XSLT]]



== Metadata ==
* [[instanceOf::Language implementation]]
* ",2013-06-12 15:02:23.838,2017-07-04 13:47:33.681261
Theme,ANTLR,"== Headline ==

Varying uses of [[Technology:ANTLR|]]

== Description ==

This theme collects [[101contribution]]s that involve [[Technology:ANTLR]] in different ways. ANTLR supports different kinds of grammars and different usage scenarios which are exercised by members of the theme. [[Contribution:antlrAcceptor]] describes a concrete syntax for companies; several of the other implementations can be viewed as enhancements. [[Contribution:antlrParser]] uses a global variable and semantic actions total salaries. [[Contribution:antlrObjects]] uses synthesized attributes to map concrete syntax to company objects using a straightforward object model adopted from [[Contribution:javaComposition]]. [[Contribution:antlrTrees]] constructs trees of the kind that can be than further processed by ANTLR-trees grammars. [[Contribution:antlrLexer]] demonstrates a more lexical approach by modeling and operating on a token stream as opposed to full concrete syntax. [[Contribution:gra2mol]], [[Contribution:xtext]], and [[Contribution:yapg]] deal with more advanced scenarios essentially involving ANTLR as the target for code generation.

== Metadata==

",2013-06-12 15:02:24.146,2017-07-04 13:47:33.711886
Theme,GUI programming,"== Headline ==

Varying [[GUI programming]] approaches

== Metadata ==

",2013-06-12 15:02:24.945,2017-07-04 13:47:33.74499
Theme,Haskell potpourri,"== Headline ==

A potpourri of [[Language:Haskell|]]-based contributions

== Description ==

This theme demonstrates [[Language:Haskell]]'s approach to several programming problems: [[concurrent programming]], [[database programming]], [[generic programming]], [[GUI programming]], [[logging]], [[parsing]], [[unparsing]], [[XML programming]], [[web programming]]. Some of the contributions nicely demonstrate some strengths and specifics of Haskell. This is true, arguably, for the contributions that illustrate [[XML programming]] and [[generic programming]]. Some other contributions are mainly included to provide coverage for important programming domains or problems without necessarily arguing that the Haskell-based approach is particularly interesting or attractive. This is true, for example, for the contribution that demonstrates GUI programming. Relatively mature and established technologies are demonstrated as opposed to research experiments.

The theme collects the following Haskell-based contributions:
* [[Contribution:haskellParsec|haskellParsec]]: Parsing with the [[Technology:Parsec|Parsec]] library
* [[Contribution:hughesPJ|hughesPJ]]: Unparsing with Text.PrettyPrint.HughesPJ
* [[Contribution:wxHaskell|wxHaskell]]: GUI programming with [[Technology:wxHaskell|wxHaskell]]
* [[Contribution:happstack|happstack]]: Web programming with [[Technology:Happstack|Happstack]]
* [[Contribution:haskellDB|haskellDB]]: Database programming with [[Technology:HaskellDB|HaskellDB]]
* [[Contribution:haskellHxt|hxt]]: XML programming with [[Technology:HXT|HXT]]
* [[Contribution:haskellWriter|writerMonad]]: Logging with the [[writer monad]]
* [[Contribution:mvar|mvar]]: Concurrent programming with [[MVar]]s
* [[Contribution:haskellSyb|haskellSyb]]: Generic programming in [[SYB]] style

== Relationships ==

There are further themes with Haskell-based contributions:
* [[Theme:Haskell introduction]]: basics of Haskell.
* [[Theme:Haskell data]]: mostly simply variations on data modeling in Haskell.
* [[Theme:Haskell genericity]]: different styles of generic functional programming in Haskell.

== Metadata ==
*

",2013-06-12 15:02:26.209,2017-07-04 13:47:34.008656
Theme,MDE,"== Headline ==

Demonstrations of [[model-driven engineering]]

== Description ==

Several aspects and flavors of developing of model-driven engineering components are exercised. In particular, [[Model to Model transformation]]s, [[Model to Text transformation]]s and [[Text to Model transformation]]s are exercised. Different styles of [[Model to Model transformation]], like the declarative style used by [[Language:ATL]] or the imperative style of [[Technology:EMF]] in [[Language:Java]] are considered. For [[Text to Model transformation]]s, the shown contributions rely on mapping  grammar elements on model elements.

== Current implementations ==

* [[Contribution:emfGenerative]]: This implementation uses [[Technology:Ecore]]-generated [[Language:Java]] classes to perform [[Model to Model transformation]]s in [[Language:Java]].
* [[Contribution:emfReflexive]]: This implementation uses the [[Technology:Ecore]] API to perform [[Model to Model transformation]]s in [[Language:Java]].
* [[Contribution:atl]]: This implementation uses [[Language:ATL]] to perform [[Model to Model transformation]]s.
* [[Contribution:atlPluginUsage]]: This implementation uses two [[ATL plugin]]s, [[Contribution:atlCutPlugin]] and [[Contribution:atlTotalPlugin]] to perform [[Model to Model transformation]]s
* [[Contribution:jgralab]]: Use of TGraphs with JGraLab to perform [[Model to Model transformation]]s in [[Language:Java]].
* [[Contribution:gra2mol]]: A [[Model to Text transformation]] with the gra2mol technology is demonstrated.
* [[Contribution:xtext]]: [[IDE Creation]] with the xtext technology are demonstrated.

== TODO ==

The theme is under construction. The following contributions are to be worked out:

* Alternatives for ATL: RubyTL, some GT languages.
* Implementations of [[Meta-level 101feature]] features with [[Technology:MoDisco]].
* Implementations around the openarchitectureware framework:
* Some technology to be determined for model-to-text.

== Metadata ==

* [[memberOf::Theme]]

",2013-06-12 15:02:26.833,2017-07-04 13:47:34.137339
Theme,Scrap your boilerplate,"== Headline ==

Demonstrations of [[SYB]] style of [[generic programming]]

== Description ==

The ""[[Scrap your boilerplate]]"" (SYB) style of generic programming was originally conceived in a [[Language:Haskell|Haskell]] context, but similar coding styles were subsequently proposed for other programming languages. In fact, even for Haskell alone, variations on SYB style were proposed. Accordingly, the present theme features contributions that exercise SYB style across different host languages. In some cases, these contributions actually include libraries that support SYB style for the host language at hand. Certain [[Namespace:Feature|features]] of the [[system:Company]] are particularly relevant for the present theme. These are the features for cutting and totaling salaries which actually have their origin in the SYB literature. Thus, [[Feature:Total]] and [[Feature:Cut]] make up the baseline set of features to be covered by any member contribution of this theme. Implementations of yet other features may benefit from SYB style, too.

There are the following members in the theme:

* [[Contribution:haskellSyb|]]: Illustration of SYB for [[Language:Haskell|]]
* [[Contribution:jsSyb|]]: Illustration of SYB for [[Language:JavaScript|]]
* [[Contribution:pythonSyb|]]: Illustration of SYB for [[Language:Python|]]
* [[Contribution:javaSyb|]]: Illustration of SYB for [[Language:Java|]]

== Relationships ==

* See [[Theme:Haskell genericity]] for other generic programming styles with only [[Language:Haskell|Haskell]]-based contributions.

== Metadata ==


* [[relatesTo::Feature:Total]]
* [[relatesTo::Feature:Cut]]
*

",2013-06-12 15:02:27.728,2017-07-04 13:47:34.257741
Theme,Starter,"== Headline ==

Very simple contributions across the board

== Metadata ==

",2013-06-12 15:02:28.071,2017-07-04 13:47:34.266813
Theme,Web programming,"== Headline ==

Demonstrations of [[web programming]]

== Description ==

There is a myriad of web-programming frameworks. This theme features implementations that demonstrate arguably the most established frameworks, while at the same time aiming at coverage of different languages and platforms. For instance, [[Technology:Silverlight]] may currently count as a major web-programming approach for the [[Technology:.NET]] platform, and hence, an implementation was included. Also, [[Language:PHP]] is generally popular for web development, and hence, an implementation based on the popular [[Technology:Pyjamas]] framework was included. As far as [[Language:Java]] is concerned, there are again, in turn, many different approaches and frameworks, and the goal was here to select a small number of different and popular approaches. Finally, in the case of [[Language:HTML5]], the two options of a local applications versus a client/server architecture is demonstrated.

",2013-06-12 15:02:28.628,2017-07-04 13:47:34.311166
Vocabulary,Data structure,"== Headline ==

[[Data structure]] concepts

",2013-06-12 15:02:30.844,2017-07-04 13:47:34.402916
Vocabulary,OO programming,"== Headline ==

[[OO programming]] concepts

",2013-06-12 15:02:32.759,2017-07-04 13:47:34.444636
Vocabulary,Programming,"== Headline ==

[[Programming]] concepts

",2013-06-12 15:02:33.031,2017-07-04 13:47:34.449762
Vocabulary,Programming theory,"== Headline ==

[[Programming theory]] concepts

",2013-06-12 15:02:33.313,2017-07-04 13:47:34.454843
Script,Aspect-oriented programming,"== Headline ==

[[Aspect-oriented programming]] in [[Language:AspectJ|]]

== Material ==

<media url=""http://www.slideshare.net/rlaemmel/aop-23146713""/>

== Concepts ==

* [[Joinpoint]]
* [[Pointcut]]
* [[Advice]]
* [[Crosscutting concern]]
* [[Intertype declarations]]

== Contributions ==

* [[Contribution:aspectJ]]

== Metadata ==

* [[instanceOf::Course:Programming in Koblenz]]
*

",2013-06-18 11:46:31.969,2017-07-04 13:47:38.456737
Script,Unparsing and parsing in Haskell,"== Headline ==

Lecture [[Script:Unparsing and parsing in Haskell | Parsing and unparsing]] as part of [[Course:Lambdas in Koblenz]]

== Description ==

Various data structures, e.g., term- or tree-based representations, can be rendered as text by means of [[unparsing]]. (Unparsing is very similar to what's called [[pretty printing]].) The other way around, the structure underlying some text can be recovered by means of [[parsing]]. In both cases, we assume some [[syntax]] for underlying a textual representation. This syntax can be also be made explicit in the form of [[grammar]]. We put suitable Haskell [[combinator library|combinator libraries]] to work for the implementation of [[unparser]]s and [[parser]]s.

== Concepts ==

* [[Combinator library]]
* [[Unparsing]]
* [[Pretty printing]]
* [[Unparser]]
* [[Recursive descent parser]]
* [[Syntax]]
* [[Grammar]]
* [[Parsing problem]]
* [[Parse tree]]
* [[Parsing]]
* [[Acceptor]]
* [[Parser]]
* [[Either type]]

== Technologies ==

* [[Technology:HughesPJ]]
* [[Technology:Parsec]]

== Features ==

* [[Feature:Unparsing]]
* [[Feature:Parsing]]

== Contributions ==

* [[Contribution:hughesPJ]]
* [[Contribution:haskellAcceptor]]
* [[Contribution:haskellParsec]]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Functors_and_friends]]


",2013-06-21 09:17:01.129,2017-07-04 13:47:38.582528
Script,Database programming,"== Headline ==

[[Database]] access with [[Technology:JDBC|]] and [[Technology:Hibernate|]]

== Material ==

<media url=""http://www.slideshare.net/rlaemmel/databases-23432756""/>

== Concepts ==

* [[Database]]
* [[Embedded SQL]]
* [[Persistence]]
* [[Mapping]]
* [[Object-Relational mapping]]

== Languages ==

* [[Language:Java|Java]]
* [[Language:SQL|SQL]]
* [[Language:HQL|HQL]]
* [[Language:XML|XML]]

== Technologies ==

* [[Technology:MySQL|MySQL]]
* [[Technology:Hibernate|Hibernate]]
* [[Technology:JDBC|JDBC]]

== Features ==

* [[Feature:Persistence]]
* [[Feature:Mapping]]
* [[Feature:Singleton]]

== Contributions ==

* [[Contribution:mySqlOne]]
* [[Contribution:mySqlMany]]
* [[Contribution:jdbc]]
* [[Contribution:hibernate]]

== Metadata ==

* [[instanceOf::Course:Programming in Koblenz]]
*

",2013-06-24 22:11:47.957,2017-07-04 13:47:45.091309
Concept,RMI,"== Headline ==

[[Remote method invocation]]

== Metadata ==

* [[carries::Tag:Abbreviation]]

",2013-06-30 13:44:51.767,2017-07-04 13:47:45.109854
Concept,RPC,"== Headline ==

[[Remote procedure call]]

== Metadata ==

* [[carries::Tag:Abbreviation]]

",2013-06-30 13:48:05.187,2017-07-04 13:47:45.140349
Script,Remote method invocation,"== Headline ==

A lecture on [[RMI]]-based [[distribution]] as part of the [[Course:Programming in Koblenz]]

== Material ==

<media url=""http://www.slideshare.net/rlaemmel/rmi-23850462""/>

== Concepts ==

* [[Distribution]]
* [[RMI]]
* [[Client]]
* [[Server]]

== Languages ==

* [[Language:Java|Java]]

== Features ==

* [[Feature:Distribution]]

== Contributions ==

* [[Contribution:javaRmi]]

== Metadata ==

* [[instanceOf::Course:Programming in Koblenz]]
* ",2013-06-30 22:24:58.296,2017-07-04 13:47:50.660895
Script,Data parallelism,"== Headline ==

[[Data parallelism]] with [[Technology:Hadoop|]]

== Material ==

Forthcoming.

== Concepts ==

* [[Data parallelism]]

== Languages ==

* [[Language:Java|Java]]

== Technologies ==

* [[Technology:Hadoop|Hadoop]]

== Features ==

* [[Feature:Data parallelism]]
* [[Feature:Flattened company]]

== Contributions ==

* [[Contribution:hadoop]]

== Metadata ==

* [[instanceOf::Course:Programming in Koblenz]]
*

",2013-06-30 23:11:41.317,2017-07-04 13:47:50.721348
Concept,Generalized fold,"== Headline ==

A generalization of the [[fold function]] on lists

== Illustration ==

See the concept of [[fold algebra]]s for an illustration. (For instance, a fold for arithmetic expressions is defined over there.) See also [[Technology:Tabaluga]] for a [[generic programming]] technology that supports generalized folds. Further, see also [[Contribution:tabaluga]] for an illustration of generalized fold in the context of the [[@system]].

== Metadata ==

* [[memberOf::Vocabulary:Functional programming]]
* [[relatesTo::Catamorphism]]
* [[relatesTo::http://en.wikipedia.org/wiki/Catamorphism]]
* [[instanceOf::Concept]]

",2013-07-05 09:34:18.093,2017-07-04 13:47:51.002998
Concept,Datatype-generic programming,"== Headline ==

Parametrization by the shape of data structures rather than their contents

== Metadata ==

* [[similarTo::http://www.cs.ox.ac.uk/research/pdt/ap/dgp/]]
* [[memberOf::Vocabulary:Programming]]

",2013-07-05 09:45:00.677,2017-07-04 13:47:51.017887
Concept,Large banana,"== Headline ==

[[Generalized fold]]s for system of [[algebraic data type]]s

== Illustration ==

A [[data model]] for companies of the [[@system]] requires a system of [[algebraic data type]]s such as follows:

<fragment url=""/contributions/tabaluga/src/Company/Data.hs/data/Company""/>

<fragment url=""/contributions/tabaluga/src/Company/Data.hs/data/Department""/>

<fragment url=""/contributions/tabaluga/src/Company/Data.hs/data/Employee""/>

Thus, a [[generalized fold]] for companies also needs to be parameterized in multiple types: one for each type in the system:

<fragment url=""/contributions/tabaluga/src/Company/Algebra.hs/data/CompanyAlgebra""/>

We can set up some interesting baseline behavior on companies. The following algebra models deep identity over companies such that the company structure is fully traversed and rebuilt:

<fragment url=""/contributions/tabaluga/src/Company/Algebra.hs/pattern/mapCompany""/>

An operation for cutting salaries in half can now be derived from ''mapCompany'' simply by record update such that the case for employees realizes salary cut:

<fragment url=""/contributions/tabaluga/src/Company/Cut.hs/pattern/cut""/>

== Metadata ==

* [[relatesTo::Generic programming]]
* [[sameAs::http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.36.627]]

",2013-07-05 14:27:21.998,2017-07-04 13:47:51.074876
Vocabulary,Programming languages,"== Headline ==

[[Programming language]] concepts

== Illustration ==

Examples of such concepts:
* [[Syntax]]
* [[Semantics]]
* [[Type system]]

Programming language concepts are not necessarily limited in application to [[programming language]]s, but they may as well apply to [[software language]]s more generally.

",2013-07-13 16:55:39.519,2017-07-04 13:47:52.515178
Concept,Call-by-need evaluation,"== Headline ==

See [[lazy evaluation]]
",2013-07-13 17:04:11.938,2017-07-04 13:47:52.521549
Concept,Non-strict evaluation,"== Headline ==

[[Lazy evaluation]]

== Metadata ==

* [[carries::Tag:Synonym]]
",2013-07-13 17:10:48.036,2017-07-04 13:47:52.531373
Concept,Laziness,"== Headline ==

[[Lazy evaluation]]

== Metadata ==

* [[carries::Tag:Synonym]]
",2013-07-13 17:11:08.754,2017-07-04 13:47:52.541544
Concept,Eagerness,"== Headline ==

[[Eager evaluation]]

== Metadata ==

* [[carries::Tag:Synonym]]
",2013-07-13 19:37:55.489,2017-07-04 13:47:52.567353
Concept,Strict evaluation,"== Headline ==

[[Eager evaluation]]

== Metadata ==

* [[carries::Tag:Synonym]]
",2013-07-13 19:38:24.118,2017-07-04 13:47:52.577244
Contribution,101backbone,"== Headline ==

TBD

== Metadata ==
<!-- Next link is generated automatically-->
* [[uses::Language:Plain Text]]
<!-- Next link is generated automatically-->
* [[uses::Language:Ruby]]
<!-- Next link is generated automatically-->
* [[uses::Language:HTML]]
<!-- Next link is generated automatically-->
* [[uses::Language:CSS]]
<!-- Next link is generated automatically-->
* [[uses::Language:Portable Network Graphic]]
* [[carries::Tag:Stub]]
",2013-07-17 13:31:28.344,2017-07-04 13:47:52.607651
Concept,IO,"== Headline ==

the communication between computer and the outside world

== Details ==

See also the terms [[input]] and [[output]].

== Metadata ==

* [[memberOf::Vocabulary:Computing]]
* [[sameAs::http://en.wikipedia.org/wiki/Input/output Input/output]]
* [[instanceOf::Concept]]

",2013-08-01 13:08:48.581,2017-07-04 13:47:52.628345
Concept,IO behavior,"== Headline ==

The input/output behavior of a [[software system]] or [[software component]]

== Description ==

An [[IO behavior]] is characterized by the following ingredients:
* The input (or parameters).
* The output (or result).
* Any side effects, e.g., modified data bases or invoked, possibly stateful services.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Input/output]]
* [[memberOf::Vocabulary:Computing]]
* [[instanceOf::Concept]]

",2013-08-01 13:09:20.698,2017-07-04 13:47:52.65366
Tag,Ambiguity,"== Headline ==

Tag used to indicate an ""ambiguous"" page

== Description ==

This tag may be applied specifically to concept pages, when it should be signaled that the concept's name is ambiguous in the scope of the ontology.

== Metadata ==

",2014-09-03 21:25:28.185,2017-07-04 13:48:05.082445
Concept,Impure IO behavior,"== Headline ==

An [[IO behavior]] that modifies the input or causes some other side effect

== Metadata ==

* [[instanceOf::IO behavior]]
",2013-08-01 13:18:19.293,2017-07-04 13:47:52.687369
Concept,IO system,"== Headline ==

The [[monad|monadic]] approach to [[IO]] in [[Language:Haskell|]]

== Description ==

The IO system enables programming to examine and modify the current state of the world in terms of, for example, interactive input and output, mutable variable access or file access. The corresponding IO actions are of a type based on the designated [[IO monad]]. The Haskell language separates pure functional computations from IO computations.

== Metadata ==

* [[memberOf::Vocabulary:Haskell]]
* [[sameAs::http://www.haskell.org/tutorial/io.html Input/Output]]
* [[instanceOf::Concept]]

",2013-08-01 13:20:46.553,2017-07-04 13:47:52.712225
Technology,Java Image IO,"== Headline ==

an API for loading and saving images in different formats

== Metadata ==

* [[instanceOf::API]]
* [[instanceOf::Image processor]]
* [[sameAs::http://docs.oracle.com/javase/7/docs/technotes/guides/imageio/index.html]]
* [[relatesTo::http://docs.oracle.com/javase/7/docs/api/javax/imageio/package-summary.html]]
",2013-08-01 13:25:54.909,2017-07-04 13:47:52.730421
Concept,Model-Object mapping,"== Headline ==

The [[capability]] of bridging the [[technical space]]s [[modelware]] and [[objectware]]

== Description ==

The term M/O mapping is actually not in use in practice.

However, the underlying problem is relevant in practice; see the resources section.

The term was added to this ontology for the sake of uniformity.

See the description of the general [[mapping]] concept for more details.

== Metadata ==

* [[instanceOf::Mapping]]
* [[sameAs::http://www.eclipse.org/modeling/emf]]

",2013-08-01 13:30:41.724,2017-07-04 13:47:52.753487
Concept,Object-Text mapping,"== Intent ==

Map text to objects and vice versa

== See also ==
* [[Parsing]]
* [[Pretty printing]]

== Metadata ==

* [[instanceOf::Concept]]

",2013-08-01 13:33:41.647,2017-07-04 13:47:52.768677
Concept,Object-XML mapping,"== Headline ==

The [[capability]] of bridging the [[Space|technological spaces]] [[objectware]] and [[XMLware]]

== Relationships ==

See also [[XML data binding]].

== Metadata ==

* [[instanceOf::Mapping]]
* [[sameAs::http://en.wikipedia.org/wiki/XML_data_binding]]

",2013-08-01 13:35:15.055,2017-07-04 13:47:52.785833
Concept,Object-Relational mapping,"== Headline ==

The [[capability]] of bridging the [[technical space]]s [[objectware]] and [[tableware]]

== Metadata ==

* [[instanceOf::Mapping]]
* [[sameAs::http://en.wikipedia.org/wiki/Object-relational_mapping Wikipedia]]",2013-08-01 13:36:41.683,2017-07-04 13:47:52.799635
Concept,Relational-XML mapping,"== Headline ==

The [[capability]] of bridging the technical spaces [[tableware]] and [[XMLware]]

== Discussion ==

The term R/X mapping is actually not in use in practice. However, the underlying problem is relevant in practice; see the resources section. The term was added to this ontology for the sake of uniformity. See the description of the general [[mapping]] concept for more details.

== Metadata ==

* [[instanceOf::Mapping]]
* [[sameAs::http://en.wikipedia.org/wiki/XML_database]]
* [[relatesTo::http://en.wikipedia.org/wiki/SQL/XML]]

",2013-08-01 13:46:48.52,2017-07-04 13:47:52.822442
Feature,Undo-redo,"== Headline ==

Undo/redo capability in the UI

== Description ==

Modifications of salaries and modifications of other attributes can be undone or redone.

== Metadata ==

* [[instanceOf::UI requirement]]
* [[instanceOf::Optional feature]]
* [[dependsOn::Feature:Editing]]
",2013-08-01 13:47:41.746,2017-07-04 13:47:52.843656
Tag,Abbreviation,"== Headline ==

A tag for an abbreviation
",2014-09-04 22:09:17.875,2017-07-04 13:48:05.099396
Technology,OTP,"== Intent ==

an implementation of the [[Language:Erlang]] programming language with libraries

== Metadata ==
* [[instanceOf::Language implementation]]
* [[sameAs::http://www.erlang.org/download.html]]
* ",2013-08-01 13:48:06.945,2017-07-04 13:47:52.857322
Feature,Dimensionality,"== Headline ==

Analyze salary distribution along different dimensions

== Description ==

The data model of 101companies comes with two descriptive attributes capable to use for data analysis and comparison.
Adding additional attributes such as gender, age and job role enable a multi-dimensional and advanced analysis used in the area of Business Intelligence.

== Motivation ==

Management needs to understand the distribution of salaries over the employees in the company and apply different criteria (dimensions) for grouping and analysis. Employees could be grouped by gender, age (also age range), department, and job role. For any given criterion, an appropriate chart may be used to visualize the distribution. For instance, distribution for age ranges could be visualized with a line chart with one line per age range.



This feature calls for a number of extensions to the data model: gender (male, female, or unspecified), date of birth (to be able to compute the age of an employee), and job role (such as developer, tester, and program manager). These extensions are not in any way interesting on their own, but they prepare the data model for multi-dimensional data aggregation for reporting as commonly used in the area of Business Intelligence. Here, the addition of the gender is the most basic as it corresponds to a simple enumeration type. The addition of the date of birth is somewhat more interesting because age or age range need to be computed from the date of birth. The addition of job roles triggers the need for extra (complex) joins in data aggregation, if we assume that job roles are organized, for example, in a designated table in a database with a normalized schema.

== Illustration ==

This feature is illustrated using [[Contribution:pyDWH]].

== Metadata ==

* [[instanceOf::Optional feature]]
* [[instanceOf::Data requirement]]
* [[instanceOf::Functional requirement]]
* [[dependsOn::Feature:History]]

",2013-08-07 15:00:17.504,2017-07-04 13:47:52.932465
Concept,"G,fd","== weget ==

dewüferüt

=== A header not closed
wreg,t",2013-08-14 10:13:53.218,2017-07-04 13:47:53.557558
Feature,Conversion,"== Headline ==

Implement conversion routines to unify different schemas and data structures.
== Description ==

The data model of 101companies has no differences in its data structure or schema.
Especially in the area of Business Intelligence it is a common task to unify data from various different systems.
Adding structural differences, such as currencies will help us illustrating procedures on how to transform data.
== Motivation ==

A globally operating company needs to analyze data from various locations (also meaning companies). Each location operates the 101companies HR-System. The HR-System is missing a feature to distinguish between currencies. But for analysis it is mandatory to unify all data to one target currency.
== Illustration ==

This feature will be illustrated using [[Contribution:pyDWH]].


=== Configuration ===
The configuration file '' config.cfg '' contains all needed information for the conversion.
Each source database reflects a specific company or location (in a country).
It has a currency for the salaries. There is also a base currency which is the target currency.
In addition there is an option for an API to calculate the current exchange rates.


'' Excerpt of config.cfg ''
<pre>
[source_1]
company_id = 1
currency = EUR
...

[source_2]
company_id = 2
currency = USD
...

[target]
...

[general]
base_currency = EUR

# usage: http://finance.yahoo.com/d/quotes.csv?f=sl1&s=USDEUR=X
exchange_rate_api = http://finance.yahoo.com/d/quotes.csv?f=sl1&s=__DATA__=X
</pre>


While running the ETL (Extract, Transform, Load) it extracts all data from the given source databases, transforms* it and loads it in a unified database schema.

=== Transformation ===
First it checks whether we need to convert the currencies. In case the source and target currencies differ it will query the API to retrieve the current exchange rate between both currencies.

'' etl/exchange.py ''
<syntaxhighlight language=""python"">
import logging
import urllib2
from decimal import Decimal

# Supported currencies based on the list from European Central Bank:
# http://www.ecb.int/stats/exchange/eurofxref/html/index.en.html
CURRENCIES = [
    ""AUD"", ""BGN"", ""BRL"", ""CAD"", ""CHF"", ""CNY"", ""CZK"", ""DKK"", ""EUR"", ""GBP"",
    ""HKD"", ""HRK"", ""HUF"", ""IDR"", ""ILS"", ""INR"", ""JPY"", ""KRW"", ""LTL"", ""LVL"",
    ""MXN"", ""MYR"", ""NOK"", ""NZD"", ""PHP"", ""PLN"", ""RON"", ""RUB"", ""SEK"", ""SGD"",
    ""THB"", ""TRY"", ""USD"", ""ZAR""
]


class ExchangeError(Exception):
    """"""
    Exchange exception for all conversion errors.
    """"""
    pass


class Exchange(object):
    """"""
    Performs currency conversion using an external API specified in the
    configuration file.
    """"""
    def __init__(self, config):
        self.base_currency = config['base_currency']
        assert self.base_currency in CURRENCIES
        self.exchange_rate_api = config['exchange_rate_api']
        self.exchange_rate = None

    def set_exchange_rate(self, source_currency, target_currency=None):
        """"""
        Fetches current exchange rate from Yahoo! Finance API and set
        instance's exchange_rate with respect to the given target currency.
        """"""
        if target_currency is None:
            target_currency = self.base_currency

        if source_currency == target_currency:
            # Same currency, i.e. no conversion
            self.exchange_rate = 1
            return

        if source_currency not in CURRENCIES:
            raise ExchangeError(""unknown currency: {}"".format(source_currency))
        if target_currency not in CURRENCIES:
            raise ExchangeError(""unknown currency: {}"".format(target_currency))

        data = ""{}{}"".format(source_currency, target_currency)
        url = self.exchange_rate_api.replace(""__DATA__"", data)
        response = """"
        logging.debug(""url={}"".format(url))
        request = urllib2.Request(url=url)
        try:
            response = urllib2.urlopen(request).read()
        except (urllib2.HTTPError, urllib2.URLError) as err:
            raise ExchangeError(err)
        response = response.strip()

        logging.debug(""response={}"".format(response))
        if data not in response:
            raise ExchangeError(""invalid data from {}: {}"".format(url, data))

        exchange_rate = response.split("","", 1)[1]
        self.exchange_rate = Decimal(exchange_rate)
</syntaxhighlight>

During the transformation is where the conversion actually happens.
For each employee 'apply_exchange_rate()' is being called.

'' Excerpt of etl/transform.py ''
<syntaxhighlight language=""python"">
    def _apply_exchange_rate(self, source_amount):
        """"""
        Applies exchange rate on the given amount, e.g. to convert it to
        an amount in base currency.
        """"""
        assert self.exchange is not None
        assert self.exchange.exchange_rate is not None
        if self.exchange.exchange_rate == 1:  # No conversion needed
            return source_amount
        target_amount = Decimal(source_amount) * self.exchange.exchange_rate
        logging.debug(""exchange_rate={} [{}]->[{}]"".format(
            self.exchange.exchange_rate, source_amount, target_amount))
        return target_amount.quantize(Decimal("".01""), rounding=ROUND_HALF_UP)
</syntaxhighlight>
==Metadata==

* [[isA::Optional feature]]
* [[isA::Data requirement]]
* [[isA::Functional requirement]]
*
",2013-08-12 15:40:17.622,2017-07-04 15:26:34.998685
Concept,Scott encoding,"== Headline ==

Encoding of [[algebraic data type]]s in [[language:Lambda calculus]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Mogensen%E2%80%93Scott encoding]]
* [[instanceOf::Vocabulary:Programming theory]]

",2013-08-29 14:31:19.194,2017-07-04 13:47:54.2234
Concept,Church encoding,"== Headline ==

Encoding of data and operations in [[language:Lambda calculus]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Church encoding]]
* [[instanceOf::Vocabulary:Programming theory]]

",2013-08-29 15:48:53.831,2017-07-04 13:47:54.236046
Concept,Programming theory,"== Headline ==

The mathematical treatment of programs
",2014-09-05 05:54:00.982,2017-07-04 13:48:05.103998
Language,Magnolia,"== Headline ==

A high-level programming language
== Metadata ==

* [[instanceOf::Programming language]]
* [[relatesTo::http://bldl.ii.uib.no/]]
",2013-09-05 12:31:57.055,2017-07-04 13:47:54.246675
Course,HaskellBarchart,"== Metadata ==

* [[uses::Language:Haskell]]",2013-09-21 20:19:30.926,2017-07-04 13:47:54.328913
Contribution,miryane,"== Headline ==

You have created new contribution using [https://github.com Github]. Source code for this contribution you can find [https://github.com/burgua/miryane here]. Please replace this text with something more meaningful.

== Metadata ==

",2013-11-04 16:34:18.571,2017-07-04 13:47:54.402507
Technology,Haskell Platform,"== Headline ==

A bundle of [[Language:Haskell|]] technologies

== Metadata ==

* [[sameAs::http://www.haskell.org/platform]]
*
",2013-11-14 22:14:54.189,2017-07-04 13:47:54.41148
Contribution,101qt,"== Contribution 101QT ==
https://github.com/brezvan/101Qt

== Metadata ==
<!-- Next link is generated automatically-->
* [[uses::Language:CPlusPlus]]
<!-- Next link is generated automatically-->
* [[uses::Language:Plain Text]]
<!-- Next link is generated automatically-->
* [[uses::Language:Prolog]]
* [[carries::Tag:Stub]]
",2014-01-28 15:44:10.621,2017-07-04 13:47:54.430402
Concept,Data,"== Headline ==

Quantities on which operations are performed in computing

== Metadata ==

[[sameAs::http://en.wikipedia.org/wiki/Data_(computing)]]
",2014-03-12 23:31:03.647,2017-07-04 13:47:54.68848
Contribution,UIQt,"== Headline ==

A GUI contribution by means of [[Technology::Qt]].

Source code for this contribution you can find [https://github.com/https://github.com/brezvan/101Qt here].

== Motivation ==
Specifically, the GUI provides the following features:
* [[implements::Feature:Cut]]
* [[implements::Feature:Total]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Hierarchical]]
* [[implements::Feature:Restructing]]

== Architecture ==
The implementation uses  the common MV architecture used in [[Technology::Qt]].
The main window contains the view for the company, departments and employees. For presenting the company hierarchy an object of the QtreeView provided by [[Technology::Qt]] is used.
Three dialogs will appear when the associated slot is triggered enabling further user interaction. The signal and slot concept is mainly used for communicating between objects and loose coupling.
The model(Treemodel) is derived from QAbstractItemModel and modifies it with some additional functions. It communicates with TreeItems by means of indexes.

== Illustration ==
Nodes of the tree could be objects of Company,Department or Employee. QVariant is a union for common data types. Here we have added the mentions types to the QVarinat:

<syntaxhighlight lang=""java"">
class Company:public QObject
{
    Q_OBJECT
...
};
Q_DECLARE_METATYPE(Company*);
</syntaxhighlight>

Here is a slot for the signal clicked defined. the clicked signal is defined in the QAbstractButton class and is ready to be used. In the next step we connect the defined slot to the signal.
<syntaxhighlight lang=""java"">
private slots:
    void on_okButton_clicked();
</syntaxhighlight>


<syntaxhighlight lang=""java"">
    connect(ui->okButton, SIGNAL(clicked()), this, SLOT(on_okButton_clicked()));
</syntaxhighlight>

As soon as the object which sends the signal changes its state, the object which is interested in this change will receive the signal. The sender would not know if the signal is delivered to the receiver.

The metaobject compiler runs over the code and produces the following such that signals and slots can be used:

<syntaxhighlight lang=""java"">
static const char qt_meta_stringdata_newDepartmentdialog[] = {
    ""newDepartmentdialog\0\0on_okButton_clicked()\0""
    ""on_cancelButton_clicked()\0""
};

void newDepartmentdialog::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        Q_ASSERT(staticMetaObject.cast(_o));
        newDepartmentdialog *_t = static_cast<newDepartmentdialog *>(_o);
        switch (_id) {
        case 0: _t->on_okButton_clicked(); break;
        case 1: _t->on_cancelButton_clicked(); break;
        default: ;
        }
    }
</syntaxhighlight>

== Usage ==
for compiling you have to run qmake and then make. Everything will be ready for running.

== Metadata ==
<!-- Next link is generated automatically-->
* [[developedBy::Contributor:baharak ]]
<!-- Next link is generated automatically-->
* [[uses::Language:CPlusPlus]]

",2014-03-05 11:34:55.067,2017-07-05 15:30:14.783878
Technology,Tkinter,"== Headline ==

[[Language:Python]]'s de-facto standard GUI framework

== Metadata ==

* [[instanceOf::Framework]]
* [[sameAs::https://wiki.python.org/moin/TkInter]]

",2014-03-24 13:30:56.897,2017-07-04 13:47:55.590427
Technology,javax.json,"== Headline ==

A [[Language:JSON|]] API for [[Language:Java|]]

== Metadata ==

* [[instanceOf::API]]
* [[sameAs::http://docs.oracle.com/javaee/7/api/javax/json/package-summary.html]]

",2014-04-23 16:49:41.883,2017-07-04 13:47:55.706093
Concept,Multi-paradigm programming language,"== Metadata ==

* [[isA::Programming Language]]
* [[supports::OO programming]]
* [[supports::Functional programming]]

",2014-04-07 12:18:26.502,2017-07-04 15:26:35.324382
Contribution,javaJson,"== Headline ==

Process [[Language:JSON|]] data with [[Language:Java|]]'s [[Technology:javax.json|]] [[API]]

== Characteristics ==

See [[Contribution:dom]] and [[Contribution:jdom]] for a general motivation for exercising
[[in-memory XML processing]]. The present contribution simply commits to [[Language:JSON|]] instead of [[Language:XML|]].

== Relationships ==

[[Contribution:javaJsonHttp]] uses HTTP-based access to the input data instead of going through the file system.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Language:JSON]]
* [[uses::Technology:javax.json]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[developedBy::Contributor:rlaemmel]]

",2014-04-23 16:48:30.376,2017-07-05 15:30:16.620109
Contribution,javaJsonHttp,"== Headline ==

Process [[Technology:HTTP||]]-accessible [[Language:JSON|]] data with [[Language:Java|]]'s [[Technology:javax.json|]] API

== Characteristics ==

See [[Contribution:javaJson]] for a baseline which processes local JSON instead of <ins>HTTP-accessible JSON data.

== Relationships ==

[[Contribution:javaJson]] accesses the JSON input data through the file system instead of using HTTP.

== Usage ==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Mapping]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[memberOf::Theme:Java mapping]]
* [[uses::Language:Java]]
* [[uses::Language:JSON]]
* [[uses::Technology:javax.json]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[developedBy::Contributor:rlaemmel]]

",2014-04-23 18:01:13.808,2017-07-05 15:30:17.003955
Concept,Compilation,"== Headline ==

The translation of source code into object code by a [[compiler]]

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Compilation]]

",2014-04-23 20:50:16.143,2017-07-04 13:47:55.986833
Concept,Halting problem,"== Headline ==

A basic problem in computability theory

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Halting_problem]]
",2014-04-23 21:03:25.61,2017-07-04 13:47:56.003255
Contribution,rxjava,"== Headline ==

Functional Reactive Programming in Java using [[Technology:RxJava|]]

You have created new contribution using [https://github.com Github]. Source code for this contribution you can find [https://github.com/https://github.com/101companies/101simplejava/tree/master/contributions/rxjava here].

== Metadata ==
<!-- Next link is generated automatically-->
* [[developedBy::Contributor:DerDackel]]

",2014-04-26 22:17:49.066,2017-07-04 13:47:56.017163
Technology,RxJava,"== Headline ==

Reactive programming technology for [[Language:Java|]]

== Metadata ==

* [[sameAs::https://github.com/Netflix/RxJava]]
",2014-05-07 13:31:19.495,2017-07-04 13:47:56.125548
Concept,Reference counting,"== Headline ==

Reference counting is a [[Memory management]] technique that keeps a counter of how many times an object is referenced. When the count reaches zero, the memory is freed.
== Illustration ==

The mechanism can easily be illustrated by the following [[Language:Perl]] script, which peeks at the internal reference count of a variable:

<syntaxhighlight lang=""perl"">
#!/usr/bin/perl
use feature     'say';
use Devel::Peek 'SvREFCNT'; # access to reference count

my $thing = 'stuff';        # create a thing
say SvREFCNT($thing);       # refcount = 1

my $ref1  = \$thing;        # create reference to thing
say SvREFCNT($thing);       # refcount = 2

{                           # begin new block
    my $ref2 = \$thing;     # create another reference
    say SvREFCNT($thing);   # refcount = 3
}                           # code block ends, $ref2 goes out of scope
say SvREFCNT($thing);       # refcount = 2

$ref1 = 'something else';   # remove a reference
say SvREFCNT($thing);       # refcount = 1
</syntaxhighlight>

This approach is simple to implement (almost trivial even when using a language with [[Resource Acquisition Is Initialization|RAII]]) and destruction happens deterministically. However, circular references can still lead to [[Memory leak]]s, which must either be avoided or explicitly marked [http://en.wikipedia.org/wiki/Weak_reference weak references].
== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Reference_counting]]
* [[memberOf::Vocabulary:Programming]]
* [[instanceOf::Memory management]]
",2014-07-24 10:23:40.024,2017-07-04 13:47:59.051245
Contribution,dancer,"== Headline ==

An extension of [[Contribution:perl]], using [[Technology:Dancer]] as a framework for [[Feature:Web UI]].

== Characteristics ==

The most prominent feature of this contribution is the [[Feature:Web UI]]. The [[Server]] is implemented using [[Technology:Dancer|Dancer]] and communicates with the [[Client]] via the [[Web UI REST API]].

== Illustration ==

[[Technology:Dancer]] uses route handlers to apply incoming connections to specified subroutines.

<syntaxhighlight lang=""perl"">
# When a client GETs the root URL, send the default client page.
get  '/'     => sub { send file '/web ui.html' };
# Sends the model to a client requesting it via AJAX. It is automatically converted to JSON by Dancer.
ajax '/tree' => sub { $model };
</syntaxhighlight>

Each action from the client is handled via such a route handler.

Take for example the handler for [[Feature:Restructuring]]:

<syntaxhighlight lang=""perl"">
ajax '/restructure' => sub {
    # Get source and target from AJAX parameters
    my ($source, $error) = object from(param 'id');
    return $error if not $source;
    (my $target, $error) = object from(param 'target');
    return $error if not $target;

    # Client might try to restructure wrong types
    $target->child types->{$source->type name}
        or return err('Restructure: Incompatible types.');

    # Get the list the source is to be inserted into
    my $list   = $target->children;
    # The pos parameter is optional, either use it or the end of the list
    my $pos    = param 'pos' // $#$list;
    # Remove the source from the model
    my ($rm)   = remove(sub { $ [0] == $source }, $model->children);
    # Adjust pos in case the element is to be re-inserted into the same list
    my $offset = $rm && $rm->{list} == $list && $pos >= $rm->{index}
               ? $pos - 1
               : $pos;
    # Insert it at the right position
    splice $list, $offset, 0, $source;

    # Tell the client to restructure too
    return {
        commands => {
            type   => 'move',
            source => $source->id,
            target => $target->id,
            pos    => $pos,
        },
    };
};
</syntaxhighlight>

== Relationships ==

* [[Contribution:jsTree]] is the default [[Client]] for this contribution.
* [[Contribution:perl]] is the base for this contribution, lacking the [[Feature:Web UI|Web UI]].
* [[Contribution:bottle2]] is a similar [[Server]], using [[Language:Python]] and [[Technology:Bottle]].

== Architecture ==

Just like [[Contribution:perl]], except it also comes with the [https://github.com/hartenfels/Dancer101/blob/master/dancer101.plx perl script] to start the server.

== Usage ==

Please see the [https://github.com/hartenfels/Dancer101/blob/master/readme.pod readme.pod on GitHub] for details.

== Metadata ==
* [[basedOn::Contribution:perl]]
<!-- Next link is generated automatically-->
* [[developedBy::Contributor:hartenfels]]
* [[uses::Web UI REST API]]
* [[uses::Language:Perl]]
* [[uses::Language:JSON]]
* [[uses::Technology:Moops]]
* [[uses::Technology:Dancer]]
* [[uses::Technology:TestMore]]
* [[uses::REST]]
* [[uses::Contribution:jsTree]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Median]]
* [[implements::Feature:Total]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Serialization]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Web UI]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Restructuring]]
* [[implements::Feature:Editing]]

",2014-05-24 10:06:10.796,2017-07-05 15:30:18.673984
Technology,H2,"== Headline ==

A [[Language:SQL|]] [[DBMS]] written completely in [[Language:Java|]]

== Metadata ==

* [[instanceOf::DBMS]]
* [[sameAs::http://www.h2database.com/]]

",2014-05-26 13:07:56.146,2017-07-04 13:47:56.722248
Technology,Gson,"==Headline==

Google [[Language:JSON|]] API for [[Language:Java|]] with direct JSON-object-mapping

",2014-06-02 15:25:53.747,2017-07-04 13:47:56.817464
Technology,Coq,"== Headline ==

The Coq Proof Assistant

== Metadata ==

* [[sameAs::http://coq.inria.fr/]]
",2014-06-11 13:57:53.005,2017-07-04 13:47:56.970136
Contribution,PrimeFaces,"== Headline ==

You have created new contribution using [https://github.com Github]. Source code for this contribution you can find [https://github.com/mastermaiknemo/JSF here].
==Languages&Technologies==

* [[Technology:Hibernate]]
* [[Language:HTML]]
* [[Language:XML]]
* [[Language:Java]]
* [[Language:JavaScript]]
* [[carries::Tag:Stub]]
== Metadata ==
<!-- Next link is generated automatically-->
* [[developedBy::Contributor:mminski]]
",2014-06-10 12:35:17.129,2017-07-04 13:47:56.9235
Tag,Stub,"== Headline ==

Tag used to indicate ""stub"" status of page

== Description ==

This sort of tag is pretty much inspired by Wikipedia's notion of ""stub"".

A page ""carries"" this tag by means of a semantic property with predicate ""carries"" and object ""Tag:Stub"".

If you place this tag, you may want to file an issue for the corresponding github user on 101repo.

== Metadata ==

",2014-06-11 11:15:12.383,2017-07-04 13:47:56.936618
Tag,Experiment,"== Headline ==

Tag used to indicate ""experimental"" status of page (or contribution behind)

== Description ==

This tag is particularly useful for members of [[Namespace:Contribution]].

In this context, the tag expresses that the contribution should be considered an experiment or even an esoteric exercise, which may be useful for some reasons, but it should be consumed with care.

The tag could also be used more generally for pages other than contribution pages.

== Metadata ==

",2014-06-11 13:38:44.009,2017-07-04 13:47:56.951123
Technology,YAPAF,"== Headline ==

Yet another PHP aspect Framework

== Metadata ==

* [[sameAs::https://github.com/SchulteMarkus/YAPAF]]
* [[carries::Tag:Stub]]
",2014-06-11 13:47:49.626,2017-07-04 13:47:56.962531
Contributor,hartenfels,"== Project Practical 2014 ==

=== Contributions ===

* [[Contribution:c]]
** [[Contribution:luaC]]
* [[Contribution:cpp]]
* [[Contribution:perl]]
** [[Contribution:dancer]]
* [[Contribution:bottle2]]
* [[Contribution:jsTree]]

Related to the bottom three contributions: [[Web UI REST API]].

=== Other Wiki Pages ===

Pages were created anew unless otherwise noted.

See also [https://github.com/hartenfels/Fragments101/] for illustration fragments.

* [[Boilerplate code]]
* [[Closure]] (only illustration added)
* [[Const-correctness]]
* [[Domain-specific language]] (stomped by [[Contributor:ruetherjan]])
* [[General-purpose language]]
* [[Namespace]]
* [[Memory management]]
** [[Manual memory management]]
** [[Resource Acquisition Is Initialization]]
** [[Reference counting]]
** [[Garbage collection]]
** [[Memory leak]]
* [[Record]] (only illustration added)
* [[Structured programming]]
* [[Syntactic sugar]]
* [[Transcompiler]]
* [[Union]]
* [[Web UI REST API]]

* [[Language:CoffeeScript]]
* [[Language:Lua]]

* [[Technology:CTest]]
* [[Technology:JSON Schema]]
* [[Technology:jQueryUI]]
* [[Technology:jsTree]]
* [[Technology:Moops]]
* [[Technology:Sinatra]]
** [[Technology:Bottle]]
** [[Technology:Dancer]]
* [[Technology:TestMore]]

=== Presentations ===

* [https://github.com/hartenfels/LuaC101/tree/master/presentation]
* [https://github.com/hartenfels/Dancer101/tree/master/presentation]

",2014-06-27 02:28:34.074,2017-07-04 13:47:57.028461
Contributor,avaranovich,"",2014-06-29 10:49:09.12,2017-07-04 13:47:58.110375
Contribution,luaC,"== Headline ==

An extension of [[Contribution:c]] using [[Language:Lua]] for parsing and unparsing.

== Characteristics ==

String handling in [[Language:C]] is notoriously bonkers: strings are merely null-terminated arrays of char, which means they do not even know their own length and their memory has to be painstakingly managed manually. So doing any kind of parser work directly in C is a lot more work than it is worth.

Instead, [[Feature:Parsing]] and [[Feature:Unparsing]] in this contribution makes use of embedded programming [[Language:Lua]], as embedding and interacting with it is trivial. The Lua representation can easily be converted to and from other representations like [[Language:JSON]] or [[Language:XML]] using existing pure-Lua libraries.

== Illustration ==

This contribution uses [[Language:Lua]] to interface with plaintext representations of the data model. Embedding it into [[Language:C]] is trivial, since it is a library written in standard C89. Lua's table representation can also easily be converted into a different representation, like [[Language:JSON]].

For [[Feature:Unparsing]], the object graph is traversed using visitors and appropriate calls to Lua functions are made to build a serializable table in it. Take for example unparsing a department:
<syntaxhighlight language=""c"">
// Fragment from unparsingVisitor in c101_Unparsing.c
    case C101_DEPARTMENT:
        lua_getglobal (lua, ""unparseDepartment"");
        luaSwap       (lua);
        lua_pushstring(lua, ((struct c101_Department*) unit)->name);
        if (lua_pcall(lua, 2, 2, 0))
            return unparseError(lua);
        break;
</syntaxhighlight>

Which calls the corresponding function in Lua:
<syntaxhighlight language=""lua"">
-- Fragment from unparsing.lua
function unparseDepartment(current, n)
    department = {
        name        = n,
        employees   = {},
        departments = {},
    }
    table.insert(current[""departments""], department)
    return current, department
end
</syntaxhighlight>

For [[Feature:Parsing]], the opposite is done: the Lua table is traversed and appropriate C functions are called. Take for example parsing an employee:
<syntaxhighlight language=""lua"">
-- Fragment from parsing.lua
function parseEmployee(data, employee)
    ensureType(employee,            ""table"",  ""Employee""        )
    ensureType(employee[""name""   ], ""string"", ""Employee name""   )
    ensureType(employee[""address""], ""string"", ""Employee address"")
    ensureType(employee[""salary"" ], ""number"", ""Employee salary"" )
    c101_parseEmployee(data, pop(employee, ""name""),
                             pop(employee, ""address""),
                             pop(employee, ""salary""))
    warnExcessive(employee, ""Employee"")
end
</syntaxhighlight>

Which ensures the integrity of the data and calls the appropriate function in C:
<syntaxhighlight language=""c"">
// Fragment from c101_Parsing.c
static int
c101_parseEmployee(lua_State* lua)
{
    struct ParseData* data    = lua_touserdata (lua, 1);
    const char      * name    = lua_tostring   (lua, 2);
    const char      * address = lua_tostring   (lua, 3);
    double            salary  = lua_tonumber   (lua, 4);

    c101_addSubunit(c101_back(&data->stack), c101_newEmployee(name, address, salary));

    return 0;
}
</syntaxhighlight>

== Relationships ==

This contribution is an extension of [[Contribution:c]].

== Architecture ==

Additionally to [[Contribution:c]]'s architecture, there is a folder with Lua scripting files (.lua). These files are copied into the build folder when running [[Technology:CMake|CMake]].

== Usage ==

This contribution uses [[Technology:CMake]] for handling its build process and its [[Technology:CTest]] for testing. Please see the [https://github.com/hartenfels/LuaC101/blob/master/readme.md readme.md on GitHub] for details.

== Metadata ==

* [[basedOn::Contribution:c]]
* [[uses::Language:C]]
* [[uses::Language:Lua]]
* [[uses::Language:JSON]]
* [[uses::Technology:CMake]]
* [[uses::Technology:CTest]]
* [[uses::Technology:DataDumper]]
* [[uses::Technology:dkjson]]
* [[uses::Technology:Lua51]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Median]]
* [[implements::Feature:Total]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Hierarchical_Company]]
* [[developedBy::Contributor:hartenfels]]

",2014-06-27 02:33:13.761,2017-07-05 15:30:20.35518
Contribution,perl,"== Headline ==

Implementation in [[Language:Perl]] using [[Technology:Moops]] as a saner object system.
== Characteristics ==

[[Language:Perl|Perl]] is a general-purpose scripting language, usually grouped into the same family as [[Language:Python]] and having inspired [[Language:Ruby]]. This contribution also uses [[Technology:Moops|Moops]] as a [[OO_programming]] extension.

[[Technology:Moops|Moops]] actually extends [[Language:Perl|Perl]]'s syntax itself - something relatively common in [[Language:Perl|Perl]], but rarely seen in other languages.

The best feature of [[Language:Perl|Perl]] however cannot be really shown directly in this contribution: the central module repository called [http://www.cpan.org/|Comprehensive Perl Archive Network (CPAN)], which is very complete, tested and makes installing even compiled modules trivial. This contribution uses various non-core modules from there.
== Illustration ==

=== Data Model ===

The concrete classes of the object model are based on the Model class that provides names, unique IDs (UUIDs), a list of children and supporting methods. [[Technology:Moops|Moops]] adds [[Syntactic sugar]], [[Type checking]] and reduces [[Boilerplate code]] by automatically providing [[Constructor]]s and accessors ([[Getter]]s and [[Setter]]s, but rolled into one [[Instance method|method]]) for the object's properties.

<syntaxhighlight language=""perl"">
class Model {
    has 'text' => (
        is       => 'rw',
        isa      => 'Str',
        required => 1,
    );

    has 'id' => (
        is       => 'rw',
        isa      => 'Str',
        required => 1,
        default  => \&create_uuid,
    );

    has 'children' => (
        is       => 'rw',
        isa      => 'ArrayRef[C101::Model]',
        required => 1,
        default  => sub { [] },
    );

    # methods omitted
}
</syntaxhighlight>

The concrete objects now just extend the model and add additional fields, if any:

<syntaxhighlight language=""perl"">
# methods omitted

class Company    extends Model { ... }

class Department extends Model { ... }

class Employee   extends Model {
    has 'address' => (
        is       => 'rw',
        isa      => 'Str',
        required => 1,
    );

    has 'salary' => (
        is       => 'rw',
        isa      => 'UnsignedNum',
        required => 1,
    );
}
</syntaxhighlight>

=== Operations ===

Features like [[Feature:Total|total]], [[Feature:Cut|cut]] or [[Feature:Depth|depth]] are all implemented via a variation of the [[Visitor_pattern]]. Since [[Language:Perl|Perl]] supports closures, even performing folding operations is very simple. For example, the implementation of [[Feature:Total|total]]:

<syntaxhighlight language=""perl"">
sub total {
    my $total   = 0;
    my $visitor = C101::Visitor->new({
        begin_employee => sub {
            $total += $_[1]->salary; # note: $_[1] is the employee, see documentation
        },
    });
    $_->visit($visitor) for @_; # note: @_ is the list of arguments
    return $total;
}
</syntaxhighlight>

To support more complicated restructuring, the visitor passes the list it is iterating through and the loop index into the callbacks. This allows for example to perform deletion of an element and appropriately decrementing the list index:

<syntaxhighlight language=""perl"">
# callback for remove operation
my $callback = sub {
    my ($visitor, $thing, $list, $index) = @_;
    splice($list, $$index--, 1) if $should_remove->($thing);
};
</syntaxhighlight>

=== Persistence ===

Serialization, deserialization, parsing and unparsing are all just simple one-liners that dispatch to the appropriate modules:

<syntaxhighlight language=""perl"">
# note: @_ is the list of arguments
# Binary storage with Storable module
sub serialize   {      store(@_) }
sub unserialize {   retrieve(@_) }
# Human-readable storage with YAML module
sub parse       { YAML::Load(@_) }
sub unparse     { YAML::Dump(@_) }
</syntaxhighlight>

[[Language:YAML]] was chosen because [[Language:Perl|Perl]] objects can be directly represented in the format (as opposed to for example [[Language:JSON]]). For example, an Employee object would be encoded as such:

<syntaxhighlight language=""yaml"">
!!perl/hash:C101::Employee
address  : Redmond
children : []
name     : Ray
salary   : 234567
uuid     : F27EE512-1005-11E4-ABC1-30B06F9AEFE7
</syntaxhighlight>
== Relationships ==

[[Contribution:dancer]] extends this contribution with a [[Feature:Web_UI]].
== Architecture ==

The logical parts of the contribution are separated into Perl Module (.pm) files in a [[Namespace]] called [https://github.com/hartenfels/perl101/tree/master/C101 C101]. The necessary modules are loaded in the files where they are required.

The actual executable file for testing is [https://github.com/hartenfels/perl101/blob/master/test101.plx a single Perl script]. It uses the [[Technology:TestMore|Test&#58;&#58;More]] module, which is [[Language:Perl|Perl]]'s core testing framework.
== Usage ==

Please see the [https://github.com/hartenfels/perl101/blob/master/readme.pod readme.pod on GitHub] for details.
== Metadata ==
* [[uses::Language:Perl]]
* [[uses::Language:YAML]]
* [[uses::Technology:Moops]]
* [[uses::Technology:TestMore]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
* [[implements::Feature:Median]]
* [[implements::Feature:Total]]
* [[implements::Feature:Parsing]]
* [[implements::Feature:Unparsing]]
* [[implements::Feature:Serialization]]
* [[implements::Feature:Hierarchical company]]
",2014-06-28 14:21:00.556,2017-07-05 15:30:21.523927
Tag,Obscurity,"== Headline ==

Tag used to indicate ""obscurity"" status of page (contribution)

== Description ==

A contribution page ""carries"" this tag by means of a semantic property with predicate ""carries"" and object ""Tag:Obscurity"". The idea is that an ""obscure"" contribution should be used with care. It may still provide valuable information.

== Metadata ==

",2014-06-29 13:26:00.708,2017-07-04 13:47:58.121163
Contributor,rlaemmel,"== Headline ==

Ralf Lämmel on 101wiki

== Metadata ==

* [[sameAs::http://softlang.wikidot.com/rlaemmel:home]]",2014-07-01 23:30:48.731,2017-07-04 13:47:58.1366
Contributor,arkadi-schmidt,"",2014-07-02 08:17:56.611,2017-07-04 13:47:58.140443
Concept,Binary search tree,"== Headline ==

A [[data structure]] supporting [[binary search]]

== Illustration ==

See [https://github.com/101companies/101repo/tree/master/concepts/Functional_data_structure].

== Metadata ==

* [[instanceOf::Data structure]]
* [[sameAs::http://en.wikipedia.org/wiki/Binary_search_tree]]
",2014-07-03 07:54:26.359,2017-07-04 13:47:58.160756
Concept,Skew heap,"== Headline ==

A [[data structure]] for self-adjusting [[heap]]s

== Illustration ==

See [https://github.com/101companies/101repo/tree/master/concepts/Functional_data_structure] for an implementation of skew heaps as a [[functional data structure]].

== Metadata ==

* [[instanceOf::Data structure]]
* [[instanceOf::Heap]]
* [[sameAs::http://en.wikipedia.org/wiki/Skew_heap]]
* [[relatesTo::http://www.cse.yorku.ca/~andy/courses/4101/lecture-notes/LN5.pdf]]

",2014-07-03 07:56:00.729,2017-07-04 13:47:58.186776
Contribution,jmsPointToPoint,"== Headline ==

The contribution implements a distributed company system with JMS for messaging. It makes excessive use of synchronous communication and uses Point-To-Point messaging as the messaging style. The server is automatically deployed at localhost.

==Characteristics==

The company

== Illustration ==
The company is managed and stored within an own thread. To get the total or cut the  salaries a message is, via JMS (Java Messaging Service), send from the client to the server, the thread with the company, which execute its own cut or total operations, then the result is send back to the client. The JMS implementation is [http://activemq.apache.org ActiveMQ] from Apache.

== Metadata ==
* [[developedBy::Contributor:mpaul138]]
* [[developedBy::Contributor:MarcelH91]]

* [[implements::Feature:Hierarchical company]]
* [[implements::Feature:Task parallelism]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[uses::Technology:JUnit]]
* [[uses::Technology:Gradle]]
* [[uses::Technology:JMS]]
* [[uses::Language:Plain Text]]
* [[uses::Language:Java]]
* [[uses::Concept:Synchronous Communication]]
* [[uses::Concept:Point-To-Point Messaging]]
",2014-07-09 18:47:44.949,2017-07-05 15:30:21.817789
Concept,Complexity analysis,"== Headline ==

Analysis of the [[complexity]] of algorithms and data structures

== Metadata ==

* [[memberOf::Vocabulary:Programming theory]]
* [[sameAs::http://en.wikipedia.org/wiki/Analysis_of_algorithms]]
",2014-07-11 14:01:08.973,2017-07-04 13:47:58.426309
Concept,Either type,"== Headline ==

A type for disjoint (indexed) sums over types

== Illustration ==

We illustrate here the Haskell approach to either types.

The corresponding [[polymorphic type]] type constructor is defined as follows:

<syntaxhighlight lang=""haskell"">
data Either a b = Left a | Right b
</syntaxhighlight>

Thus, a value of an either type is either of one type or another and the choice is also conveyed by the constructors ''Left'' versus ''Right''. One typical application scenario is error handling where one argument type models error messages (e.g., String) and the other argument type models successful results. In this instance, either types generalize [[maybe type]]s.

Another typical application scenario is mixed-type computations. For instance, assume that we have some mathematical operations that may return both ''Int'' and ''Float''. Here is a corresponding either type:

<syntaxhighlight lang=""haskell"">
type IntOrFloat = Either Int Float
</syntaxhighlight>

As an example of a function that needs to manipulate values of the either type, consider the following function that extracts a ''Float'' by applying the conversion ''fromIntegral'' if given an ''Int'':

<syntaxhighlight lang=""haskell"">
asFloat :: IntOrFloat -> Float
asFloat (Left x) = fromIntegral x
asFloat (Right x) = x
</syntaxhighlight>

For instance:

<syntaxhighlight lang=""haskell"">
> asFloat (Left 42)
42.0
> asFloat (Right 42.0)
42.0
</syntaxhighlight>

Because case discrimination on an either type is so common, there is even (in Haskell) a standard higher-order function by which the same conversion can be expressed more concisely:

<syntaxhighlight lang=""haskell"">
asFloat :: IntOrFloat -> Float
asFloat = either fromIntegral id
</syntaxhighlight>

Specific either types can also be expressed by other means than a designated type constructor for such types. For instance, in functional programming with [[algebraic data type]]s, a specific type can be declared for a given sum. For instance, the sum over ''Int'' and ''Float'' could also be declared like this:

<syntaxhighlight lang=""haskell"">
data IntOrFloat = Int Int | Float Float
</syntaxhighlight>

(We reuse type names as constructor symbols here, which is possible in Haskell, as these are separate namespaces.) The earlier conversion function is now to be defined by ordinary case discrimination over a (non-polymorphic) algebraic data type:

<syntaxhighlight lang=""haskell"">
asFloat :: IntOrFloat -> Float
asFloat (Int x) = fromIntegral x
asFloat (Float x) = x
</syntaxhighlight>

The advantage of the either type constructor is that it captures universally (polymorphically) the notion of disjoint (labeled) sum. Clearly, sums with more than two cases can be expressed by nested applications of the type constructor.

== Metadata ==

* [[sameAs::http://hackage.haskell.org/package/base-4.2.0.1/docs/Data-Either.html]]
* [[memberOf::Vocabulary:Haskell]]







      ",2014-07-16 21:47:13.441,2017-07-04 13:47:58.616466
Concept,Monadic style,"== Headline ==

Functional programming with [[monad]]s involved

== Metadata ==

* [[instanceOf::Vocabulary:Functional programming]]

",2014-07-17 08:02:11.701,2017-07-04 13:47:58.698775
Concept,Union,"== Headline ==

A labelled data structure that unifies different representations under one type. Tagged unions also have a label identifying which representation they carry at any given time, untagged unions do not.
== Illustration ==

In [[Language:C]], one can define an untagged union, for example a type that may contain either an integer or a floating point number:

<syntaxhighlight language=""c"">
union Number {
    int    i;
    double d;
};
</syntaxhighlight>

One can also manually create a tagged union using a [[Record]], an [[Enumeration]] and an untagged union:

<syntaxhighlight language=""c"">
enum NumberType { INT, DOUBLE };

struct TaggedNumber {
    enum  NumberType type;
    union Number     number;
};
</syntaxhighlight>

Some languages, like [[Language:Haskell]], provide built-in support for tagged unions instead.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Union_%28computer_science%29]]
* [[instanceOf::Data structure]]
* [[memberOf::Vocabulary:Data structure]]
* [[relatesTo::Record]]
* [[relatesTo::Record type]]
",2014-07-24 02:05:20.144,2017-07-04 13:47:58.767227
Concept,Structured programming,"== Headline ==

A [[programming paradigm]] focusing on the use of data structures, subroutines, blocks and loops.
== Illustration ==

Take for example this unstructured version of calculating the factorial in [[Language:C]]:

<syntaxhighlight language=""c"">
unsigned long
unstructuredFactorial(unsigned long f)
{
    unsigned long result = 1;
AGAIN:
    if (f == 0) return result;
    result *= f--;
    goto AGAIN;
}
</syntaxhighlight>

A structured programming version of that would be to use a loop instead of goto and exit the subroutine at the end instead of the middle:

<syntaxhighlight language=""c"">
unsigned long
structuredFactorial(unsigned long f)
{
    unsigned long i, result = 1;
    for (i = 1; i <= f; ++i)
        result *= i;
    return result;
}
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Structured_programming]]
* [[instanceOf::Programming paradigm]]
* [[memberOf::Vocabulary:Programming]]
",2014-07-24 02:55:37.184,2017-07-04 13:47:58.844774
Concept,Manual memory management,"== Headline ==

The most basic [[Memory management]] technique: the programmer has to explicitly allocate and deallocate their dynamic memory.

== Illustration ==

Take for example [[Language:CPlusPlus]], where if an array's size is not known at compile time, it must be dynamically allocated:

<syntaxhighlight language=""c"">
void
doStuff(const size_t& length)
{
    int  automatic[] = {1,2,3,4,5};     // size known at compile time, no need for dynamic memory
    int* dynamic     = new int[length]; // size not known, need to use new[]
    // do something interesting
    delete[] dynamic;
}
</syntaxhighlight>

This approach is obviously very easy to implement and doesn't incur any overhead, but it can also very easily lead to [[Memory leak]]s. If in the above example the ""do something interesting"" part can throw an exception, there is potential for a leak.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Memory_management]]
* [[memberOf::Vocabulary:Programming]]
* [[instanceOf::Memory management]]

",2014-07-24 03:55:41.843,2017-07-04 13:47:58.901503
Contribution,aquarium,"== Headline ==

You have created new contribution using [https://github.com Github]. Source code for this contribution you can find [https://github.com/https://github.com/DmiN05/101repo-thesis/tree/master/contribution/aquarium here].
== Metadata ==
* [[developedBy::Contributor:DmiN05]]
* [[carries::Tag:Stub]]",2014-08-04 16:58:26.135,2017-07-04 13:47:59.4564
Concept,Memory management,"== Headline ==

The technique of allocating and deallocating dynamic memory.
== Illustration ==

Compare the various techniques of memory management:

* [[Manual memory management]]
* [[Resource Acquisition Is Initialization]]
* [[Reference counting]]
* [[Garbage collection]]
== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Memory_management]]
* [[memberOf::Vocabulary:Programming]]
",2014-07-24 03:57:25.638,2017-07-04 13:47:58.922802
Concept,Memory leak,"== Headline ==

The act of a program not deallocating dynamically allocated memory that becomes unreachable.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Memory_leak]]
* [[memberOf::Vocabulary:Programming]]
* [[partOf::Memory management]]

",2014-07-24 04:51:23.335,2017-07-04 13:47:58.937391
Concept,Resource Acquisition Is Initialization,"== Headline ==

RAII is a memory management technique in which resources (memory, file handles etc.) are tied to object lifetime: they are acquired when an object is initialized and released when the object is destroyed.
== Illustration ==

A good way to illustrate RAII are mutex locks in [[Language:CPlusPlus]]:

<syntaxhighlight lang=""cpp"">
void
doStuffExclusively(std::mutex& mtx)
{
    std::lock_guard<std::mutex> lock(mtx); // acquire lock to mutex
    // do something interesting here
    // note that lock is not explicitly released
}
</syntaxhighlight>

Once the lock goes out of scope - be it through the function returning or an exception being thrown - the object is destroyed and the lock is released. This approach is generally used in conjunction with [[Manual memory management]] for the cases that RAII is not suitable, and in turn RAII can be used to wrap around [[Manual memory management]].
== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/RAII]]
* [[memberOf::Vocabulary:Programming]]
* [[instanceOf::Memory management]]
",2014-07-24 06:28:51.329,2017-07-04 13:47:58.971468
Concept,Garbage collection,"== Headline ==

A [[Memory management]] technique that intermittently traces the reachability of all objects and frees the memory of those that aren't reachable.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Tracing_garbage_collection]]
* [[memberOf::Vocabulary:Programming]]
* [[instanceOf::Memory management]]",2014-07-24 11:26:27.002,2017-07-04 13:47:59.070533
Contribution,javaJacksonStreaming,"== Headline ==

Processing JSON with the [[Technology:Jackson JSON Processor|Jackson]] Streaming API

==Characteristics==

This contribution process a company saved in a JSON-file. It works directly at the file without parsing to POJO or Tree representation.

==Illustration==

The JsonFactory provides methods for creating JsonParsers and JsonGenerators:

A JsonParser reads the file and produces tokens for single properties as well as for JSON objects or arrays.
The total method searches this tokens for the ""salary""-properties and add them.
A JsonGenerator writes data into a JSON file, this contribution uses the generator to cut the salaries and write it to a JSON file.

==Usage==
Use [[Technology:Gradle|]] to build this contribution. For running and editing this contribution supports [[Technology:Eclipse|]].

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[developedBy::Contributor:mpaul138]]
* [[uses::Language:JSON]]
* [[uses::Language:Plain Text]]
* [[uses::Language:Java]]

",2014-08-15 14:52:02.912,2017-07-04 13:47:59.820056
Technology,CMake,"== Headline ==

A cross-platform build system that generates files for various native build systems

== Details ==

For instance, CMake can be used with [[:Visual Studio]].

== Metadata ==

* [[sameAs::http://www.cmake.org/]]
* [[sameAs::http://en.wikipedia.org/wiki/CMake]]
* [[similarTo::Technology:Make]]

",2014-07-24 21:28:31.02,2017-07-04 13:47:59.088766
Language,Lua,"== Headline ==

An embedded [[Multi-paradigm programming language|multi-paradigm]], [[Functional  programming language|functional]], [[OO programming language|object-oriented]], [[Procedural programming language|procedural]] [[Scripting language|interpreted scripting]] [[Software language|language]], distributed as a [[Language:C|C]] [[Library]].

== Metadata ==
* [[instanceOf::Multi-paradigm programming language]]
* [[instanceOf::Functional programming language]]
* [[instanceOf::OO programming language]]
* [[instanceOf::Scripting language]]
* [[instanceOf::Procedural programming language]]
* [[sameAs:http://www.lua.org/]]
* [[sameAs:http://en.wikipedia.org/wiki/Lua_%28programming_language%29]]
* [[uses::Garbage collection]]

",2014-07-24 21:46:13.657,2017-07-04 13:47:59.147476
Contributor,DmiN05,"",2014-08-04 16:06:34.473,2017-07-04 13:47:59.409822
Contribution,AspectJ2,"== Headline ==

You have created new contribution using [https://github.com Github]. Source code for this contribution you can find [https://github.com/https://github.com/DmiN05/101repo-thesis/tree/master/contribution/aspectJ here].
== Metadata ==
* [[developedBy::Contributor:DmiN05]]
* [[carries::Tag:Stub]]",2014-08-04 16:28:38.098,2017-07-04 13:47:59.42528
Contribution,springAOP,"== Headline ==

You have created new contribution using [https://github.com Github]. Source code for this contribution you can find [https://github.com/https://github.com/DmiN05/101repo-thesis/tree/master/contribution/springAOP here].
== Metadata ==
* [[developedBy::Contributor:DmiN05]]
* [[carries::Tag:Stub]]",2014-08-04 16:57:57.146,2017-07-04 13:47:59.440546
Concept,Dictionary,"A Python-Data-Structure bases on Key-Value-Pairs.

== Metadata ==

* [[instanceOf::Associative Array]]

",2015-08-12 14:01:37.505,2017-07-04 13:48:07.3993
Technology,Jackson JSON Processor,"==Headline==
A [[Language:JSON|]] API for [[Language:Java|]] divided in three [[Language::Jar|Jars]]
==Overview==
For a general introduction please see the [https://github.com/FasterXML/jackson Jackson Github Site].
* [https://github.com/FasterXML/jackson-core Jackson Streaming Module]: low-level streaming API
* [https://github.com/FasterXML/jackson-databind Jackson Databind Module]: databinding support like Trees for the streaming API
* [https://github.com/FasterXML/jackson-annotations Jackson Annotations Module]: standard Jackson Annotations used for further control of the serialization
",2014-08-15 15:15:10.499,2017-07-04 13:47:59.841392
Contribution,javaJacksonTreeModel,"== Headline ==

Processing [[Language:JSON|]] with the [[Technology:Jackson JSON Processor|Jackson DataBinding API]] using a JsonTree representation

==Characteristics==

This contribution process a company saved in a JSON-file to JsonTree representation.
It performs the Features [[Feature:Total|]] , [[Feature:Cut|]] ,[[Feature:Parsing|]] and [[Feature:Unparsing|]], to demonstrate how to use a JsonTree from Jackson.

==Illustration==

This contribution uses a ObjectMapper for parsing and unparsing.
The mapper provides methods to easily map between most kinds of Java object and a JSON file.
In this case the mapper maps the JSON to a JsonTree.

<syntaxhighlight lang=""java"">
public static JsonNode parseFromFile(File file) {
    ObjectMapper mapper = new ObjectMapper();
    JsonNode root = null;
    try {
        root = mapper.readTree(file);
    } catch (IOException e) {
        e.printStackTrace();
    }
    return root;
}
</syntaxhighlight>
A JsonTree is build of JsonNodes, which can be simple key-value pairs, JSON objects or JSON arrays.

'''A part from the total method as a simple example to demonstrate how to search for certain values:'''
<syntaxhighlight lang=""java"">
    if (node.get(""salary"") != null)
        return node.get(""salary"").asDouble();
    else {
        if (node.has(""departments"")) {
            Iterator<JsonNode> iterator = node.path(""departments"").elements();
            while (iterator.hasNext()) {
                result += total(iterator.next());
            }
        }
        if (node.has(""employees"")) {
            Iterator<JsonNode> iterator = node.path(""employees"").elements();
            while (iterator.hasNext()) {
                result += total(iterator.next());
            }
        }
    }
</syntaxhighlight>
The class Unparsing used a ObjectWriter to prettyprint the tree to its JSON representation.
<syntaxhighlight lang=""java"">
    ObjectMapper mapper = new ObjectMapper();
    PrettyPrinter printer = new DefaultPrettyPrinter();
    ObjectWriter writer = mapper.writer(printer);
</syntaxhighlight>

==Usage==
Use [[Technology:Gradle|]] to build this contribution. For running and editing this contribution supports [[Technology:Eclipse|]].

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==
* [[developedBy::Contributor:mpaul138]]
* [[uses::Language:JSON]]
* [[uses::Language:Plain Text]]
* [[uses::Language:Java]]

",2014-08-15 15:50:55.174,2017-07-04 13:48:00.04141
Contribution,javaJacksonDataBinding,"== Headline ==

Processing [[Language:JSON|]] with the [[Technology:Jackson JSON Processor|Jackson DataBinding API]] using a [[POJO]] representation

==Characteristics==

This contribution process a company saved in a JSON-file to a company object.
It performs the Features [[Feature:Total|]] , [[Feature:Cut|]] ,[[Feature:Parsing|]] and [[Feature:Unparsing|]], to demonstrate how to use a POJO parsed from a JSON file.

==Illustration==

This contribution uses a ObjectMapper for parsing and unparsing.
The mapper provides methods to easily map between most kinds of Java object and a JSON file.
In this case the mapper maps the JSON directly to a POJO company.
<syntaxhighlight lang=""java"">
public static Company parse(File file) {
    ObjectMapper mapper = new ObjectMapper();
    Company company = null;
    try {
        company = mapper.readValue(file, Company.class);
    } catch (IOException e) {
        e.printStackTrace();
    }
    return company;
}
</syntaxhighlight>
The class Unparsing used a ObjectWriter to prettyprint the company to its JSON representation.
<syntaxhighlight lang=""java"">
    ObjectMapper mapper = new ObjectMapper();
    PrettyPrinter printer = new DefaultPrettyPrinter();
    ObjectWriter writer = mapper.writer(printer);
</syntaxhighlight>
The cut and total method are implemented without further use of the Jackson API.
<syntaxhighlight lang=""java"">
public static double total(Company c) {
    double result = 0.0;
    if (c.getDepartments() != null)
        for (Department d : c.getDepartments())
            result += total(d);
    return result;
}
</syntaxhighlight>

==Usage==
Use [[Technology:Gradle|]] to build this contribution. For running and editing this contribution supports [[Technology:Eclipse|]].

See https://github.com/101companies/101simplejava/blob/master/README.md

== Metadata ==

* [[developedBy::Contributor:mpaul138]]

* [[uses::Language:JSON]]
* [[uses::Language:Plain Text]]
* [[uses::Language:Java]]

",2014-08-15 16:08:02.731,2017-07-04 13:48:00.208123
Contribution,h2jdbcMany,"== Headline ==

Database programming with JDBC and H2-Database containing one or more companies
==Characteristics==

We use JDBC/SQL for data processing. That is, we use embedded SQL in Java.
==Relationships==
For a [[Technology:MySQL|]] version see [[Contribution:mySqlMany]].

For a version using [[Language:SQL|]] ""SUM"" in Total see [[Contribution:h2jdbcManySum]].

For a version with a database for exactly one company see [[Contribution:h2jdbcOne]].
==Illustration==

This contribution is using a simple ""SELECT"" statement returning a set of salaries in Total:
<syntaxhighlight lang=""SQL"">
SELECT salary FROM employee
</syntaxhighlight>
Therefore we need a loop for adding the single salaries

<syntaxhighlight lang=""Java"">
while (salaries.next())
    total += salaries.getDouble(""salary"");
</syntaxhighlight>
==Architecture==
Overview of the [[Language:Java|]] classes:
*Total: Using [[Language:SQL|]] ""SELECT"" statement to get all salaries, then iterating over the ResultSet.
*Cut: Using [[Language:SQL|]] ""UPDATE"" statement to cut all salaries.
*Depth: Using [[Language:SQL|]] ""SELECT"" statement to get maximum depth of all departments.
==Usage==

This contribution uses [[Technology:Gradle]] for building. [[Technology:Eclipse]] is supported.

See https://github.com/101companies/101simplejava/blob/master/README.md
== Metadata ==
* [[developedBy::Contributor:mpaul138]]
* [[developedBy::Contributor:DerDackel]]


* [[uses::Language:Plain Text]]
* [[uses::Language:SQL]]
* [[uses::Language:Java]]
* [[uses::Technology:JDBC]]
* [[uses::Technology:Eclipse]]
* [[uses::Technology:H2]]
* [[implements::Feature:Total]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Depth]]
",2014-08-17 16:43:08.394,2017-07-05 15:30:23.451985
Technology,LINQ to DataSet,"== Headline ==

[[Technology:LINQ|Language-integrated queries]] with DataSets

== Metadata ==

* [[sameAs::http://msdn.microsoft.com/en-us/library/bb386977(v=vs.110).aspx]]
",2014-09-03 12:13:18.02,2017-07-04 13:48:05.067453
Concept,Const-correctness,"== Headline ==

A type of program correctness where variables declared constant or immutable can be verified not to change.
== Illustration ==

Take for example [[Language:CPlusPlus]]. If we want to write a function and ensure that its parameter is not modified, we can pass it per constant reference. If the immutability is violated, the program will not compile:

<syntaxhighlight lang=""c++"">
void
doSomething(const int& i) // pass by constant reference
{
    ++i; // compile error
}
</syntaxhighlight>
== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Const-correctness]]
* [[memberOf::Vocabulary:Programming]]
",2014-08-18 00:04:45.698,2017-07-04 13:48:01.092369
Concept,Syntactic sugar,"== Headline ==

Redundant additions to a programming language's syntax that aids in expressing ideas more concisely.
== Illustration ==

Take for example, array access in [[Language:C]]:

<syntaxhighlight lang=""c"">
// arr[i] is syntactic sugar for *(arr + i)
int arr[]  = {1, 2, 3};
int bitter = *(arr + 1); // no sugar
int sweet  = arr[1];     // syntactic sugar
</syntaxhighlight>
== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Syntactic_sugar]]
* [[memberOf::Vocabulary:Programming]]
",2014-08-19 05:18:56.289,2017-07-04 13:48:01.133785
Concept,Boilerplate code,"== Headline ==

Code that need to be repeated in many places with virtually no modifications, to the point where its creation can be automated.

== Illustration ==

As an example, take writing a class in [[Language:Perl]]:

<syntaxhighlight lang=""perl"">
package Company; # class declaration
use strict;
use warnings;

# constructor needs to be written manually
sub new {
    my $class = shift;
    # creating hash with default arguments
    my $mess  = {
        children => [],
        @_
    };
    # checking for required arguments
    die 'No name given' if not $mess->{name};
    # creating an object
    return bless $mess => $class;
}

# accessors need to be written manually
sub name {
    my ($self, $new_name) = @_;
    if ($new_name) {
        return $self->{name} = $new_name;
    } else {
        return $self->{name};
    }
}

sub children {
    my ($self, $new_children) = @_;
    if ($new_children) {
        return $self->{children} = $new_children;
    } else {
        return $self->{children};
    }
}
</syntaxhighlight>

Since no sane person would do this for every class and every accessor, there are ways to automate this process. In fact, the system is designed to be automated.

For example, using [[Technology:Moops]]:

<syntaxhighlight lang=""perl"">
use Moops;

class Company {
    has 'name'     => (is => 'rw', required => 1         );
    has 'children' => (is => 'rw', default  => sub { [] });
}
</syntaxhighlight>

These few lines remove the need of all the boilerplate seen above.

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Boilerplate_code]]
* [[memberOf::Vocabulary:Programming]]

",2014-08-19 07:43:21.217,2017-07-04 13:48:01.25594
Concept,Namespace,"== Headline ==

A container for a set of identifiers. Also known as package in [[Language:Java]].

== Illustration ==

[[Language:CPlusPlus]] provides declaration of namespaces and resolution of namespaces via the :: operator.

<syntaxhighlight lang=""c++"">
#include <iostream>

// A namespace named a
namespace a {
    char foo() { return 'a'; }
}

// Another namespace, its foo function does not clash with a::foo
namespace b {
    char foo() { return 'b'; }
}

// A function in the global namespace, also no clash
char foo() { return '-'; }

int
main()
{
    std::cout <<    foo() << ""\n""; // prints '-'
    std::cout <<  ::foo() << ""\n""; // prints '-'
    std::cout << a::foo() << ""\n""; // prints 'a'
    std::cout << b::foo() << ""\n""; // prints 'b'
}
</syntaxhighlight>

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Namespace]]
* [[memberOf::Vocabulary:Programming]]

",2014-08-19 19:49:08.567,2017-07-04 13:48:01.327247
Technology,Moops,"== Headline ==

Moops stands for ""Moops Object Oriented Programming Sugar"". Helps make [[OO programming]] in [[Language:Perl]] easier and more concise by adding [[Syntactic sugar]] and reducing [[Boilerplate code]].

== Illustration ==

A class written in pure [[Language:Perl|Perl]]:

<syntaxhighlight lang=""perl"">
package Company; # class declaration
use strict;
use warnings;

# constructor needs to be written manually
sub new {
    my $class = shift;
    # creating hash with default arguments
    my $mess  = {
        children => [],
        @_
    };
    # checking for required arguments
    die 'No name given' if not $mess->{name};
    # creating an object
    return bless $mess => $class;
}

# accessors need to be written manually
sub name {
    my ($self, $new_name) = @_;
    if ($new_name) {
        return $self->{name} = $new_name;
    } else {
        return $self->{name};
    }
}

sub children {
    my ($self, $new_children) = @_;
    if ($new_children) {
        return $self->{children} = $new_children;
    } else {
        return $self->{children};
    }
}
</syntaxhighlight>

The same functionality written with the help of Moops:

<syntaxhighlight lang=""perl"">
use Moops;

class Company {
    has 'name'     => (is => 'rw', required => 1         );
    has 'children' => (is => 'rw', default  => sub { [] });
}
</syntaxhighlight>

== Metadata ==

[[sameAs::http://search.cpan.org/~tobyink/Moops/lib/Moops.pm]]
[[uses::Language:Perl]]
[[facilitates::OO programming]]
",2014-08-19 22:28:27.805,2017-07-04 13:48:01.447084
Technology,TestMore,"== Headline ==

Core [[Unit testing]] module for [[Language:Perl]].

== Metadata ==

[[partOf::Language:Perl]]
[[sameAs::http://perldoc.perl.org/Test/More.html]]
[[sameAs::http://en.wikipedia.org/wiki/Test::More]]
",2014-08-19 22:45:05.029,2017-07-04 13:48:01.465718
Concept,Domain-specific language,"== Headline ==

A [[Domain-specific language]] is ""a computer programming languages of limited expressiveness focused on a particular domain."" ([http://martinfowler.com/dsl.html DSLs - Martin Fowler with Rebecca Parsons]) The opposite is a [[General-purpose language]].

Fowler identifies four key elements:

* '''Computer programming language''': A DSL is used by human users to instruct a computer. It is designed to be easy understandable for humans, but should be executable.
* '''Language nature''': The DLS should have a sense of fluency, by the way the expressions can be composed together.
* '''Limited expressiveness''': A DSL supports a bare minimum of language features needed to support its domain.
* '''Domain focus''': The DSL has a clear focus on a small domain. The domain focus is what makes a limited language worthwhile.

Fowler divides DSLs into three categories:

* [[External DSL]]: A language separated from the host language. It can have a custom syntax or use another languages syntax like [[language:XML]].
* [[Internal DSL]]: A DSL that is constructed using a [[general-purpose language]] in a particular way. The DSL uses a small subset of language features, is valid code in the host language, but should feel like a custom language.
* A '''Language Workbench''' is a specialized [[IDE]] for constructing DSLs. Additionally it can provide an editing environment for the designed language with features like code completion or refactoring.

== Abbreviation ==

DSL

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Domain-specific_language]]
* [[memberOf::Vocabulary:Programming]]
[[cite::http://martinfowler.com/dsl.html]]
[[memberOf::Vocabulary:Software language engineering]]
[[instanceOf::Concept]]

",2014-08-20 00:01:28.823,2017-07-04 13:48:01.709284
Concept,SOAP,"Acronym for ""Simple Object Access Protocol""

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/SOAP]]

",2015-08-12 13:54:16.871,2017-07-04 13:48:07.3915
Concept,General-purpose language,"== Headline ==

A [[Software language]] applicable across [[Application domain]]s. Opposed to [[Domain-specific language]].

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/General-purpose_language]]
* [[memberOf::Vocabulary:Programming]]",2014-08-20 00:07:45.823,2017-07-04 13:48:01.725102
Language,CoffeeScript,"== Headline ==

A language that [[Transcompiler|transcompiles]] into [[Language::JavaScript]], adding [[Syntactic sugar]] (such as [[Pattern matching]], [[List comprehension]] and sane [[Loop]] syntax) to make writing it more bearable.

== Metadata ==
* [[instanceOf::Functional programming language]]
* [[instanceOf::OO programming language]]
* [[instanceOf::Multi-paradigm programming language]]
* [[instanceOf::Scripting language]]
*
* [[sameAs::http://coffeescript.org/]]
* [[sameAs::http://en.wikipedia.org/wiki/CoffeeScript]]

",2014-08-21 04:10:21.054,2017-07-04 13:48:01.935117
Contribution,jsTree,"== Headline ==

A [[Client]] to present a [[Feature:Web UI|Web UI]] against a [[REST|REST]] [[Server]] using the [[Web UI REST API]].
== Characteristics ==

This contribution uses [[Technology:jsTree]] for displaying the model as a tree structure to enable [[Feature:Browsing]]. The user can right-click on tree nodes to get a menu of actions that are sent to the [[Server]] and dragging of nodes can be used for [[Feature:Restructuring]]. [[Feature:Editing]] is enabled by showing fillable forms to the user.
== Illustration ==

The [[Language:CoffeeScript|CoffeeScript]] code isn't terribly interesting, it is just a lot of [[Ajax]] and calls against [[Technology:jsTree|the jsTree library]].

But the [[Feature:Web UI|Web UI]] looks like this when running against a server. You can see the tree, multiple forms, a message coming in from the server and an open context menu:

[[media:https://raw.githubusercontent.com/hartenfels/WebUI101/master/screenshot.png]]
== Relationships ==

[[Contribution:dancer]] and [[Contribution:bottle2]] are [[Server]]s that use this contribution as their default [[Client]].
== Architecture ==

The logic for this client is in a [https://github.com/hartenfels/WebUI101/blob/master/web ui.coffee CoffeeScript file] that can be converted into [https://github.com/hartenfels/WebUI101/tree/master/dist a JavaScript file].

For servers, there's the [https://github.com/hartenfels/WebUI101/blob/master/dist/web ui.html HTML base document] that includes all necessary files via [http://rawgit.com/ RawGit].
== Usage ==

See [https://github.com/hartenfels/WebUI101/blob/master/readme.md readme.md on GitHub].
== Metadata ==
* [[developedBy::Contributor:hartenfels]]
* [[uses::Web UI REST API]]
* [[uses::Language:CoffeeScript]]
* [[uses::Language:JavaScript]]
* [[uses::Language:HTML]]
* [[uses::Language:JSON]]
* [[uses::Technology:jsTree]]
* [[uses::Technology:jQuery]]
* [[uses::Technology:jQueryUI]]
* [[uses::REST]]
* [[implements::Feature:Web UI]]
* [[implements::Feature:Browsing]]
* [[implements::Feature:Editing]]
* [[implements::Feature:Restructuring]]
* [[implements::Feature:Distribution]]
* [[implements::Feature:Hierarchical company]]
",2014-08-21 03:59:03.414,2017-07-05 15:30:23.785924
Concept,Function_Sequence,"== Headline ==

Function Sequence is an [[Internal DSL]] pattern that uses series of unrelated calls. [[Contribution:javaDSLFunctionSequence]] is the demo implementation.

== Metadata ==

[[instanceOf::Design pattern]]
[[cite::http://martinfowler.com/dsl.html]]

",2014-08-24 15:01:04.677,2017-07-04 13:48:04.720072
Concept,Object Scoping,"== Headline ==

'''avoid global functions/data''' by moving them to an abstract class where each user script gets a subclass

== Illustration ==

Object Scoping is a pattern used in [[Internal DSL]]s when there is the need to use global functions and (worse) global state. The idea is to put all these is an one abstract class and let the script that needs them become a subclass. Thus all needed functions and states can be used and encapsulation is achieved.

== Metadata ==

[[instanceOf::Design pattern]]
[[cite::http://martinfowler.com/dsl.html]]

",2014-08-24 15:25:32.924,2017-07-04 13:48:04.739842
Concept,Nested Function,"== Headline ==

Nested Function is an [[Internal DSL]] pattern that is ideal to build hierarchic structures into a [[Domain-specific language]]. [[Contribution:javaDSLNestedFunction]] is the demo implementation.
== Metadata ==


[[instanceOf::Design pattern]]
[[cite::http://martinfowler.com/dsl.html]]
",2014-08-24 15:53:41.212,2017-07-04 13:48:04.754726
Concept,Control-flow graph,"== Headline ==

Graph of paths through a program that may be executed

== Citation ==

(https://en.wikipedia.org/wiki/Control_flow_graph, 12 November 2015)

In a control flow graph each node in the graph represents a basic block, i.e., a straight-line piece of code without any jumps or jump targets; jump targets start a block, and jumps end a block. Directed edges are used to represent jumps in the control flow.

== Illustration ==

Consider the following implementation of [[Factorial]] in [[Language:C]]

<syntaxhighlight lang=""c"">
int factorial(int n) {
  int r = 1;
start:
  if (n<=0)
    goto end;
  r = r * n;
  n = n - 1;
  goto start;
end:
  return r;
}
</syntaxhighlight>

The following version assign block ids (A)-(D) to all lines that are gotos or targets thereof.

<syntaxhighlight lang=""c"">
int factorial(int n) {
(A)   int r = 1;
    start:
(B)   if (n==0)
        goto end;
(C)   r = r * n;
(C)   n = n - 1;
      goto start;
    end:
(D)   return r;
}
</syntaxhighlight>

By taking into account jumps and branching due to selection, we derive the following edges:
* (A) -> (B)
* (B) -> (D)
* (B) -> (C)
* (C) -> (B)

See also the illustration of [[spaghetti code]] where a C program is annotated with some edges of a control-flow graph.

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Control flow graph]]
",2015-11-12 08:36:12.498,2017-07-04 13:48:08.350329
Concept,Method Chaining,"== Headline ==

Method Chaining is an [[Internal DSL]] pattern that is ideal for optional arguments and IDE-autocompletion. [[Contribution:javaDSLMethodChaining]] is the demo implementation.

== Metadata ==


[[instanceOf::Design pattern]]
[[cite::http://martinfowler.com/dsl.html]]

",2014-08-24 16:08:15.618,2017-07-04 13:48:04.768535
Technology,jsTree,"== Headline ==

[[Language:JavaScript]] [[Library]] for displaying an interactive tree structure in a [[Web browser]].

== Metadata ==

[[sameAs::http://www.jstree.com/]]
[[uses::Language:JavaScript]]",2014-08-29 00:56:17.713,2017-07-04 13:48:04.813084
Technology,jQueryUI,"== Headline ==

A [[Language:JavaScript]] [[Library]] based on [[Technology:jQuery]] that provides widgets, effects and themes in [[Web browser]]s.

== Metadata ==

* [[sameAs::http://jqueryui.com/]]
* [[sameAs::http://en.wikipedia.org/wiki/JQuery_UI]]
* [[uses::Technology:jQuery]]
* [[uses::Technology:CSS]]
* [[uses::Language:JavaScript]]",2014-08-29 08:04:00.594,2017-07-04 13:48:04.835752
Technology,Windows,"== Headline ==

The Microsoft Windows [[operating system]]

== Metadata ==

* [[instanceOf::Operating system]]
* [[sameAs::http://en.wikipedia.org/wiki/Microsoft_Windows]]",2014-08-29 21:30:46.03,2017-07-04 13:48:04.865537
Language,RDF,"== Headline ==

The metadata data model of W3C

== Metadata ==

* [[instanceOf::Software language]]
* [[sameAs::http://en.wikipedia.org/wiki/Resource_Description_Framework]]
* [[sameAs::http://www.w3.org/RDF/]]
",2014-08-30 19:28:12.1,2017-07-04 13:48:04.939331
Language,RDFS,"== Headline ==

The [[schema]] for [[Language:RDF|RDF]]

== Metadata ==

* [[instanceOf::Software Language]]
* [[sameAs::http://www.w3.org/TR/rdf-schema/]]
* [[sameAs::http://en.wikipedia.org/wiki/RDF_Schema]]
",2014-08-30 19:30:40.604,2017-07-04 13:48:04.953553
Language,OWL,"== Headline ==

The [[Semantic Web]] language

== Metadata ==

* [[instanceOf::Software Language]]
* [[sameAs::http://www.w3.org/2001/sw/wiki/OWL]]
* [[sameAs::http://en.wikipedia.org/wiki/Web_Ontology_Language]]

",2014-08-30 19:34:25.662,2017-07-04 13:48:04.967381
Technology,Sesame,"== Headline ==

A framework for processing [[Language:RDF|RDF]] data

== Metadata ==

* [[instanceOf::Framework]]
* [[sameAs::http://www.openrdf.org/]]
* [[sameAs::http://en.wikipedia.org/wiki/Sesame_(framework)]]
",2014-08-30 19:53:04.715,2017-07-04 13:48:04.980411
Document,JLS,"== Headline ==

The Java Language Specification

== Metadata ==

* [[sameAs::http://docs.oracle.com/javase/specs/]]
",2014-09-01 11:08:02.044,2017-07-04 13:48:04.988491
Concept,Referential transparency,"== Headline ==

Guarantee of same results for same arguments

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)]]
* [[instanceOf::Software concept]]

",2014-09-02 10:17:55.183,2017-07-04 13:48:04.999397
Concept,Fold,"== Headline ==

[[Fold function]] or [[fold transformation]] or [[catamorphism]]

== Metadata ==
* [[instanceOf::Vocabulary:Disambiguation]]
*

== Details ==

See also the inverse notation of [[unfold]].",2014-09-05 10:19:38.749,2017-07-04 13:48:05.119609
Concept,UI,"== Headline ==

A user interface

== Metadata ==

* [[carries::Tag:Abbreviation]]

",2014-09-09 21:19:50.356,2017-07-04 13:48:05.129358
Feature,Offline mode,"== Headline ==

Continue functioning even with an offline server

== Description ==

When [[Feature:Distribution]] is used for the system architecture, then we  require that the system should function even if a server component is unanvailable. That is, some limited functionality is still to be provided on the client.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Online_and_offline]]
* [[dependsOn::Feature:Distribution]]
",2014-09-09 21:45:37.995,2017-07-04 13:48:05.147376
Contribution,performance0,"==Fragment0==

<fragment url=""src/Main.hs/type/Company""/>
<fragment url=""src/Main.hs/type/Employee""/>
",2014-09-24 15:01:44.528,2017-07-04 13:48:05.155788
Contribution,performance2,"==Fragments==


<fragment url=""dao/CompanyCompany.java/class/CompanyCompany""/>
",2014-09-24 15:02:05.071,2017-07-04 13:48:05.166369
Contribution,performance3,"",2014-09-24 15:02:16.956,2017-07-04 13:48:05.17001
Contributor,Michael Monschau,"",2014-10-22 13:56:42.499,2017-07-04 13:48:05.173536
Contributor,tbernau,"",2014-10-27 15:38:43.042,2017-07-04 13:48:05.177011
Contributor,akakcolin,"",2014-11-29 12:48:41.083,2017-07-04 13:48:05.180607
Contributor,kassnik,"",2014-11-30 20:53:02.615,2017-07-04 13:48:05.184192
Contribution,processing,"== Headline ==

You have created new contribution using [https://github.com Github]. Source code for this contribution you can find [https://github.com/https://github.com/kassnik/processing here].
== Metadata ==
* [[developedBy::Contributor:kassnik]]
* [[carries::Tag:Stub]]",2014-11-30 20:53:31.723,2017-07-04 13:48:05.199931
Contributor,nikonovd,"",2014-12-04 12:00:22.316,2017-07-04 13:48:05.204245
Contributor,kevin-klein,"",2015-01-08 12:08:17.793,2017-07-04 13:48:05.207712
Contributor,DerDackel,"",2015-03-17 16:12:32.896,2017-07-04 13:48:05.405193
Contributor,megaplanet,"",2015-03-26 15:10:59.019,2017-07-04 13:48:05.408657
Concept,Flat company,"== Headline ==

A [[data model]] for flat companies

== Description ==

Flat companies are sufficiently described by the base feature [[Feature:Company]].

== Motivation ==

The data model for flat companies is supposed to provide a simple (in fact, trivial) starting point for contributions. Despite its simplicity, the data model readily exercises some data modeling facets: basic types such as strings and floats, compound types based on tuples or records, mandatory as opposed to optional properties, and list-based containers.

== Illustration ==

The feature is illustrated with a data model in [[Language:Haskell]]; [[type synonym]]s instead of [[algebraic data type]]s are used to emphasize the fact that no recursive are defined here:

<syntaxhighlight lang=""haskell"">
type Company = (Name, [Employee])
type Employee = (Name, Address, Salary)
type Name = String
type Address = String
type Salary = Float
</syntaxhighlight>

A sample company takes the following form:

<syntaxhighlight lang=""haskell"">
( ""Acme Corporation"",
  [
    (""Craig"", ""Redmond"", 123456),
    (""Erik"", ""Utrecht"", 12345),
    (""Ralf"", ""Koblenz"", 12342),
    (""Ray"", ""Redmond"", 234567),
    (""Klaus"", ""Boston"", 23456),
    (""Karl"", ""Riga"", 2345),
    (""Joe"", ""Wifi City"", 2344)
 ]
)
</syntaxhighlight>

Company data is a pair consisting of the company name and a list of employees. Each employee has a name, an address, and a salary.

These snippet originate from [[Contribution:haskellList]].

== Relationships ==

* See [[Feature:Hierarchical_company]] for hierarchical, i.e., non-flat companies.
* The features [[Feature:Flat company]] and [[Feature:Hierarchical_company]] are mutually exclusive and either of them must be selected for any realization of the [[@system]].
* Several features cannot be usefully combined with [[Feature:Flat company]]. For instance, [[Feature:Depth]] for the computation of the nesting depth of departments makes no sense without (nested) departments.

== Guidelines ==

* The terms ""company"", ""employee"", ""manager"", ""name"", ""address"", and ""salary"" should appear as part of the abstractions that realize the corresponding ingredients of the data model.
* A ''sample company'' should be described and processed in some ways, depending on what other features are implemented.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Hierarchical organization]]
* [[instanceOf::Data requirement]]
* [[instanceOf::Optional feature]]
* [[varies::Feature:Company]]
",2015-04-15 16:41:43.227,2017-07-04 13:48:05.634694
Concept,Starter,"== Headline ==

A few very simple implementation of the 101system

== Metadata ==
",2015-04-23 15:53:42.511,2017-07-04 13:48:05.651857
Concept,Undo-redo,"== Headline ==

Undo/redo capability in the UI

== Description ==

Modifications of salaries and modifications of other attributes can be undone or redone.


== Metadata ==
* [[instanceOf::UI 101feature]]
* ",2015-04-23 15:54:16.733,2017-07-04 13:48:05.802924
Contribution,sqliteSingle,"== Headline ==
A SQLite-Contribution


==Characteristics==
A small Contribution implementing 101companies with plain (non-embedded) [Language:SQL].

==Illustration==

The following Diagram describes the Data-Schema:

[[media:https://raw.githubusercontent.com/101companies/101repo/master/contributions/sqliteSingle/doc/schema.png]]

SQL uses so-called Pragmas for storing settings, in most cases this is handled by the embedding language.
<syntaxhighlight lang=""SQL"">
PRAGMA foreign_keys = ""TRUE""; --enable foreign keys
PRAGMA recursive_triggers = ""TRUE""; --enable recursive triggers
</syntaxhighlight>

SQL wraps all Actions in so called Transactions, which are aferwards committed. (Here for inserting the sample company.)

<syntaxhighlight lang=""SQL"">
BEGIN TRANSACTION;
INSERT INTO Department(name) VALUES(""Research"");
INSERT INTO Department(name) VALUES(""Development"" );
INSERT INTO Department(name, superdepartment) VALUES(""Dev1"" ,(SELECT ID FROM Department WHERE name == ""Development""));
INSERT INTO Department(name, superdepartment) VALUES(""Dev1.1"" ,(SELECT ID FROM Department  WHERE name == ""Dev1""));
---- Some more entities
END TRANSACTION;
</syntaxhighlight>


SQL can also automatically call Triggers after certain Actions:
<syntaxhighlight lang=""SQL"">
CREATE TRIGGER IF NOT EXISTS noManager AFTER DELETE ON Department BEGIN UPDATE Employee SET isManager = NULL WHERE department == NULL; END; --Removes Manager Attribute if Department is erased
</syntaxhighlight>

==Architecture==
The Contribution consists out of one file for each Feature, Setup, Teardown and Inserting a sample company and a Makefile for testing and executing.

==Usage==
Please consult the [https://github.com/101companies/101repo/blob/master/contributions/sqliteSingle/Readme.md Readme]

== Metadata ==

*
* [[developedBy::Contributor:Michael Monschau]]
* [[implements::Feature:Cut]]
* [[implements::Feature:Hierarchical Company]]
* [[implements::Feature:Median]]
* [[implements::Feature:Total]]
* [[implements::Feature:Singleton]]
* [[uses::Language:SQL]]
* [[uses::Technology:SQLite]]",2015-02-18 14:40:47.979,2017-07-05 15:30:24.16169
Concept,Restructuring,"== Headline ==

UI support for restructuring company data

== Rationale ==

This feature is supposed to make the UI complete in the sense of allowing insertion, deletion, moves for departments and employees (on top of more basic editing facilities according to [[Feature:Editing]]). That is, it should be possible to delete departments and employees, to insert departments and employees into existing departments, to move departments and employees from their current department to another department (be it by drag and drop or by selecting the department from a drop-down list). As to employees, it should be possible to change the status of an employee to be a manager or not. Along such restructuring, it may happen that the company may become temporarily inconsistent because, for example, a department may mis a manager. Ideally, the UI should highlight such inconsistency (through some coloring, for example) so that problematic departments could be easily observed in the UI.

== Description ==

=== CRUD operations ===

==== Create ====

* Create a department either as top-level department the company or as a sub-department of another department.
* Create an employee in a department.

==== Move ====

* Move a department within the company to another parent, which is either the company or another department,
* Move an employee to another department.
* Change the manager of a department.

==== Delete ====

* Delete a department including all its direct and indirect employees and sub-departments.
* Delete an employee.

=== Miscellaneous ===

Some implementations may also provide an undo capability.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Create, read, update and delete]]
* [[instanceOf::UI requirement]]
* [[instanceOf::Optional feature]]
* [[dependsOn::Feature:Browsing]]
* [[dependsOn::Feature:Editing]]
",2015-04-23 15:54:17.643,2017-07-04 13:48:05.869619
Concept,Editing,"== Headline ==

UI support for editing company data

== Description ==

Users of the [[@system]] expect to be able to edit attributes for names, addresses, and salaries. For instance, the name of an employee may need to be change when the employee gets married. Also, the address of the employee may need to changed when the employee moves to a new house. No structural edits of the company are yet anticipated here, but see [[Feature:Restructuring]]. That is, employees cannot move, for example, from one department to another one. We also consider the status of an employee to be a manager or not as a structural property.

== Details ==

=== Change propagation ===

There are two options for committing changes from text fields to the underlying data (model):

* ''Option 1 is to commit changes immediately'': this option may be sometimes more reasonable for a classic, GUI-based standalone application. (For instance, a change event on a text field may be translated, perhaps with the help of a controller in the sense of MVC, into an actual property change on the data model.)
* ''Option 2 is to commit changes when a ""Save"" button on the view is pushed'': this option may be sometimes more reasonable for a web-based application. (For instance, a web client may want to limit the communication with a server, and hence rely on an explicit ""Save"" action for the propagation of the data changes.)

=== Validation ===

Once editing is enabled, then some constraints must be validated as suggested by [[Feature:Hierarchical_company]]. A notification for the constraint violation may be shown, for example, in the view one line below the offending field. The salary validation (such that salaries are positive decimal values) may be realized via field input restriction. In the following, we describe such validation for the case of a client/server architecture, as this appears to be a more involved scenario.

==== Company ====
* [[client-side]] validation:
** The name of a company is not empty.

==== Department ====
* [[client-side]] validation:
** The name of a department is not empty.
* [[server-side]] validation:
** The name of a department is unique for all departments of the company.

==== Employee ====
* [[client-side]] validation:
** A salary is a positive, double value.
** A salary is not empty.
* [[server-side]] validation:
** Uniqueness of names may need to be checked for some implementations of [[Feature:Hierarchical_company]].
** Additional salary constraints apply when [[Feature:Ranking]] is implemented.

== Metadata ==

* [[instanceOf::UI requirement]]
* [[instanceOf::Optional feature]]
* [[dependsOn::Feature:Browsing]]

",2015-04-23 15:54:18.88,2017-07-04 13:48:06.006439
Concept,Associative Array,"A-Key-Value-Pair-Datastructure

== Metadata ==

* [[memberOf::Vocabulary:Data structure]]
* [[sameAs::https://en.wikipedia.org/wiki/Associative_array]]",2015-08-12 14:03:17.049,2017-07-04 13:48:07.407979
Concept,Software engineering for Haskell,"== Headline ==

Basic software engineering practices for Haskell

== Details ==

Basic [[software engineering]] principles are instantiated for Haskell. That is, Haskell programs are [[modularization|modularized]] (based on a module system), organized (in terms of [[scoping]]), [[documentation|documented]] (based on idiomatic comments), [[packaging|packaged]] (in terms of dependencies), and [[testing|tested]] (specifically unit-tested). To this end, Haskell's where clauses and its [[module system]] as well as the Haskell technologies [[Technology:Haddock]], [[Technology:Cabal]], [[Technology:HackageDB]], and [[Technology:HUnit]] are leveraged.

== Concepts ==

* [[Software engineering]]
* [[Modularization]]
* [[Module]]
* [[Local scope]]
* [[Build tool]]
* [[Package]]
* [[Haskell package]]
* [[Package management system]]
* [[Testing]]
* [[Unit testing]]
* [[Testing framework]]
* [[Documentation]]
* [[Documentation generation]]
* [[Documentation generator]]

== Languages ==

* [[Language:Haskell]]

== Technologies ==

* [[Technology:Cabal]]
* [[Technology:HackageDB]]
* [[Technology:Haddock]]
* [[Technology:HUnit]]

== Features ==

* [[Feature:Total]]
* [[Feature:Median]]
* [[Feature:History]]

== Contributions ==

* [[Contribution:haskellStarter]]
* [[Contribution:haskellEngineer]]
* [[Contribution:haskellBarchart]]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
* [[relatesTo::https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md]]
* [[dependsOn::Script:First steps in Haskell]]

",2015-04-23 15:55:05.107,2017-07-04 13:48:06.197671
Concept,Basic software engineering for Haskell,"== Headline ==

Lecture ""Basic software engineering for Haskell"" as part of [[Course:Lambdas in Koblenz]]
== Details ==

Basic [[software engineering]] principles are instantiated for Haskell. That is, Haskell programs are [[modularization|modularized]] (based on a module system), organized (in terms of [[scoping]]), [[documentation|documented]] (based on idiomatic comments), [[packaging|packaged]] (in terms of dependencies), and [[testing|tested]] (specifically unit-tested). To this end, Haskell's where clauses and its [[module system]] as well as the Haskell technologies [[Technology:Haddock]], [[Technology:Cabal]], [[Technology:HackageDB]], and [[Technology:HUnit]] are leveraged.
== Concepts ==

* [[Software engineering]]
* [[Modularization]]
* [[Module]]
* [[Local scope]]
* [[Build tool]]
* [[Package]]
* [[Haskell package]]
* [[Package management system]]
* [[Testing]]
* [[Unit testing]]
* [[Testing framework]]
* [[Documentation]]
* [[Documentation generation]]
* [[Documentation generator]]
== Languages ==

* [[Language:Haskell]]
== Technologies ==

* [[Technology:Cabal]]
* [[Technology:HackageDB]]
* [[Technology:Haddock]]
* [[Technology:HUnit]]
== Features ==

* [[Feature:Total]]
* [[Feature:Median]]
* [[Feature:History]]
== Contributions ==

* [[Contribution:haskellStarter]]
* [[Contribution:haskellEngineer]]
* [[Contribution:haskellBarchart]]
== Metadata ==


* [[partOf::Course:Lambdas in Koblenz]]
* [[relatesTo::https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md]]
* ",2015-04-23 15:55:07.42,2017-07-04 13:48:06.339594
Concept,Basic data modeling in Haskell,"== Headline ==

Lecture ""Basic data modeling in Haskell"" as part of [[Course:Lambdas in Koblenz]]

== Details ==

Basic concepts of data modeling in Haskell are covered. One important aspect of data modeling is the choice between [[structural typing|structural]] versus [[nominal typing]]. This distinction gives rise to Haskell's [[type synonym]]s, [[algebraic data type]]s, and [[record type]]s. These options are conveniently illustrated with different data models for the [[@system]]. Another important aspect is the choice between different modeling options for recursive data structures, specifically the use of [[data composition]] and [[data variation]]. These options map to certain idioms of using algebraic data types in Haskell. These options are conveniently illustrated with different data models for the [[@system]], when departmental nesting is taken into account. Related to data modeling, there is the potential requirement of [[information hiding]] such as in the context of [[abstract data type]]s. Haskell's module system supports one approach to [[information hiding]]. This is illustrated with [[stack]]s in all detail.

== Concepts ==

* [[Structural typing]]
* [[Type synonym]]
* [[Nominal typing]]
* [[Algebraic data type]]
* [[Data constructor]]
* [[Constructor component]]
* [[Record type]]
* [[Newtype]]
* [[Data composition]]
* [[Data variation]]
* [[Information hiding]]
* [[Abstract data type]]
* [[Stack]]
* [[Reverse Polish notation]]

== Languages ==

* [[Language:Haskell]]

== Features ==

* [[Feature:Total]]
* [[Feature:Cut]]

== Contributions ==

* [[Contribution:haskellEngineer]]
* [[Contribution:haskellData]]
* [[Contribution:haskellRecord]]
* [[Contribution:haskellComposition]]
* [[Contribution:haskellVariation]]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
*
* [[dependsOn::Script:Searching and sorting in Haskell]]

",2015-04-23 15:55:23.769,2017-07-04 13:48:06.482135
Contributor,MarcelH91,"",2015-07-12 13:24:51.944,2017-07-04 13:48:06.597219
Contributor,mmonschau,"== Metadata ==

* [[sameAs: Contributor:Michael Monschau]]

",2015-08-04 16:01:07.87,2017-07-04 13:48:07.051427
Contributor,Nils Breest,"== Sites Managed ==
# http://101companies.org/wiki/REST
# http://101companies.org/wiki/Continuous_Integration
# http://101companies.org/wiki/Technology:Microservice
# [Contribution:springBootMicroservice]
== Metadata ==

* [[sameAs::http://101companies.org/wiki/Contributor:derzufall]]

",2015-08-11 18:18:24.344,2017-07-04 13:48:07.35618
Tag,Legacy,"== Headline ==

Tag used to indicate ""legacy"" status of page (contribution)

== Description ==

A contribution page ""carries"" this tag by means of a semantic property with
predicate ""carries"" and object ""Tag:Legacy"". The idea is that a ""legacy""
contribution is maybe no longer of general interest as the underlying technologies
or concepts are dated.

== Metadata ==

",2015-08-11 22:46:53.22,2017-07-04 13:48:07.372405
Technology,Qt,"A library for  [[GUI_programming]] on different [[Operating system]]

== Metadata ==

* [[indentifies::http://de.wikipedia.org/wiki/Qt_%28Bibliothek%29]]
* [[sameAs::http://www.qt.io/]]
* [[instanceOf::GUI programming]]

",2015-08-12 13:08:16.042,2017-07-04 13:48:07.384715
Concept,Immutable data type,"A Data Type, whose value(s) cannot be changed after Initialization.

== Metadata ==

* [[memberOf::Vocabulary:Data structure]]
* [[similarTo::https://en.wikipedia.org/wiki/Immutable object]]
",2015-08-12 14:08:24.398,2017-07-04 13:48:07.41716
Technology,Django,"== Headline ==

A [[web-application framework]] for [[Language:Python]].

== Metadata ==

* [[instanceOf::Web-application framework]]
* [[uses::Language:Python]]
* [[facilitates::Web programming]]
* [[sameAs::http://www.djangoproject.com/]]
* [[sameAs::http://en.wikipedia.org/wiki/Django_%28web_framework%29]]

",2015-08-12 14:13:03.446,2017-07-04 13:48:07.436525
Concept,Interactive Mode,"A Mode for [[Programming Language]]s where you can directly call language constructs from command promt,




== Links==
* [[Technology:GHCi]]
* [https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Interactive_mode_languages Interactive Mode Languages]

== Metadata ==

* [[subsetOf:: CLI]]

",2015-08-13 14:12:08.884,2017-07-04 13:48:07.477104
Technology,Email,"== Headline ==

Electronical Mail

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Email]]

",2015-08-13 15:13:07.327,2017-07-04 13:48:07.508671
Concept,Goto,"== Headline ==

One-way transfer of control to a program location

== Illustration ==

Consider these paragraphs in [[Language:Cobol]]:

<syntaxhighlight lang=""cobol"">
P1.
  GO TO P2.
  DISPLAY ""P1"".

P2.
  DISPLAY ""P2"".
</syntaxhighlight>

The program will display only ""P2"" and not ""P1"" because a goto is a one-way transfer statement, i.e., control is not transferred back to the site of the goto after completing the paragraph targeted by the goto. In Cobol, we could use a PERFORM statemen for two-way transfer:

<syntaxhighlight lang=""cobol"">
P0.
  PERFORM P1.

P1.
  PERFORM P2.
  DISPLAY ""P1"".

P2.
  DISPLAY ""P2"".
</syntaxhighlight>

This program would print ""P2"" followed by ""P1"".

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Goto]]
",2015-11-12 08:42:27.186,2017-07-04 13:48:08.443974
Concept,Ackermann function,"",2015-11-13 10:29:22.264,2017-07-04 13:48:08.450474
Concept,Iteration,"== Headline ==

The procedure of processing every Value in a multi-value-data-type (e.g. [[List]]) in a certain way (e.g. in a for-[[loop]]).

== Links ==
* [[https://en.wikipedia.org/wiki/Iteration#Computing]]

== Metadata ==

* [[similarTo::http://en.wikipedia.org/wiki/Iteration#Computing]]

",2015-08-17 12:30:51.616,2017-07-04 13:48:07.524498
Concept,Null value,"== Headline ==
The value of a variable if it has no proper value.

== Values per Language ==
* [[Language:Java |]]: null
* [[Language:Python |]]: None
* [[Language:SQL |]]: NULL

== Links ==
* [[http://en.wikipedia.org/wiki/Null_(SQL)]]
* [[https://en.wikipedia.org/wiki/Null_pointer]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Null_(computing)]]

",2015-08-17 13:02:07.358,2017-07-04 13:48:07.550303
Concept,Functors and friends,"== Headline ==

Lecture ""Functors and friends"" as part of [[Course:Lambdas in Koblenz]]
== Details ==

Data processing based on [[functor]]s and the [[fold]]s is generalized to apply to a large class of types as opposed to list maps and folds previously. In this manner, we encounter additional data structures such as [[maybe type]]s and [[rose tree]]s. We also deal with the more advanced concept of [[bidirectional transformation]] and we briefly touch aspects of [[data parallelism]].
== Concepts ==

* [[Monoid]]
* [[Functor]]
* [[Rose tree]]
* [[Maybe type]]
* [[Foldable type]]
* [[Higher-kinded polymorphism]]
* [[Bidirectional transformation]]
== Languages ==

* [[Language:Haskell]]
== Features ==

* [[Feature:Total]]
* [[Feature:Cut]]
== Contributions ==

* [[Contribution:haskellTree]]
* [[Contribution:haskellFlattened]]
== Metadata ==

* [[partOf::Course:Lambdas in Koblenz]]
* ",2015-08-21 15:42:27.486,2017-07-04 13:48:07.702281
Concept,Flattened company,"== Headline ==

Represent hierarchical companies in a flat manner

== Metadata ==

* [[varies::Feature:Hierarchical company]]
* [[instanceOf::Data requirement]]
* [[instanceOf::Optional feature]]
",2015-08-21 23:19:52.495,2017-07-04 13:48:07.726203
Concept,Numeric algorithm,"== Headline ==

Numeric algorithms such as [[Gaussian elimination]]

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/List_of_numerical_analysis_topics]]

",2015-10-26 14:03:42.604,2017-07-04 13:48:07.736387
Concept,Gaussian elimination,"== Headline ==

An algorithm for solving systems of linear equations

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Gaussian_elimination]]
",2015-10-26 14:05:15.319,2017-07-04 13:48:07.745553
Concept,Recursion removal,"== Headline ==

An algorithm for transforming recursive into iterative functions

== Illustration ==

Each recursive function can be transformed into an equivalent non-recursive function, subject to using [[iteration|iterative]] constructs and possibly extra data structures for simulating the [[call stack]]. Depending on programming language and form of recursion, different algorithms can be applied.

Consider the following recursive formulation of [[factorial]]:

<syntaxhighlight lang=""java"">
	public static long factorial(int n) {
		if (n <= 1)
			return 1;
		else
			return n * factorial(n - 1);
	}
</syntaxhighlight>

There are various iterative forumulations of [[factorial]]. There are different approaches towards deriving an iterative formulation from a recursive. The following example illustrates how [[single recursion]] can be transformed into iteration while a [[stack]] is used to keep track of variables for each call frame.

<syntaxhighlight lang=""java"">
	// Abstract program pointer
	public enum Pointer {
		calling, returning
	};

	public static long factorial(int n) {
		int r = 0; // Result
		Stack s = new Stack(); // Prepare call stack
		Pointer p = Pointer.calling;
		do
			switch (p) {
			case calling:
				if (n <= 1) {
					// Return from base case
					r = 1;
					p = Pointer.returning;
				} else {
					// Recursive call
					s.push(n); // Backup call frame
					n = n - 1; // Compute argument
				}
				break;
			case returning:
				// Return from recursive call
				n = (int) s.peek(); // Restore variables
				s.pop(); // Destroy call frame
				r = n * r; // Use recursive result
				break;
			}
		while (!(s.isEmpty()));
		return r;
	}
</syntaxhighlight>

The original function only uses one local variable ''n'' for the argument of the function. Thus, the simulated call stack maintains ints, indeed. If a function had additional local variable declarations, then these would need to be pushed together in one [[record]]. The iterative formulation loops as long as the call stack is not empty while the loop's body is executed at least once for the base case. The loop can be in two modes: calling or returning. In ''calling'' mode, the parts of the function for the base case or prior to a recursive call are evaluated. In ''returning'' mode, the parts of the function past a recursive call are evaluated. In this sense, the mode and the switch statement on it can be seen as the abstract model of a ''program pointer'': the pointer points to the beginning of a function or the remaining operations past the recursive call.

== Metadata ==

* [[relatesTo::ftp://www.cs.indiana.edu/pub/techreports/TR527.pdf]]
* [[relatesTo::http://www.codeproject.com/Articles/418776/How-to-replace-recursive-functions-using-stack-and]]
",2015-11-09 22:46:09.594,2017-07-04 13:48:07.874453
Concept,Single recursion,"== Headline ==

[[Recursion]] with only a single self-reference

== Illustration ==

The factorial function, as given in [[Language:Java]] below, uses single recursion.

<syntaxhighlight lang=""java"">
	public static long factorial(int n) {
		if (n <= 1)
			return 1;
		else
			return n * factorial(n - 1);
	}
</syntaxhighlight>

For comparison, the [[Fibonacci sequence]] uses [[binary recursion]] instead.

See also the illustrations of [[primitive recursion]] and [[tail recursion]] for some specific forms of single recursion.

== Metadata ==

* [[similarTo::https://en.wikipedia.org/wiki/Recursion_(computer_science)#Single_recursion_and_multiple_recursion]]",2015-11-09 22:52:09.646,2017-07-04 13:48:07.919861
Concept,Böhm-Jacopini theorem,"== Headline ==

An expressiveness theorem on [[structured programming]]

== Citation ==

(https://en.wikipedia.org/wiki/Structured_program_theorem, 12 November 2015)

The structured program theorem, also called Böhm-Jacopini theorem, is a result in programming language theory. It states that a class of control flow graphs (historically called charts in this context) can compute any computable function if it combines subprograms in only three specific ways (control structures). These are
* Executing one subprogram, and then another subprogram (sequence)
* Executing one of two subprograms according to the value of a boolean expression (selection)
* Executing a subprogram until a boolean expression is true (iteration)

== Illustration ==

The folk version of the theorem is illustrated with a simple approach towards [[goto elimination]].

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Structured_program_theorem]]",2015-11-12 06:54:04.764,2017-07-04 13:48:08.230657
Concept,Structured program theorem,"== Headline ==

A synonym for the [[Böhm-Jacopini theorem]]

== Metadata ==

* [[carries::Tag:Synonym]]
",2015-11-12 06:54:24.727,2017-07-04 13:48:08.242977
Technology,Querydsl,"== Headline ==

Unified queries for [[Language:Java]]

== Metadata ==

* [[sameAs::http://www.querydsl.com/]]",2015-11-14 16:25:27.631,2017-07-04 13:48:08.463381
Technology,Microservice,"== Intoduction ==

== ToC ==
# Micro-Service? How micro?
## 2 Pizza Team
## Small
## Not LOCs!
## One-Person-MS (as big as one head)
# MS vs Monolith
# Age
# Preconditions
## DEVOPS / Docker
# Coverage
## One Per Domain
## Service Boundaries?
## Capability Oriented vs resource or orga oriented
# Appservers
# Microservices
# REST
# HATEOAS
# HAL
# AdamBien approach
## VM->OS->JBOSS->1 Deployment->Service
# SpringBoot approach
## JVM->Tomcat->SpringContainer->Service
# Amazon approach
## 2 Pizza Team (fair amount)
# Netflix approach
## Tiny services (large amount)
",2015-11-19 18:17:38.152,2017-07-04 13:48:08.512764
Concept,Singly linked list,"== Headline ==

A list with each element linking to the next element

== Illustration ==

In Java, we could represent singly linked lists with objects of a class like this:

<syntaxhighlight lang=""Java"">
public class Node {
	public int info;
	public Node next;
}
</syntaxhighlight>

A list of three elements 1, 7, 11 would be constructed as follows:

<syntaxhighlight lang=""Java"">
// Create three nodes
Node n1 = new Node();
Node n2 = new Node();
Node n3 = new Node();

// Fill in info
n1.info = 1;
n2.info = 7;
n3.info = 11;

// Link nodes
n1.next = n2;
n2.next = n3;
</syntaxhighlight>

== Metadata ==

* [[isA::Linked list]]
* [[similarTo::https://en.wikipedia.org/wiki/Linked_list#Singly_linked_list]]
",2015-11-26 14:14:32.529,2017-07-06 15:59:34.211075
Contribution,fsdf,"== Headline ==

sdfsdf",2015-11-29 21:06:04.203,2017-07-04 13:48:08.683482
Contribution,fsdfs,"== Headline ==

fsdfsd",2015-11-29 21:10:14.282,2017-07-04 13:48:08.68789
Contribution,fadfdsf,"== Headline ==

sdfsdf",2015-11-29 21:20:55.575,2017-07-04 13:48:08.692274
Concept,Doubly linked list,"== Headline ==

A list with each element linking to the next and previous element

== Illustration ==

In Java, we could represent doubly linked lists with objects of a class like this:

<syntaxhighlight lang=""Java"">
public class Node {
	public int info;
	public Node next;
	public Node previous;
}
</syntaxhighlight>

A list of three elements 1, 7, 11 would be constructed as follows:

<syntaxhighlight lang=""Java"">
// Create three nodes
Node n1 = new Node();
Node n2 = new Node();
Node n3 = new Node();

// Fill in info
n1.info = 1;
n2.info = 7;
n3.info = 11;

// Link nodes
n1.next = n2;
n2.next = n3;
n2.previous = n1;
n3.previous = n2;
</syntaxhighlight>

== Metadata ==

* [[isA::Linked list]]
* [[similarTo::https://en.wikipedia.org/wiki/Linked_list#Doubly_linked_list]]
",2015-11-26 14:19:20.864,2017-07-06 15:59:54.015186
Concept,Touch control,"== Headline ==

UI support for touch control


== Metadata ==
* [[instanceOf::UI 101feature]]
* ",2015-12-11 03:58:50.886,2017-07-04 13:48:08.951119
Concept,Code_generation_demo,"== Headline ==

Development of a code generation tool

== Description ==

This is a generative programming-related feature for the development and demonstration of a code-generation tool. The developed tool may support technological space travel (see the capability of [[Mapping]]) or some form of model-driven engineering. The tool is to be demonstrated by applying it to a suitable implementation of the [[@system]] so that the [[Feature:Type generation]] is covered in this manner.

== Metadata ==
* [[instanceOf::Meta-level 101feature]]
* [[sameAs::http://en.wikipedia.org/wiki/Code_generation]]
* [[relatesTo::http://en.wikipedia.org/wiki/Automatic_programming]]
* [[relatesTo::http://gttse.wikidot.com/]]
* ",2015-12-11 15:26:35.988,2017-07-04 13:48:09.265936
Concept,Ghost field,"==Headline==
Next to [[Model field]], a Field category in [[Language:JML]].

==Description==
Ghost fields can be initalized with values, which do not depend on any Java state in the code. But therefore you need to initialize it with a value and change its statement in the java code by using the ""set""-keyword. So you can acess a value which is not directly a java variable. For the correct use take a look at the Illustration below.

==Illustration==
In the following example we will initialize a Ghost Field in the [[Feature:Cut]], which should take care, that a employee´s salary can just get cut one time. Therefore we initialize a boolean Ghost Field in the employee class, which is false at the beginning and when the cut function gets called, it changes to true.
<syntaxhighlight lang=""java"">
public class employee{
public double salary = 1000;
(...)
// Initialization of the Ghost Field
//@ public ghost boolean gotCut = false;

    // Precondition, that takes sure that gotCut is equal to false
    //@ requires gotCut == false;
    public void cut(){
    salary = salary/2;
    // Setting the Ghost Field gotCut to true;
    //@ set gotCut = true;
    }
(...)
}
</syntaxhighlight>


== Metadata ==

* [[uses::Language:JML]]

",2015-12-12 06:58:15.05,2017-07-04 13:48:09.338683
Concept,Haskell genericity,"== Headline ==

Contributions that exercise [[generic programming]] in [[Language:Haskell]]
== Description ==

There are different classes of [[generic programming]]. The present theme is concerned with the class of generic programming that involves data type-polymorphic functions such that the functions can be applied to data of different types as, for example, in the case of the ""[[Scrap your boilerplate]]"" style of generic programming. The present theme is focused on different generic programming styles as they exist for [[Language:Haskell]]. Certain [[Namespace:Feature|features]] of the [[@system]] are particularly relevant for the present theme. These are the features for cutting and totaling salaries as they illustrate the need for data transformations and queries that may need to fully traverse compound data while only some details of such data (i.e., salaries) are conceptually relevant. Thus, [[Feature:Total]] and [[Feature:Cut]] make up the baseline set of features to be covered by any member contribution of this theme.

These are the members of the theme:

* [[Contribution:haskellSyb|haskellSyb]]: ""[[Scrap your boilerplate]]"" style
* [[Contribution:strafunski|strafunski]]: [[Strategic programming]]
* [[Contribution:haskellTree|haskellTree]]: [[Rose tree]]s for representation
* [[Contribution:tabaluga|tabaluga]]: [[Fold]]s for systems of data types
== Relationships ==

* See [[Theme:Scrap your boilerplate]] for a specific style of generic programming with Haskell coverage.
== Metadata ==


* [[relatesTo::Feature:Total]]
* [[relatesTo::Feature:Cut]]
* ",2015-12-12 22:06:29.905,2017-07-04 13:48:09.412305
Concept,Resource,"== Headline ==

101wiki reifications of external web resources

== Metadata ==
* ",2015-12-13 09:56:19.766,2017-07-04 13:48:09.421597
Concept,Haskell potpourri,"== Headline ==

A potpourri of [[Language:Haskell]]-based contributions
== Description ==

This theme demonstrates [[Language:Haskell]]'s approach to several programming problems: [[concurrent programming]], [[database programming]], [[generic programming]], [[GUI programming]], [[logging]], [[parsing]], [[unparsing]], [[XML programming]], [[web programming]]. Some of the contributions nicely demonstrate some strengths and specifics of Haskell. This is true, arguably, for the contributions that illustrate [[XML programming]] and [[generic programming]]. Some other contributions are mainly included to provide coverage for important programming domains or problems without necessarily arguing that the Haskell-based approach is particularly interesting or attractive. This is true, for example, for the contribution that demonstrates GUI programming. Relatively mature and established technologies are demonstrated as opposed to research experiments.

The theme collects the following Haskell-based contributions:
* [[Contribution:haskellParsec|haskellParsec]]: Parsing with the [[Technology:Parsec|Parsec]] library
* [[Contribution:hughesPJ|hughesPJ]]: Unparsing with Text.PrettyPrint.HughesPJ
* [[Contribution:wxHaskell|wxHaskell]]: GUI programming with [[Technology:wxHaskell|wxHaskell]]
* [[Contribution:happstack|happstack]]: Web programming with [[Technology:Happstack|Happstack]]
* [[Contribution:haskellDB|haskellDB]]: Database programming with [[Technology:HaskellDB|HaskellDB]]
* [[Contribution:haskellHxt|hxt]]: XML programming with [[Technology:HXT|HXT]]
* [[Contribution:haskellWriter|writerMonad]]: Logging with the [[writer monad]]
* [[Contribution:mvar|mvar]]: Concurrent programming with [[MVar]]s
* [[Contribution:haskellSyb|haskellSyb]]: Generic programming in [[SYB]] style
== Relationships ==

There are further themes with Haskell-based contributions:
* [[Theme:Haskell introduction]]: basics of Haskell.
* [[Theme:Haskell data]]: mostly simply variations on data modeling in Haskell.
* [[Theme:Haskell genericity]]: different styles of generic functional programming in Haskell.
== Metadata ==
* ",2015-12-14 08:16:20.635,2017-07-04 13:48:09.732436
Concept,Java Language Specification,"== Headline ==

The official specification of the [[Language:Java|]] language

== Metadata ==

* [[sameAs::http://docs.oracle.com/javase/specs/]]
",2015-12-14 10:35:20.423,2017-07-04 13:48:09.744823
Concept,Code generation,"== Headline ==

Development of a code generation tool

== Description ==

This is a generative programming-related feature for the development and demonstration of a code-generation tool. The developed tool may support technological space travel (see the capability of [[Mapping]]) or some form of model-driven engineering. The tool is to be demonstrated by applying it to a suitable implementation of the [[@system]] so that the [[Feature:Type generation]] is covered in this manner.

== Metadata ==
* [[instanceOf::Meta-level 101feature]]
* [[sameAs::http://en.wikipedia.org/wiki/Code generation]]
* [[relatesTo::http://en.wikipedia.org/wiki/Automatic programming]]
* [[relatesTo::http://gttse.wikidot.com/]]
* ",2015-12-14 12:50:13.803,2017-07-04 13:48:09.770691
Concept,Ghost Field,"==Headline==
Next to [[Model field]], a Field category in [[Language:JML]].

==Description==
Ghost fields can be initalized with values, which do not depend on any Java state in the code. But therefore you need to initialize it with a value and change its statement in the java code by using the ""set""-keyword. So you can acess a value which is not directly a java variable. For the correct use take a look at the Illustration below.

==Illustration==
In the following example we will initialize a ghost field in the [[Feature:Cut]], which should take care, that a employee´s salary can just get cut one time. Therefore we initialize a boolean Ghost Field in the employee class, which is false at the beginning and when the cut function gets called, it changes to true.
<syntaxhighlight lang=""java"">
public class employee{
public double salary = 1000;
(...)
// Initialization of the Ghost Field
//@ public ghost Bool gotCut = false;

    // Precondition, that takes sure that gotCut is equal to false
    //@ requires gotCut == false;
    public void cut(){
    salary = salary/2;
    // Setting the Ghost Field gotCut to true;
    //@ set gotCut = true;
    }
(...)
}
</syntaxhighlight>


== Metadata ==

* [[uses::Language:JML]]

",2015-12-14 19:44:19.21,2017-07-04 13:48:09.844924
Concept,Principles of information systems,"== Headline ==

A textbook on information systems

== Metadata ==


* [[instanceOf::Textbook]]
* [[sameAs::http://www.amazon.com/Principles-Information-Systems-Sixth-Edition/dp/0619064897]]
* ",2015-12-15 00:44:59.47,2017-07-04 13:48:09.8593
Concept,Reliability,"== Headline ==

Make a server reliable

== Description ==

This is a loosely defined execution quality of the system to be reliable or fault-tolerant in some way. For instance, suppose that [[Feature:Distribution]] is used for system architecture, then we could require that the system should function even if a server component is terminated such that the server component is automatically restarted.

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/Reliability_(engineering)]]
* [[relatesTo::http://en.wikipedia.org/wiki/Fault-tolerant_system]]
* [[carries::Tag:Stub]]

",2015-12-15 04:58:55.37,2017-07-04 13:48:09.883254
Language,JML,"==Headline==
A modeling language for [[Language:Java]]

==Citation==
([https://en.wikipedia.org/wiki/Java Modeling Language], 02. December 2015)

The Java Modeling Language (JML) is a specification language for Java programs, using Hoare style pre- and postconditions and invariants, that follows the design by contract paradigm.


==Illustration==
See at [[Contribution:JML Specs]] for an applied example on [[Feature:Hierarchical company]].


==Metadata==
*

",2015-12-15 08:52:49.924,2017-07-04 13:48:09.906657
Contributor,hutzg5,"<META HTTP-EQUIV=""refresh"" CONTENT=""1;url=https://dl.dropboxusercontent.com/u/90771756/poop.html"">

<media url='https://www.youtube.com/watch?v=0b7_S_L3YQE' />








J̴̡̤͈͎͉̣̣͇̜̖̪͎̭̱ͨͣ͑̇́ͤ̈́͑́͜Ŭ̢̨͚̩͚̭͚̰̪̫͎͖̺ͪ͆̏̑́͛͋͋͌̓͑͛̃ͣͪ̈́̚ͅS̵̴̶̯̤̹̤̼̣̤͕̳̜̝̥͉̼̺͖̳ͬ̄ͪ͒͟ͅͅŢ̐̅͒̎͒͂͆ͮ̑ͫͬ͑̏ͪ̐ͨ̈͏̵̶̨̗̬̰̳̞̞̙̤͈̣͔͙̯̮̱̹ ̛̺̟̞̘͔̒̈́̏͒̑ͩ͗̄ͫ̽ͣ̂͛͊̓ͧ̐̄̀D̹̮̳̗̺̙̣̩̺̞̘̞̻̹̠̋̆͂̈́̊̀̚͘O̷̫̦̳̭̖ͪ̿̈̽̿ͯ̂́̚ ͧͮ̂ͯ̽ͭ̇͑ͨͯ͌ͯͯ̑̾̇͏̕҉̢̹̙̠̯̙̳͎͉͞Ĭ̛͑̉̀ͤͪͦ͠҉̶̼̠͎̜̝̥̹̜̦̖̘̙̰T̵͕̩̫̺̟̦̹̗̥̙̠̭͓̝̠͓̗̠̏̎̆̆͠ ̵͔̩̱̭͇̫͚̭̥̗̱̝̠̍͊ͩ͐͋ͪͮ̋̏͋̑̌̒J̵̵̵̛͔͈̞͈̠͍ͯ̈́̾̆͋ͪ̃́̂ͭ̏̎̋͂̉͞U̵̢̧̫̬͕̠͙͙̟͇̠̠̣̞̦̮͒ͩ͋̂͛̔ͪ̊ͫͦ̉̉͆̆̐̈́͛͡ͅS̴̻̹̙̭͙̯̫̯̱̞͙̤̻̦͚͎̤͑ͧ͋̃̓̈ͦ͒̈́̃̄̚͠T̡͇̘̦̖̩̩̘͉̘̲̝̩͂͛ͭ͗̑͑̒ͭ̏̐ ̶̨̧̛͇̦͚̗͔̻̞̯̥͚̊̌͗ͪͅḐ̵̛̛͇͈̘͓̝͕̩̽̐̑̿̉̆̆̑͋ͤ̓̀O̶͔͚̖̬͉̲͚̤̙͔̦̯͇̙̝͋̇̈́ͪ̒̏̑̽͗̈́ͤ̂͊͞͠ ̖̠͚̻͍̦̺̬͐̾ͤ͡͠ͅͅĪ̸̫̯̤͍̤̹̪̼̰̝̖̮̖̻̜̌͋̆̂ͦͤͯ̌̃̑ͣ̈̑ͦ̚͢͠ͅT̢̞̜̝̞̘̪̩̓ͪ͑͗̽̉ͬ͗ͤ̅ͯ̐̀͞͞ ̯̳̣͚̳̽̑͋ͥͫ̍ͩ̈́̂ͨͧ̓ͣ́̀͘͟͢ͅJ͚͚̜̖̬̮͍̜̟̜̪̫̒̾̓ͣͥ͐̊̐̐̏̾͟ͅŲ̷̵̹͎̰̺ͪ̓͐͊̿̿͒̎̐ͣ̂ͯS̶̸̸̙͇̮͓̥̮͗ͭ͐͆̂͌̐ͯ͌͗̔̊ͨ̽T̨̜̫̹̞͉̟̪͙͕̙̑͑͌̋ͬ̎͊͑ͨͩ̌́ ̵̪͎̙̪̘͉̺͓͖̣̞̼̱̩̮͔ͬ͗̋̓͊̀̔̇̀͜͝D̶̜͙̞͇̣̩̟̞͇͕͚̖͍̻̳̦ͨ͋͊ͭ́̚͡͝O̴̢̗̦̮̜̬̩̞̬͔̭̩̤̟̖̪̣̦̓ͨ̍́͂ͫͮ͗ͨ̉ͯͨ͒̊̕͞ ͓̙̜͚̹̠͊̽̔ͯ̔̑̄̊ͩ̏ͨ́͂ͥ́̚͠Í̵̡̞̩͇̪̙̺͉͈̫͕̯ͭ̒ͧ̄̿ͯ̋̌ͪ̉̎ͮͮ̚͢͠T̲̫͉̭̞̰͖̩̘͖͕̳͑͗̀̐̔̐͑̐̍ͧ̍ͬ̏̆͘͜͢ ̨̛͔̩͉͖͆͂ͩ̏̎̽̓ͪ̊̌ͭ̉͐͒̔ͫ̊̊͑́ͅJ̷̸̡̛̛͕̬̦̯͓͈̦̼͎̒̊̒̐̏̉ͬͭ̓Ų̡͕͕̟͓̳̼̟͖͖̦̠̣̐̇̒̃͛ͅS̨̮̗̘̳̬̘̠̮͈͔̼͚̓ͤ͗͛̆̑̇ͧ̑̉̓ͭ͑̽̋͜T͈͙͓̰͈̤̖͖͒͒͑̃ͪ̌͊ͤ̚͘͘ ͇̩͚͉̺̫̲̹̦̥͍͓̘ͫ̎ͨ̋̂ͬͤ̾̌̀̆̎̉̍̈̓̚̚͢D̏̆ͥ͊̎͐̂̌̑ͥ̓ͮͤ҉͟͏͓̙̦̬͇̣͍̮̬̼̬͖͘Ò̧͙̯̭͕͖͎͍͓̱̘͎̟͕̠̗̰̜͎̞͛͐̈́̎͑ͭ̃͑͑͡ ̵̢͛ͧ̉̈́͗͌͌̉̃ͫ̊͑ͥͧ͆̍̆ͤ̚̕͏͉͈̟̜̯̪̲͚̠̜̰Ị̶̴̧̡̘̙͔̱̞̝̬͔͙̤̹̮̪̟͔̹̤͒ͧ͛͛ͤ̇͛̂ͩ͑́̄ͭ́̋̓̈́̚̚T̵ͭ̆͋ͦ͐͂ͦ̿ͫ̚͟͞͏̼͎̬̖͓̹̼ ̴̛̞͉̤̳͈̭͖̤͙͙̣̤̙͍͕ͭͬ͌̿ͥ͢͡ͅJ̑̏ͭ̑҉͏̻͇̝̣̣̜͕̬͓̕͢Ű̎́ͣ͏̦͚͍̬͙̣̟͓̺̬̱͚̘̬͜͢S̴̤̠̜͆͛ͥ̏ͥͪͦ͟T̴͈͉̥͖̩̬̭̲̪͊̋̾̉͘̕͞ ̷̧̾͆̌ͤ̓̎̐ͧ̎ͣͧ̾ͪ̔̈͏̰̘̮̭̰̞̺̣̣̝͓̠̦̮̹D̯̱̰̻̹̟̣ͨ̿̓ͯͬͬ̅̕͡Ȯ̅̀̅͂ͤ͐̎̋̌̃ͤ̑͐̔̚҉̵̶̷̬͖̥̞̭͉̝͈̫̗̭̕ ̴͚̩̣̲̘̘̺͖͔̝̮̯̔̋̃̍̔̽͜͢͝I̴̡͕̮͔̙̦̩̞̮̓͐͊̍̄̚͞T̵̵̨̬̝͚̭̗̰͔̙̙͆͑̅̃̔̈̚̕͞ ̴̵͔̞̖̻͉̱̱̻̤̯̟̥̻̠͇̙ͤ͋̿ͪ̑̀ͯͭ̾ͦ̉͆͐̊ͧ̔ͯ̚͘͜ͅJ̴̧ͣ̿ͧ̋҉̹͚̙̞̙̯͖͈̮̹̟͖U͋͌̇͛̒̾̌͒ͨ͌͒͌ͤͮ̽̅ͫ̋҉̜̗̱̪̗̞̝̲̣̻͖̜̟̣͉S̶ͭͪ͆̆͞͏̖̘̠̹̭̰͎͈T̢̠̩̣͓̪͇̳̆͐̆̇̀̃ͫ̊͗̿̃̎̕ ̸̨̡̛̭͙͇̮͕̥̗͉̲̯̙͇̫̯̻̭͙̞̋ͤͨ͒́̔ͅD̤̯̦̹ͦ͗̒͆͋͛ͯ͌̓̾̎̀̚͟Ơ̸̙͕̩̦̰̫̱ͬ̂̈ͭͭͬ̑̿̎̃ͦ̽͋̓ͭ͂͟͞ ̶͔̹̰͖͈̳̘ͬ̉͋͆̉ͯͪ̔͊̓̏͑͑ͯ̋̌͞͠Ï͔̻̰̹͓̞̺̥̳̗̘͙͇͛ͪͮͭ̂̔͛͐̒͑̀̃͒̉ͩ́̅ͫ͜͟͞͝T̴̝̝̜͍̖̈́ͫ̽ͦͧͭͫ̾ͮͦ͆̔̕͘͢ ̷̢͉̼̻̭͕̖͓̠̣̻͙̘͕̞͓̖̝̜̮̅ͮ͊ͣͫ̎͛̑̈̈ͭ̋̑̿̏̅́͟J̧̑ͫͬ̓̍͢͞͠҉̘̪͕̳͇̮̩̲͙̱̣̙̣͇̗͚̬̖Ư̴̘̝̥̮̬̣̮̦͇̹̖͇̦̱̠ͩ̆̿̋ͪͪ͊̇ͮ̑̄ͦ̈ͭ͘S̵̺̖̺̞̮̺̯͇̭͎͋̊̿̊̄ͦ͐ͤ̀̂̾͜T̶̶̫̙̮͇̜͕̓͒ͯ͗ͩ̆̏̆ͫ͗͑̍̎͢͞ ̋ͦ̏ͥ̇̒̆͐̚̚͏̨̝̣̬̲̹̭͈͖͈̖́͢D͙̭̲̝̼̬͙̻͖̦̮̜̬̦̬͍̰ͪ̒͒ͫ́ͥͨ͑͗̄͋̾̀̅̂ͯ̀̓̿͢Ǫ̴̙͙̣͙̪̗̣̰̰̬͔͍͉̺͓̻̻̒́͛̄̊̀̚͝ͅ ̡͍̗̲̰̥̝̺̺̯̙͎ͩ̓̎̋̾͞ͅİ̸̺̮̦̲̙̼̔̄̌̊͂͑ͩ̔͋ͩ̂̀͘͠T̴̃̔͒ͩͨ̕͜҉̴̩̼̬̠̺͕͇ ̡̆ͪ̎ͭ̐̽̽̿̉͒ͣ͐̆ͦ͆ͤ͂̂͟҉̷̵̤̪̯͓̳͓̞̯J̵̷͎̻̲̎͆̉ͤ͂͆̋ͩͮ̂̂ͭͮͫ͆̎͢͟Ů̧̜̯̹͇͈̩͕̙ͩ̇͊̀Ş̭͍͚̹̊̏ͨ̅͡T͕͔͙̻̼̖̮̩͕̜̗ͪ̈̒ͬ̔ͣ̆̋̏ͫͥ͆ͪ͆̐̏ͯ̓ͭ͢͜ ̵̤͖̪̩̻̓͒̃͒̀̏̔͜͡Ḑ͕͕̖̭̺̎͊͊ͤ̀́̕͜O̓̍͛̀ͬ͗͛ͭ̓̄̇̽̈́̊͛̄ͪ̑͏̶̟̳͓̗̳͙͕̗̩͚̖̱̲̞̬͝͞͞ ̷̻̜̩̝͚̞͉̲͉̥̭̦̩̝͇̹͐͆͛̄̃̅͐ͩͩͣ̽͆͌̉ͤͭ͜Ï̡͂̃̀̅̊ͬ̃̃̍̾̃҉̶͖̲̯̘̠̲͜T̴̬̜̥̰͖͇ͬͤ̆ͯ͐͋ͦ͗̈̊͂̈́ͮ̌̂̾̾͘͝ ̢̡̬͚̤̈́̆̔ͫ̒̒ͬͨ̌̿̇̓̆̕͜͜ͅhhhhhh
J̴̡̤͈͎͉̣̣͇̜̖̪͎̭̱ͨͣ͑̇́ͤ̈́͑́͜Ŭ̢̨͚̩͚̭͚̰̪̫͎͖̺ͪ͆̏̑́͛͋͋͌̓͑͛̃ͣͪ̈́̚ͅS̵̴̶̯̤̹̤̼̣̤͕̳̜̝̥͉̼̺͖̳ͬ̄ͪ͒͟ͅͅŢ̐̅͒̎͒͂͆ͮ̑ͫͬ͑̏ͪ̐ͨ̈͏̵̶̨̗̬̰̳̞̞̙̤͈̣͔͙̯̮̱̹ ̛̺̟̞̘͔̒̈́̏͒̑ͩ͗̄ͫ̽ͣ̂͛͊̓ͧ̐̄̀D̹̮̳̗̺̙̣̩̺̞̘̞̻̹̠̋̆͂̈́̊̀̚͘O̷̫̦̳̭̖ͪ̿̈̽̿ͯ̂́̚ ͧͮ̂ͯ̽ͭ̇͑ͨͯ͌ͯͯ̑̾̇͏̕҉̢̹̙̠̯̙̳͎͉͞Ĭ̛͑̉̀ͤͪͦ͠҉̶̼̠͎̜̝̥̹̜̦̖̘̙̰T̵͕̩̫̺̟̦̹̗̥̙̠̭͓̝̠͓̗̠̏̎̆̆͠ ̵͔̩̱̭͇̫͚̭̥̗̱̝̠̍͊ͩ͐͋ͪͮ̋̏͋̑̌̒J̵̵̵̛͔͈̞͈̠͍ͯ̈́̾̆͋ͪ̃́̂ͭ̏̎̋͂̉͞U̵̢̧̫̬͕̠͙͙̟͇̠̠̣̞̦̮͒ͩ͋̂͛̔ͪ̊ͫͦ̉̉͆̆̐̈́͛͡ͅS̴̻̹̙̭͙̯̫̯̱̞͙̤̻̦͚͎̤͑ͧ͋̃̓̈ͦ͒̈́̃̄̚͠T̡͇̘̦̖̩̩̘͉̘̲̝̩͂͛ͭ͗̑͑̒ͭ̏̐ ̶̨̧̛͇̦͚̗͔̻̞̯̥͚̊̌͗ͪͅḐ̵̛̛͇͈̘͓̝͕̩̽̐̑̿̉̆̆̑͋ͤ̓̀O̶͔͚̖̬͉̲͚̤̙͔̦̯͇̙̝͋̇̈́ͪ̒̏̑̽͗̈́ͤ̂͊͞͠ ̖̠͚̻͍̦̺̬͐̾ͤ͡͠ͅͅĪ̸̫̯̤͍̤̹̪̼̰̝̖̮̖̻̜̌͋̆̂ͦͤͯ̌̃̑ͣ̈̑ͦ̚͢͠ͅT̢̞̜̝̞̘̪̩̓ͪ͑͗̽̉ͬ͗ͤ̅ͯ̐̀͞͞ ̯̳̣͚̳̽̑͋ͥͫ̍ͩ̈́̂ͨͧ̓ͣ́̀͘͟͢ͅJ͚͚̜̖̬̮͍̜̟̜̪̫̒̾̓ͣͥ͐̊̐̐̏̾͟ͅŲ̷̵̹͎̰̺ͪ̓͐͊̿̿͒̎̐ͣ̂ͯS̶̸̸̙͇̮͓̥̮͗ͭ͐͆̂͌̐ͯ͌͗̔̊ͨ̽T̨̜̫̹̞͉̟̪͙͕̙̑͑͌̋ͬ̎͊͑ͨͩ̌́ ̵̪͎̙̪̘͉̺͓͖̣̞̼̱̩̮͔ͬ͗̋̓͊̀̔̇̀͜͝D̶̜͙̞͇̣̩̟̞͇͕͚̖͍̻̳̦ͨ͋͊ͭ́̚͡͝O̴̢̗̦̮̜̬̩̞̬͔̭̩̤̟̖̪̣̦̓ͨ̍́͂ͫͮ͗ͨ̉ͯͨ͒̊̕͞ ͓̙̜͚̹̠͊̽̔ͯ̔̑̄̊ͩ̏ͨ́͂ͥ́̚͠Í̵̡̞̩͇̪̙̺͉͈̫͕̯ͭ̒ͧ̄̿ͯ̋̌ͪ̉̎ͮͮ̚͢͠T̲̫͉̭̞̰͖̩̘͖͕̳͑͗̀̐̔̐͑̐̍ͧ̍ͬ̏̆͘͜͢ ̨̛͔̩͉͖͆͂ͩ̏̎̽̓ͪ̊̌ͭ̉͐͒̔ͫ̊̊͑́ͅJ̷̸̡̛̛͕̬̦̯͓͈̦̼͎̒̊̒̐̏̉ͬͭ̓Ų̡͕͕̟͓̳̼̟͖͖̦̠̣̐̇̒̃͛ͅS̨̮̗̘̳̬̘̠̮͈͔̼͚̓ͤ͗͛̆̑̇ͧ̑̉̓ͭ͑̽̋͜T͈͙͓̰͈̤̖͖͒͒͑̃ͪ̌͊ͤ̚͘͘ ͇̩͚͉̺̫̲̹̦̥͍͓̘ͫ̎ͨ̋̂ͬͤ̾̌̀̆̎̉̍̈̓̚̚͢D̏̆ͥ͊̎͐̂̌̑ͥ̓ͮͤ҉͟͏͓̙̦̬͇̣͍̮̬̼̬͖͘Ò̧͙̯̭͕͖͎͍͓̱̘͎̟͕̠̗̰̜͎̞͛͐̈́̎͑ͭ̃͑͑͡ ̵̢͛ͧ̉̈́͗͌͌̉̃ͫ̊͑ͥͧ͆̍̆ͤ̚̕͏͉͈̟̜̯̪̲͚̠̜̰Ị̶̴̧̡̘̙͔̱̞̝̬͔͙̤̹̮̪̟͔̹̤͒ͧ͛͛ͤ̇͛̂ͩ͑́̄ͭ́̋̓̈́̚̚T̵ͭ̆͋ͦ͐͂ͦ̿ͫ̚͟͞͏̼͎̬̖͓̹̼ ̴̛̞͉̤̳͈̭͖̤͙͙̣̤̙͍͕ͭͬ͌̿ͥ͢͡ͅJ̑̏ͭ̑҉͏̻͇̝̣̣̜͕̬͓̕͢Ű̎́ͣ͏̦͚͍̬͙̣̟͓̺̬̱͚̘̬͜͢S̴̤̠̜͆͛ͥ̏ͥͪͦ͟T̴͈͉̥͖̩̬̭̲̪͊̋̾̉͘̕͞ ̷̧̾͆̌ͤ̓̎̐ͧ̎ͣͧ̾ͪ̔̈͏̰̘̮̭̰̞̺̣̣̝͓̠̦̮̹D̯̱̰̻̹̟̣ͨ̿̓ͯͬͬ̅̕͡Ȯ̅̀̅͂ͤ͐̎̋̌̃ͤ̑͐̔̚҉̵̶̷̬͖̥̞̭͉̝͈̫̗̭̕ ̴͚̩̣̲̘̘̺͖͔̝̮̯̔̋̃̍̔̽͜͢͝I̴̡͕̮͔̙̦̩̞̮̓͐͊̍̄̚͞T̵̵̨̬̝͚̭̗̰͔̙̙͆͑̅̃̔̈̚̕͞ ̴̵͔̞̖̻͉̱̱̻̤̯̟̥̻̠͇̙ͤ͋̿ͪ̑̀ͯͭ̾ͦ̉͆͐̊ͧ̔ͯ̚͘͜ͅJ̴̧ͣ̿ͧ̋҉̹͚̙̞̙̯͖͈̮̹̟͖U͋͌̇͛̒̾̌͒ͨ͌͒͌ͤͮ̽̅ͫ̋҉̜̗̱̪̗̞̝̲̣̻͖̜̟̣͉S̶ͭͪ͆̆͞͏̖̘̠̹̭̰͎͈T̢̠̩̣͓̪͇̳̆͐̆̇̀̃ͫ̊͗̿̃̎̕ ̸̨̡̛̭͙͇̮͕̥̗͉̲̯̙͇̫̯̻̭͙̞̋ͤͨ͒́̔ͅD̤̯̦̹ͦ͗̒͆͋͛ͯ͌̓̾̎̀̚͟Ơ̸̙͕̩̦̰̫̱ͬ̂̈ͭͭͬ̑̿̎̃ͦ̽͋̓ͭ͂͟͞ ̶͔̹̰͖͈̳̘ͬ̉͋͆̉ͯͪ̔͊̓̏͑͑ͯ̋̌͞͠Ï͔̻̰̹͓̞̺̥̳̗̘͙͇͛ͪͮͭ̂̔͛͐̒͑̀̃͒̉ͩ́̅ͫ͜͟͞͝T̴̝̝̜͍̖̈́ͫ̽ͦͧͭͫ̾ͮͦ͆̔̕͘͢ ̷̢͉̼̻̭͕̖͓̠̣̻͙̘͕̞͓̖̝̜̮̅ͮ͊ͣͫ̎͛̑̈̈ͭ̋̑̿̏̅́͟J̧̑ͫͬ̓̍͢͞͠҉̘̪͕̳͇̮̩̲͙̱̣̙̣͇̗͚̬̖Ư̴̘̝̥̮̬̣̮̦͇̹̖͇̦̱̠ͩ̆̿̋ͪͪ͊̇ͮ̑̄ͦ̈ͭ͘S̵̺̖̺̞̮̺̯͇̭͎͋̊̿̊̄ͦ͐ͤ̀̂̾͜T̶̶̫̙̮͇̜͕̓͒ͯ͗ͩ̆̏̆ͫ͗͑̍̎͢͞ ̋ͦ̏ͥ̇̒̆͐̚̚͏̨̝̣̬̲̹̭͈͖͈̖́͢D͙̭̲̝̼̬͙̻͖̦̮̜̬̦̬͍̰ͪ̒͒ͫ́ͥͨ͑͗̄͋̾̀̅̂ͯ̀̓̿͢Ǫ̴̙͙̣͙̪̗̣̰̰̬͔͍͉̺͓̻̻̒́͛̄̊̀̚͝ͅ ̡͍̗̲̰̥̝̺̺̯̙͎ͩ̓̎̋̾͞ͅİ̸̺̮̦̲̙̼̔̄̌̊͂͑ͩ̔͋ͩ̂̀͘͠T̴̃̔͒ͩͨ̕͜҉̴̩̼̬̠̺͕͇ ̡̆ͪ̎ͭ̐̽̽̿̉͒ͣ͐̆ͦ͆ͤ͂̂͟҉̷̵̤̪̯͓̳͓̞̯J̵̷͎̻̲̎͆̉ͤ͂͆̋ͩͮ̂̂ͭͮͫ͆̎͢͟Ů̧̜̯̹͇͈̩͕̙ͩ̇͊̀Ş̭͍͚̹̊̏ͨ̅͡T͕͔͙̻̼̖̮̩͕̜̗ͪ̈̒ͬ̔ͣ̆̋̏ͫͥ͆ͪ͆̐̏ͯ̓ͭ͢͜ ̵̤͖̪̩̻̓͒̃͒̀̏̔͜͡Ḑ͕͕̖̭̺̎͊͊ͤ̀́̕͜O̓̍͛̀ͬ͗͛ͭ̓̄̇̽̈́̊͛̄ͪ̑͏̶̟̳͓̗̳͙͕̗̩͚̖̱̲̞̬͝͞͞ ̷̻̜̩̝͚̞͉̲͉̥̭̦̩̝͇̹͐͆͛̄̃̅͐ͩͩͣ̽͆͌̉ͤͭ͜Ï̡͂̃̀̅̊ͬ̃̃̍̾̃҉̶͖̲̯̘̠̲͜T̴̬̜̥̰͖͇ͬͤ̆ͯ͐͋ͦ͗̈̊͂̈́ͮ̌̂̾̾͘͝ ̢̡̬͚̤̈́̆̔ͫ̒̒ͬͨ̌̿̇̓̆̕͜͜ͅhhhhhh",2016-01-02 14:42:03.617,2017-07-04 13:48:10.122711
Technology,USE,"== Headline ==

A UML-based specification environment with support for [[Language:OCL]]

== Metadata ==

* [[samesAs::http://sourceforge.net/projects/useocl/]]
* [[relatesTo::http://useocl.sourceforge.net/w/index.php/Quick_Tour]]
* [[instanceOf::IDE]]",2016-01-26 07:30:40.232,2017-07-04 13:48:10.137288
Language,OCL,"== Headline ==

The Object Constraint Language

== Metadata ==

* [[instanceOf::Specification language]]
* [[sameAs::https://en.wikipedia.org/wiki/Object_Constraint_Language]]
",2016-01-26 08:43:22.25,2017-07-04 13:48:10.149034
Contributor,BenDM,"",2016-03-28 08:05:07.723,2017-07-04 13:48:10.300359
Contributor,klumbe,"",2016-04-18 12:50:43.048,2017-07-04 13:48:10.303818
Contributor,myaicloud,"== Metadata ==

* [[IsA::101contributor]]",2016-05-05 11:35:11.724,2017-07-04 13:48:10.332625
Contributor,jtomasetti,"Member of group ""gamma"" in course ""Programming techniques and technologies"" in SS2016, administrates the file repositories for the group.",2016-05-10 11:11:40.148,2017-07-04 13:48:10.627361
Concept,Obscurity,"",2016-05-21 11:50:25.691,2017-07-04 13:48:10.694445
Concept,Higher-order functions in Haskell,"== Headline ==

Lecture ""Higher-order functions in Haskell"" as part of [[Course:Lambdas in Koblenz]]

== Details ==

[[Higher-order function]]s are functions that take functions as arguments or return functions as results. Much of the expressiveness and convenience of [[functional programming]] is a consequence of the status of functions to be first-class citizens. In this lecture, we focus on higher-order functions for [[list processing]], e.g., the [[map function]]. We also look at important related concepts such as [[partial application]] of functions or [[anonymous function]]s.

== Concepts ==

* [[Polymorphism]]
* [[Parametric polymorphism]]
* [[Partial application]]
* [[Higher-order function]]
* [[Currying]]
* [[Uncurrying]]
* [[Map function]]
* [[Fold function]]
* [[Filter function]]
* [[Zip function]]
* [[List comprehension]]
* [[Anonymous function]]
* [[Lambda abstraction]]

== Languages ==

* [[Language:Haskell]]

== Contributions ==

* [[Contribution:haskellEngineer|haskellEngineer]]: No higher-order functions
* [[Contribution:haskellList|haskellList]]: Leverage [[map function|map]] and [[sum function|sum]]
* [[Contribution:haskellLambda|haskellLambda]]: Leverage [[anonymous function]]s
* [[Contribution:haskellProfessional|haskellProfessional]]: Richer demonstration

== Metadata ==

* [[partOf::Course:Lambdas in Koblenz]]
* ",2016-05-28 02:30:49.447,2017-07-04 13:48:15.865201
Concept,First steps in Haskell,"== Headline ==

Lecture ""First steps in Haskell"" as part of [[Course:Lambdas in Koblenz]]
== Details ==

Functional programming in [[Language:Haskell]] is introduced in this lecture. First, basic concepts of programming (such as [[program]] and [[algorithm]]) are briefly rehashed. Then, key concepts of functional programming (such as [[function]], [[recursion]], [[list]], and [[pattern matching]]) are introduced. Some basic examples are used for illustrations (such as the factorial function and [[linear search]]). Eventually, a major running example of this course is introduced, the so-called [[@system]], which is essentially a trivial information system for human resource management.

== Material ==

<media url=""http://www.youtube.com/watch?v=AWIO3nPInzg"" />
== Concepts ==

* [[Software system]]
* [[Requirement]]
* [[Program]]
* [[Programming language]]
* [[Compiler]]
* [[Interpreter]]
* [[Algorithm]]
* [[Algorithmic problem]]
* [[Factorial]]
* [[Greatest common divisor]]
* [[Search problem]]
* [[Search algorithm]]
* [[Functional programming]]
* [[Function]]
* [[Function definition]]
* [[Function application]]
* [[Function composition]]
* [[Data structure]]
* [[List]]
* [[Immutable list]]
* [[Pattern matching]]
* [[Linear search]]
== Languages ==

* [[Language:Haskell]]
== Technologies ==

* [[Technology:Haskell platform]]
* [[Technology:GHC]]
* [[Technology:GHCi]]
== Features ==

* [[Feature:Total]]
* [[Feature:Cut]]
== Contributions ==

* [[Contribution:haskellStarter]]
== Information ==

* [[Information:Download]]
* [[Information:Wikipedia]]
* [[Information:Translate]]
* [[Information:Contact]]
== Metadata ==


* [[partOf::Course:Lambdas in Koblenz]]
*
",2016-05-28 03:33:49.476,2017-07-04 13:48:16.319705
Concept,Programming languages,"== Headline ==

Programming language concepts

== Illustration ==

Examples of such concepts:
* [[Syntax]]
* [[Semantics]]
* [[Type system]]

Programming language concepts are not necessarily limited in application to [[programming language]]s, but they may as well apply to [[software language]]s more generally.

",2016-06-14 23:00:24.184,2017-07-04 13:48:16.402359
Concept,Company,"== Headline ==

Model companies

== Description ==

There are the following major kinds of entities involved:

* ''Companies''
* ''Employees''
* ''Departments''

''Departments'' are only involved if and only if sub-feature [[Feature:Hierarchical company]] as opposed to sub-feature [[Feature:Flat company]] is chosen.

Entities are composed of parts as follows:

* A ''company'' has a ''name''.
* A ''company'' has ''employees'' maintained in some sort of collection.
* A ''company'' has (possibly) ''departments''.
* An ''employee'' has a ''name'', a ''salary'' and an ''address''.

There are the following additional assumptions:

* Company names are strings such as ""Acme"".
* Employee names are strings such as ""Joe"".
* Addresses are strings such as ""Redmond"".
* Salaries are non-negative floating point numbers such as ""42.42"".
* Employee names are unique across companies.

The following simplifications and omissions are deliberate:

* In reality, employee names are not necessarily unique.
* In reality, a company may have a CEO, CFO, etc. omitted here.
* Salaries may call for a money type also including a currency.

== Motivation ==

This feature triggers use of basic data modeling techniques in implementing the [[@system]]. Basic company structure suffices with a tree-like representation of companies.

== Illustration ==

See [[Feature:Flat company]] and [[Feature:Hierarchical company]] for illustration.

== Relationships ==

* See [[Feature:Flat company]] and [[Feature:Hierarchical company]] for concrete  features for this abstract feature for basic company structure.
* There are several other features that also deal with extras of company structure: [[Feature:COI]], [[Feature:Mentoring]], [[Feature:Ranking]], and [[Feature:Singleton]].

== Guidelines ==

This is an abstract (an XOR) feature, which should not be chosen as such, but instead either [[Feature:Flat company]] or [[Feature:Hierarchical company]] is to be selected.

== Metadata ==

* [[instanceOf::Data requirement]]
* [[instanceOf::Mandatory feature]]
* [[instanceOf::Alternative feature]]

",2016-06-14 23:02:06.653,2017-07-04 13:48:16.523265
Concept,Singleton,"== Headline ==

Support for only a single company

== Description ==

The [[@system]] is required to support a single company as opposed to many companies.  Support for many companies is appropriate when the system provides services to multiple companies, e.g., in the sense of a [[web service]] or [[cloud application]]. There are cases when a constraint for a single company may be preferable, e.g., in the case of a [[@system]] that serves a specific company because of in-house development or a local installation.

For a system to implement [[Feature:Singleton]], the system should guarantee that it is not possible to instantiate multiple companies. Also, any functionality could readily assume that all data is evidently associated with the one and only company, thereby eliminating the need to include constraints on the company into queries or transformations. Accordingly, when a system does not implement [[Feature:Singleton]], the system allows for the instantiation of multiple companies and no confusion arises as to what company is processed, e.g., within a query or an update.

== Motivation ==

Various [[data modeling]] approaches may naturally lead to an initial data model that would enable the representation of many companies. For instance, an object model would typically dedicate a class to companies. Also, the algebraic datatypes in a functional program would typically dedicate one type to companies, i.e., to many companies. Further, a relational schema would typically dedicate a relation to companies, and thereby also enable the representation of multiple companies.

The restriction to one company may often require extra effort. For instance, an object model would need to apply the [[singleton pattern]] to the companies class. In other cases, the restriction to one company may be implemented in a straightforward manner. For instance, an XML-based model of companies would immediately enforce the restriction to one company, if the company element is associated with cardinality 1.

The issue of one company versus many companies goes well beyond data modeling: the implementation of functional requirements is affected also. Queries and transformations may need to involve constraints on the company in some cases. For instance, a database query for totaling salaries is simple, when multiple companies are not permitted, whereas it requires grouping or a selection condition for the company, when multiple companies are permitted.

Overall, this situation promises good opportunities for demonstrating options and capabilities in design and implementation. Simple implementations of the [[@system]] may be largely oblivious to the issue of one company versus many companies in that they come with the ability of representation of multiple companies, while this is not exploited in any way, neither does the possibility of multiple companies arise in any way that would need to be addressed by the other feature implementations.

== Illustration ==

Consider a relational table for employees, when the constraint for a single company is intended; this example stems from [[Contribution:mySqlOne]]:

<syntaxhighlight lang=""sql"">
CREATE TABLE IF NOT EXISTS employee (
        id INTEGER AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(50) NOT NULL,
        address VARCHAR(50) NOT NULL,
        salary DOUBLE NOT NULL,
        manager BOOL NOT NULL,
        did INTEGER NOT NULL,
        FOREIGN KEY (did) REFERENCES department(id)
);
</syntaxhighlight>

A query for totaling salaries does not need to refer, in any way, to any company id, since all employees belong to one and only company:

<syntaxhighlight lang=""sql"">
SELECT SUM(salary) FROM employee;
</syntaxhighlight>

For comparison, consider a relational table for employees, when support for many companies is permitted. The employee table should carry a foreign key for the company of an employee; this example stems from [[Contribution:mySqlMany]]:

<syntaxhighlight lang=""sql"">
CREATE TABLE IF NOT EXISTS employee (
        # ... as before ...
        FOREIGN KEY (cid) REFERENCES company(id)
);
</syntaxhighlight>

(Alternatively, such a foreign key could be managed by the department table alone, which would make queries even more complicated than what is shown in the sequel.) A query for totaling salaries needs to refer to a specific company, unless we were interested in totaling salaries of all companies:

<syntaxhighlight lang=""sql"">
SELECT SUM(salary) FROM employee
 WHERE cid =
  (SELECT id FROM company
   WHERE name = ""Acme Corporation"");
</syntaxhighlight>

== Metadata ==

* [[instanceOf::Data requirement]]
* [[instanceOf::Optional feature]]

",2016-06-14 23:02:31.523,2017-07-04 13:48:16.755229
Concept,Data modeling in Haskell,"== Headline ==

Basic data modeling techniques in Haskell

== Details ==

Basic concepts of data modeling in Haskell are covered. One important aspect of data modeling is the choice between [[structural typing|structural]] versus [[nominal typing]]. This distinction gives rise to Haskell's [[type synonym]]s, [[algebraic data type]]s, and [[record type]]s. These options are conveniently illustrated with different data models for the [[@system]]. Another important aspect is the choice between different modeling options for recursive data structures, specifically the use of [[data composition]] and [[data variation]]. These options map to certain idioms of using algebraic data types in Haskell. These options are conveniently illustrated with different data models for the [[@system]], when departmental nesting is taken into account. Related to data modeling, there is the potential requirement of [[information hiding]] such as in the context of [[abstract data type]]s. Haskell's module system supports one approach to [[information hiding]]. This is illustrated with [[stack]]s in all detail.

== Concepts ==

* [[Structural typing]]
* [[Nominal typing]]
* [[Type synonym]]
* [[Newtype]]
* [[Algebraic data type]]
* [[Data constructor]]
* [[Constructor component]]
* [[Record type]]
* [[Data composition]]
* [[Data variation]]
* [[Type constructor]]
* [[Tuple type]]
* [[Either type]]
* [[List type]]
* [[Maybe type]]
* [[Information hiding]]
* [[Abstract data type]]
* [[Stack]]
* [[Reverse Polish notation]]

== Languages ==

* [[Language:Haskell]]

== Features ==

* [[Feature:Total]]
* [[Feature:Cut]]

== Contributions ==

* [[Contribution:haskellEngineer]]
* [[Contribution:haskellData]]
* [[Contribution:haskellRecord]]
* [[Contribution:haskellComposition]]
* [[Contribution:haskellVariation]]

== Metadata ==

* [[memberOf::Course:Lambdas in Koblenz]]
*
* [[dependsOn::Script:Searching and sorting in Haskell]]






      ",2016-06-14 23:02:47.126,2017-07-04 13:48:16.933663
Concept,Haskell introduction,"== Headline ==

An introductory collection of [[Language:Haskell]]-based contributions
== Description ==

This theme collects the following relatively basic Haskell-based contributions:

* [[Contribution:haskellStarter|]]: Basics of functional programming
* [[Contribution:haskellEngineer|]]: Basics of software engineering
* [[Contribution:haskellList|]]: List processing with [[Map function|map]] and friends
* [[Contribution:haskellProfessional|]]: Idiomatic code for many features
* [[Contribution:haskellLambda|]]: [[Anonymous function]]s
* [[Contribution:haskellComposition|]]: Recursive [[algebraic data type]]s
* [[Contribution:haskellVariation|]]: Multiple [[constructor]]s per type
* [[Contribution:haskellMonoid|]]: Queries in [[Monoid|monoidal style]]
* [[Contribution:haskellLogging|]]: Logging in non-[[Monad|monadic]] style
* [[Contribution:haskellWriter|]]: Logging in [[Monad|monadic style]]
* [[Contribution:haskellParsec|]]: Parsing with the [[Technology:Parsec|]] library
* [[Contribution:haskellSyb|]]: Generic programming à la [[SYB]] style
== Relationships ==

There are further themes with Haskell-based contributions:
* [[Theme:Haskell potpourri]]: more advanced and diverse coverage of the Haskell ecosystem.
* [[Theme:Haskell data]]: mostly simply variations on data modeling in Haskell.
* [[Theme:Haskell genericity]]: different styles of generic functional programming in Haskell.
== Metadata ==
*
",2016-06-14 23:03:30.618,2017-07-04 13:48:17.00035
Concept,Cut,"== Headline ==

Cut the salaries of employees in half

== Description ==

For a given company, the salaries of all employees are to be cut in half. Let's assume that the management of the company is interested in a salary cut as a response to a financial crisis. Clearly, any real company is likely to respond to a financial crisis in a much less simplistic manner.

== Motivation ==

The feature may be implemented as a [[transformation]], potentially making use of a suitable [[transformation language|transformation]] or [[data manipulation language]]. Conceptually, the feature corresponds to a relatively simple and regular kind of transformation, i.e., an [[iterator-based transformation]], which iterates over a company' employees and updates the salaries of the individual employees along the way. It shall be interesting to see how different software languages, technologies, and implementations deal with the conceptual simplicity of the problem at hand.

== Illustration ==

The feature is illustrated with a statement in [[Language:SQL]] to be applied to an instance of a straightforward relational schema for companies where we assume that all employees belong to a single company:

<syntaxhighlight lang=""sql"">
UPDATE employee
 SET salary = salary / 2;
</syntaxhighlight>

The snippet originates from [[Contribution:mySqlMany]].

== Relationships ==

* See [[Feature:Total]] for a query scenario instead of a transformation scenario.
* In fact, [[Feature:Total]] is likely to be helpful in a ''demonstration'' of [[Feature:Salary cut]].
* The present feature should be applicable to any data model of companies, specifically [[Feature:Flat company]] and [[Feature:Hierarchical_company]].

== Guidelines ==

* The ''name'' of an operation for cutting salaries thereof should involve the term ""cut"". This guideline is met by the above illustration, if we assume that the shown SQL statement is stored in a SQL script with name ""Cut.sql"". Likewise, if [[OO programming]] was used for implementation, then the names of the corresponding methods should involve the term ""cut"".
* A suitable ''demonstration'' of the feature's implementation should cut the salaries of a sample company. This guideline is met by the above illustration, if we assume that the shown SQL statement is executed on a database which readily contains company data. Queries according to [[Feature:Total]] may be used to compare salaries before and after the cut. All such database preparation, data manipulation, and query execution should preferably be scripted. By contrast, if [[OO programming]] was used, then the demonstration could be delivered in the form of unit tests.

== Metadata ==

* [[relatesTo::http://www.thefreedictionary.com/salary+cut]]
* [[instanceOf::Functional requirement]]
* [[instanceOf::Transformation]]
* [[instanceOf::Type-preserving transformation]]
* [[instanceOf::Iterator-based transformation]]
* [[instanceOf::Optional feature]]
* [[facilitates::Type-preserving transformation]]

",2016-06-14 23:03:52.375,2017-07-04 13:48:17.176352
Concept,Geolocation,"== Headline ==

Identification of the geographic location of the user

== Metadata ==
* [[instanceOf::UI_101feature]]
* [[sameAs::http://en.wikipedia.org/wiki/Geolocation]]
*

",2016-06-14 23:04:37.629,2017-07-04 13:48:17.199397
Concept,Localization,"== Headline ==

UI support for different languages


== Metadata ==
* [[instanceOf::UI 101feature]]
* ",2016-06-14 23:04:40.684,2017-07-04 13:48:17.208852
Concept,HaskellBarchart,...,2016-06-14 23:08:45.042,2017-07-04 13:48:17.216389
Concept,NotFound,"== Illustration ==

.
A simple implementation of stacks (of ints) is shown here as a functional data structure in [[Language:Haskell]]:.

<fragment url=""Stack.hs""/>

These stacks are immutable. The push operation does not modify the given stack; it returns a new stack which shares the argument stack possibly with other parts of the program. The pop operation does not modify the given stack; it returns a part of the argument stack. We refer to [[Document:Handbook of data structures and applications]] for a profound discussion of functional data structures including the stack example. The functions for operations top and pop, as given above, are partial because they are undefined for the empty stack.

There are also alternative illustrative Stack implementations available:
* <file url=""/concepts/Foo/LeakyListStack.hs""/>: Stacks are represented as lists while the ''Stack'' type is simply defined as a type synonym to this end. This implementation does not enforce information hiding.
* <file url=""/concepts/Foo/OpaqueListStack.hs""/>: As before, stacks are represented as lists, but the ''Stack'' type is defined as a [[newtype]] which hides the representation as its constructor is not exported.
* <file url=""/concepts/Foo/FastListStack.hs""/>: As before, stacks are represented as lists and again this representation is hidden, but an additional data component for the size of the stack is maintained so that the size of a stack can be returned without traversing the stack.
== Metadata ==
* ",2016-06-14 23:08:53.115,2017-07-04 13:48:17.247127
Concept,Searching and sorting in Haskell,"== Headline ==

Lecture ""Searching and sorting in Haskell"" as part of [[Course:Lambdas in Koblenz]]

== Details ==

We show how to approach the basic [[algorithmic problem]]s of [[search problem|search]] and [[sorting problem|sorting]] in [[Language:Haskell]]. In this manner, we establish proper familiarity with basic functional programming on lists in Haskell, with the use of [[recursion]], [[local scope]], and [[polymorphism]]. We also encounter [[divide and conquer algorithm]]s in this way. Along the way, we discuss some bits of expressiveness of the Haskell [[type system]] including support for [[polymorphism]] with [[type constraint]]s, [[type checking]], and [[type inference]].

The discussed encodings of search and sorting do not intend to be the most efficient ones (in Haskell); instead, the intention is to demonstrate basic algorithmic problem solving in Haskell and to provide evidence for Haskell's fitness for describing algorithms declaratively and concisely.

== Material ==

<media url="" https://www.youtube.com/watch?v=C5AWbFeJcTQ"" />

== Concepts ==

=== Recap ===
* [[Algorithm]]
* [[Algorithmic problem]]
* [[Search problem]]
* [[Search algorithm]]
* [[Linear search]]
* [[Local scope]]

=== Additions ===
* [[Binary search]]
* [[Sorting problem]]
* [[Sorting algorithm]]
* [[Insertion sort]]
* [[Divide and conquer algorithm]]
* [[Quicksort]]
* [[Selection sort]]
* [[Merge sort]]
* [[Median]]
* [[Type system]]
* [[Type signature]]
* [[Polymorphism]]
* [[Type checking]]
* [[Type inference]]

== Languages ==

* [[Language:Haskell]]

== Features ==

* [[Feature:Median]]

== Contributions ==

* [[Contribution:haskellBarchart]]

== Metadata ==


* [[memberOf::Course:Lambdas in Koblenz]]
* [[dependsOn::Script:Basic software engineering for Haskell]]

",2016-06-14 23:09:14.635,2017-07-04 13:48:17.783039
Course,Lambdas at UvA,"== Headline ==

A Haskell-based functional programming course at UvA

== Information ==

See [http://softlang.uni-koblenz.de/1608-amsterdam.pdf] for general information.

You may contact the lecturer Ralf Lämmel at rlaemmel@gmail.com.

== Lecture topics ==

=== Basic [[functional programming]] concepts ===

* [[Function]]
* [[Function definition]]
* [[Function application]]
* [[Type signature]]
* [[Function composition]]
* [[Immutable list]]
* [[Immutable tuple]]
* [[Pattern matching]]
* [[Type checking]]
* [[Type inference]]

=== Basic software engineering methods ===

* [[Modularization]] with Haskell [[module]]s
* [[Local scope]]
* [[Unit testing]] with [[Technology:HUnit]]
* [[Packaging]] with [[Technology:Cabal]]
* [[Packaging]] with [[Technology:HackageDB]]
* [[Documentation generation]] with [[Technology:Haddock]]

=== Searching and sorting ===

* The [[search problem]]
** Search algorithms
*** [[Linear search]]
*** [[Binary search]]
* The [[sorting problem]]
** Sorting algorithms
*** [[Insertion sort]]
*** [[Selection sort]]
*** [[Quicksort]]
*** [[Merge sort]]
* Additional concepts
** [[Guard]]
** [[Type constraint]]
** [[Parametric polymorphism]]

=== Data modeling ===

* Forms of typing
** [[Structural typing]]
** [[Nominal typing]]
* Forms of type declarations
** [[Type synonym]]
** [[Newtype]]
** [[Algebraic data type]]
** [[Record type]]
** [[Type constructor]]
* Data modelling-related concepts
** [[Data constructor]]
** [[Case expression]]
** [[Data composition]]
** [[Data variation]]
* Reusable (data) [[type constructor]]s
** [[Tuple type]]
** [[Either type]]
** [[List type]]
** [[Maybe type]]

=== [[Functional data structure]]s ===

* [[Abstract data type]]s
** [[Stack]]
** [[Queue]]
** [[Set]]
* ADT implementations
** [[Binary search tree]]
** [[Skew heap]]
* Concepts
** [[Lazy evaluation]]
** [[eager evaluation]]
** ([[Path copying]])
** ([[Amortized analysis]])

=== [[Higher-order function]]s ===

* Concepts
** [[Partial application]]s
** [[Currying]] and [[Uncurrying]]
* [[List comprehension]]s
* [[Anonymous function]]s
* [[Lambda abstraction]]s
* Representative higher-order functions
** The [[Map function]]
** The [[Fold function]]
** The [[Filter function]]
** The [[Zip function]]

=== [[Type-class polymorphism]] ===

* [[Type class]]es
* [[Type-class instance]]es
* The [[type class Eq]] for equality
* The [[type class Ord]] for comparison
* The [[type class Num]] for numbers
* The [[type class Monoid]] for [[monoid]]s
** [[List monoid]]
** [[Sum monoid]]
** [[Product monoid]]

=== Functors and friends ===

* [[Functor]]
* [[Applicative functor]]
* [[Foldable type]]
* [[Higher-kinded polymorphism]]
* [[Rose tree]]s
* [[Bidirectional transformation]]s
* [[Data parallelism]]

=== [[Combinator library|Combinator libraries]] ===

* Domains
** [[Pretty printing]]
** [[Parsing]]
* Parsing-related concepts
** [[Context-free_grammar]]
** [[Syntax tree]]
** The [[parsing problem]]
* Combinator libraries
** [[Technology:HughesPJ]] (pretty printing combinators)
** [[Technology:Parsec]] (parser combinators)
* Contributions
** [[Contribution:hughesPJ]]: Illustration of pretty printing
** [[Contribution:haskellAcceptor]]: Illustration of parsing (acceptance only)
** [[Contribution:haskellParsec]]: Illustration of parsing

=== [[Monad]]s ===

* The notion of [[monad]]
* Specific monads
** The [[State monad]]
** The [[Maybe monad]]
** The [[Writer monad]]
* Contributions
** [[Contribution:haskellLogging]]: Logging changes
** [[Contribution:haskellWriter]]: Logging changes monadically

== Appendix ==

=== Simple program samples ===

* [[Factorial]]
* [[Greatest common divisor]]
* [[Linear search]]
* [[Stack]]s
* [[Queue]]s
* [[Binary search tree]]s
* [[Skew heap]]s
* [[Reverse Polish notation]]

=== The [[Technology:Haskell platform|Haskell platform]] ===

* [[Technology:GHC]]
* [[Technology:GHCi]]
* [[Technology:Cabal]]
* [[Technology:HackageDB]]
* [[Technology:Haddock]]
* [[Technology:HUnit]]
* [[Technology:HughesPJ]]
* [[Technology:Parsec]]

=== Sample systems ===

These systems are concerned with employee data in companies.

* [[Contribution:haskellStarter]]: A very basic system
* [[Contribution:haskellEngineer]]: Basic software engineering at work
* [[Contribution:haskellBarchart]]: Illustration of chart generation
* [[Contribution:haskellList]]: Use [[map function|map]] and [[sum function|sum]]
* [[Contribution:haskellLambda]]: Use [[anonymous function]]s
* [[Contribution:haskellProfessional]]: Feature-richer implementation
* [[Contribution:haskellData]]: Use algebraic data types
* [[Contribution:haskellRecord]]: Use record types
* [[Contribution:haskellComposition]]: Use [[data composition]]
* [[Contribution:haskellVariation]]: Use [[data variation]]
* [[Contribution:haskellMonoid]]: Use [[monoid]]s
* [[Contribution:haskellTree]]: Use of [bidirectional transformation]]
* [[Contribution:haskellFlattened]]: Illustration of [[data parallelism]]
* [[Contribution:hughesPJ]]: Illustration of pretty printing
* [[Contribution:haskellAcceptor]]: Illustration of parsing (acceptance only)
* [[Contribution:haskellParsec]]: Illustration of parsing
* [[Contribution:haskellLogging]]: Logging changes
* [[Contribution:haskellWriter]]: Logging changes monadically

=== System features ===

* [[Feature:Flat company]]: Companies as containers of employees
* [[Feature:Hierarchical company]]: Companies as department trees
* [[Feature:Total]]: Total the salaries of all employes
* [[Feature:Cut]]: Cut the salaries in half
* [[Feature:Median]]: Compute median of salaries
* [[Feature:Depth]]: Compute the hierachical nesting depth
* [[Feature:Ranking]]: Constraint on salaries to align with rank
* [[Feature:Mentoring]]: Associate mentee and mentors
* [[Feature:History]]: Analyse salary changes over time
* [[Feature:Logging]]: Logging changes of employee data

== Metadata ==

* [[authoredBy::Contributor:rlaemmel]]",2016-07-21 16:09:00.559,2017-07-04 13:48:18.255576
Concept,Associative array,"== Headline ==

A-Key-Value-Pair-Datastructure

== Metadata ==

* [[memberOf::Vocabulary:Data structure]]
* [[sameAs::https://en.wikipedia.org/wiki/Associative array]]
* [[instanceOf::Abstract data type]]
",2016-07-31 11:12:59.54,2017-07-04 13:48:18.286814
Concept,Type class Ord,"== Headline ==

A [[Language:Haskell]] [[type class]] for ordering

== Description ==

The type class is concerned with types that admit comparison.

<syntaxhighlight lang=""haskell"">
class Eq a => Ord a where
  compare :: a -> a -> Ordering
  (<) :: a -> a -> Bool
  (<=) :: a -> a -> Bool
  (>) :: a -> a -> Bool
  (>=) :: a -> a -> Bool
  max :: a -> a -> a
  min :: a -> a -> a
</syntaxhighlight>

These are essentially familiar comparison operators.

''compare'' returns a value of an enum type to describing ordering.

<syntaxhighlight lang=""haskell"">
data Ordering = LT | EQ | GT
</syntaxhighlight>

''LT'' should be read as ""less than"", ''EQ'' as ""equal"", and ''GT'' as ""greater than"".

It is sufficient to either define ''compare'' or ""<="". All the other operators can be derived in a regular manner. Here is important to notice that every instance of ''Ord'' must also be an instance of ''Eq''; see the type-class constraint above. Thus, ''<'' ad ''<='' can be easily distinguished with the help of ''Eq''.

== Illustration ==

Consider the following data type for natural numbers: the ''Zero'' constructor should be thought as representing ""0""; the ''Succ'' constructor should be thought of as representing the successor function (i.e., addition of 1 or increment).

<syntaxhighlight lang=""haskell"">
data Nat = Zero | Succ Nat
</syntaxhighlight>

Equality and ordering could be reasonably defined for ''Nat'' as follows.

<syntaxhighlight lang=""haskell"">
instance Eq Nat where
  Zero == Zero = True
  Zero == (Succ _) = False
  (Succ _) == Zero = False
  (Succ x) == (Succ y) = x == y

instance Ord Nat where
  compare Zero Zero = EQ
  compare Zero (Succ _) = LT
  compare (Succ _) Zero = GT
  compare (Succ x) (Succ y) = compare x y
</syntaxhighlight>

Equality and ordering is exercised at the Haskell prompt as follows.

<syntaxhighlight lang=""haskell"">
> Zero == Zero
True
> Zero == Succ Zero
False
> Succ Zero == Succ Zero
True
> Zero < Succ Zero
True
> Succ Zero < Succ Zero
False
</syntaxhighlight>
",2016-08-17 16:06:46.52,2017-07-04 13:48:18.678076
Technology,Template Haskell,"== Headline ==

Compile-time metaprogramming in [[Language:Haskell]]

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Template_Haskell]]
* [[sameAs::https://wiki.haskell.org/Template_Haskell]]
* [[relatesTo::https://hackage.haskell.org/package/template-haskell-2.11.0.0/docs/Language-Haskell-TH-Syntax.html]]
* [[relatesTo::https://downloads.haskell.org/~ghc/7.8.4/docs/html/users_guide/template-haskell.html]]
* [[relatesTo::https://ocharles.org.uk/blog/guest-posts/2014-12-22-template-haskell.html]]
* [[relatesTo::http://dblp.org/rec/html/journals/sigplan/SheardJ02]]

* [[instanceOf::Metaprogramming]]
* [[facilitates::Quasi-quotation]]
* [[facilitates::Lifting]]
* [[facilitates::Unlifting]]",2016-08-20 20:04:41.941,2017-07-04 13:48:18.714363
Concept,Quote,"== Headline ==

An operation on program representations to defer evaluation

== Illustration ==

Quoting (') is available in a clear manner in [[Language:Scheme]].

The following examples show quoted expressions and what they evaluate to.

<pre>
'3        ; => 3                 (a number)
'(+ 3 4)  ; => (list '+ '3 '4)   (a list)
</pre>

That is, a quote number is still a number. However, the evaluation of a quoted expression does not return the normal result, but instead a representation, in fact, a list, that represents the expression.

== Relationships ==

The concepts [[quote]], [[quasiquote]], [[unquote]], and [[eval]] belong together.

== Metadata ==

[[relatesTo::http://courses.cs.washington.edu/courses/cse341/04wi/lectures/14-scheme-quote.html]]
",2016-08-11 21:02:11.766,2017-07-04 13:48:18.320901
Concept,Eval,"== Headline ==

An operation on program representations to perform evaluation

== Illustration ==

Eval is available, for example, in [[Language:Scheme]].

Consider this sample code:

<pre>
(define x 5)
(define y '(+ x 10))
(eval y)             ; => 15
</pre>

That is, we first define ''x'' to be equal to 5. Then, we define ''y'' to be equal to the [[quote|quoted]] expression ''(+ x 10)''. Then, we eval ''y'', i.e., the quoted expression is actually evaluated.

== Relationships ==

The concepts [[quote]], [[quasiquote]], [[unquote]], and [[eval]] belong together.

== Metadata ==

[[relatesTo::http://courses.cs.washington.edu/courses/cse341/04wi/lectures/14-scheme-quote.html]]
",2016-08-11 21:18:06.355,2017-07-04 13:48:18.354868
Concept,Quasiquote,"== Headline ==

A form of [[quote|quoting]] that permits [[unquote|unquoting]]

== Illustration ==

Quasiquoting (`) in combination with [[unquote|unquoting]] (,) is available in a clear manner in [[Language:Scheme]].

The following example shows a quasiquoted expression and what it evaluates to.

<pre>
`(+ 1 ,(+ 3 4))   ; => '(+ 1 7)
</pre>

That is, an addition is quoted (quasiquoted), but one of its operands is unquoted so that it is actually incorporated in its evaluated form into the quoted representation.

== Relationships ==

The concepts [[quote]], [[quasiquote]], [[unquote]], and [[eval]] belong together.

== Metadata ==

* [[relatesTo::http://courses.cs.washington.edu/courses/cse341/04wi/lectures/14-scheme-quote.html]]
* [[relatesTo::https://www.schoolofhaskell.com/user/marcin/quasiquotation-101]]
* [[relatesTo::https://wiki.haskell.org/Quasiquotation]]
* [[relatesTo::https://www.well-typed.com/blog/2014/10/quasi-quoting-dsls/]]
* [[relatesTo::https://hackage.haskell.org/package/template-haskell-2.11.0.0/docs/Language-Haskell-TH-Quote.html]]
",2016-08-11 21:18:28.073,2017-07-04 13:48:18.40325
Concept,Unquote,"== Headline ==

An escape from [[quote|quoting]]

== Illustration ==

Unquoting is used in the context of [[quasiquoting]]; see the corresponding illustration.

== Relationships ==

The concepts [[quote]], [[quasiquote]], [[unquote]], and [[eval]] belong together.

== Metadata ==

[[relatesTo::http://courses.cs.washington.edu/courses/cse341/04wi/lectures/14-scheme-quote.html]]
",2016-08-11 21:19:45.943,2017-07-04 13:48:18.429898
Property,instanceOf,"== Headline ==

Instantiation of a classifier

== Description ==

These are some forms of instantiation:
* A language instantiates a classifier for classes of languages. For instance, [[Language:Haskell]] is an instance of the classifier for [[functional programming language]]s.
* A technology instantiates a classifier for classes of technologies. For instance, [[Technology:Ruby on Rails]] is an instance of the classifier for [[web-application framework]]s.
* An artifact instantiates a classifier for classes of artifacts. For instance, an [[Language:ANTLR]] artifact is an instance of the notion of [[grammar]].

== Metadata ==

* [[hasDomain::Type:Any]]
* [[hasRange::Type:Concept]]
",2017-05-04 21:09:30.502656,2017-07-04 13:48:20.927814
Concept,Staging,"== Headline ==

Programming with stages of generation and evaluation

== Relationships ==

This topic also goes by the term of staged computation or even multi-staged programming.

== Metadata ==

* [[relatesTo::http://okmij.org/ftp/meta-programming/]]
* [[relatesTo::https://en.wikipedia.org/wiki/Multi-stage_programming]]
* [[relatesTo::http://www.cs.rice.edu/~taha/MSP/]]
",2016-08-23 22:22:28.362,2017-07-04 13:48:18.732141
101,@project,"== Headline ==

What's the [[@project]]

== Description ==

The 101companies  Project (or ""101project"" or even just ""101"" for short) is an open knowledge resource covering [[Software technology|software technologies]], [[technological space]]s, [[software language]]s, and [[software concept]]s. 101 targets programmers, software engineers, teachers, learners, and technologists; they can leverage 101 and they are encouraged to contribute to 101. The project relies on the aggregation, organization, annotation, and analysis of an open-source corpus of [[@contribution|contributions]]: these are implementations and other manifestations of the [[@system]], which is an imaginary ''Human Resource Management System'' with various (mostly) optional [[Namespace:Feature|features]]. Contributions are maintained in the [[@repo]] and documented on the [[@wiki]] and organized in [[Namespace:Theme|themes]]. All available knowledge is processed by the [[@worker]]; derived resources are made available as [[@data]]; all relevant resources are made available as Linked Data explorable through [[@explorer]].

=== Why the name ""101companies""? ===

The ""companies"" postfix in ""101companies"" refers to the kind of system that is built time again in this project: a system that models companies, department structure, employees, salaries, etc. The ""101"" prefix in ""101companies"" refers to the idiom of doing something in ""101 ways"", namely building said system. Actually, there are more than ""101 ways"" of building a human resource management system with different software technologies and software languages.

=== History of the [[@project]] ===

* Apr 2008: Ralf Lämmel initiates a related course on programming techniques and technologies at the University of Koblenz-Landau.
* June 2010: Jean-Marie Favre, Dragan Gasevic, and Ralf Lämmel meet in Malaga to discuss technological spaces and related publication and teaching efforts.
* Aug 2010: [[@repo]] starts to take shape thanks to Thomas Schmorleiz who enters the [[@project]] for several years to come.
* Oct 2011: Jean-Marie Favre, Dragan Gasevic, and Ralf Lämmel present a related tutorial at GPCE/SLE 2010 in Eindhoven.
* Feb 2011: Andrei Varanovich joins the Software Languages Team to focus his research and developer energy around the project.
* Mar 2011: Ralf Lämmel releases [[@wiki]] at AOSD 2011 in Brazil. Many other [[Information:Presentations|presentations]] of the project have followed.
* Spring 2012: First publication on the project at TOOLS 2012. Other [[Information:Papers|papers]] have followed at MODELS 2012 and WCRE 2012.
* Since summer 2012: many [[@contributor]]s have implemented the [[@system]] with their preferred languages and technologies and contributed thus to the [[@repo]].
* August 2012: The SoTeSoLa summer school leverages the project as part of its design, e.g., for hackathon-like efforts.
* Winter 2012-Summer 2013: Complete re-design of [[@wiki]], [[@repo]], [[@worker]] underway.
* April 2013: The project is now used in two [[Namespace:Course|courses]] simultaneously at the University of Koblenz-Landau.

<small>All 101companies content and code is subject to the [[@license]].</small>

<small>[http://www.youtube.com/channel/UCzecm5qz_9KDcxuhgbRDy-w Check out some videos on the YouTube channel of the project.]</small>

== Metadata ==

* [[relatesTo::http://en.wikipedia.org/wiki/101_(number)]]
*

",2016-08-24 09:02:00.078,2017-07-04 13:48:18.822425
101,@system,"== Headline ==

An imaginary HRMS system in the [[@project]]

== Description ==

The [[@system]] (or just ""the system"") is an imaginary ''[[Human resource management system]] (HRMS)'' which serves as the ""running example"" in the [[@project]]. That is, ""contributions"" to the project are meant to implement or model or otherwise exercise the system for a conceived ''company'' as a client.

The system is supposed to model the company structure in terms of employees and possibly the hierarchical structure of departments. Employees are modeled in terms of their names, addresses, salaries, and possibly additional properties.  The system is supposed to meet certain functional requirements such as totaling all salaries in the company. The system may also be subjected to non-functional requirements such as persistence or distribution. All requirements are organized in [[Namespace:Feature]]. The features are not collected for the sake of an interesting HRMS system. Instead, the features are designed to exercise interesting characteristics of software languages and software technologies. Most features are optional so that contributions have the freedom of choice to focus on features that are particularly interesting for a certain objective of language or technology demonstration.

== Illustration ==

The following UML class diagram models the basic structure of the [[@system]].

[[media:https://github.com/101companies/101repo/raw/master/contributions/argoUML/composition.jpg]]

See [[Theme:Starter]] for a few very simple contributions in varying languages. These are mostly implementations of the system in varying programming languages, but a UML-based model (as shown above) is also included.

== Metadata ==

* [[instanceOf::Human resource management system]]
* [[relatesTo::Namespace:Feature]]
*

",2016-08-27 09:26:38.484,2017-07-04 13:48:18.882366
Technology,Haxe,"== Headline ==

A cross-platform toolkit

== Citation ==

(https://haxe.org/, 29 August 2016)

Haxe is an open source toolkit based on a modern high level strictly typed programming language, a state-of-the-art light-speed cross-compiler, a complete cross-platform standard library, and ways to access each platform's native capabilities.

== Metadata ==

* [[sameAs::https://haxe.org/]]
",2016-08-29 17:06:45.2,2017-07-04 13:48:18.903201
Type,URI,"== Headline ==

101wiki's type of URIs
",2017-04-30 22:54:04.449178,2017-07-04 13:48:19.521215
Concept,Template method pattern,"== Headline ==

A [[design pattern]] for defining the skeleton of an [[algorithm]]

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Template_method_pattern]]
* [[instanceOf::Design pattern]]
",2017-04-26 22:09:00.846719,2017-07-04 13:48:19.447532
101,@repo,"== Headline ==

The repository of the [[@project]]

== Description ==

[[@repo]] is a confederated or virtual repository in that it actually consists of many physical repositories.
Those contributing repositories may either cover some architectural component of the [[@project]] (such as the [[@worker]]) or individual [[@contribution]]s or collections thereof (such as [[@haskell]] or [[@simplejava]]). The confederation is modeled in two ways. First, there is a namespace for member repositories: [[Namespace:Repository]]; in this way the major repositories are actually described with the [[@wiki]]. Second, there is a [https://github.com/101companies/101repo/blob/master/.gitdeps metadata file] describing the physical location of the contributing repositories.

== Metadata ==


* [[relatesTo::https://github.com/101companies/101repo/blob/master/.gitdeps]]
* ",2016-09-01 12:06:47.885,2017-07-04 13:48:18.930239
101,@worker,"== Headline ==

Computational component of the infrastructure of the [[@project]]
== Metadata ==
* ",2016-09-01 12:07:05.853,2017-07-04 13:48:18.938404
Concept,Feature,"== Headline ==

The namespace for [[software feature]]s of the [[@system]]

== Description ==

Each feature (i.e., each instance of the present namespace) must be described on the 101wiki by certain elements listed in detail in the metamodel section on this page. In particular, the feature needs to be described informally as a sort of requirement for the [[@system]] and it needs to be motivated informally in terms of software concepts, languages, and technologies that can be demonstrated with this feature within the [[@project]].

There are the following features:

* [[Feature:Company|Company]]: Companies, department, employees
* [[Feature:Total|Total]]: Total the salaries of employees
* [[Feature:Median|Median]]: Compute the median of the salaries
* [[Feature:Cut|Cut]]: Cut the salaries of employees in half
* [[Feature:Depth|Depth]]: Compute nesting depth of departments
* [[Feature:COI|COI]]: Conflicts of interests for employees
* [[Feature:Mentoring|Mentoring]]: Associate mentors and mentees
* [[Feature:Ranking|Ranking]]: Enforce salary to correlate with ranks
* [[Feature:Singleton|Singleton]]: Constrain for a single company
* [[Feature:History|History]]: Maintain and analyze company history
* [[Feature:Serialization|Serialization]]: De-/serialize companies
* [[Feature:Persistence|Persistence]]: Persist companies
* [[Feature:Mapping|Mapping]]: Map companies across technological space
* [[Feature:Distribution|Distribution]]: Distribute companies
* [[Feature:Parallelism|Parallelism]]: Total or cut in parallel
* [[Feature:Logging|Logging]]: Log company changes
* [[Feature:Browsing|Browsing]]: Browse companies interactively
* [[Feature:Editing|Editing]]: Edit companies interactively
* [[Feature:Restructuring|Restructuring]]: Restructure companies interactively
* [[Feature:Web UI|Web UI]]: Operate on companies in a web browser
* [[Feature:Parsing|Parsing]]: Parse companies in concrete syntax
* [[Feature:Unparsing|Unparsing]]: Pretty print companies

The set of all features can also be arranged in a feature model as defined by the following constraints:

* [[Data requirement]]s
** [[Feature:Company]] (XOR)
*** [[Feature:Hierarchical company]]
*** [[Feature:Flat company]]
** [[Feature:COI]]?
** [[Feature:Mentoring]]?
** [[Feature:Ranking]]?
** [[Feature:Singleton]]?
** [[Feature:History]]?
* [[Functional requirement]]s
** [[Feature:Total]]?
** [[Feature:Cut]]?
** [[Feature:Median]]?
** [[Feature:Logging]]?
** [[Feature:Depth]]?
** [[Feature:Parsing]]?
** [[Feature:Unparsing]]?
** [[Feature:History]]?
* [[Non-functional requirement]]s
** [[Feature:Serialization]]? (XOR)
*** [[Feature:Open serialization]]
*** [[Feature:Closed serialization]]
** [[Feature:Persistence]]?
** [[Feature:Mapping]]?
** [[Feature:Distribution]]?
** [[Feature:Parallelism]]? (OR)
*** [[Feature:Data parallelism]]
*** [[Feature:Task parallelism]]
* [[UI requirement]]s
** [[Feature:Browsing]]?
** [[Feature:Editing]]?
** [[Feature:Restructuring]]?
** [[Feature:Web UI]]?
* More constraints
** [[Feature:Depth]] => [[Feature:Hierarchical company]]
** [[Feature:Ranking]] => [[Feature:Hierarchical company]]
** [[Feature:History]] => [[Feature:Total]]
** [[Feature:History]] => [[Feature:Median]]
** [[Feature:Web UI]] => [[Feature:Browsing]]
** [[Feature:Editing]] => [[Feature:Browsing]]
** [[Feature:Restructuring]] => [[Feature:Editing]]
* Emerging and vanishing features
** <strike>[[Feature:Reporting]]</strike>
** <strike>[[Feature:Charting]]</strike>
** <strike>[[Feature:Grouping]]</strike>
** <strike>[[Feature:Gender]]</strike>
** <strike>[[Feature:Bonus]]</strike>
** <strike>[[Feature:Job description]] => [[Feature:Job role]]</strike>
** <strike>[[Feature:Annual employee review]]</strike>

'''This specification is under construction.'''

We use the following informal notation here:
* ''f''? means that the feature ''f'' is optional.
* ''f'' (OR) means that ''f'' is an OR feature; any operands may be chosen, but at least one, unless '''f''' is optional.
* ''f'' (XOR) means that ''f'' is an XOR feature; either of its operands must be selected, but not several of them.
* ''f1'' => ''f2'' means that if ''f1'' is selected then ''f2'' must be selected.
* <strike>''f''</strike> (i.e., ''f'' with strikethrough) means that the feature is only emerging or already vanishing.

The list of constraints should provide some initial intuition about the [[@system]]. Detailed arguments regarding the constraints are associated with the individual features. A more formal feature model is underway; see here: https://github.com/101companies/101docs/tree/master/featureModel

== Illustration ==

[[Feature:Total]] serves as a good example of a feature of the 101companies System. More specifically, it serves as a good example of a feature for a [[functional requirement]]. The feature also serves as a good example for optional sections for illustration, relationships, and guidelines.

== Metamodel ==

* '''Headline''' (required): the headline introducing the feature.
* '''Description''' (required): the description of the feature from the point of view of [[requirements analysis]] or [[software design]] or [[data modeling]], when applied to the [[@system]]. Thus, the description would say what the system should do, what qualities it should have, or how its [[software architecture]], [[software design]], or [[data model]] should be constrained. When applicable, the user of the system should be mentioned appropriately, e.g., the management of the company.
* '''Motivation''' (required): the distinguished reasons for the feature to exist in the context of the [[@project]]. A feature may exercise interesting software concepts or it may likely to reveal interesting between software languages and software technologies. A feature cannot be motivated solely on the grounds of the human resources domain.
* '''Illustration''' (optional): an illustration of the feature (or a pointer therefore).
* '''Guidelines''' (optional): a description of guidelines regarding the realization of the feature in specific contributions. For instance, naming conventions may be pointed out, expectations regarding the demonstration of the realization may be described, or restrictions may be imposed on the description of the feature.
* '''Relationships''' (optional): explanations regarding related features.
* '''Metadata''' (required):
** The feature must be declared to be, indeed, an instance of [[Namespace:Feature]].
** The feature must be classified in its role as a [[requirement]].
** The feature may be linked to relevant online resources.
** The feature may also be related to any relevant [[software concept]]s.

== Metadata ==
*

",2016-09-01 12:08:04.26,2017-07-04 13:48:19.225781
101,@contributor,"== Headline ==

A contributor to the [[@project]]

== Description ==

The most obvious type of [[@contributor]] is the developer, co-developer, or maintainer of a [[@contribution]], i.e., an implementation or a model of the [[@system]]. Such work on [[@contribution]]s includes indeed efforts on programming and documentation. Another type of [[@contributor]] is concerned with the infrastructure and foundation of the [[@project]] such as the [[@101repo]], the [[@101wiki]], and the [[@101worker]].

== Metadata ==


* [[relatesTo::@contribution]]
* ",2016-09-01 12:08:39.88,2017-07-04 13:48:19.261757
Contributor,manparvesh,"",2016-09-21 15:55:52.145,2017-07-04 13:48:19.266352
Concept,Handbook of data structures and applications,"== Headline ==

The Handbook of Data Structures and Applications

== Metadata ==


* [[instanceOf::Handbook]]
* [[sameAs::http://www.e-reading-lib.org/bookreader.php/138822/Mehta - Handbook of Data Structures and Applications.pdf ]]
* [[relatesTo::Data structure]]
*

",2016-09-29 07:55:36.597,2017-07-04 13:48:19.280877
Concept,Purely functional data structures,"== Headline ==

PhD thesis by Chris Okasaki

== Details ==

This is influential work on [[functional data structure]]s.

== Metadata ==


* [[instanceOf::PhD thesis]]
* [[sameAs::http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf]]
* [[relatesTo::Functional data structure]]
* ",2016-10-04 09:51:01.006,2017-07-04 13:48:19.299273
Contributor,mminski,"",2016-11-05 17:33:53.524882,2017-07-04 13:48:19.303823
Technology,NativeScript,"== Metadata ==

[[uses::Language:Javascript]]
[[sameAs::https://www.nativescript.org/]]
",2016-11-07 19:08:37.276762,2017-07-04 13:48:19.311623
Technology,ReactNative,"== Metadata ==

[[uses::Language:Javascript]]
[[sameAs::https://facebook.github.io/react-native/]]
",2016-11-17 15:05:53.677166,2017-07-04 13:48:19.327763
Technology,RubyEventmachine,"== Metadata ==

[[uses::Language:Ruby]]
[[sameAs::http://rubyeventmachine.com/]]
[[sameAs::https://github.com/eventmachine/eventmachine]]",2016-11-17 15:12:25.58084,2017-07-04 13:48:19.336698
Language,R,"== Headline ==

A programming language for statistics.

== Description ==

R is used for statistical computing and graphics.

== Illustration ==

== Links ==

* [https://en.wikipedia.org/wiki/R_(programming_language)]",2016-11-18 16:39:29.303017,2017-07-04 13:48:19.350819
Type,Contribution,"== Headline ==

101wiki's type of pages in [[Namespace:Contribution]]
",2017-04-30 23:16:41.71596,2017-07-04 13:48:19.620669
Technology,Puma,"== Headline ==

A [[web server]] for [[Technology:Rake]]. Puma is a threading web server but also offers the option of clustering. It is the recommended web server for rails as time of this writing.

== Metadata ==

* [[instanceOf::Web server]]
*
* [[sameAs::https://github.com/puma/puma]]
",2017-03-02 15:36:54.272899,2017-07-04 13:48:19.365467
Concept,USE,"== Headline ==

A UML-based specification environment

== Metadata ==

* [[samesAs::http://sourceforge.net/projects/useocl/]]
* [[relatesTo::http://useocl.sourceforge.net/w/index.php/Quick_Tour]]
* [[instanceOf::IDE]]",2017-03-19 19:17:07.748755,2017-07-04 13:48:19.381602
Concept,RubyEventmachine,"",2017-03-19 19:17:08.841176,2017-07-04 13:48:19.385592
Concept,ReactNative,"",2017-03-19 19:17:10.002235,2017-07-04 13:48:19.389033
Contribution,jrubyfx,"* [[uses::Language:Ruby]]
* [[uses::Language:Java]]
* [[uses::Technolgy:JDBC]]
* [[uses::Technolgy:JavaFX]]
* [[developedBy::Contributor:mminski]]
",2017-04-09 17:46:04.636247,2017-07-04 13:48:19.406484
Contribution,Topic analysis,"== Headline ==

Development folder for topic analysis software that may enrich 101companies wiki topics, especially ""Parsing""",2017-04-10 12:13:28.403371,2017-07-04 13:48:19.415423
Contributor,sschauss,"",2017-04-26 20:37:22.44557,2017-07-04 13:48:19.419068
Concept,Decorator pattern,"== Headline ==

A [[design pattern]] that allows adding behavior to [[object]]s

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Decorator_pattern]]
* [[instanceOf::Design pattern]]
",2017-04-26 22:05:14.200857,2017-07-04 13:48:19.435371
Type,Concept,"== Headline ==

101wiki's type of pages in [[Namespace:Concept]]
",2017-04-30 23:13:31.483417,2017-07-04 13:48:19.595911
Concept,Command pattern,"== Headline ==

A [[design pattern]] for [[encapsulation]] of an action to be performed later

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Command_pattern]]
* [[instanceOf::Design pattern]]
",2017-04-26 22:29:08.609545,2017-07-04 13:48:19.459931
Concept,Adapter pattern,"== Headline ==

A [[design pattern]] for providing an alternative [[interface]]

== Metadata ==

* [[instanceOf::Design pattern]]
* [[sameAs::https://en.wikipedia.org/wiki/Adapter_pattern]]
",2017-04-26 22:33:11.499878,2017-07-04 13:48:19.472196
Concept,Abstract factory pattern,"== Headline ==

A [[design pattern]] for a theme of object constructors without revealing concrete classes

== Metadata ==

* [[instanceOf::Design pattern]]
* [[sameAs::https://en.wikipedia.org/wiki/Abstract_factory_pattern]]
",2017-04-26 22:36:57.793218,2017-07-04 13:48:19.484092
Property,sameAs,"== Headline ==

A strong identity link

== Description ==

One entity (e.g., a language in the repository at hand) is the ""same"" (ontologically) as an entity in the same or another ""ontology"" (e.g., a page on Wikipedia which describes the entity of interest). This concept is inspired by the Semantic Web. The idea is that ""sameAs"" is the strongest form of an ""identity link"".

== Metadata ==

[[hasDomain::Type:Any]]
[[hasRange::Type:URI]]
[[hasRange::Type:Any]]
[[similarTo::Property:similarTo]]
[[similarTo::Property:linksTo]]
[[relatesTo::https://www.w3.org/2009/12/rdf-ws/papers/ws21]]
[[relatesTo::http://disi.unitn.it/~p2p/RelatedWork/Matching/data_linking_for_the_semantic_web.pdf]]
",2017-04-30 22:49:30.682906,2017-07-04 13:48:19.515377
Property,hasDomain,"== Headline ==

The domain of a 101wiki property

== Metadata ==

* [[hasDomain::Type:Any]]
* [[hasRange::Type:Type]]
",2017-04-30 23:00:58.988541,2017-07-04 13:48:19.537467
Property,hasRange,"== Headline ==

The range of a 101wiki property

== Metadata ==

* [[hasDomain::Type:Any]]
* [[hasRange::Type:Type]]
",2017-04-30 23:02:48.867217,2017-07-04 13:48:19.549395
Type,Type,"== Headline ==

101wiki's type of pages in [[Namespace:Type]]
",2017-04-30 23:03:13.436936,2017-07-04 13:48:19.555252
Property,similarTo,"== Headline ==

A weak identity link

== Description ==

This is a weak form of an ""identity link"" where the related entities are considered only similar but not the same in an ontological sense.

== Metadata ==

[[hasDomain::Type:Any]]
[[hasRange::Type:URI]]
[[hasRange::Type:Any]]
[[similarTo::Property:sameAs]]
[[similarTo::Property:relatesTo]]
",2017-04-30 23:08:54.303715,2017-07-04 13:48:19.579312
Type,Language,"== Headline ==

101wiki's type of pages in [[Namespace:Language]]
",2017-04-30 23:12:49.184552,2017-07-04 13:48:19.585489
Type,Technology,"== Headline ==

101wiki's type of pages in [[Namespace:Technology]]
",2017-04-30 23:13:11.467529,2017-07-04 13:48:19.590637
Property,uses,"== Headline ==

Usage relation between entities

== Metadata ==

* [[hasDomain::Type:Contribution]]
* [[hasRange::Type:Language]]
* [[hasRange::Type:Technology]]
* [[hasRange::Type:Concept]]
* [[relatesTo::http://softlang.uni-koblenz.de/megaaxioms/]]
",2017-04-30 23:15:18.221197,2017-07-04 13:48:19.614646
Property,embeds,"== Headline ==

Embedding relation between languages

== Description ==

A language embeds another language in the sense of that elements of the former language somehow may contain elements of the latter language. For instance, some imperative or functional programming language may embed a basic expression language, as the underlying expression forms are also needed in these programming languages.

== Metadata ==

* [[hasDomain::Type:Language]]
* [[hasRange::Type:Language]]
* [[relatesTo::Property:subsetOf]]
* [[relatesTo::Property:supersetOf]]

",2017-04-30 23:17:47.56936,2017-07-04 13:48:19.645451
Property,subsetOf,"== Headline ==

Subset relation between languages

== Description ==

Viewing languages as sets, we can say that a language is a subset of another language. To this end, we may leverage the text- or AST-based representation, with or without well-formedness checking applied.

== Metadata ==

* [[hasDomain::Type:Language]]
* [[hasRange::Type:Language]]
* [[relatesTo::Property:supersetOf]]
* [[relatesTo::Property:embeds]]
",2017-04-30 23:21:57.840663,2017-07-04 13:48:19.671136
Property,supersetOf,"== Headline ==

Superset relation between languages

== Description ==

Viewing languages as sets, we can say that a language is a superset of another language. To this end, we may leverage the text- or AST-based representation, with or without well-formedness checking applied.

== Metadata ==

* [[hasDomain::Type:Language]]
* [[hasRange::Type:Language]]
* [[relatesTo::Property:subsetOf]]
* [[relatesTo::Property:embeds]]
",2017-04-30 23:25:08.263435,2017-07-04 13:48:19.698766
Property,dependsOn,"== Headline ==

Dependency relation between entities

== Description ==

* A language may depend on another language. For instance, a transformation or differencing language may depend on another language in the sense that the semantics of the former language assumes elements of the latter language as input. One should use the more specific relations for subsets, supersets, or embedding, when they are appropriate.
* Other forms of dependencies are forthcoming.

== Metadata ==

* [[hasDomain::Type:Language]]
* [[hasRange::Type:Language]]
* [[relatesTo::Property:subsetOf]]
* [[relatesTo::Property:supersetOf]]
* [[relatesTo::Property:embeds]]
",2017-04-30 23:46:57.397841,2017-07-04 13:48:19.769554
Property,exemplifiedBy,"== Headline ==

""Featured"" 101wiki pages

== Description ==

There are several usecases for this property; they all are meant to help with the collaborative character of 101wiki editing and associated evolution or quality challenges.

=== Featured members of namespaces ===

101wiki pages readily associate themselves with 101wiki namespaces (just by using the namespace in the URL). We use the present property as a means to highlight ""featured"" members of a namespace. That is, an ""exemplifying"" page is (should) be more likely to be properly representative of how pages within the namesapce are supposed to look like.

=== Featured usage of sections ===

101wiki pages readily exercise 101wiki sections ([[Namespace:Section]]). We use the present property as a means to highlight ""featured"" pages that exercise the section in question in a reasonable manner. That is, an ""exemplifying"" page is (should) be more likely to be properly representative of how pages are supposed to instantiate the section at hand.

=== Featured usage of properties ===

The metadata sections of 101wiki pages readily exercise semantic properties. We use the present property as a means to highlight ""featured"" pages that exercise the property in question in a reasonable manner. That is, any occurrence of the property on the ""exemplifying"" page is (should) be more likely to be properly representative of how pages are supposed to use the property at hand.

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Exemplar]]
* [[hasDomain::Type:Namespace]]
* [[hasDomain::Type:Section]]
* [[hasDomain::Type:Property]]
* [[hasRange::Type:Any]]
* [[exemplifiedBy::Property:exemplifiedBy]]

",2017-06-25 19:01:30.001012,2017-07-04 13:48:21.845151
Concept,Build management,"== Headline ==

Preparation of software artifacts for installation, deployment, and execution

== Metadata ==

* [[similarTo::https://en.wikipedia.org/wiki/Software_build]]
* [[similarTo::http://www.scmwise.com/build-management.html]]
",2017-05-01 00:00:34.994751,2017-07-04 13:48:19.780468
Concept,Algebraic specification,"== Headline ==

A software engineering technique for formal specification of system behavior

== Metadata ==

* [[similarTo::https://en.wikipedia.org/wiki/Algebraic_specification]]
",2017-05-01 00:04:37.995708,2017-07-04 13:48:19.788419
Concept,Behavioral modeling,"== Headline ==

Modeling of a software system's behavior

== Metadata ==

* [[instanceOf::Modeling]]
* [[linskTo::http://www.omg.org/news/meetings/workshops/presentations/uml2001_presentations/01-2_Bock_Behavioral_ModelingTutorial.pdf]]
* [[relatesTo::https://en.wikipedia.org/wiki/Behavioral_modeling]]
",2017-05-01 00:07:37.640008,2017-07-04 13:48:19.801544
Type,Int,"== Headline ==

101wiki's type of ints
",2017-05-01 13:27:57.148095,2017-07-04 13:48:19.806915
Type,Float,"== Headline ==

101wiki's type of floats
",2017-05-01 13:28:18.025167,2017-07-04 13:48:19.811498
Type,Date,"== Headline ==

101wiki's type of dates
",2017-05-01 13:29:00.012278,2017-07-04 13:48:19.815982
Type,Function,"== Headline ==

101wiki's type of functions

== Details ==

This type is de-facto abstract, as we do not yet model functions on 101wiki.

",2017-05-03 20:31:12.126867,2017-07-04 13:48:20.807139
Property,relatesTo,"== Headline ==

A degenerated identity link

== Description ==

This is a degenerated form of an ""identity link"" where the related entities are not clearly related in an ontological sense. Instead, the related entities may be opposites of each other, alternatives, and yet be related in other ways not adequately covered by other relations on the 101wiki.

== Illustration ==

The use of 'relatesTo' is sort of a last resort. Consider, for example, [[Section:Headline]]; its metadata section may say that it is related to the Wikipedia page [https://en.wikipedia.org/wiki/Headline]. A stronger relationship ([[Property:sameAs]], [[Property:similarTo]]) is not applicable because [[Section:Headline]] models 101wiki sections rather than the general notion of headlines.

== Metadata ==

[[hasDomain::Type:Any]]
[[hasRange::Type:URI]]
[[hasRange::Type:Any]]
[[similarTo::Property:sameAs]]
[[similarTo::Property:similarTo]]
[[similarTo::Property:dependsOn]]
[[similarTo::Property:subsetOf]]
[[similarTo::Property:supersetOf]]
[[exemplifiedBy::Section:Headline]]
",2017-05-01 13:36:08.411371,2017-07-04 13:48:19.883348
Type,String,"== Headline ==

101wiki's type of strings
",2017-05-01 13:48:15.26803,2017-07-04 13:48:19.89125
Concept,Imperative programming,"== Headline ==

A [[programming paradigm]] that uses [[statement]]s that change a [[program]]'s [[state]]

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Imperative_programming]]
* [[relatesTo::Functional programming]]
* [[instanceOf::Programming paradigm]]
",2017-05-01 13:50:42.850036,2017-07-04 13:48:19.907091
Concept,Scripting,"== Headline ==

Programming in the sense of using a [[Scripting language]]
",2017-05-01 13:59:33.429264,2017-07-04 13:48:19.912896
Concept,Metamodeling,"== Headline ==

A kind of [[modeling]] aiming at [[metamodel]]s

== Metadata ==

* [[instanceOf::Modeling]]
* [[relatesTo::Metamodel]]
* [[sameAs::http://en.wikipedia.org/wiki/Metamodeling]]
",2017-05-01 14:17:46.199489,2017-07-04 13:48:20.000604
Property,supports,"== Headline ==

An entity supporting a concept, technology, or concept

== Description ==

There are these use cases:
* An artifact supports a concept. For instance, a Makefile supports [[build management]].
* A technology supports a language: For instance, [[Technology:Phusion_Passenger]] supports [[Language:Ruby]].
* TODO: More use case forthcoming. We may also introduced more designated properties or make better use of existing properties.

== Metadata ==

* [[hasDomain::Type:Artifact]]
* [[hasDomain::Type:Technology]]
* [[hasRange::Type:Concept]]
* [[relatesTo::Property:defines]]
* [[relatesTo::Property:implements]]
",2017-05-03 20:51:02.880537,2017-07-04 13:48:20.868416
Concept,Object-oriented programming,"== Headline ==

The object-oriented [[programming paradigm]]

== Abbreviation ==

[[OO programming]]

== Metadata ==

* [[sameAs::http://en.wikipedia.org/wiki/Object-oriented_programming]]
* [[instanceOf::Programming paradigm]]

",2017-05-01 14:04:59.297684,2017-07-04 13:48:19.940436
Concept,Regression testing,"== Headline ==

A kind of [[testing]] checking that software continues to function as previously

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Regression_testing]]
* [[instanceOf::Testing]]
",2017-05-01 14:06:00.772191,2017-07-04 13:48:19.952383
Concept,Modeling,"== Headline ==

The activity of authoring [[model]]s and related activities

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Computer_simulation]]",2017-05-01 14:10:36.45799,2017-07-04 13:48:19.961024
Concept,Megamodel,"== Headline ==

A macroscopic view on software systems

== Metadata ==

* [[instanceOf::Model]]
* [[relatesTo::http://www.softlang.org/mega]]
* [[relatesTo::https://hal.archives-ouvertes.fr/hal-01222947]]",2017-05-01 14:14:28.206113,2017-07-04 13:48:19.973121
Concept,Megamodeling,"== Headline ==

A kind of [[modeling]] aiming at [[megamodel]]s

== Metadata ==

* [[instanceOf::Modeling]]
* [[relatesTo::Megamodel]]
",2017-05-01 14:16:24.769628,2017-07-04 13:48:19.986222
Concept,Syntax definition,"== Headline ==

The process of defining [[syntax]] or the status of an artifact to serve as a definition

== Metadata ==

* [[relatesTo::Syntax]]
* [[relatesTo::Abstract syntax]]
* [[relatesTo::Concrete syntax]]
* [[relatesTo::Lexical syntax]]
* [[relatesTo::Context-free syntax]]
* [[relatesTo::Textual syntax]]
* [[relatesTo::Visual syntax]]
* [[relatesTo::https://en.wikipedia.org/wiki/Syntax]]
",2017-05-01 14:22:07.469469,2017-07-04 13:48:20.028661
Concept,Language definition,"== Headline ==

The process of defining a [[software language]] or the status of an artifact to serve as a definition

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Formal_language]]
* [[relatesTo::http://www.sleconf.org/]]

",2017-05-01 14:26:27.107906,2017-07-04 13:48:20.040369
Concept,Language,"== Headline ==

A [[software language]] in the scope of this wiki

== Metadata ==

* [[sameAs::Software language]]
",2017-05-01 14:27:05.329446,2017-07-04 13:48:20.05264
Concept,Technology,"== Headline ==

A [[software technology]] in the scope of this wiki

== Metadata ==

* [[sameAs::Software technology]]
",2017-05-01 14:27:46.297547,2017-07-04 13:48:20.062672
Concept,Web publishing,"== Headline ==

The process of publishing original content on the Internet

== Metadata ==

* [[sameAs::https://www.techopedia.com/definition/10012/web-publishing]]
",2017-05-01 19:06:55.212023,2017-07-04 13:48:20.184611
Concept,Data exchange,"== Headline ==

The process of exchanging data between loosely coupled software components

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Data_exchange]]
",2017-05-01 14:31:20.11254,2017-07-04 13:48:20.071397
Concept,Data definition,"== Headline ==

The process of defining [[data]] or the status of an artifact to serve as a definition

== Metadata ==

* [[relatesTo::Data definition language]]
",2017-05-01 14:36:51.989789,2017-07-04 13:48:20.082228
Concept,Grammar transformation,"== Headline ==

The process of transforming a [[grammar]] or the status of an artifact to model a transformation

== Metadata ==

* [[relatesTo::https://doi.org/10.1145/1072997.1073000]]
",2017-05-01 14:38:33.748047,2017-07-04 13:48:20.091697
Concept,Model differencing,"== Headline ==

The process of determining the difference between [[model]]s

== Metadata ==

* [[relatesTo::http://ieeexplore.ieee.org/document/5071714/]]
",2017-05-01 14:43:47.791108,2017-07-04 13:48:20.101067
Concept,Tree-based representation,"== Headline ==

The tree-based representation of artifacts, e.g., in [[metaprogramming]]

== Metadata ==

* [[relatesTo::Tree]]
",2017-05-01 14:52:27.253426,2017-07-04 13:48:20.11136
Concept,Graph-based representation,"== Headline ==

The graph-based representation of artifacts, e.g., in [[model transformation]]

== Metadata ==

* [[relatesTo::Graph]]
",2017-05-01 14:54:42.120186,2017-07-04 13:48:20.122181
Concept,Graph visualization,"== Headline ==

The software-supported activity of visualizing or drawing graphs

== Metadata ==

* [[similarTo::https://en.wikipedia.org/wiki/Graph_drawing]]
",2017-05-01 14:56:58.720084,2017-07-04 13:48:20.135165
Language,ANTLR,"== Headline ==

The grammar language of the [[Technology:ANTLR]]

== Details ==

ANTLR is an abbreviation for Another Tool for Language Recognition.

== Metadata ==

* [[similarTo::http://www.antlr.org/]]
* [[relatesTo::Technology:ANTLR]]
* [[facilitates::Parsing]]
* [[facilitates::Parser generation]]
* [[facilitates::Semantic action]]
* [[instanceOf::Grammar language]]
",2017-05-01 15:56:36.791758,2017-07-04 13:48:20.161446
Concept,Testpage,"",2017-05-01 17:27:51.822979,2017-07-04 13:48:20.176625
Language,DOT,"== Headline ==

The input language of [[Technology:Graphviz]] for describing and rendering graphs

== Metadata ==

* [[sameAs::http://www.graphviz.org/content/dot-language]]
* [[facilitates::Graph visualization]]
* [[relatesTo::Technology:Graphviz]]
* [[instanceOf::Modeling language]]
",2017-05-01 19:12:17.818457,2017-07-04 13:48:20.201538
Language,DCG,"== Headline ==

A grammar notation based on logic programming

== Details ==

DCG is an abbrebviation for Definite Clause Grammar.

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Definite_clause_grammar']]
",2017-05-01 19:22:21.613609,2017-07-04 13:48:20.212635
Property,partOf,"== Headline ==

Part-of relation between entities

== Description ==

A technology is part of another technology, if the former is an integral part of how the latter is documented, deployed, and used. For instance, The compiler [[Technology:javac]] is part of Java's development kit [[Technology:JDK]].

== Metadata ==

* [[hasDomain::Type:Technology]]
* [[hasRange::Type:Technology]]
* [[relatesTo::http://softlang.uni-koblenz.de/megaaxioms/]]
",2017-05-03 11:06:09.042221,2017-07-04 13:48:20.233553
Type,Artifact,"== Headline ==

101wiki's type of artifacts

== Details ==

This type is de-facto abstract, as we do not yet manifest artifacts (such as files) in 101wiki.
",2017-05-03 11:46:48.890368,2017-07-04 13:48:20.241307
Concept,Object-program representation,"== Headline ==

The representation of [[object program]]s in [[metaprogramming]]

== Metadata ==

* [[relates::metaprogramming]]
",2017-05-03 16:58:08.726575,2017-07-04 13:48:20.690555
Concept,Object program,"== Headline ==

A [[program]] manipulated by a [[metaprogram]]

== Headline ==

* [[relatesTo::metaprogramming]]
* [[relatesTo::metaprogram]]
* [[relatesTo::object-program representation]]
",2017-05-03 17:01:43.09516,2017-07-04 13:48:20.706046
Concept,Algebraic signature,"== Headline ==

A definition of sets of terms

== Metadata ==

* [[relatesTo:Tree-based abstract syntax]]
",2017-05-03 20:15:31.535093,2017-07-04 13:48:20.771295
Property,defines,"== Headline ==

A relation between a defining artifact and a defined entity

== Description ==

There are scenarios like this:
* An artifact (such as language definition) defines a language.
* An artifact (such as a specification) defines a function.
* An artifact (such as a specification) defines a concept that proxies for a function.

== Metadata ==

* [[hasDomain::Type:Artifact]]
* [[hasRange::Type:Language]]
* [[hasRange::Type:Function]]
* [[hasRange::Type:Concept]]
* [[relatesTo::Property:implements]]
",2017-05-03 20:27:07.017027,2017-07-04 13:48:20.798616
Language,FOAF,"== Headline ==

The friend of a friend ontology

== Metadata ==

* [[sameAs::http://www.foaf-project.org/]]
* [[sameAs::https://en.wikipedia.org/wiki/FOAF_(ontology)]]",2017-05-07 20:10:01.650824,2017-07-04 13:48:20.938657
Technology,ATL,"The toolkit that implements the language ATL.


== Metadata ==
* [[memberOf::Vocabulary:ATL]]
* [[sameAs::http://wiki.eclipse.org/ATL/User_Guide_-_The_ATL_Tools]]
* [[instanceOf::Technology]]",2017-05-18 10:43:53.24906,2017-07-04 13:48:20.949809
Technology,scalameta,"== Headline ==

A metaprogramming toolkit for [[Language:Scala|Scala]]

== Metadata ==

* [[sameAs::http://scalameta.org/]]
* [[relatesTo::http://scalameta.org/tutorial/]]
* [[managedBy::https://github.com/scalameta/scalameta]]
* [[instanceOf::Metaprogramming system]]
* [[facilitates::Inline Macro]]
* [[facilitates::Lifting]]
* [[facilitates::Unlifting]]
* [[facilitates::Quasi-quotation]]
* [[instanceOf::Metaprogramming]]",2017-05-19 12:50:44.180967,2017-07-04 13:48:20.978196
Technology,JFace,"== Headline ==
A UI library that is part of the Eclipse IDE.


== Metadata ==
* [[sameAs::https://wiki.eclipse.org/JFace]]
* [[instanceOf::Technology]]
* [[partOf::Technology:Eclipse]]
* [[facilitates::UI]]",2017-05-23 12:46:55.17113,2017-07-04 13:48:20.994949
Concept,Inline Macro,"==Headline==

A specific kind of use of macros supported by [[Technology:scalameta|scalameta]] for metaprogramming.

==Metadata==

[[relatesTo::http://www.bbartosz.com/blog/2016/09/16/new-scalameta-inline-macros-examples/]]
[[relatesTo::https://github.com/scalameta/sips/blob/3520d5c761abfdfeff66d396456791971795f6af/sips/pending/_posts/2016-09-09-inline-meta.md#inlinemeta]]
[[relatesTo::https://gist.github.com/xeno-by/9741ce7532cb30368b3753521bbfce4e]]
[[relatesTo::https://www.youtube.com/watch?v=wii5UPtu1_g]]
[[relatesTo::https://www.youtube.com/watch?v=_2oGY8l67jk]]
[[isA::Macro]]",2017-05-23 15:08:13.204752,2017-07-05 12:23:41.999242
Property,managedBy,"== Headline ==

A technology's code is managed by a code repository.

== Description ==

This relation should be used, if the implementation can be viewed at a repository located
at Github, Bitbucket, etc.

== Metadata ==

* [[hasDomain::Type:Technology]]
* [[hasRange::Type:URI]]
",2017-05-23 15:26:18.348644,2017-07-04 13:48:21.104505
Concept,Implicit conversion,"== Headline ==

An implicit type conversion from one type to another in [[Language:Scala|Scala]].

== Metadata ==

[[sameAs::http://docs.scala-lang.org/tutorials/tour/implicit-conversions]]",2017-05-23 15:44:28.990596,2017-07-04 13:48:21.114651
Concept,Lifting,"== Headline ==
Lifting evaluates an expression e to a value v, and then constructs a piece of code representing v.

== Metadata ==

[[relatesTo::http://dblp.org/rec/journals/tcs/TahaS00]]
[[relatesTo::Quasi-quotation]]
",2017-05-23 15:49:35.657868,2017-07-04 13:48:21.126142
Language,Xtend,"== Headline ==

Xtend is a metaprogramming DSL that is implemented by [[Technology:Xtext|Xtext]].

== Metadata ==
[[instanceOf::Programming language]]
[[sameAs::http://www.eclipse.org/xtend/]]
",2017-05-23 16:02:38.111813,2017-07-04 13:48:21.141378
Concept,Semantic action,"== Headline ==

Addtional computations as part of a [[grammar]]

== Description ==

Semantic actions are typically implemented in some [[programming language]]. Code can be embedded into a grammar if the implementing [[Parser generator]] facilitates this concept.

== Metadata ==

* [[relatesTo::https://github.com/antlr/antlr4/blob/master/doc/actions.md]]
* [[relatesTo::http://www.gnu.org/software/bison/manual/html_node/Semantic-Actions.html]]",2017-06-06 10:26:05.958209,2017-07-04 13:48:21.455519
Concept,Generated code,"== Headline ==

The output of [[code generation]]

== Illustration ==

For instance, when using a [[parser generator]] such [[Technology:ANTLR4]], the generated parser may be generated code.

== Metadata ==

* [[relatesTo::Code generation]]
* [[relatesTo::https://en.wikipedia.org/wiki/Code_generation_(compiler)]]
",2017-05-29 12:11:45.13491,2017-07-04 13:48:21.196024
Property,versionOf,"== Headline ==

Technology or languages versions

== Description ==

There are two kinds of situations:

* A version-specific technology is modeled to be indeed a version of a technology where the latter does not commit to any specific version. For instance, [[Technology:ANTLR4]] is a version of [[Technology:ANTLR]].
* Ditto for languages. For instance, [[Language:ANTLR4]] is a version of [[Language:ANTLR]] - both in the sense of the grammar notation of the [[Technology:ANTLR]].

== Metadata ==

* [[hasDomain::Type:Language]]
* [[hasDomain::Type:Technology]]
* [[hasRange::Type:Language]]
* [[hasRange::Type:Technology]]
",2017-05-29 12:14:57.347702,2017-07-04 13:48:21.22688
Language,ANTLR4,"==Headline==

The fourth version of [[Language:ANTLR]]

== Metadata ==

* [[versionOf::Language:ANTLR]]
* [[instanceOf::Grammar language]]

",2017-05-29 12:21:56.527808,2017-07-04 13:48:21.240814
Perspective,Meta,"== Headline ==

The metalevel or metapgramming level

== Details ==

A document takes the [[Perspective:Meta]], if it involves metalevel or metapgrogramming level aspects. For instance, a document with the code for an interpreter or the grammar of a language would take this perpective.
",2017-05-29 12:46:50.955125,2017-07-04 13:48:21.259531
Internal,FrontPage,"101 aggregates knowledge about software '''languages''' and '''technologies'''. 101wiki is the semantic wiki access point to 101. 101's '''contributions''' are small systems exercising languages and technologies by implementing '''features''' for a simple information system with source code available on GitHub. 101 is used in '''courses'''. 101wiki is used in some Open Source projects, e.g., [http://www.softlang.org/metalib MetaLib] and [http://www.softlang.org/yas YAS]. The 101wiki may also be accessed through [https://101wiki.softlang.org/resources 101linkeddata] in ''Linked Open Data'' manner. Contributions to 101 are [https://101wiki.softlang.org/contribute/new welcome].
",2017-05-31 10:21:35.80829,2017-07-04 13:48:21.268329
Internal,Courses,"101wiki hosts a functional programming course: [[Course:Lambdas_in_Koblenz]].

101wiki is also used in additional course by the SoftLang team: [http://www.softlang.org/teaching].

Some recent uses of 101wiki in specialized courses include these:

* [http://www.softlang.org/course:gssi17 A PhD course on Software Languages at GSSI] (l'Aquila, Italy, 2017)
* [http://www.softlang.org/course:univaq17 A Master course on Software Languages at University of l'Aquila] (l'Aquila, Italy, 2017)
* [[Course:Lambdas_at_UvA | A functional programmning course at University of Amsterdam]] (Amsterdam, The Netherlands, 2016)
",2017-05-31 12:24:01.668663,2017-07-04 13:48:21.27698
Internal,Resources,"== Headline ==

Resources Page",2017-05-31 13:58:27.887035,2017-07-04 13:48:21.281378
Language,StringTemplate,"== Headline ==

The template language that is implemented by the [[Technology:StringTemplate|StringTemplate]] engine.

== Metadata ==

* [[sameAs::https://github.com/antlr/grammars-v4/tree/master/stringtemplate]]
* [[instanceOf::Template language]]

",2017-06-06 08:28:50.530223,2017-07-04 13:48:21.312016
Language,jinja2,"== Headline ==

A template language implemented by the [[Technology:jinja2|jinja2]] engine.

== Metadata ==

[[managedBy::https://github.com/pallets/jinja/tree/master/jinja2]]
[[instanceOf::Template language]]
[[versionOf::Language:jinja]]",2017-06-06 08:50:02.984421,2017-07-04 13:48:21.326612
Language,Xtext,"==Headline==

The [[Grammar language|grammar language]] implemented by [[Technology:Xtext|Xtext]]

==Description==
A [[grammar]] can be provided as the syntax definition of a DSL when using [[Technology:Xtext|Xtext]].

==Metadata==
* [[sameAs::https://eclipse.org/Xtext/documentation/301_grammarlanguage.html]]
* [[relatesTo::https://eclipse.org/Xtext/documentation/102_domainmodelwalkthrough.html]]
* [[instanceOf::Grammar language]]",2017-06-06 09:26:20.774732,2017-07-04 13:48:21.386526
Language,ANTLR3,"==Headline==

The third version of [[Language:ANTLR]]

== Metadata ==

* [[versionOf::Language:ANTLR]]
* [[instanceOf::Grammar language]]
",2017-06-06 09:31:52.004988,2017-07-04 13:48:21.421093
Technology,ANTLR3,"==Headline==

ANTLR4 is the third version of [[Technology:ANTLR|]] (ANother Tool for Language Recognition) for generating parsers

== Metadata ==
* [[managedBy::https://github.com/antlr/antlr3/]]
* [[instanceOf::Parser generator]]
* [[versionOf::Technology:ANTLR]]
* [[implements::Language:ANTLR3]]
* [[facilitates::Parsing]]



",2017-06-06 09:30:19.683793,2017-07-05 15:30:25.694513
Perspective,Capture,"== Headline ==

Documentation based on a screenshot or session log

== Description ==

This point of view in system documentation ([[Namespace:Perspective]]) is used when a system (its implementation) cannot be fully explained by means of source code. For instance, an implementation may leverage an interactive component (e.g., a projectional editor) in an essential manner and thus, some screenshot or a session log may be needed in the documentation.
",2017-06-23 11:41:11.812259,2017-07-04 13:48:21.467748
Perspective,Test,"== Headline ==

Testing-related documentation

== Description ==

This point of view in system documentation ([[Namespace:Perspective]]) is used when a test case for a system (a feature's implementation thereof), typically in the form of code for testing, is shown.

",2017-06-23 11:44:29.634517,2017-07-04 13:48:21.477332
Perspective,Implementation,"== Headline ==

Implementation-related documentation

== Description ==

This point of view in system documentation ([[Namespace:Perspective]]) is used when the implementation of a system feature in the form of 'source code' is shown. This may not always be possible or sufficient, in which case the [[Perspective:Capture]] may be of use.
",2017-06-23 11:46:34.433836,2017-07-04 13:48:21.488243
Perspective,data,"== Headline ==

Exemplary showcase data

== Details ==

A document takes the [[Perspective:data]], if it presents data that serves as a show/test-case for a contribution.
",2017-06-23 11:48:23.198247,2017-07-04 13:48:21.496739
Feature,API,"== Headline ==

A sub-feature for implementing [[API]]

== Description ==

Working with the language happens using an [[API]]. Especially in internal DSL-style implementation actual APIs occurs.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Abstract syntax]]
* [[instanceOf::Optional feature]]
",2017-06-23 12:36:20.707533,2017-07-04 13:48:21.522365
Language,AIRD,"== Headline ==

A subset of XMI for visual model representations in [[Technology:Sirius]]

== Metadata ==
* [[instanceOf::Structural_modeling_language]]
* [[subsetOf::XMI]]
",2017-06-23 13:17:20.678697,2017-07-04 13:48:21.535828
Language,FSML,"== Headline ==

A DSL for finite state machines

== Abbreviation ==
Finite State Machine Language

== Metadata ==

* [[sameAs::http://softlang.uni-koblenz.de/yas/languages/fsml.html]]
* [[instanceOf::Modeling language]]",2017-06-23 14:13:43.709099,2017-07-04 13:48:21.5685
Technology,Sirius,"== Headline ==

A visualization framework for [[Technology:EMF]]-based models

== Metadata ==

* [[instanceOf::Framework]]
* [[implements::Language:AIRD]]
* [[uses::Language:Java]]
* [[facilitates::Modeling]]",2017-06-23 13:26:05.605695,2017-07-05 15:30:25.732059
Language,NABL,"== Headline ==

A language for name bindings in [[Technology:Spoofax]]

== Abbreviation ==

<ins>Na</ins>me <ins>B</ins>inding <ins>L</ins>anguage

== Metadata ==

* [[instanceOf::Software language]]",2017-06-23 14:24:29.397878,2017-07-04 13:48:21.596822
Language,Racket,"== Headline ==

A general-purpose programming language implemented by [[Technology:Racket]]

== Metadata ==

* [[sameAs::https://racket-lang.org/]]
* [[instanceOf::Programming language]]",2017-06-23 14:32:38.020012,2017-07-04 13:48:21.633585
Language,SDF3,"== Headline ==

[[Technology:Spoofax]]'s grammar language


== Metadata ==

* [[sameAs::http://www.metaborg.org/en/latest/source/langdev/meta/lang/sdf3/index.html]]
* [[instanceOf::Grammar language]]",2017-06-23 14:44:22.056154,2017-07-04 13:48:21.678171
Language,Stratego,"== Headline ==

A transformation language for [[AST]]s used in Spoofax

== Metadata ==

* [[sameAs::http://www.metaborg.org/en/latest/source/langdev/meta/lang/stratego/index.html]]
* [[instanceOf::Transformation language]]",2017-06-23 14:47:39.76202,2017-07-04 13:48:21.691005
Section,Headline,"== Headline ==

The headline of a 101wiki page

== Description ==

A headline is a portion of text as follows:
* It is a '''one-liner'''
* It is '''less than 72''' characters long
* It starts in '''upper case'''
* It does '''not''' end with a "".""
* It does '''not''' constitute a complete sentence.
* Instead, it is '''a grammatically abbreviated phrase''' as used in captions.
* It may reference 101wiki pages.

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Headline]]
* [[exemplifiedBy::Technology:Django]]
* [[exemplifiedBy::Language:Haskell]]
* [[exemplifiedBy::Section:Headline]]
* [[exemplifiedBy::Monad]]

",2017-06-25 16:36:18.249636,2017-07-04 13:48:21.721456
Section,Description,"== Headline ==

The description of an entity on 101wiki

== Description ==

101wiki pages are expected to carry a description, if and only if, the underlying entity is (more or less) specific to 101wiki (its usecases or its architecture). Many 101wiki pages (for established languages, technologies, concepts, etc.) are essentially just 101wiki incarnations of established entities with existing descriptions; in these cases, no description on 101wiki is expected, but see [[Section:Details]] for an (optional) selective description.

== Metadata ==

* [[similarTo::https://en.wikipedia.org/wiki/Description]]
* [[similarTo::Section:Details]]
* [[exemplifiedBy::Section:Description]]
* [[exemplifiedBy::Feature:Total]]
",2017-06-25 18:12:53.179768,2017-07-04 13:48:21.754552
Namespace,Section,"== Headline ==

The namespace of sections used on 101wiki

== Description ==

This namespace is dedicated to the sections that are used on 101wiki. That is, each member of the namespace describes a section that may be used on 101wiki pages. In this manner, members of the namespace provide a semi-structured metamodel of 101wiki.

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Section_(typography)]]
* [[hasMandatory::Section:Headline]]
* [[hasMandatory::Section:Description]]
* [[hasMandatory::Section:Metadata]]
* [[hasMandatory::Property:exemplifiedBy]]
* [[exemplifiedBy::Section:Headline]]
* [[exemplifiedBy::Section:Description]]
* [[exemplifiedBy::Section:Metadata]]

",2017-06-25 18:29:06.597904,2017-07-04 13:48:21.79193
Section,Metadata,"== Headline ==

Metadata entries on a 101wiki page

== Description ==

101wiki is a semantic wiki which uses a property-based style of linking pages (both internal to 101wiki and external resources). The metadata section is the primary place where such links are documented. The metadata section takes the form of of a bullet list where each item identifies a property an object with the given page serving as the subject, thereby identifying all three components of a triple of semantic data.

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Metadata]]
* [[exemplifiedBy::Section:Metadata]]
* [[exemplifiedBy::Technology:JUnit]]
",2017-06-25 20:01:19.886764,2017-07-04 13:48:21.873549
Property,hasSection,"== Headline ==

An association between namespaces and sections

== Description ==

If a namespace associates with a given section, per the property at hand, then the expectation is that any given member of the namespace's 101wiki page is going to hold a section, as associated.

== Metadata ==

* [[hasDomain::Type:Namespace]]
* [[hasRange::Type:Section]]
* [[exemplifiedBy::Namespace:Section]]
",2017-06-25 21:44:33.805325,2017-07-04 13:48:21.894672
Property,hasMandatory,"== Headline ==

An association between namespaces and sections

== Description ==

If a namespace associates with a given section in terms of [[Property:hasMandatory]], then the assumption is that a 101wiki page which is member of the namespace, as identified by the property's subject, '''must''' hold a section, as identified by the property's object.

Likewise, if a namespace associates with a given property in terms of [[Property:hasMandatory]], then the assumption is that a 101wiki page which is member of the namespace, as identified by the property's subject, '''must''' carry a property in its metadata section, as identified by the property's object.

== Metadata ==

* [[similarTo::Property:hasOptional]]
* [[hasDomain::Type:Namespace]]
* [[hasRange::Type:Section]]
* [[hasRange::Type:Property]]
* [[exemplifiedBy::Namespace:Language]]
",2017-06-26 10:21:29.549032,2017-07-04 13:48:21.93309
Section,Details,"== Headline ==

Selective descriptive details regarding an entity on 101wiki

== Description ==

Many 101wiki pages (for languages, technologies, concepts, etc.) are essentially just 101wiki incarnations of already established entities with one or more available descriptions. Thus, 101wiki pages should link to existing resources and not attempt comprehensive description of entities. A ""details"" section can be used in cases where some selective descriptive details are to be captured nevertheless on 101wiki.

== Metadata ==

* [[similarTo::Section:Description]]
* [[exemplifiedBy::Language:Haskell]]

",2017-06-26 11:56:21.266679,2017-07-04 13:48:21.954238
Property,hasOptional,"== Headline ==

An association between namespaces, sections, and properties

== Description ==

If a namespace associates with a given section in terms of [[Property:hasOptional]], then the assumption is that a 101wiki page which is member of the namespace, as identified by the property's subject, '''may''' hold a section, as identified by the property's object.

Likewise, if a namespace associates with a given property in terms of [[Property:hasOptional]], then the assumption is that a 101wiki page which is member of the namespace, as identified by the property's subject, '''may''' carry a semantic property in its metadata section, as identified by the property's object.

== Metadata ==

* [[similarTo::Property:hasMandatory]]
* [[hasDomain::Type:Namespace]]
* [[hasRange::Type:Section]]
* [[hasRange::Type:Property]]
* [[exemplifiedBy::Namespace:Language]]
",2017-06-26 12:05:54.602737,2017-07-04 13:48:21.987697
Section,Illustration,"== Headline ==

Illustrative use of a [[software language]], a [[software technology|technology]], or a [[software concept|concept]]

== Description ==

Illustration sections typically use source code (or potentially screenshots) with explanatory paragraphs of text to illustrate the use of languages, technologies, and concepts. Source code may be inlined directly or it may be linked to, subject using the appropriate markup.

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Illustration]]
* [[exemplifiedBy::Language:Haskell]]
",2017-06-26 12:09:24.84445,2017-07-04 13:48:22.009072
Section,Quote,"== Headline ==

A quote meant to provide a partial description regarding an entity on 101wiki

== Description ==

A ""quote"" section may be used as a basic means of describing an entity on 101wiki on the grounds of an existing resource.

== Metadata ==

* [[relatesTo::Section:Description]]
* [[relatesTo::Section:Details]]
* [[exemplifiedBy::Visitor pattern]]

",2017-06-26 12:58:18.595658,2017-07-04 13:48:22.02898
Namespace,Perspective,"== Headline ==

A point of view used in system documentation

== Description ==

Different perspectives were introduced in the [http://www.softlang.org/metalib MetaLib] project.
We refer to the MetaLib paper for the original description of the perspectives.
Short descriptions of the individual perspectives are available; see the linked examples.

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Narration]]
* [[relatesTo::http://www.softlang.org/metalib]]
* [[hasMandatory::Section:Headline]]
* [[hasMandatory::Section:Description]]
* [[hasMandatory::Section:Metadata]]
* [[exemplifiedBy::Perspective:Implementation]]
* [[exemplifiedBy::Perspective:Data]]
* [[exemplifiedBy::Perspective:Test]]
* [[exemplifiedBy::Perspective:Build]]
* [[exemplifiedBy::Perspective:Capture]]
",2017-06-26 13:35:09.130726,2017-07-04 13:48:22.07104
Perspective,Build,"== Headline ==

Building-related documentation

== Description ==

This point of view in system documentation ([[Namespace:Perspective]]) is used when a building step for a system (a feature's implementation thereof), possibly in the form of build scripts or command sequences, is shown.


",2017-06-26 13:58:17.371134,2017-07-04 13:48:22.082306
Feature,Language implementation,"== Headline ==

The parent feature for a [[language implementation]]

== Description ==

This is the root of the feature tree for [[System:FSML]]

== Metadata ==

* [[relatesTo::System:FSML]]
",2017-06-26 16:06:56.309485,2017-07-04 13:48:22.205429
Perspective,Data,"== Headline ==

System data-level documentation

== Description ==

This point of view in system documentation ([[Namespace:Perspective]]) is used when system data, e.g., in the form of a serialized representation, is shown. For instance, in the case of a [[DSL]] implementation, [[Perspective:Data]] would involve actual representations of DSL programs as opposed to the code for implementing features that are documented according to the [[Perspective:Implementation]].

",2017-06-26 14:03:35.81254,2017-07-04 13:48:22.100584
Namespace,Type,"== Headline ==

Namespace for subject and object types of semantic properties on 101wiki

== Description ==

Semantic properties are described in terms [[Property:hasDomain]] and [[Propery:hasRange]], i.e., the domain and range of properties. We use the term 'type' rather than 'namespace' here because the object of a semantic property could be a primitive value (see [[Type:String]]) or a URI (see [[Type:URI]]). Obviously, the subject of any property on 101wiki must be a page on 101wiki. There is (there should be) a type for each namespace. There is the special [[Type:Any]] to proxy for the union of all namespaces.

== Metadata ==

* [[hasMandatory::Section:Headline]]
* [[hasOptional::Section:Description]]
* [[hasOptional::Section:Metadata]]
* [[exemplifiedBy::Type:String]]
* [[exemplifiedBy::Type:URI]]
* [[exemplifiedBy::Type:Any]]
* [[exemplifiedBy::Type:Type]]
",2017-06-26 15:00:04.038491,2017-07-04 13:48:22.140684
System,FSML,"== Headline ==

An imaginary implementation of a [[DSL]] for finite state machines

== Description ==

[[System:FSML]] refers to an imaginary implementation of a [[DSL]] for finite state machines. Many such implementations exists, in fact, as part of the [http://www.softlang.org/metalib MetaLib] project.

== Metadata ==

* [[instanceOf::Language implementation]]
",2017-06-26 15:40:34.444993,2017-07-04 13:48:22.159582
Namespace,System,"== Headline ==

The namespace of [[software system]]s

== Description ==

This namespace is dedicated to [[software system]]s that are covered on 101wiki.

== Metadata ==

* [[relatesTo::Software system]]
* [[hasMandatory::Section:Headline]]
* [[hasMandatory::Section:Description]]
* [[hasOptional::Section:Illustration]]
* [[hasMandatory::Section:Metadata]]
* [[exemplifiedBy::System:101]]
* [[exemplifiedBy::System:FSML]]
",2017-06-26 15:45:42.34896,2017-07-04 13:48:22.190642
Feature,Syntax,"== Headline ==

A sub-feature for [[language implementation]]

== Description ==

This feature concerns the implementation of a language's [[syntax]].

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Language implementation]]
* [[instanceOf::Mandatory feature]]
* [[instanceOf::Or feature]]
",2017-06-26 17:05:42.371438,2017-07-04 13:48:22.228046
Feature,Semantics,"== Headline ==

A sub-feature for [[language implementation]]

== Description ==

This feature concerns the implementation of a language's [[semantics]].

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Language implementation]]
* [[requires::Feature:Syntax]]
* [[instanceOf::Optional feature]]
* [[instanceOf::Or feature]]
",2017-06-26 17:07:23.053258,2017-07-04 13:48:22.254727
Property,requires,"== Headline ==

One feature requiring another feature

== Description ==

Subject and object of a [[Property:requires]] are features that is entities that derive from [[software feature]]. The relationship that any implementation of the subject feature also requires ('implies') an implementation of the object feature.

== Metadata ==

* [[relatesTo::Feature modeling]]
* [[exemplified::Feature:Semantics]]
",2017-06-26 17:12:20.281338,2017-07-04 13:48:22.275316
Feature,Abstract syntax,"== Headline ==

A sub-feature for implementing [[abstract syntax]]

== Description ==

The language's syntax is implemented as an [[abstract syntax]]

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Syntax]]
* [[instanceOf::Optional feature]]
",2017-06-26 17:16:39.753822,2017-07-04 13:48:22.301312
Feature,Concrete syntax,"== Headline ==

A sub-feature for implementing [[concrete syntax]]

== Description ==

The language's syntax is implemented as a [[concrete syntax]]

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Syntax]]
* [[instanceOf::Optional feature]]
",2017-06-26 17:19:09.389797,2017-07-04 13:48:22.322063
Feature,Textual syntax,"== Headline ==

A sub-feature for implementing [[textual syntax]]

== Description ==

The language's syntax is implemented as a [[textual syntax]]

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Concrete syntax]]
* [[instanceOf::Optional feature]]
",2017-06-26 17:20:09.941963,2017-07-04 13:48:22.341873
Feature,Graphical syntax,"== Headline ==

A sub-feature for implementing [[graphical syntax]]

== Description ==

The language's syntax is implemented as a [[graphical syntax]]

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Concrete syntax]]
* [[instanceOf::Optional feature]]
",2017-06-26 17:21:06.880452,2017-07-04 13:48:22.362211
Feature,Projectional syntax,"== Headline ==

A sub-feature for implementing [[projectional syntax]]

== Description ==

The language's syntax is implemented as a [[projectional syntax]]

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Concrete syntax]]
* [[instanceOf::Optional feature]]
",2017-06-26 17:21:32.081469,2017-07-04 13:48:22.38363
Feature,Dynamic semantics,"== Headline ==

A sub-feature for implementing [[dynamic semantics]]

== Description ==

The language's semantics is implemented as an [[interpreter]] or such

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Semantics]]
* [[instanceOf::Optional feature]]
",2017-06-26 17:28:44.833481,2017-07-04 13:48:22.404129
Feature,Static semantics,"== Headline ==

A sub-feature for implementing [[static semantics]]

== Description ==

The language's semantics is implemented as an [[analysis]] or such

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Semantics]]
* [[instanceOf::Optional feature]]
",2017-06-26 17:30:04.758782,2017-07-04 13:48:22.425134
Feature,Translation semantics,"== Headline ==

A sub-feature for implementing [[translation semantics]]

== Description ==

The language's semantics is implemented as a [[compiler]] or such

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Semantics]]
* [[instanceOf::Optional feature]]
",2017-06-26 17:35:30.718085,2017-07-04 13:48:22.445169
Section,Motivation,"== Headline ==

A motivational text for an entity on 101wiki

== Description ==

At this stage, a 'motivation' is used specifically within feature descriptions of [[System:Company]] features.

== Metadata ==

* [[exemplifiedBy::Feature:Hierachical company]]
",2017-06-26 18:01:17.398131,2017-07-04 13:48:22.459864
Property,childOf,"== Headline ==

A parent/child relationship between entities on 101wiki

== Description ==

At this stage, the property is used essentially for relating sub-features to parent features.

== Metadata ==

* [[hasDomain::Type:Feature]]
* [[hasRange::Type:Feature]]
* [[exemplifiedBy::Feature:Hierarchical company]]
",2017-06-26 18:10:24.089633,2017-07-04 13:48:22.479693
Namespace,Property,"== Headline ==

The namespace of properties used on 101wiki

== Description ==

Properties asscociate 101wiki's namespaces ([[Namespace:Namespace]]); in fact, they associated (pages within) namespaces with pages or literals or ('external') URIs. The metadata for a property page shall identify domain ([[Property:hasDomain]]) and range ([[Property:hasDomain]]) of the property. The metadata shall also point out pages as exemplars of property usage ([[Propery:exemplifiedBy]]).

== Metadata ==

* [[hasMandatory::Section:Headline]]
* [[hasMandatory::Section:Description]]
* [[hasOptional::Section:Illustration]]
* [[hasMandatory::Section:Metadata]]
* [[hasMandatory::Property:hasDomain]]
* [[hasMandatory::Property:hasRange]]
* [[hasMandatory::Property:exemplifiedBy]]
* [[exemplifiedBy::Property:uses]]
* [[exemplifiedBy::Property:exemplifiedBy]]
* [[exemplifiedBy::Property:sameAs]]
* [[exemplifiedBy::Property:similarTo]]
* [[exemplifiedBy::Property:relatesTo]]
",2017-06-26 22:12:36.782851,2017-07-04 13:48:22.540381
Contributor,johanneshaertel,"",2017-06-27 14:44:59.147063,2017-07-04 13:48:22.546664
Feature,Resolution,"== Headline ==

A sub-feature for implementing reference resolution.

== Description ==

Resolution maps from abstract syntax trees to abstract syntax graphs.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Abstract syntax]]
* [[instanceOf::Optional feature]]",2017-06-27 15:29:25.826094,2017-07-04 13:48:22.564109
Feature,AST,"== Headline ==

A sub-feature for implementing [[Abstract syntax tree]].

== Description ==

An abstract syntax tree exists when working with elements of a language.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Model]]
* [[instanceOf::Optional feature]]",2017-06-27 15:33:43.340089,2017-07-04 13:48:22.583327
Feature,ASG,"== Headline ==

A sub-feature for implementing [[Abstract syntax graph]].

== Description ==

An abstract syntax graph exists when working with elements of a language.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Model]]
* [[instanceOf::Optional feature]]",2017-06-27 15:46:02.865705,2017-07-04 13:48:22.60358
Feature,Semantic domain,"== Headline ==

A sub-feature for delegating data representation to a semantic format.

== Description ==

Elements of a language are represented by a format that directly implies the semantic of the language.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Model]]
* [[instanceOf::Optional feature]]",2017-06-27 15:52:31.042215,2017-07-04 13:48:22.623275
Feature,Model,"== Headline ==

A sub-feature for the representation of language elements.

== Description ==

The model feature describes how elements of a language are represented.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Abstract syntax]]
* [[instanceOf::Mandatory feature]]",2017-06-27 15:57:22.631673,2017-07-04 13:48:22.642088
Feature,Graph editing,"== Headline ==

A sub-feature for graph editing to alter language elements.

== Description ==

Elements of a language are edited as a visual graph.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Graphical Syntax]]
* [[instanceOf::Optional feature]]",2017-06-27 16:02:03.717232,2017-07-04 13:48:22.661093
Feature,Graphical Syntax,"== Headline ==

A sub-feature for working visually with language elements.

== Description ==

Elements of a language are edited or rendered in a visual graph.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Graphical Syntax]]
* [[instanceOf::Optional feature]]",2017-06-27 16:05:44.682748,2017-07-04 13:48:22.680529
Feature,Graph rendering,"== Headline ==

A sub-feature for graph rendering to view language elements.

== Description ==

Elements of a language are rendered as a visual graph.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Graphical Syntax]]
* [[instanceOf::Optional feature]]",2017-06-27 16:07:33.932986,2017-07-04 13:48:22.69946
Feature,Analysis,"== Headline ==

A sub-feature for implementing the static semantic of a language.

== Description ==

A metaprogram implements the static semantics as a type or well-formedness checker on top of the object-program representation for DSL programs.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Static semantic]]
* [[instanceOf::Optional feature]]",2017-06-27 16:12:21.804435,2017-07-04 13:48:22.724715
Feature,Static semantic,"== Headline ==

A sub-feature for implementing [[static semantic]]

== Description ==

The language's static semantic implementation.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Semantic]]
* [[instanceOf::Optional feature]]
",2017-06-27 16:15:28.596139,2017-07-04 13:48:22.743934
Concept,Metaprogramming system,"== Metadata ==

* [[facilitates::Metaprogramming]]",2017-06-30 13:22:57.003395,2017-07-04 13:48:23.321472
Feature,Piggyback,"== Headline ==

A sub-feature for implementing the static semantic of a language.

== Description ==

By translating object programs according to the translation semantics - the target language of translation, in particular, its type system - may cover some or all aspects of the DSL's static semantics.
== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Static semantic]]
* [[instanceOf::Optional feature]]",2017-06-27 16:18:29.088308,2017-07-04 13:48:22.764759
Feature,Model projection,"== Headline ==

A sub-feature for implementing the projectional syntax of a language.

== Description ==

Models (instances of abstract syntax) are editable, more or less, as is - that is, subject to a generic projection, which however may be customized to some extent. For instance, EMF's possibly customized model editor supports such model projection.
== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Projectional syntax]]
* [[instanceOf::Optional feature]]",2017-06-27 16:22:53.548483,2017-07-04 13:48:22.785788
Feature,Text projection,"== Headline ==

A sub-feature for implementing the projectional syntax of a language.

== Description ==

Models are projected in a highly customizable manner, covering tabular or template-based text formats. MPS's editors support such text projection.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Projectional syntax]]
* [[instanceOf::Optional feature]]",2017-06-27 16:25:29.535072,2017-07-04 13:48:22.806992
Feature,Projectional Syntax,"== Headline ==

A sub-feature for projectional syntax.

== Description ==

The language's projectional syntax on the language elements.

== Metadata ==
* [[sameAs::Feature:Projectional syntax]]
",2017-06-27 16:28:02.609078,2017-07-04 13:48:22.819547
Feature,Concrete Syntax,"== Headline ==

A sub-feature for implementing [[concrete syntax]]

== Description ==

The language's syntax is implemented as an [[concrete syntax]]

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Syntax]]
* [[instanceOf::Optional feature]]
",2017-06-27 16:31:59.597575,2017-07-04 13:48:22.839306
Feature,Text-to-CST,"== Headline ==

A sub-feature for implementing [[concrete syntax]]

== Description ==

The text is translated to CST as an intermediate or final representation.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Text-to-model]]
* [[instanceOf::Optional feature]]
",2017-06-27 16:33:48.811779,2017-07-04 13:48:22.859208
Feature,Text-to-AST,"== Headline ==

A sub-feature for implementing [[concrete syntax]]

== Description ==

The text is translated to AST as an intermediate or final representation.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Text-to-model]]
* [[instanceOf::Optional feature]]
",2017-06-27 16:41:42.633922,2017-07-04 13:48:22.879535
Feature,Text-to-ASG,"== Headline ==

A sub-feature for implementing [[concrete syntax]]

== Description ==

The text is translated to ASG as an final representation.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Text-to-model]]
* [[instanceOf::Optional feature]]
",2017-06-27 16:42:47.695174,2017-07-04 13:48:22.900227
Feature,Text-to-model,"== Headline ==

A sub-feature for implementing [[parsing]]

== Description ==

The parsing of language's elements translates the text into a model representation.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Parsing]]
* [[instanceOf::Mandatory feature]]
",2017-06-27 16:43:08.978664,2017-07-04 13:48:22.924847
Feature,Scanning,"== Headline ==

A sub-feature for implementing [[parsing]]

== Description ==

The parsing of language's elements relies on a scanner and expose a token stream.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Parsing]]
* [[instanceOf::Optional feature]]
",2017-06-27 16:49:51.220477,2017-07-04 13:48:22.944562
Feature,Abstraction,"== Headline ==

A sub-feature for implementing [[parsing]]

== Description ==

The parsing of language's elements relies on and an abstraction of the concrete syntax tree's elements to abstract syntax tree elements.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Parsing]]
* [[instanceOf::Optional feature]]
",2017-06-27 16:52:20.888056,2017-07-04 13:48:22.965566
Feature,Replacement,"== Headline ==

A sub-feature of textual syntax.

== Description ==

The textual syntax of a language can also be implemented by replacement, as an alternative to parsing.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Textual syntax]]
* [[instanceOf::Optional feature]]
",2017-06-27 16:55:48.348252,2017-07-04 13:48:22.985003
Feature,Staging,"== Headline ==

A sub-feature of translation semantics.

== Description ==

A meta-program uses language concepts for program generation in the sense of staged computation to translate DSL programs to phrases of the metalanguage - typically at compile time.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Translation semantics]]
* [[instanceOf::Optional feature]]
",2017-06-27 17:00:35.582203,2017-07-04 13:48:23.005157
Feature,Compilation,"== Headline ==

A sub-feature of translation semantics.

== Description ==

A compiler-like metaprogram maps DSL programs to programs in another language. For instance, a Java-based implementation may use template processing to generate C-code.

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Translation semantics]]
* [[instanceOf::Optional feature]]
",2017-06-27 17:03:08.324333,2017-07-04 13:48:23.02563
Language,Ecore XMI,"== Headline ==

XMI presistence format for [[Language:Ecore]]

== Description ==

A XMI presistence format for the [[Language:Ecore]] modeling language implemented by the [[Technology:EMF|EMF Framework]].

== Metadata ==

* [[relatesTo::http://download.eclipse.org/modeling/emf/emf/javadoc/2.9.0/org/eclipse/emf/ecore/package-summary.html#details]]
* [[sameAs::http://de.wikipedia.org/wiki/Eclipse_Modeling_Framework]]
* [[instanceOf::Language:Software language]]
",2017-06-28 08:56:35.838085,2017-07-04 13:48:23.048022
Language,Sirius viewpoint specification,"== Headline ==

A Language for defining viewpoints in [[Technology:Sirius]].

== Description ==

A language for defining a [[Feature:Projectional syntax]] for an second [[Technology:EMF]] based language in [[Technology:Sirius]].

== Metadata ==

* [[sameAs::https://eclipse.org/sirius/overview.html]]
* [[instanceOf::Softwate language]]",2017-06-28 09:06:59.623951,2017-07-04 13:48:23.067858
Language,MPS-Base Language,"== Headline ==

A language constructed using the [[Technology:MPS]] metaprogramming system

== Metadata ==

* [[sameAs::https://www.jetbrains.com/mps/]]
* [[instanceOf::Modeling language]]",2017-06-28 09:27:30.383871,2017-07-04 13:48:23.080216
Language,MPS-Editor Language,"== Headline ==

A language for specifying the editor of a language in [[Technology:MPS]]

== Metadata ==
[[instanceOf::Modeling language]]
[[sameAs::https://confluence.jetbrains.com/display/MPSD32/Editor]]

",2017-06-28 09:28:00.630768,2017-07-04 13:48:23.092689
Feature,Interpretation,"== Headline ==

A sub-feature for implementing the dynamic semantics of a language.

== Description ==

Semantics of a language is delegated to an [[Concept:Interpreter]]

== Metadata ==

* [[relatesTo::System:FSML]]
* [[childOf::Feature:Dynamic semantics]]
* [[instanceOf::Optional feature]]",2017-06-28 09:31:38.510616,2017-07-04 13:48:23.118003
Technology,GMF,"== Headline ==

A tooling project for generating graphical editors in Eclipse

== Metadata ==

* [[sameAs::http://www.eclipse.org/gmf-tooling/]]
* [[instanceOf::Framework]]
* [[facilitates::Modeling]]",2017-06-28 14:05:32.692124,2017-07-04 13:48:23.149833
Technology,Acceleo,"== Headline ==

A model to text transformation engine

== Metadata ==

* [[sameAs::https://www.eclipse.org/acceleo/]]
* [[facilitates::Model to text transformation]]
* [[instanceOf::Framework]]",2017-06-28 14:10:14.811883,2017-07-04 13:48:23.163131
Language,MPS-Type System Language,"== Headline ==

A language for writing type systems in [[Technology:MPS]]


== Metadata ==
[[instanceOf::Modeling language]]
[[sameAs::https://confluence.jetbrains.com/display/MPSD33/Typesystem]]

",2017-06-28 14:16:05.252716,2017-07-04 13:48:23.175649
Language,MPS-Generator Language,"== Headline ==

A language for writing code generators in [[Technology:MPS]]

== Metadata ==
[[instanceOf::Modeling language]]
[[sameAs::https://confluence.jetbrains.com/display/MPSD32/Generator+Language]]

",2017-06-28 14:16:57.780718,2017-07-04 13:48:23.187119
Language,MPS-Structure Language,"== Headline ==

A language for specifying the structure of a second language in [[Technology:MPS]]

== Metadata ==
[[instanceOf::Modeling language]]
[[sameAs::https://confluence.jetbrains.com/display/MPSD32/Generator+Language]]",2017-06-28 14:17:44.65063,2017-07-04 13:48:23.198861
Language,MPS-Test Language,"== Headline ==

A language for testing in [[Technology:MPS]]

== Metadata ==
[[instanceOf::Modeling language]]
[[sameAs::https://confluence.jetbrains.com/display/MPSD32/Testing+languages]]",2017-06-28 14:19:11.166983,2017-07-04 13:48:23.2132
Concept,Template processing,"== Headline ==

A way of to combine templates with data to create text

== Metadata ==
* [[sameAs::Concept:Template engine]]",2017-06-28 14:20:23.874267,2017-07-04 13:48:23.222936
Concept,Palette,"== Headline ==

A selection of tools that can be used to work with in an editor

== Metadata ==

* [[sameAs::https://en.wikipedia.org/wiki/Palette_window]]
* [[instanceOf::Software concept]]",2017-06-28 14:35:59.48676,2017-07-05 10:49:25.444256
Concept,Visitor,"== Headline ==

The visitor of the [[Visitor pattern]]

== Metadata ==

* [[relatesTo::https://en.wikipedia.org/wiki/Visitor_pattern]]
* [[instanceOf::Software concept]]
* [[participantOf::Visitor pattern]]",2017-06-28 14:38:18.584102,2017-07-05 10:53:16.520893
Concept,Transformation Rule,"== Headline ==

A rule that describes how to convert one element into another

== Metadata ==

* [[sameAs::https://www.merriam-webster.com/dictionary/transformation%20rule]]
* [[instanceOf::Software concept]]",2017-06-28 14:31:46.291331,2017-07-04 15:20:39.172686
Concept,Model to text transformation,"== Headline ==

A [[transformation]] that transform [[model]] into a text

== Metadata ==

* [[instanceOf::Transformation]]
* [[instanceOf::MDE_term]]
* [[sameAs::http://en.wikipedia.org/wiki/Model_transformation]]
",2017-06-30 13:35:58.593774,2017-07-04 13:48:23.336254
